// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod golem {
        pub mod stt {
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod types {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                #[repr(u8)]
                #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
                pub enum QuotaUnit {
                    Seconds,
                    Requests,
                    Credits,
                }
                impl ::core::fmt::Debug for QuotaUnit {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        match self {
                            QuotaUnit::Seconds => {
                                f.debug_tuple("QuotaUnit::Seconds").finish()
                            }
                            QuotaUnit::Requests => {
                                f.debug_tuple("QuotaUnit::Requests").finish()
                            }
                            QuotaUnit::Credits => {
                                f.debug_tuple("QuotaUnit::Credits").finish()
                            }
                        }
                    }
                }
                impl QuotaUnit {
                    #[doc(hidden)]
                    pub unsafe fn _lift(val: u8) -> QuotaUnit {
                        if !cfg!(debug_assertions) {
                            return ::core::mem::transmute(val);
                        }
                        match val {
                            0 => QuotaUnit::Seconds,
                            1 => QuotaUnit::Requests,
                            2 => QuotaUnit::Credits,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                }
                #[repr(C)]
                #[derive(Clone, Copy)]
                pub struct QuotaInfo {
                    pub used: u32,
                    pub limit: u32,
                    pub reset_time: u64,
                    pub unit: QuotaUnit,
                }
                impl ::core::fmt::Debug for QuotaInfo {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("QuotaInfo")
                            .field("used", &self.used)
                            .field("limit", &self.limit)
                            .field("reset-time", &self.reset_time)
                            .field("unit", &self.unit)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub enum SttError {
                    InvalidAudio(_rt::String),
                    UnsupportedFormat(_rt::String),
                    UnsupportedLanguage(_rt::String),
                    TranscriptionFailed(_rt::String),
                    Unauthorized(_rt::String),
                    AccessDenied(_rt::String),
                    QuotaExceeded(QuotaInfo),
                    RateLimited(u32),
                    InsufficientCredits,
                    UnsupportedOperation(_rt::String),
                    ServiceUnavailable(_rt::String),
                    NetworkError(_rt::String),
                    InternalError(_rt::String),
                }
                impl ::core::fmt::Debug for SttError {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        match self {
                            SttError::InvalidAudio(e) => {
                                f.debug_tuple("SttError::InvalidAudio").field(e).finish()
                            }
                            SttError::UnsupportedFormat(e) => {
                                f.debug_tuple("SttError::UnsupportedFormat")
                                    .field(e)
                                    .finish()
                            }
                            SttError::UnsupportedLanguage(e) => {
                                f.debug_tuple("SttError::UnsupportedLanguage")
                                    .field(e)
                                    .finish()
                            }
                            SttError::TranscriptionFailed(e) => {
                                f.debug_tuple("SttError::TranscriptionFailed")
                                    .field(e)
                                    .finish()
                            }
                            SttError::Unauthorized(e) => {
                                f.debug_tuple("SttError::Unauthorized").field(e).finish()
                            }
                            SttError::AccessDenied(e) => {
                                f.debug_tuple("SttError::AccessDenied").field(e).finish()
                            }
                            SttError::QuotaExceeded(e) => {
                                f.debug_tuple("SttError::QuotaExceeded").field(e).finish()
                            }
                            SttError::RateLimited(e) => {
                                f.debug_tuple("SttError::RateLimited").field(e).finish()
                            }
                            SttError::InsufficientCredits => {
                                f.debug_tuple("SttError::InsufficientCredits").finish()
                            }
                            SttError::UnsupportedOperation(e) => {
                                f.debug_tuple("SttError::UnsupportedOperation")
                                    .field(e)
                                    .finish()
                            }
                            SttError::ServiceUnavailable(e) => {
                                f.debug_tuple("SttError::ServiceUnavailable")
                                    .field(e)
                                    .finish()
                            }
                            SttError::NetworkError(e) => {
                                f.debug_tuple("SttError::NetworkError").field(e).finish()
                            }
                            SttError::InternalError(e) => {
                                f.debug_tuple("SttError::InternalError").field(e).finish()
                            }
                        }
                    }
                }
                impl ::core::fmt::Display for SttError {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        write!(f, "{:?}", self)
                    }
                }
                impl std::error::Error for SttError {}
                pub type LanguageCode = _rt::String;
                #[repr(u8)]
                #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
                pub enum AudioFormat {
                    Wav,
                    Mp3,
                    Flac,
                    Ogg,
                    Aac,
                    Pcm,
                }
                impl ::core::fmt::Debug for AudioFormat {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        match self {
                            AudioFormat::Wav => {
                                f.debug_tuple("AudioFormat::Wav").finish()
                            }
                            AudioFormat::Mp3 => {
                                f.debug_tuple("AudioFormat::Mp3").finish()
                            }
                            AudioFormat::Flac => {
                                f.debug_tuple("AudioFormat::Flac").finish()
                            }
                            AudioFormat::Ogg => {
                                f.debug_tuple("AudioFormat::Ogg").finish()
                            }
                            AudioFormat::Aac => {
                                f.debug_tuple("AudioFormat::Aac").finish()
                            }
                            AudioFormat::Pcm => {
                                f.debug_tuple("AudioFormat::Pcm").finish()
                            }
                        }
                    }
                }
                impl AudioFormat {
                    #[doc(hidden)]
                    pub unsafe fn _lift(val: u8) -> AudioFormat {
                        if !cfg!(debug_assertions) {
                            return ::core::mem::transmute(val);
                        }
                        match val {
                            0 => AudioFormat::Wav,
                            1 => AudioFormat::Mp3,
                            2 => AudioFormat::Flac,
                            3 => AudioFormat::Ogg,
                            4 => AudioFormat::Aac,
                            5 => AudioFormat::Pcm,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                }
                #[repr(C)]
                #[derive(Clone, Copy)]
                pub struct AudioConfig {
                    pub format: AudioFormat,
                    pub sample_rate: Option<u32>,
                    pub channels: Option<u8>,
                }
                impl ::core::fmt::Debug for AudioConfig {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("AudioConfig")
                            .field("format", &self.format)
                            .field("sample-rate", &self.sample_rate)
                            .field("channels", &self.channels)
                            .finish()
                    }
                }
                /// Only word-level timing is commonly supported
                #[repr(u8)]
                #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
                pub enum TimingMarkType {
                    Word,
                }
                impl ::core::fmt::Debug for TimingMarkType {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        match self {
                            TimingMarkType::Word => {
                                f.debug_tuple("TimingMarkType::Word").finish()
                            }
                        }
                    }
                }
                impl TimingMarkType {
                    #[doc(hidden)]
                    pub unsafe fn _lift(val: u8) -> TimingMarkType {
                        if !cfg!(debug_assertions) {
                            return ::core::mem::transmute(val);
                        }
                        match val {
                            0 => TimingMarkType::Word,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                }
                #[derive(Clone)]
                pub struct WordSegment {
                    pub text: _rt::String,
                    pub start_time: f32,
                    pub end_time: f32,
                    pub confidence: Option<f32>,
                    pub speaker_id: Option<_rt::String>,
                }
                impl ::core::fmt::Debug for WordSegment {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("WordSegment")
                            .field("text", &self.text)
                            .field("start-time", &self.start_time)
                            .field("end-time", &self.end_time)
                            .field("confidence", &self.confidence)
                            .field("speaker-id", &self.speaker_id)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub struct TranscriptAlternative {
                    pub text: _rt::String,
                    pub confidence: f32,
                    pub words: _rt::Vec<WordSegment>,
                }
                impl ::core::fmt::Debug for TranscriptAlternative {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("TranscriptAlternative")
                            .field("text", &self.text)
                            .field("confidence", &self.confidence)
                            .field("words", &self.words)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub struct TranscriptionMetadata {
                    pub duration_seconds: f32,
                    pub audio_size_bytes: u32,
                    pub request_id: _rt::String,
                    pub model: Option<_rt::String>,
                    pub language: LanguageCode,
                }
                impl ::core::fmt::Debug for TranscriptionMetadata {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("TranscriptionMetadata")
                            .field("duration-seconds", &self.duration_seconds)
                            .field("audio-size-bytes", &self.audio_size_bytes)
                            .field("request-id", &self.request_id)
                            .field("model", &self.model)
                            .field("language", &self.language)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub struct TranscriptionResult {
                    pub alternatives: _rt::Vec<TranscriptAlternative>,
                    pub metadata: TranscriptionMetadata,
                }
                impl ::core::fmt::Debug for TranscriptionResult {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("TranscriptionResult")
                            .field("alternatives", &self.alternatives)
                            .field("metadata", &self.metadata)
                            .finish()
                    }
                }
                #[doc(hidden)]
                macro_rules! __export_golem_stt_types_1_0_0_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = {};
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_golem_stt_types_1_0_0_cabi;
            }
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod vocabularies {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type SttError = super::super::super::super::exports::golem::stt::types::SttError;
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct Vocabulary {
                    handle: _rt::Resource<Vocabulary>,
                }
                type _VocabularyRep<T> = Option<T>;
                impl Vocabulary {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `Vocabulary`.
                    pub fn new<T: GuestVocabulary>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _VocabularyRep<T> = Some(val);
                        let ptr: *mut _VocabularyRep<T> = _rt::Box::into_raw(
                            _rt::Box::new(val),
                        );
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }
                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestVocabulary>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestVocabulary>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }
                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestVocabulary>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }
                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: unsafe { _rt::Resource::from_handle(handle) },
                        }
                    }
                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }
                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(! cfg!(target_feature = "atomics"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => {
                                    assert!(
                                        ty == id, "cannot use two types with this resource type"
                                    )
                                }
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }
                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = unsafe {
                            _rt::Box::from_raw(handle as *mut _VocabularyRep<T>)
                        };
                    }
                    fn as_ptr<T: GuestVocabulary>(&self) -> *mut _VocabularyRep<T> {
                        Vocabulary::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }
                /// A borrowed version of [`Vocabulary`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct VocabularyBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a Vocabulary>,
                }
                impl<'a> VocabularyBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }
                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestVocabulary>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    fn as_ptr<T: 'static>(&self) -> *mut _VocabularyRep<T> {
                        Vocabulary::type_guard::<T>();
                        self.rep.cast()
                    }
                }
                unsafe impl _rt::WasmResource for Vocabulary {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]golem:stt/vocabularies@1.0.0"
                            )]
                            unsafe extern "C" {
                                #[link_name = "[resource-drop]vocabulary"]
                                fn drop(_: u32);
                            }
                            unsafe { drop(_handle) };
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_vocabulary_get_name_cabi<
                    T: GuestVocabulary,
                >(arg0: *mut u8) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::get_name(
                        unsafe { VocabularyBorrow::lift(arg0 as u32 as usize) }.get(),
                    );
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    let vec2 = (result0.into_bytes()).into_boxed_slice();
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    ::core::mem::forget(vec2);
                    *ptr1.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len2;
                    *ptr1.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_vocabulary_get_name<
                    T: GuestVocabulary,
                >(arg0: *mut u8) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_vocabulary_get_phrases_cabi<
                    T: GuestVocabulary,
                >(arg0: *mut u8) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::get_phrases(
                        unsafe { VocabularyBorrow::lift(arg0 as u32 as usize) }.get(),
                    );
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    let vec3 = result0;
                    let len3 = vec3.len();
                    let layout3 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec3.len() * (2 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result3 = if layout3.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout3).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout3);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec3.into_iter().enumerate() {
                        let base = result3
                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                        {
                            let vec2 = (e.into_bytes()).into_boxed_slice();
                            let ptr2 = vec2.as_ptr().cast::<u8>();
                            let len2 = vec2.len();
                            ::core::mem::forget(vec2);
                            *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len2;
                            *base.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                        }
                    }
                    *ptr1.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len3;
                    *ptr1.add(0).cast::<*mut u8>() = result3;
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_vocabulary_get_phrases<
                    T: GuestVocabulary,
                >(arg0: *mut u8) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base4 = l0;
                    let len4 = l1;
                    for i in 0..len4 {
                        let base = base4
                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                        {
                            let l2 = *base.add(0).cast::<*mut u8>();
                            let l3 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l2, l3, 1);
                        }
                    }
                    _rt::cabi_dealloc(
                        base4,
                        len4 * (2 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_vocabulary_delete_cabi<T: GuestVocabulary>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::delete(
                        unsafe { VocabularyBorrow::lift(arg0 as u32 as usize) }.get(),
                    );
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result0 {
                        Ok(_) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::exports::golem::stt::types::SttError as V13;
                            match e {
                                V13::InvalidAudio(e) => {
                                    *ptr1.add(8).cast::<u8>() = (0i32) as u8;
                                    let vec2 = (e.into_bytes()).into_boxed_slice();
                                    let ptr2 = vec2.as_ptr().cast::<u8>();
                                    let len2 = vec2.len();
                                    ::core::mem::forget(vec2);
                                    *ptr1
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len2;
                                    *ptr1.add(16).cast::<*mut u8>() = ptr2.cast_mut();
                                }
                                V13::UnsupportedFormat(e) => {
                                    *ptr1.add(8).cast::<u8>() = (1i32) as u8;
                                    let vec3 = (e.into_bytes()).into_boxed_slice();
                                    let ptr3 = vec3.as_ptr().cast::<u8>();
                                    let len3 = vec3.len();
                                    ::core::mem::forget(vec3);
                                    *ptr1
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len3;
                                    *ptr1.add(16).cast::<*mut u8>() = ptr3.cast_mut();
                                }
                                V13::UnsupportedLanguage(e) => {
                                    *ptr1.add(8).cast::<u8>() = (2i32) as u8;
                                    let vec4 = (e.into_bytes()).into_boxed_slice();
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    ::core::mem::forget(vec4);
                                    *ptr1
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len4;
                                    *ptr1.add(16).cast::<*mut u8>() = ptr4.cast_mut();
                                }
                                V13::TranscriptionFailed(e) => {
                                    *ptr1.add(8).cast::<u8>() = (3i32) as u8;
                                    let vec5 = (e.into_bytes()).into_boxed_slice();
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    ::core::mem::forget(vec5);
                                    *ptr1
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len5;
                                    *ptr1.add(16).cast::<*mut u8>() = ptr5.cast_mut();
                                }
                                V13::Unauthorized(e) => {
                                    *ptr1.add(8).cast::<u8>() = (4i32) as u8;
                                    let vec6 = (e.into_bytes()).into_boxed_slice();
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    ::core::mem::forget(vec6);
                                    *ptr1
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len6;
                                    *ptr1.add(16).cast::<*mut u8>() = ptr6.cast_mut();
                                }
                                V13::AccessDenied(e) => {
                                    *ptr1.add(8).cast::<u8>() = (5i32) as u8;
                                    let vec7 = (e.into_bytes()).into_boxed_slice();
                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                    let len7 = vec7.len();
                                    ::core::mem::forget(vec7);
                                    *ptr1
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len7;
                                    *ptr1.add(16).cast::<*mut u8>() = ptr7.cast_mut();
                                }
                                V13::QuotaExceeded(e) => {
                                    *ptr1.add(8).cast::<u8>() = (6i32) as u8;
                                    let super::super::super::super::exports::golem::stt::types::QuotaInfo {
                                        used: used8,
                                        limit: limit8,
                                        reset_time: reset_time8,
                                        unit: unit8,
                                    } = e;
                                    *ptr1.add(16).cast::<i32>() = _rt::as_i32(used8);
                                    *ptr1.add(20).cast::<i32>() = _rt::as_i32(limit8);
                                    *ptr1.add(24).cast::<i64>() = _rt::as_i64(reset_time8);
                                    *ptr1.add(32).cast::<u8>() = (unit8.clone() as i32) as u8;
                                }
                                V13::RateLimited(e) => {
                                    *ptr1.add(8).cast::<u8>() = (7i32) as u8;
                                    *ptr1.add(16).cast::<i32>() = _rt::as_i32(e);
                                }
                                V13::InsufficientCredits => {
                                    *ptr1.add(8).cast::<u8>() = (8i32) as u8;
                                }
                                V13::UnsupportedOperation(e) => {
                                    *ptr1.add(8).cast::<u8>() = (9i32) as u8;
                                    let vec9 = (e.into_bytes()).into_boxed_slice();
                                    let ptr9 = vec9.as_ptr().cast::<u8>();
                                    let len9 = vec9.len();
                                    ::core::mem::forget(vec9);
                                    *ptr1
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len9;
                                    *ptr1.add(16).cast::<*mut u8>() = ptr9.cast_mut();
                                }
                                V13::ServiceUnavailable(e) => {
                                    *ptr1.add(8).cast::<u8>() = (10i32) as u8;
                                    let vec10 = (e.into_bytes()).into_boxed_slice();
                                    let ptr10 = vec10.as_ptr().cast::<u8>();
                                    let len10 = vec10.len();
                                    ::core::mem::forget(vec10);
                                    *ptr1
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len10;
                                    *ptr1.add(16).cast::<*mut u8>() = ptr10.cast_mut();
                                }
                                V13::NetworkError(e) => {
                                    *ptr1.add(8).cast::<u8>() = (11i32) as u8;
                                    let vec11 = (e.into_bytes()).into_boxed_slice();
                                    let ptr11 = vec11.as_ptr().cast::<u8>();
                                    let len11 = vec11.len();
                                    ::core::mem::forget(vec11);
                                    *ptr1
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len11;
                                    *ptr1.add(16).cast::<*mut u8>() = ptr11.cast_mut();
                                }
                                V13::InternalError(e) => {
                                    *ptr1.add(8).cast::<u8>() = (12i32) as u8;
                                    let vec12 = (e.into_bytes()).into_boxed_slice();
                                    let ptr12 = vec12.as_ptr().cast::<u8>();
                                    let len12 = vec12.len();
                                    ::core::mem::forget(vec12);
                                    *ptr1
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len12;
                                    *ptr1.add(16).cast::<*mut u8>() = ptr12.cast_mut();
                                }
                            }
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_vocabulary_delete<T: GuestVocabulary>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = i32::from(*arg0.add(8).cast::<u8>());
                            match l1 {
                                0 => {
                                    let l2 = *arg0.add(16).cast::<*mut u8>();
                                    let l3 = *arg0
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                }
                                1 => {
                                    let l4 = *arg0.add(16).cast::<*mut u8>();
                                    let l5 = *arg0
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                                2 => {
                                    let l6 = *arg0.add(16).cast::<*mut u8>();
                                    let l7 = *arg0
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l6, l7, 1);
                                }
                                3 => {
                                    let l8 = *arg0.add(16).cast::<*mut u8>();
                                    let l9 = *arg0
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l8, l9, 1);
                                }
                                4 => {
                                    let l10 = *arg0.add(16).cast::<*mut u8>();
                                    let l11 = *arg0
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l10, l11, 1);
                                }
                                5 => {
                                    let l12 = *arg0.add(16).cast::<*mut u8>();
                                    let l13 = *arg0
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l12, l13, 1);
                                }
                                6 => {}
                                7 => {}
                                8 => {}
                                9 => {
                                    let l14 = *arg0.add(16).cast::<*mut u8>();
                                    let l15 = *arg0
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l14, l15, 1);
                                }
                                10 => {
                                    let l16 = *arg0.add(16).cast::<*mut u8>();
                                    let l17 = *arg0
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l16, l17, 1);
                                }
                                11 => {
                                    let l18 = *arg0.add(16).cast::<*mut u8>();
                                    let l19 = *arg0
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l18, l19, 1);
                                }
                                _ => {
                                    let l20 = *arg0.add(16).cast::<*mut u8>();
                                    let l21 = *arg0
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l20, l21, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_create_vocabulary_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let base4 = arg2;
                    let len4 = arg3;
                    let mut result4 = _rt::Vec::with_capacity(len4);
                    for i in 0..len4 {
                        let base = base4
                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                        let e4 = {
                            let l1 = *base.add(0).cast::<*mut u8>();
                            let l2 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len3 = l2;
                            let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);
                            _rt::string_lift(bytes3)
                        };
                        result4.push(e4);
                    }
                    _rt::cabi_dealloc(
                        base4,
                        len4 * (2 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result5 = T::create_vocabulary(
                        _rt::string_lift(bytes0),
                        result4,
                    );
                    let ptr6 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result5 {
                        Ok(e) => {
                            *ptr6.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr6.add(8).cast::<i32>() = (e).take_handle() as i32;
                        }
                        Err(e) => {
                            *ptr6.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::exports::golem::stt::types::SttError as V18;
                            match e {
                                V18::InvalidAudio(e) => {
                                    *ptr6.add(8).cast::<u8>() = (0i32) as u8;
                                    let vec7 = (e.into_bytes()).into_boxed_slice();
                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                    let len7 = vec7.len();
                                    ::core::mem::forget(vec7);
                                    *ptr6
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len7;
                                    *ptr6.add(16).cast::<*mut u8>() = ptr7.cast_mut();
                                }
                                V18::UnsupportedFormat(e) => {
                                    *ptr6.add(8).cast::<u8>() = (1i32) as u8;
                                    let vec8 = (e.into_bytes()).into_boxed_slice();
                                    let ptr8 = vec8.as_ptr().cast::<u8>();
                                    let len8 = vec8.len();
                                    ::core::mem::forget(vec8);
                                    *ptr6
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len8;
                                    *ptr6.add(16).cast::<*mut u8>() = ptr8.cast_mut();
                                }
                                V18::UnsupportedLanguage(e) => {
                                    *ptr6.add(8).cast::<u8>() = (2i32) as u8;
                                    let vec9 = (e.into_bytes()).into_boxed_slice();
                                    let ptr9 = vec9.as_ptr().cast::<u8>();
                                    let len9 = vec9.len();
                                    ::core::mem::forget(vec9);
                                    *ptr6
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len9;
                                    *ptr6.add(16).cast::<*mut u8>() = ptr9.cast_mut();
                                }
                                V18::TranscriptionFailed(e) => {
                                    *ptr6.add(8).cast::<u8>() = (3i32) as u8;
                                    let vec10 = (e.into_bytes()).into_boxed_slice();
                                    let ptr10 = vec10.as_ptr().cast::<u8>();
                                    let len10 = vec10.len();
                                    ::core::mem::forget(vec10);
                                    *ptr6
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len10;
                                    *ptr6.add(16).cast::<*mut u8>() = ptr10.cast_mut();
                                }
                                V18::Unauthorized(e) => {
                                    *ptr6.add(8).cast::<u8>() = (4i32) as u8;
                                    let vec11 = (e.into_bytes()).into_boxed_slice();
                                    let ptr11 = vec11.as_ptr().cast::<u8>();
                                    let len11 = vec11.len();
                                    ::core::mem::forget(vec11);
                                    *ptr6
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len11;
                                    *ptr6.add(16).cast::<*mut u8>() = ptr11.cast_mut();
                                }
                                V18::AccessDenied(e) => {
                                    *ptr6.add(8).cast::<u8>() = (5i32) as u8;
                                    let vec12 = (e.into_bytes()).into_boxed_slice();
                                    let ptr12 = vec12.as_ptr().cast::<u8>();
                                    let len12 = vec12.len();
                                    ::core::mem::forget(vec12);
                                    *ptr6
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len12;
                                    *ptr6.add(16).cast::<*mut u8>() = ptr12.cast_mut();
                                }
                                V18::QuotaExceeded(e) => {
                                    *ptr6.add(8).cast::<u8>() = (6i32) as u8;
                                    let super::super::super::super::exports::golem::stt::types::QuotaInfo {
                                        used: used13,
                                        limit: limit13,
                                        reset_time: reset_time13,
                                        unit: unit13,
                                    } = e;
                                    *ptr6.add(16).cast::<i32>() = _rt::as_i32(used13);
                                    *ptr6.add(20).cast::<i32>() = _rt::as_i32(limit13);
                                    *ptr6.add(24).cast::<i64>() = _rt::as_i64(reset_time13);
                                    *ptr6.add(32).cast::<u8>() = (unit13.clone() as i32) as u8;
                                }
                                V18::RateLimited(e) => {
                                    *ptr6.add(8).cast::<u8>() = (7i32) as u8;
                                    *ptr6.add(16).cast::<i32>() = _rt::as_i32(e);
                                }
                                V18::InsufficientCredits => {
                                    *ptr6.add(8).cast::<u8>() = (8i32) as u8;
                                }
                                V18::UnsupportedOperation(e) => {
                                    *ptr6.add(8).cast::<u8>() = (9i32) as u8;
                                    let vec14 = (e.into_bytes()).into_boxed_slice();
                                    let ptr14 = vec14.as_ptr().cast::<u8>();
                                    let len14 = vec14.len();
                                    ::core::mem::forget(vec14);
                                    *ptr6
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len14;
                                    *ptr6.add(16).cast::<*mut u8>() = ptr14.cast_mut();
                                }
                                V18::ServiceUnavailable(e) => {
                                    *ptr6.add(8).cast::<u8>() = (10i32) as u8;
                                    let vec15 = (e.into_bytes()).into_boxed_slice();
                                    let ptr15 = vec15.as_ptr().cast::<u8>();
                                    let len15 = vec15.len();
                                    ::core::mem::forget(vec15);
                                    *ptr6
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len15;
                                    *ptr6.add(16).cast::<*mut u8>() = ptr15.cast_mut();
                                }
                                V18::NetworkError(e) => {
                                    *ptr6.add(8).cast::<u8>() = (11i32) as u8;
                                    let vec16 = (e.into_bytes()).into_boxed_slice();
                                    let ptr16 = vec16.as_ptr().cast::<u8>();
                                    let len16 = vec16.len();
                                    ::core::mem::forget(vec16);
                                    *ptr6
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len16;
                                    *ptr6.add(16).cast::<*mut u8>() = ptr16.cast_mut();
                                }
                                V18::InternalError(e) => {
                                    *ptr6.add(8).cast::<u8>() = (12i32) as u8;
                                    let vec17 = (e.into_bytes()).into_boxed_slice();
                                    let ptr17 = vec17.as_ptr().cast::<u8>();
                                    let len17 = vec17.len();
                                    ::core::mem::forget(vec17);
                                    *ptr6
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len17;
                                    *ptr6.add(16).cast::<*mut u8>() = ptr17.cast_mut();
                                }
                            }
                        }
                    };
                    ptr6
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_create_vocabulary<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = i32::from(*arg0.add(8).cast::<u8>());
                            match l1 {
                                0 => {
                                    let l2 = *arg0.add(16).cast::<*mut u8>();
                                    let l3 = *arg0
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                }
                                1 => {
                                    let l4 = *arg0.add(16).cast::<*mut u8>();
                                    let l5 = *arg0
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                                2 => {
                                    let l6 = *arg0.add(16).cast::<*mut u8>();
                                    let l7 = *arg0
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l6, l7, 1);
                                }
                                3 => {
                                    let l8 = *arg0.add(16).cast::<*mut u8>();
                                    let l9 = *arg0
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l8, l9, 1);
                                }
                                4 => {
                                    let l10 = *arg0.add(16).cast::<*mut u8>();
                                    let l11 = *arg0
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l10, l11, 1);
                                }
                                5 => {
                                    let l12 = *arg0.add(16).cast::<*mut u8>();
                                    let l13 = *arg0
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l12, l13, 1);
                                }
                                6 => {}
                                7 => {}
                                8 => {}
                                9 => {
                                    let l14 = *arg0.add(16).cast::<*mut u8>();
                                    let l15 = *arg0
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l14, l15, 1);
                                }
                                10 => {
                                    let l16 = *arg0.add(16).cast::<*mut u8>();
                                    let l17 = *arg0
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l16, l17, 1);
                                }
                                11 => {
                                    let l18 = *arg0.add(16).cast::<*mut u8>();
                                    let l19 = *arg0
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l18, l19, 1);
                                }
                                _ => {
                                    let l20 = *arg0.add(16).cast::<*mut u8>();
                                    let l21 = *arg0
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l20, l21, 1);
                                }
                            }
                        }
                    }
                }
                pub trait Guest {
                    type Vocabulary: GuestVocabulary;
                    fn create_vocabulary(
                        name: _rt::String,
                        phrases: _rt::Vec<_rt::String>,
                    ) -> Result<Vocabulary, SttError>;
                }
                pub trait GuestVocabulary: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]golem:stt/vocabularies@1.0.0"
                            )]
                            unsafe extern "C" {
                                #[link_name = "[resource-new]vocabulary"]
                                fn new(_: *mut u8) -> u32;
                            }
                            unsafe { new(val) }
                        }
                    }
                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]golem:stt/vocabularies@1.0.0"
                            )]
                            unsafe extern "C" {
                                #[link_name = "[resource-rep]vocabulary"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }
                    fn get_name(&self) -> _rt::String;
                    fn get_phrases(&self) -> _rt::Vec<_rt::String>;
                    fn delete(&self) -> Result<(), SttError>;
                }
                #[doc(hidden)]
                macro_rules! __export_golem_stt_vocabularies_1_0_0_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "golem:stt/vocabularies@1.0.0#[method]vocabulary.get-name")]
                        unsafe extern "C" fn export_method_vocabulary_get_name(arg0 : *
                        mut u8,) -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_method_vocabulary_get_name_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::Vocabulary > (arg0) } } #[unsafe
                        (export_name =
                        "cabi_post_golem:stt/vocabularies@1.0.0#[method]vocabulary.get-name")]
                        unsafe extern "C" fn _post_return_method_vocabulary_get_name(arg0
                        : * mut u8,) { unsafe { $($path_to_types)*::
                        __post_return_method_vocabulary_get_name::<<$ty as
                        $($path_to_types)*:: Guest >::Vocabulary > (arg0) } } #[unsafe
                        (export_name =
                        "golem:stt/vocabularies@1.0.0#[method]vocabulary.get-phrases")]
                        unsafe extern "C" fn export_method_vocabulary_get_phrases(arg0 :
                        * mut u8,) -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_method_vocabulary_get_phrases_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::Vocabulary > (arg0) } } #[unsafe
                        (export_name =
                        "cabi_post_golem:stt/vocabularies@1.0.0#[method]vocabulary.get-phrases")]
                        unsafe extern "C" fn
                        _post_return_method_vocabulary_get_phrases(arg0 : * mut u8,) {
                        unsafe { $($path_to_types)*::
                        __post_return_method_vocabulary_get_phrases::<<$ty as
                        $($path_to_types)*:: Guest >::Vocabulary > (arg0) } } #[unsafe
                        (export_name =
                        "golem:stt/vocabularies@1.0.0#[method]vocabulary.delete")] unsafe
                        extern "C" fn export_method_vocabulary_delete(arg0 : * mut u8,)
                        -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_method_vocabulary_delete_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::Vocabulary > (arg0) } } #[unsafe
                        (export_name =
                        "cabi_post_golem:stt/vocabularies@1.0.0#[method]vocabulary.delete")]
                        unsafe extern "C" fn _post_return_method_vocabulary_delete(arg0 :
                        * mut u8,) { unsafe { $($path_to_types)*::
                        __post_return_method_vocabulary_delete::<<$ty as
                        $($path_to_types)*:: Guest >::Vocabulary > (arg0) } } #[unsafe
                        (export_name = "golem:stt/vocabularies@1.0.0#create-vocabulary")]
                        unsafe extern "C" fn export_create_vocabulary(arg0 : * mut u8,
                        arg1 : usize, arg2 : * mut u8, arg3 : usize,) -> * mut u8 {
                        unsafe { $($path_to_types)*::
                        _export_create_vocabulary_cabi::<$ty > (arg0, arg1, arg2, arg3) }
                        } #[unsafe (export_name =
                        "cabi_post_golem:stt/vocabularies@1.0.0#create-vocabulary")]
                        unsafe extern "C" fn _post_return_create_vocabulary(arg0 : * mut
                        u8,) { unsafe { $($path_to_types)*::
                        __post_return_create_vocabulary::<$ty > (arg0) } } const _ : () =
                        { #[doc(hidden)] #[unsafe (export_name =
                        "golem:stt/vocabularies@1.0.0#[dtor]vocabulary")]
                        #[allow(non_snake_case)] unsafe extern "C" fn dtor(rep : * mut
                        u8) { unsafe { $($path_to_types)*:: Vocabulary::dtor::< <$ty as
                        $($path_to_types)*:: Guest >::Vocabulary > (rep) } } }; };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_golem_stt_vocabularies_1_0_0_cabi;
                #[repr(align(8))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 40]);
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 40],
                );
            }
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod languages {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type LanguageCode = super::super::super::super::exports::golem::stt::types::LanguageCode;
                pub type SttError = super::super::super::super::exports::golem::stt::types::SttError;
                #[derive(Clone)]
                pub struct LanguageInfo {
                    pub code: LanguageCode,
                    pub name: _rt::String,
                    pub native_name: _rt::String,
                }
                impl ::core::fmt::Debug for LanguageInfo {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("LanguageInfo")
                            .field("code", &self.code)
                            .field("name", &self.name)
                            .field("native-name", &self.native_name)
                            .finish()
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_list_languages_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::list_languages();
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result0 {
                        Ok(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            let vec6 = e;
                            let len6 = vec6.len();
                            let layout6 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec6.len() * (6 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result6 = if layout6.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout6).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout6);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec6.into_iter().enumerate() {
                                let base = result6
                                    .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let LanguageInfo {
                                        code: code2,
                                        name: name2,
                                        native_name: native_name2,
                                    } = e;
                                    let vec3 = (code2.into_bytes()).into_boxed_slice();
                                    let ptr3 = vec3.as_ptr().cast::<u8>();
                                    let len3 = vec3.len();
                                    ::core::mem::forget(vec3);
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len3;
                                    *base.add(0).cast::<*mut u8>() = ptr3.cast_mut();
                                    let vec4 = (name2.into_bytes()).into_boxed_slice();
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    ::core::mem::forget(vec4);
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len4;
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr4.cast_mut();
                                    let vec5 = (native_name2.into_bytes()).into_boxed_slice();
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    ::core::mem::forget(vec5);
                                    *base
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len5;
                                    *base
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr5.cast_mut();
                                }
                            }
                            *ptr1
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len6;
                            *ptr1.add(8).cast::<*mut u8>() = result6;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::exports::golem::stt::types::SttError as V18;
                            match e {
                                V18::InvalidAudio(e) => {
                                    *ptr1.add(8).cast::<u8>() = (0i32) as u8;
                                    let vec7 = (e.into_bytes()).into_boxed_slice();
                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                    let len7 = vec7.len();
                                    ::core::mem::forget(vec7);
                                    *ptr1
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len7;
                                    *ptr1.add(16).cast::<*mut u8>() = ptr7.cast_mut();
                                }
                                V18::UnsupportedFormat(e) => {
                                    *ptr1.add(8).cast::<u8>() = (1i32) as u8;
                                    let vec8 = (e.into_bytes()).into_boxed_slice();
                                    let ptr8 = vec8.as_ptr().cast::<u8>();
                                    let len8 = vec8.len();
                                    ::core::mem::forget(vec8);
                                    *ptr1
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len8;
                                    *ptr1.add(16).cast::<*mut u8>() = ptr8.cast_mut();
                                }
                                V18::UnsupportedLanguage(e) => {
                                    *ptr1.add(8).cast::<u8>() = (2i32) as u8;
                                    let vec9 = (e.into_bytes()).into_boxed_slice();
                                    let ptr9 = vec9.as_ptr().cast::<u8>();
                                    let len9 = vec9.len();
                                    ::core::mem::forget(vec9);
                                    *ptr1
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len9;
                                    *ptr1.add(16).cast::<*mut u8>() = ptr9.cast_mut();
                                }
                                V18::TranscriptionFailed(e) => {
                                    *ptr1.add(8).cast::<u8>() = (3i32) as u8;
                                    let vec10 = (e.into_bytes()).into_boxed_slice();
                                    let ptr10 = vec10.as_ptr().cast::<u8>();
                                    let len10 = vec10.len();
                                    ::core::mem::forget(vec10);
                                    *ptr1
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len10;
                                    *ptr1.add(16).cast::<*mut u8>() = ptr10.cast_mut();
                                }
                                V18::Unauthorized(e) => {
                                    *ptr1.add(8).cast::<u8>() = (4i32) as u8;
                                    let vec11 = (e.into_bytes()).into_boxed_slice();
                                    let ptr11 = vec11.as_ptr().cast::<u8>();
                                    let len11 = vec11.len();
                                    ::core::mem::forget(vec11);
                                    *ptr1
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len11;
                                    *ptr1.add(16).cast::<*mut u8>() = ptr11.cast_mut();
                                }
                                V18::AccessDenied(e) => {
                                    *ptr1.add(8).cast::<u8>() = (5i32) as u8;
                                    let vec12 = (e.into_bytes()).into_boxed_slice();
                                    let ptr12 = vec12.as_ptr().cast::<u8>();
                                    let len12 = vec12.len();
                                    ::core::mem::forget(vec12);
                                    *ptr1
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len12;
                                    *ptr1.add(16).cast::<*mut u8>() = ptr12.cast_mut();
                                }
                                V18::QuotaExceeded(e) => {
                                    *ptr1.add(8).cast::<u8>() = (6i32) as u8;
                                    let super::super::super::super::exports::golem::stt::types::QuotaInfo {
                                        used: used13,
                                        limit: limit13,
                                        reset_time: reset_time13,
                                        unit: unit13,
                                    } = e;
                                    *ptr1.add(16).cast::<i32>() = _rt::as_i32(used13);
                                    *ptr1.add(20).cast::<i32>() = _rt::as_i32(limit13);
                                    *ptr1.add(24).cast::<i64>() = _rt::as_i64(reset_time13);
                                    *ptr1.add(32).cast::<u8>() = (unit13.clone() as i32) as u8;
                                }
                                V18::RateLimited(e) => {
                                    *ptr1.add(8).cast::<u8>() = (7i32) as u8;
                                    *ptr1.add(16).cast::<i32>() = _rt::as_i32(e);
                                }
                                V18::InsufficientCredits => {
                                    *ptr1.add(8).cast::<u8>() = (8i32) as u8;
                                }
                                V18::UnsupportedOperation(e) => {
                                    *ptr1.add(8).cast::<u8>() = (9i32) as u8;
                                    let vec14 = (e.into_bytes()).into_boxed_slice();
                                    let ptr14 = vec14.as_ptr().cast::<u8>();
                                    let len14 = vec14.len();
                                    ::core::mem::forget(vec14);
                                    *ptr1
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len14;
                                    *ptr1.add(16).cast::<*mut u8>() = ptr14.cast_mut();
                                }
                                V18::ServiceUnavailable(e) => {
                                    *ptr1.add(8).cast::<u8>() = (10i32) as u8;
                                    let vec15 = (e.into_bytes()).into_boxed_slice();
                                    let ptr15 = vec15.as_ptr().cast::<u8>();
                                    let len15 = vec15.len();
                                    ::core::mem::forget(vec15);
                                    *ptr1
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len15;
                                    *ptr1.add(16).cast::<*mut u8>() = ptr15.cast_mut();
                                }
                                V18::NetworkError(e) => {
                                    *ptr1.add(8).cast::<u8>() = (11i32) as u8;
                                    let vec16 = (e.into_bytes()).into_boxed_slice();
                                    let ptr16 = vec16.as_ptr().cast::<u8>();
                                    let len16 = vec16.len();
                                    ::core::mem::forget(vec16);
                                    *ptr1
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len16;
                                    *ptr1.add(16).cast::<*mut u8>() = ptr16.cast_mut();
                                }
                                V18::InternalError(e) => {
                                    *ptr1.add(8).cast::<u8>() = (12i32) as u8;
                                    let vec17 = (e.into_bytes()).into_boxed_slice();
                                    let ptr17 = vec17.as_ptr().cast::<u8>();
                                    let len17 = vec17.len();
                                    ::core::mem::forget(vec17);
                                    *ptr1
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len17;
                                    *ptr1.add(16).cast::<*mut u8>() = ptr17.cast_mut();
                                }
                            }
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_list_languages<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(8).cast::<*mut u8>();
                            let l2 = *arg0
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let base9 = l1;
                            let len9 = l2;
                            for i in 0..len9 {
                                let base = base9
                                    .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let l3 = *base.add(0).cast::<*mut u8>();
                                    let l4 = *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l3, l4, 1);
                                    let l5 = *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l6 = *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l5, l6, 1);
                                    let l7 = *base
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l8 = *base
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l7, l8, 1);
                                }
                            }
                            _rt::cabi_dealloc(
                                base9,
                                len9 * (6 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                        }
                        _ => {
                            let l10 = i32::from(*arg0.add(8).cast::<u8>());
                            match l10 {
                                0 => {
                                    let l11 = *arg0.add(16).cast::<*mut u8>();
                                    let l12 = *arg0
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l11, l12, 1);
                                }
                                1 => {
                                    let l13 = *arg0.add(16).cast::<*mut u8>();
                                    let l14 = *arg0
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l13, l14, 1);
                                }
                                2 => {
                                    let l15 = *arg0.add(16).cast::<*mut u8>();
                                    let l16 = *arg0
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l15, l16, 1);
                                }
                                3 => {
                                    let l17 = *arg0.add(16).cast::<*mut u8>();
                                    let l18 = *arg0
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l17, l18, 1);
                                }
                                4 => {
                                    let l19 = *arg0.add(16).cast::<*mut u8>();
                                    let l20 = *arg0
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l19, l20, 1);
                                }
                                5 => {
                                    let l21 = *arg0.add(16).cast::<*mut u8>();
                                    let l22 = *arg0
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l21, l22, 1);
                                }
                                6 => {}
                                7 => {}
                                8 => {}
                                9 => {
                                    let l23 = *arg0.add(16).cast::<*mut u8>();
                                    let l24 = *arg0
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l23, l24, 1);
                                }
                                10 => {
                                    let l25 = *arg0.add(16).cast::<*mut u8>();
                                    let l26 = *arg0
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l25, l26, 1);
                                }
                                11 => {
                                    let l27 = *arg0.add(16).cast::<*mut u8>();
                                    let l28 = *arg0
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l27, l28, 1);
                                }
                                _ => {
                                    let l29 = *arg0.add(16).cast::<*mut u8>();
                                    let l30 = *arg0
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l29, l30, 1);
                                }
                            }
                        }
                    }
                }
                pub trait Guest {
                    fn list_languages() -> Result<_rt::Vec<LanguageInfo>, SttError>;
                }
                #[doc(hidden)]
                macro_rules! __export_golem_stt_languages_1_0_0_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "golem:stt/languages@1.0.0#list-languages")] unsafe extern "C" fn
                        export_list_languages() -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_list_languages_cabi::<$ty > () } }
                        #[unsafe (export_name =
                        "cabi_post_golem:stt/languages@1.0.0#list-languages")] unsafe
                        extern "C" fn _post_return_list_languages(arg0 : * mut u8,) {
                        unsafe { $($path_to_types)*:: __post_return_list_languages::<$ty
                        > (arg0) } } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_golem_stt_languages_1_0_0_cabi;
                #[repr(align(8))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 40]);
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 40],
                );
            }
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod transcription {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type AudioConfig = super::super::super::super::exports::golem::stt::types::AudioConfig;
                pub type TranscriptionResult = super::super::super::super::exports::golem::stt::types::TranscriptionResult;
                pub type SttError = super::super::super::super::exports::golem::stt::types::SttError;
                pub type LanguageCode = super::super::super::super::exports::golem::stt::types::LanguageCode;
                pub type VocabularyBorrow<'a> = super::super::super::super::exports::golem::stt::vocabularies::VocabularyBorrow<
                    'a,
                >;
                #[derive(Clone)]
                pub struct TranscribeOptions {
                    pub enable_timestamps: Option<bool>,
                    pub enable_speaker_diarization: Option<bool>,
                    pub language: Option<LanguageCode>,
                    pub model: Option<_rt::String>,
                    pub profanity_filter: Option<bool>,
                    pub speech_context: Option<_rt::Vec<_rt::String>>,
                    pub enable_word_confidence: Option<bool>,
                    pub enable_timing_detail: Option<bool>,
                }
                impl ::core::fmt::Debug for TranscribeOptions {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("TranscribeOptions")
                            .field("enable-timestamps", &self.enable_timestamps)
                            .field(
                                "enable-speaker-diarization",
                                &self.enable_speaker_diarization,
                            )
                            .field("language", &self.language)
                            .field("model", &self.model)
                            .field("profanity-filter", &self.profanity_filter)
                            .field("speech-context", &self.speech_context)
                            .field(
                                "enable-word-confidence",
                                &self.enable_word_confidence,
                            )
                            .field("enable-timing-detail", &self.enable_timing_detail)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub struct TranscribeRequest {
                    pub audio: _rt::Vec<u8>,
                    pub config: AudioConfig,
                    pub options: Option<TranscribeOptions>,
                }
                impl ::core::fmt::Debug for TranscribeRequest {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("TranscribeRequest")
                            .field("audio", &self.audio)
                            .field("config", &self.config)
                            .field("options", &self.options)
                            .finish()
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_transcribe_cabi<T: Guest>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len2 = l1;
                    let l3 = i32::from(
                        *arg0.add(2 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    let l4 = i32::from(
                        *arg0
                            .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    let l6 = i32::from(
                        *arg0
                            .add(12 + 2 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    let l8 = i32::from(
                        *arg0
                            .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    let result34 = T::transcribe(
                        _rt::Vec::from_raw_parts(l0.cast(), len2, len2),
                        super::super::super::super::exports::golem::stt::types::AudioConfig {
                            format: super::super::super::super::exports::golem::stt::types::AudioFormat::_lift(
                                l3 as u8,
                            ),
                            sample_rate: match l4 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l5 = *arg0
                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<i32>();
                                        l5 as u32
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                            channels: match l6 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let l7 = i32::from(
                                            *arg0
                                                .add(13 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        l7 as u8
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                        },
                        match l8 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l9 = i32::from(
                                        *arg0
                                            .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    let l11 = i32::from(
                                        *arg0
                                            .add(18 + 3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    let l13 = i32::from(
                                        *arg0
                                            .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    let l17 = i32::from(
                                        *arg0
                                            .add(16 + 7 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    let l21 = i32::from(
                                        *arg0
                                            .add(16 + 10 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    let l23 = i32::from(
                                        *arg0
                                            .add(16 + 11 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    let l30 = i32::from(
                                        *arg0
                                            .add(16 + 14 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    let l32 = i32::from(
                                        *arg0
                                            .add(18 + 14 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    TranscribeOptions {
                                        enable_timestamps: match l9 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l10 = i32::from(
                                                        *arg0
                                                            .add(17 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    _rt::bool_lift(l10 as u8)
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        enable_speaker_diarization: match l11 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l12 = i32::from(
                                                        *arg0
                                                            .add(19 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    _rt::bool_lift(l12 as u8)
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        language: match l13 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l14 = *arg0
                                                        .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l15 = *arg0
                                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len16 = l15;
                                                    let bytes16 = _rt::Vec::from_raw_parts(
                                                        l14.cast(),
                                                        len16,
                                                        len16,
                                                    );
                                                    _rt::string_lift(bytes16)
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        model: match l17 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l18 = *arg0
                                                        .add(16 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l19 = *arg0
                                                        .add(16 + 9 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len20 = l19;
                                                    let bytes20 = _rt::Vec::from_raw_parts(
                                                        l18.cast(),
                                                        len20,
                                                        len20,
                                                    );
                                                    _rt::string_lift(bytes20)
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        profanity_filter: match l21 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l22 = i32::from(
                                                        *arg0
                                                            .add(17 + 10 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    _rt::bool_lift(l22 as u8)
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        speech_context: match l23 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l24 = *arg0
                                                        .add(16 + 12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l25 = *arg0
                                                        .add(16 + 13 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base29 = l24;
                                                    let len29 = l25;
                                                    let mut result29 = _rt::Vec::with_capacity(len29);
                                                    for i in 0..len29 {
                                                        let base = base29
                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                        let e29 = {
                                                            let l26 = *base.add(0).cast::<*mut u8>();
                                                            let l27 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len28 = l27;
                                                            let bytes28 = _rt::Vec::from_raw_parts(
                                                                l26.cast(),
                                                                len28,
                                                                len28,
                                                            );
                                                            _rt::string_lift(bytes28)
                                                        };
                                                        result29.push(e29);
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base29,
                                                        len29 * (2 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    result29
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        enable_word_confidence: match l30 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l31 = i32::from(
                                                        *arg0
                                                            .add(17 + 14 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    _rt::bool_lift(l31 as u8)
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        enable_timing_detail: match l32 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l33 = i32::from(
                                                        *arg0
                                                            .add(19 + 14 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    _rt::bool_lift(l33 as u8)
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    );
                    _rt::cabi_dealloc(
                        arg0,
                        16 + 15 * ::core::mem::size_of::<*const u8>(),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let ptr35 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result34 {
                        Ok(e) => {
                            *ptr35.add(0).cast::<u8>() = (0i32) as u8;
                            let super::super::super::super::exports::golem::stt::types::TranscriptionResult {
                                alternatives: alternatives36,
                                metadata: metadata36,
                            } = e;
                            let vec43 = alternatives36;
                            let len43 = vec43.len();
                            let layout43 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec43.len() * (5 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result43 = if layout43.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout43).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout43);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec43.into_iter().enumerate() {
                                let base = result43
                                    .add(i * (5 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let super::super::super::super::exports::golem::stt::types::TranscriptAlternative {
                                        text: text37,
                                        confidence: confidence37,
                                        words: words37,
                                    } = e;
                                    let vec38 = (text37.into_bytes()).into_boxed_slice();
                                    let ptr38 = vec38.as_ptr().cast::<u8>();
                                    let len38 = vec38.len();
                                    ::core::mem::forget(vec38);
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len38;
                                    *base.add(0).cast::<*mut u8>() = ptr38.cast_mut();
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<f32>() = _rt::as_f32(confidence37);
                                    let vec42 = words37;
                                    let len42 = vec42.len();
                                    let layout42 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec42.len()
                                            * (16 + 5 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result42 = if layout42.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout42).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout42);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec42.into_iter().enumerate() {
                                        let base = result42
                                            .add(i * (16 + 5 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let super::super::super::super::exports::golem::stt::types::WordSegment {
                                                text: text39,
                                                start_time: start_time39,
                                                end_time: end_time39,
                                                confidence: confidence39,
                                                speaker_id: speaker_id39,
                                            } = e;
                                            let vec40 = (text39.into_bytes()).into_boxed_slice();
                                            let ptr40 = vec40.as_ptr().cast::<u8>();
                                            let len40 = vec40.len();
                                            ::core::mem::forget(vec40);
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len40;
                                            *base.add(0).cast::<*mut u8>() = ptr40.cast_mut();
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<f32>() = _rt::as_f32(start_time39);
                                            *base
                                                .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<f32>() = _rt::as_f32(end_time39);
                                            match confidence39 {
                                                Some(e) => {
                                                    *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    *base
                                                        .add(12 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<f32>() = _rt::as_f32(e);
                                                }
                                                None => {
                                                    *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match speaker_id39 {
                                                Some(e) => {
                                                    *base
                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec41 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr41 = vec41.as_ptr().cast::<u8>();
                                                    let len41 = vec41.len();
                                                    ::core::mem::forget(vec41);
                                                    *base
                                                        .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len41;
                                                    *base
                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr41.cast_mut();
                                                }
                                                None => {
                                                    *base
                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                    }
                                    *base
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len42;
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result42;
                                }
                            }
                            *ptr35
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len43;
                            *ptr35.add(8).cast::<*mut u8>() = result43;
                            let super::super::super::super::exports::golem::stt::types::TranscriptionMetadata {
                                duration_seconds: duration_seconds44,
                                audio_size_bytes: audio_size_bytes44,
                                request_id: request_id44,
                                model: model44,
                                language: language44,
                            } = metadata36;
                            *ptr35
                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<f32>() = _rt::as_f32(duration_seconds44);
                            *ptr35
                                .add(12 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<i32>() = _rt::as_i32(audio_size_bytes44);
                            let vec45 = (request_id44.into_bytes()).into_boxed_slice();
                            let ptr45 = vec45.as_ptr().cast::<u8>();
                            let len45 = vec45.len();
                            ::core::mem::forget(vec45);
                            *ptr35
                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len45;
                            *ptr35
                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr45.cast_mut();
                            match model44 {
                                Some(e) => {
                                    *ptr35
                                        .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec46 = (e.into_bytes()).into_boxed_slice();
                                    let ptr46 = vec46.as_ptr().cast::<u8>();
                                    let len46 = vec46.len();
                                    ::core::mem::forget(vec46);
                                    *ptr35
                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len46;
                                    *ptr35
                                        .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr46.cast_mut();
                                }
                                None => {
                                    *ptr35
                                        .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            let vec47 = (language44.into_bytes()).into_boxed_slice();
                            let ptr47 = vec47.as_ptr().cast::<u8>();
                            let len47 = vec47.len();
                            ::core::mem::forget(vec47);
                            *ptr35
                                .add(16 + 8 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len47;
                            *ptr35
                                .add(16 + 7 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr47.cast_mut();
                        }
                        Err(e) => {
                            *ptr35.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::exports::golem::stt::types::SttError as V59;
                            match e {
                                V59::InvalidAudio(e) => {
                                    *ptr35.add(8).cast::<u8>() = (0i32) as u8;
                                    let vec48 = (e.into_bytes()).into_boxed_slice();
                                    let ptr48 = vec48.as_ptr().cast::<u8>();
                                    let len48 = vec48.len();
                                    ::core::mem::forget(vec48);
                                    *ptr35
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len48;
                                    *ptr35.add(16).cast::<*mut u8>() = ptr48.cast_mut();
                                }
                                V59::UnsupportedFormat(e) => {
                                    *ptr35.add(8).cast::<u8>() = (1i32) as u8;
                                    let vec49 = (e.into_bytes()).into_boxed_slice();
                                    let ptr49 = vec49.as_ptr().cast::<u8>();
                                    let len49 = vec49.len();
                                    ::core::mem::forget(vec49);
                                    *ptr35
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len49;
                                    *ptr35.add(16).cast::<*mut u8>() = ptr49.cast_mut();
                                }
                                V59::UnsupportedLanguage(e) => {
                                    *ptr35.add(8).cast::<u8>() = (2i32) as u8;
                                    let vec50 = (e.into_bytes()).into_boxed_slice();
                                    let ptr50 = vec50.as_ptr().cast::<u8>();
                                    let len50 = vec50.len();
                                    ::core::mem::forget(vec50);
                                    *ptr35
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len50;
                                    *ptr35.add(16).cast::<*mut u8>() = ptr50.cast_mut();
                                }
                                V59::TranscriptionFailed(e) => {
                                    *ptr35.add(8).cast::<u8>() = (3i32) as u8;
                                    let vec51 = (e.into_bytes()).into_boxed_slice();
                                    let ptr51 = vec51.as_ptr().cast::<u8>();
                                    let len51 = vec51.len();
                                    ::core::mem::forget(vec51);
                                    *ptr35
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len51;
                                    *ptr35.add(16).cast::<*mut u8>() = ptr51.cast_mut();
                                }
                                V59::Unauthorized(e) => {
                                    *ptr35.add(8).cast::<u8>() = (4i32) as u8;
                                    let vec52 = (e.into_bytes()).into_boxed_slice();
                                    let ptr52 = vec52.as_ptr().cast::<u8>();
                                    let len52 = vec52.len();
                                    ::core::mem::forget(vec52);
                                    *ptr35
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len52;
                                    *ptr35.add(16).cast::<*mut u8>() = ptr52.cast_mut();
                                }
                                V59::AccessDenied(e) => {
                                    *ptr35.add(8).cast::<u8>() = (5i32) as u8;
                                    let vec53 = (e.into_bytes()).into_boxed_slice();
                                    let ptr53 = vec53.as_ptr().cast::<u8>();
                                    let len53 = vec53.len();
                                    ::core::mem::forget(vec53);
                                    *ptr35
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len53;
                                    *ptr35.add(16).cast::<*mut u8>() = ptr53.cast_mut();
                                }
                                V59::QuotaExceeded(e) => {
                                    *ptr35.add(8).cast::<u8>() = (6i32) as u8;
                                    let super::super::super::super::exports::golem::stt::types::QuotaInfo {
                                        used: used54,
                                        limit: limit54,
                                        reset_time: reset_time54,
                                        unit: unit54,
                                    } = e;
                                    *ptr35.add(16).cast::<i32>() = _rt::as_i32(used54);
                                    *ptr35.add(20).cast::<i32>() = _rt::as_i32(limit54);
                                    *ptr35.add(24).cast::<i64>() = _rt::as_i64(reset_time54);
                                    *ptr35.add(32).cast::<u8>() = (unit54.clone() as i32) as u8;
                                }
                                V59::RateLimited(e) => {
                                    *ptr35.add(8).cast::<u8>() = (7i32) as u8;
                                    *ptr35.add(16).cast::<i32>() = _rt::as_i32(e);
                                }
                                V59::InsufficientCredits => {
                                    *ptr35.add(8).cast::<u8>() = (8i32) as u8;
                                }
                                V59::UnsupportedOperation(e) => {
                                    *ptr35.add(8).cast::<u8>() = (9i32) as u8;
                                    let vec55 = (e.into_bytes()).into_boxed_slice();
                                    let ptr55 = vec55.as_ptr().cast::<u8>();
                                    let len55 = vec55.len();
                                    ::core::mem::forget(vec55);
                                    *ptr35
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len55;
                                    *ptr35.add(16).cast::<*mut u8>() = ptr55.cast_mut();
                                }
                                V59::ServiceUnavailable(e) => {
                                    *ptr35.add(8).cast::<u8>() = (10i32) as u8;
                                    let vec56 = (e.into_bytes()).into_boxed_slice();
                                    let ptr56 = vec56.as_ptr().cast::<u8>();
                                    let len56 = vec56.len();
                                    ::core::mem::forget(vec56);
                                    *ptr35
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len56;
                                    *ptr35.add(16).cast::<*mut u8>() = ptr56.cast_mut();
                                }
                                V59::NetworkError(e) => {
                                    *ptr35.add(8).cast::<u8>() = (11i32) as u8;
                                    let vec57 = (e.into_bytes()).into_boxed_slice();
                                    let ptr57 = vec57.as_ptr().cast::<u8>();
                                    let len57 = vec57.len();
                                    ::core::mem::forget(vec57);
                                    *ptr35
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len57;
                                    *ptr35.add(16).cast::<*mut u8>() = ptr57.cast_mut();
                                }
                                V59::InternalError(e) => {
                                    *ptr35.add(8).cast::<u8>() = (12i32) as u8;
                                    let vec58 = (e.into_bytes()).into_boxed_slice();
                                    let ptr58 = vec58.as_ptr().cast::<u8>();
                                    let len58 = vec58.len();
                                    ::core::mem::forget(vec58);
                                    *ptr35
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len58;
                                    *ptr35.add(16).cast::<*mut u8>() = ptr58.cast_mut();
                                }
                            }
                        }
                    };
                    ptr35
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_transcribe<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(8).cast::<*mut u8>();
                            let l2 = *arg0
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let base13 = l1;
                            let len13 = l2;
                            for i in 0..len13 {
                                let base = base13
                                    .add(i * (5 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let l3 = *base.add(0).cast::<*mut u8>();
                                    let l4 = *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l3, l4, 1);
                                    let l5 = *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l6 = *base
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base12 = l5;
                                    let len12 = l6;
                                    for i in 0..len12 {
                                        let base = base12
                                            .add(i * (16 + 5 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let l7 = *base.add(0).cast::<*mut u8>();
                                            let l8 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l7, l8, 1);
                                            let l9 = i32::from(
                                                *base
                                                    .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l9 {
                                                0 => {}
                                                _ => {
                                                    let l10 = *base
                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l11 = *base
                                                        .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l10, l11, 1);
                                                }
                                            }
                                        }
                                    }
                                    _rt::cabi_dealloc(
                                        base12,
                                        len12 * (16 + 5 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                }
                            }
                            _rt::cabi_dealloc(
                                base13,
                                len13 * (5 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let l14 = *arg0
                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l15 = *arg0
                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l14, l15, 1);
                            let l16 = i32::from(
                                *arg0
                                    .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l16 {
                                0 => {}
                                _ => {
                                    let l17 = *arg0
                                        .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l18 = *arg0
                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l17, l18, 1);
                                }
                            }
                            let l19 = *arg0
                                .add(16 + 7 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l20 = *arg0
                                .add(16 + 8 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l19, l20, 1);
                        }
                        _ => {
                            let l21 = i32::from(*arg0.add(8).cast::<u8>());
                            match l21 {
                                0 => {
                                    let l22 = *arg0.add(16).cast::<*mut u8>();
                                    let l23 = *arg0
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l22, l23, 1);
                                }
                                1 => {
                                    let l24 = *arg0.add(16).cast::<*mut u8>();
                                    let l25 = *arg0
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l24, l25, 1);
                                }
                                2 => {
                                    let l26 = *arg0.add(16).cast::<*mut u8>();
                                    let l27 = *arg0
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l26, l27, 1);
                                }
                                3 => {
                                    let l28 = *arg0.add(16).cast::<*mut u8>();
                                    let l29 = *arg0
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l28, l29, 1);
                                }
                                4 => {
                                    let l30 = *arg0.add(16).cast::<*mut u8>();
                                    let l31 = *arg0
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l30, l31, 1);
                                }
                                5 => {
                                    let l32 = *arg0.add(16).cast::<*mut u8>();
                                    let l33 = *arg0
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l32, l33, 1);
                                }
                                6 => {}
                                7 => {}
                                8 => {}
                                9 => {
                                    let l34 = *arg0.add(16).cast::<*mut u8>();
                                    let l35 = *arg0
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l34, l35, 1);
                                }
                                10 => {
                                    let l36 = *arg0.add(16).cast::<*mut u8>();
                                    let l37 = *arg0
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l36, l37, 1);
                                }
                                11 => {
                                    let l38 = *arg0.add(16).cast::<*mut u8>();
                                    let l39 = *arg0
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l38, l39, 1);
                                }
                                _ => {
                                    let l40 = *arg0.add(16).cast::<*mut u8>();
                                    let l41 = *arg0
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l40, l41, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_multi_transcribe_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let base34 = arg0;
                    let len34 = arg1;
                    let mut result34 = _rt::Vec::with_capacity(len34);
                    for i in 0..len34 {
                        let base = base34
                            .add(i * (16 + 15 * ::core::mem::size_of::<*const u8>()));
                        let e34 = {
                            let l0 = *base.add(0).cast::<*mut u8>();
                            let l1 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len2 = l1;
                            let l3 = i32::from(
                                *base
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            let l4 = i32::from(
                                *base
                                    .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            let l6 = i32::from(
                                *base
                                    .add(12 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            let l8 = i32::from(
                                *base
                                    .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            TranscribeRequest {
                                audio: _rt::Vec::from_raw_parts(l0.cast(), len2, len2),
                                config: super::super::super::super::exports::golem::stt::types::AudioConfig {
                                    format: super::super::super::super::exports::golem::stt::types::AudioFormat::_lift(
                                        l3 as u8,
                                    ),
                                    sample_rate: match l4 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l5 = *base
                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<i32>();
                                                l5 as u32
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                    channels: match l6 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l7 = i32::from(
                                                    *base
                                                        .add(13 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>(),
                                                );
                                                l7 as u8
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                },
                                options: match l8 {
                                    0 => None,
                                    1 => {
                                        let e = {
                                            let l9 = i32::from(
                                                *base
                                                    .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            let l11 = i32::from(
                                                *base
                                                    .add(18 + 3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            let l13 = i32::from(
                                                *base
                                                    .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            let l17 = i32::from(
                                                *base
                                                    .add(16 + 7 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            let l21 = i32::from(
                                                *base
                                                    .add(16 + 10 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            let l23 = i32::from(
                                                *base
                                                    .add(16 + 11 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            let l30 = i32::from(
                                                *base
                                                    .add(16 + 14 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            let l32 = i32::from(
                                                *base
                                                    .add(18 + 14 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            TranscribeOptions {
                                                enable_timestamps: match l9 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l10 = i32::from(
                                                                *base
                                                                    .add(17 + 3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            _rt::bool_lift(l10 as u8)
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                                enable_speaker_diarization: match l11 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l12 = i32::from(
                                                                *base
                                                                    .add(19 + 3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            _rt::bool_lift(l12 as u8)
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                                language: match l13 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l14 = *base
                                                                .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l15 = *base
                                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len16 = l15;
                                                            let bytes16 = _rt::Vec::from_raw_parts(
                                                                l14.cast(),
                                                                len16,
                                                                len16,
                                                            );
                                                            _rt::string_lift(bytes16)
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                                model: match l17 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l18 = *base
                                                                .add(16 + 8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l19 = *base
                                                                .add(16 + 9 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len20 = l19;
                                                            let bytes20 = _rt::Vec::from_raw_parts(
                                                                l18.cast(),
                                                                len20,
                                                                len20,
                                                            );
                                                            _rt::string_lift(bytes20)
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                                profanity_filter: match l21 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l22 = i32::from(
                                                                *base
                                                                    .add(17 + 10 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            _rt::bool_lift(l22 as u8)
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                                speech_context: match l23 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l24 = *base
                                                                .add(16 + 12 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l25 = *base
                                                                .add(16 + 13 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base29 = l24;
                                                            let len29 = l25;
                                                            let mut result29 = _rt::Vec::with_capacity(len29);
                                                            for i in 0..len29 {
                                                                let base = base29
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                let e29 = {
                                                                    let l26 = *base.add(0).cast::<*mut u8>();
                                                                    let l27 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len28 = l27;
                                                                    let bytes28 = _rt::Vec::from_raw_parts(
                                                                        l26.cast(),
                                                                        len28,
                                                                        len28,
                                                                    );
                                                                    _rt::string_lift(bytes28)
                                                                };
                                                                result29.push(e29);
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base29,
                                                                len29 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            result29
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                                enable_word_confidence: match l30 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l31 = i32::from(
                                                                *base
                                                                    .add(17 + 14 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            _rt::bool_lift(l31 as u8)
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                                enable_timing_detail: match l32 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l33 = i32::from(
                                                                *base
                                                                    .add(19 + 14 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            _rt::bool_lift(l33 as u8)
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                            }
                                        };
                                        Some(e)
                                    }
                                    _ => _rt::invalid_enum_discriminant(),
                                },
                            }
                        };
                        result34.push(e34);
                    }
                    _rt::cabi_dealloc(
                        base34,
                        len34 * (16 + 15 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result35 = T::multi_transcribe(result34);
                    let ptr36 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result35 {
                        Ok(e) => {
                            *ptr36.add(0).cast::<u8>() = (0i32) as u8;
                            let vec49 = e;
                            let len49 = vec49.len();
                            let layout49 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec49.len() * (8 + 9 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result49 = if layout49.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout49).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout49);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec49.into_iter().enumerate() {
                                let base = result49
                                    .add(i * (8 + 9 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let super::super::super::super::exports::golem::stt::types::TranscriptionResult {
                                        alternatives: alternatives37,
                                        metadata: metadata37,
                                    } = e;
                                    let vec44 = alternatives37;
                                    let len44 = vec44.len();
                                    let layout44 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec44.len() * (5 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result44 = if layout44.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout44).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout44);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec44.into_iter().enumerate() {
                                        let base = result44
                                            .add(i * (5 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let super::super::super::super::exports::golem::stt::types::TranscriptAlternative {
                                                text: text38,
                                                confidence: confidence38,
                                                words: words38,
                                            } = e;
                                            let vec39 = (text38.into_bytes()).into_boxed_slice();
                                            let ptr39 = vec39.as_ptr().cast::<u8>();
                                            let len39 = vec39.len();
                                            ::core::mem::forget(vec39);
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len39;
                                            *base.add(0).cast::<*mut u8>() = ptr39.cast_mut();
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<f32>() = _rt::as_f32(confidence38);
                                            let vec43 = words38;
                                            let len43 = vec43.len();
                                            let layout43 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec43.len()
                                                    * (16 + 5 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let result43 = if layout43.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout43).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout43);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec43.into_iter().enumerate() {
                                                let base = result43
                                                    .add(i * (16 + 5 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let super::super::super::super::exports::golem::stt::types::WordSegment {
                                                        text: text40,
                                                        start_time: start_time40,
                                                        end_time: end_time40,
                                                        confidence: confidence40,
                                                        speaker_id: speaker_id40,
                                                    } = e;
                                                    let vec41 = (text40.into_bytes()).into_boxed_slice();
                                                    let ptr41 = vec41.as_ptr().cast::<u8>();
                                                    let len41 = vec41.len();
                                                    ::core::mem::forget(vec41);
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len41;
                                                    *base.add(0).cast::<*mut u8>() = ptr41.cast_mut();
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<f32>() = _rt::as_f32(start_time40);
                                                    *base
                                                        .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<f32>() = _rt::as_f32(end_time40);
                                                    match confidence40 {
                                                        Some(e) => {
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            *base
                                                                .add(12 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<f32>() = _rt::as_f32(e);
                                                        }
                                                        None => {
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    match speaker_id40 {
                                                        Some(e) => {
                                                            *base
                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec42 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr42 = vec42.as_ptr().cast::<u8>();
                                                            let len42 = vec42.len();
                                                            ::core::mem::forget(vec42);
                                                            *base
                                                                .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len42;
                                                            *base
                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr42.cast_mut();
                                                        }
                                                        None => {
                                                            *base
                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                            }
                                            *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len43;
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result43;
                                        }
                                    }
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len44;
                                    *base.add(0).cast::<*mut u8>() = result44;
                                    let super::super::super::super::exports::golem::stt::types::TranscriptionMetadata {
                                        duration_seconds: duration_seconds45,
                                        audio_size_bytes: audio_size_bytes45,
                                        request_id: request_id45,
                                        model: model45,
                                        language: language45,
                                    } = metadata37;
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<f32>() = _rt::as_f32(duration_seconds45);
                                    *base
                                        .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i32>() = _rt::as_i32(audio_size_bytes45);
                                    let vec46 = (request_id45.into_bytes()).into_boxed_slice();
                                    let ptr46 = vec46.as_ptr().cast::<u8>();
                                    let len46 = vec46.len();
                                    ::core::mem::forget(vec46);
                                    *base
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len46;
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr46.cast_mut();
                                    match model45 {
                                        Some(e) => {
                                            *base
                                                .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec47 = (e.into_bytes()).into_boxed_slice();
                                            let ptr47 = vec47.as_ptr().cast::<u8>();
                                            let len47 = vec47.len();
                                            ::core::mem::forget(vec47);
                                            *base
                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len47;
                                            *base
                                                .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr47.cast_mut();
                                        }
                                        None => {
                                            *base
                                                .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    let vec48 = (language45.into_bytes()).into_boxed_slice();
                                    let ptr48 = vec48.as_ptr().cast::<u8>();
                                    let len48 = vec48.len();
                                    ::core::mem::forget(vec48);
                                    *base
                                        .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len48;
                                    *base
                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr48.cast_mut();
                                }
                            }
                            *ptr36
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len49;
                            *ptr36.add(8).cast::<*mut u8>() = result49;
                        }
                        Err(e) => {
                            *ptr36.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::exports::golem::stt::types::SttError as V61;
                            match e {
                                V61::InvalidAudio(e) => {
                                    *ptr36.add(8).cast::<u8>() = (0i32) as u8;
                                    let vec50 = (e.into_bytes()).into_boxed_slice();
                                    let ptr50 = vec50.as_ptr().cast::<u8>();
                                    let len50 = vec50.len();
                                    ::core::mem::forget(vec50);
                                    *ptr36
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len50;
                                    *ptr36.add(16).cast::<*mut u8>() = ptr50.cast_mut();
                                }
                                V61::UnsupportedFormat(e) => {
                                    *ptr36.add(8).cast::<u8>() = (1i32) as u8;
                                    let vec51 = (e.into_bytes()).into_boxed_slice();
                                    let ptr51 = vec51.as_ptr().cast::<u8>();
                                    let len51 = vec51.len();
                                    ::core::mem::forget(vec51);
                                    *ptr36
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len51;
                                    *ptr36.add(16).cast::<*mut u8>() = ptr51.cast_mut();
                                }
                                V61::UnsupportedLanguage(e) => {
                                    *ptr36.add(8).cast::<u8>() = (2i32) as u8;
                                    let vec52 = (e.into_bytes()).into_boxed_slice();
                                    let ptr52 = vec52.as_ptr().cast::<u8>();
                                    let len52 = vec52.len();
                                    ::core::mem::forget(vec52);
                                    *ptr36
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len52;
                                    *ptr36.add(16).cast::<*mut u8>() = ptr52.cast_mut();
                                }
                                V61::TranscriptionFailed(e) => {
                                    *ptr36.add(8).cast::<u8>() = (3i32) as u8;
                                    let vec53 = (e.into_bytes()).into_boxed_slice();
                                    let ptr53 = vec53.as_ptr().cast::<u8>();
                                    let len53 = vec53.len();
                                    ::core::mem::forget(vec53);
                                    *ptr36
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len53;
                                    *ptr36.add(16).cast::<*mut u8>() = ptr53.cast_mut();
                                }
                                V61::Unauthorized(e) => {
                                    *ptr36.add(8).cast::<u8>() = (4i32) as u8;
                                    let vec54 = (e.into_bytes()).into_boxed_slice();
                                    let ptr54 = vec54.as_ptr().cast::<u8>();
                                    let len54 = vec54.len();
                                    ::core::mem::forget(vec54);
                                    *ptr36
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len54;
                                    *ptr36.add(16).cast::<*mut u8>() = ptr54.cast_mut();
                                }
                                V61::AccessDenied(e) => {
                                    *ptr36.add(8).cast::<u8>() = (5i32) as u8;
                                    let vec55 = (e.into_bytes()).into_boxed_slice();
                                    let ptr55 = vec55.as_ptr().cast::<u8>();
                                    let len55 = vec55.len();
                                    ::core::mem::forget(vec55);
                                    *ptr36
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len55;
                                    *ptr36.add(16).cast::<*mut u8>() = ptr55.cast_mut();
                                }
                                V61::QuotaExceeded(e) => {
                                    *ptr36.add(8).cast::<u8>() = (6i32) as u8;
                                    let super::super::super::super::exports::golem::stt::types::QuotaInfo {
                                        used: used56,
                                        limit: limit56,
                                        reset_time: reset_time56,
                                        unit: unit56,
                                    } = e;
                                    *ptr36.add(16).cast::<i32>() = _rt::as_i32(used56);
                                    *ptr36.add(20).cast::<i32>() = _rt::as_i32(limit56);
                                    *ptr36.add(24).cast::<i64>() = _rt::as_i64(reset_time56);
                                    *ptr36.add(32).cast::<u8>() = (unit56.clone() as i32) as u8;
                                }
                                V61::RateLimited(e) => {
                                    *ptr36.add(8).cast::<u8>() = (7i32) as u8;
                                    *ptr36.add(16).cast::<i32>() = _rt::as_i32(e);
                                }
                                V61::InsufficientCredits => {
                                    *ptr36.add(8).cast::<u8>() = (8i32) as u8;
                                }
                                V61::UnsupportedOperation(e) => {
                                    *ptr36.add(8).cast::<u8>() = (9i32) as u8;
                                    let vec57 = (e.into_bytes()).into_boxed_slice();
                                    let ptr57 = vec57.as_ptr().cast::<u8>();
                                    let len57 = vec57.len();
                                    ::core::mem::forget(vec57);
                                    *ptr36
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len57;
                                    *ptr36.add(16).cast::<*mut u8>() = ptr57.cast_mut();
                                }
                                V61::ServiceUnavailable(e) => {
                                    *ptr36.add(8).cast::<u8>() = (10i32) as u8;
                                    let vec58 = (e.into_bytes()).into_boxed_slice();
                                    let ptr58 = vec58.as_ptr().cast::<u8>();
                                    let len58 = vec58.len();
                                    ::core::mem::forget(vec58);
                                    *ptr36
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len58;
                                    *ptr36.add(16).cast::<*mut u8>() = ptr58.cast_mut();
                                }
                                V61::NetworkError(e) => {
                                    *ptr36.add(8).cast::<u8>() = (11i32) as u8;
                                    let vec59 = (e.into_bytes()).into_boxed_slice();
                                    let ptr59 = vec59.as_ptr().cast::<u8>();
                                    let len59 = vec59.len();
                                    ::core::mem::forget(vec59);
                                    *ptr36
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len59;
                                    *ptr36.add(16).cast::<*mut u8>() = ptr59.cast_mut();
                                }
                                V61::InternalError(e) => {
                                    *ptr36.add(8).cast::<u8>() = (12i32) as u8;
                                    let vec60 = (e.into_bytes()).into_boxed_slice();
                                    let ptr60 = vec60.as_ptr().cast::<u8>();
                                    let len60 = vec60.len();
                                    ::core::mem::forget(vec60);
                                    *ptr36
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len60;
                                    *ptr36.add(16).cast::<*mut u8>() = ptr60.cast_mut();
                                }
                            }
                        }
                    };
                    ptr36
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_multi_transcribe<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(8).cast::<*mut u8>();
                            let l2 = *arg0
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let base23 = l1;
                            let len23 = l2;
                            for i in 0..len23 {
                                let base = base23
                                    .add(i * (8 + 9 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let l3 = *base.add(0).cast::<*mut u8>();
                                    let l4 = *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base15 = l3;
                                    let len15 = l4;
                                    for i in 0..len15 {
                                        let base = base15
                                            .add(i * (5 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let l5 = *base.add(0).cast::<*mut u8>();
                                            let l6 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l5, l6, 1);
                                            let l7 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l8 = *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base14 = l7;
                                            let len14 = l8;
                                            for i in 0..len14 {
                                                let base = base14
                                                    .add(i * (16 + 5 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let l9 = *base.add(0).cast::<*mut u8>();
                                                    let l10 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l9, l10, 1);
                                                    let l11 = i32::from(
                                                        *base
                                                            .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l11 {
                                                        0 => {}
                                                        _ => {
                                                            let l12 = *base
                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l13 = *base
                                                                .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l12, l13, 1);
                                                        }
                                                    }
                                                }
                                            }
                                            _rt::cabi_dealloc(
                                                base14,
                                                len14 * (16 + 5 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                        }
                                    }
                                    _rt::cabi_dealloc(
                                        base15,
                                        len15 * (5 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let l16 = *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l17 = *base
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l16, l17, 1);
                                    let l18 = i32::from(
                                        *base
                                            .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l18 {
                                        0 => {}
                                        _ => {
                                            let l19 = *base
                                                .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l20 = *base
                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l19, l20, 1);
                                        }
                                    }
                                    let l21 = *base
                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l22 = *base
                                        .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l21, l22, 1);
                                }
                            }
                            _rt::cabi_dealloc(
                                base23,
                                len23 * (8 + 9 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                        }
                        _ => {
                            let l24 = i32::from(*arg0.add(8).cast::<u8>());
                            match l24 {
                                0 => {
                                    let l25 = *arg0.add(16).cast::<*mut u8>();
                                    let l26 = *arg0
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l25, l26, 1);
                                }
                                1 => {
                                    let l27 = *arg0.add(16).cast::<*mut u8>();
                                    let l28 = *arg0
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l27, l28, 1);
                                }
                                2 => {
                                    let l29 = *arg0.add(16).cast::<*mut u8>();
                                    let l30 = *arg0
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l29, l30, 1);
                                }
                                3 => {
                                    let l31 = *arg0.add(16).cast::<*mut u8>();
                                    let l32 = *arg0
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l31, l32, 1);
                                }
                                4 => {
                                    let l33 = *arg0.add(16).cast::<*mut u8>();
                                    let l34 = *arg0
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l33, l34, 1);
                                }
                                5 => {
                                    let l35 = *arg0.add(16).cast::<*mut u8>();
                                    let l36 = *arg0
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l35, l36, 1);
                                }
                                6 => {}
                                7 => {}
                                8 => {}
                                9 => {
                                    let l37 = *arg0.add(16).cast::<*mut u8>();
                                    let l38 = *arg0
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l37, l38, 1);
                                }
                                10 => {
                                    let l39 = *arg0.add(16).cast::<*mut u8>();
                                    let l40 = *arg0
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l39, l40, 1);
                                }
                                11 => {
                                    let l41 = *arg0.add(16).cast::<*mut u8>();
                                    let l42 = *arg0
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l41, l42, 1);
                                }
                                _ => {
                                    let l43 = *arg0.add(16).cast::<*mut u8>();
                                    let l44 = *arg0
                                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l43, l44, 1);
                                }
                            }
                        }
                    }
                }
                pub trait Guest {
                    fn transcribe(
                        audio: _rt::Vec<u8>,
                        config: AudioConfig,
                        options: Option<TranscribeOptions>,
                    ) -> Result<TranscriptionResult, SttError>;
                    fn multi_transcribe(
                        requests: _rt::Vec<TranscribeRequest>,
                    ) -> Result<_rt::Vec<TranscriptionResult>, SttError>;
                }
                #[doc(hidden)]
                macro_rules! __export_golem_stt_transcription_1_0_0_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "golem:stt/transcription@1.0.0#transcribe")] unsafe extern "C" fn
                        export_transcribe(arg0 : * mut u8,) -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_transcribe_cabi::<$ty > (arg0) } }
                        #[unsafe (export_name =
                        "cabi_post_golem:stt/transcription@1.0.0#transcribe")] unsafe
                        extern "C" fn _post_return_transcribe(arg0 : * mut u8,) { unsafe
                        { $($path_to_types)*:: __post_return_transcribe::<$ty > (arg0) }
                        } #[unsafe (export_name =
                        "golem:stt/transcription@1.0.0#multi-transcribe")] unsafe extern
                        "C" fn export_multi_transcribe(arg0 : * mut u8, arg1 : usize,) ->
                        * mut u8 { unsafe { $($path_to_types)*::
                        _export_multi_transcribe_cabi::<$ty > (arg0, arg1) } } #[unsafe
                        (export_name =
                        "cabi_post_golem:stt/transcription@1.0.0#multi-transcribe")]
                        unsafe extern "C" fn _post_return_multi_transcribe(arg0 : * mut
                        u8,) { unsafe { $($path_to_types)*::
                        __post_return_multi_transcribe::<$ty > (arg0) } } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_golem_stt_transcription_1_0_0_cabi;
                #[repr(align(8))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<
                        u8,
                    >; 24 + 8 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 24
                        + 8 * ::core::mem::size_of::<*const u8>()],
                );
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;
    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};
    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }
    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }
    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }
        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }
        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }
    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource").field("handle", &self.handle).finish()
        }
    }
    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    u32::MAX => {}
                    other => T::drop(other),
                }
            }
        }
    }
    pub use alloc_crate::boxed::Box;
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    pub use alloc_crate::alloc;
    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }
    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }
    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }
    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }
    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }
    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }
    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            unsafe { core::hint::unreachable_unchecked() }
        }
    }
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            val != 0
        }
    }
    pub fn as_f32<T: AsF32>(t: T) -> f32 {
        t.as_f32()
    }
    pub trait AsF32 {
        fn as_f32(self) -> f32;
    }
    impl<'a, T: Copy + AsF32> AsF32 for &'a T {
        fn as_f32(self) -> f32 {
            (*self).as_f32()
        }
    }
    impl AsF32 for f32 {
        #[inline]
        fn as_f32(self) -> f32 {
            self as f32
        }
    }
    extern crate alloc as alloc_crate;
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_stt_library_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::golem::stt::types::__export_golem_stt_types_1_0_0_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::golem::stt::types);
        $($path_to_types_root)*::
        exports::golem::stt::vocabularies::__export_golem_stt_vocabularies_1_0_0_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::golem::stt::vocabularies);
        $($path_to_types_root)*::
        exports::golem::stt::languages::__export_golem_stt_languages_1_0_0_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::golem::stt::languages);
        $($path_to_types_root)*::
        exports::golem::stt::transcription::__export_golem_stt_transcription_1_0_0_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::golem::stt::transcription);
    };
}
#[doc(inline)]
pub(crate) use __export_stt_library_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:golem:stt@1.0.0:stt-library:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 2149] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xe3\x0f\x01A\x02\x01\
A\x0e\x01B\x1e\x01m\x03\x07seconds\x08requests\x07credits\x04\0\x0aquota-unit\x03\
\0\0\x01r\x04\x04usedy\x05limity\x0areset-timew\x04unit\x01\x04\0\x0aquota-info\x03\
\0\x02\x01q\x0d\x0dinvalid-audio\x01s\0\x12unsupported-format\x01s\0\x14unsuppor\
ted-language\x01s\0\x14transcription-failed\x01s\0\x0cunauthorized\x01s\0\x0dacc\
ess-denied\x01s\0\x0equota-exceeded\x01\x03\0\x0crate-limited\x01y\0\x14insuffic\
ient-credits\0\0\x15unsupported-operation\x01s\0\x13service-unavailable\x01s\0\x0d\
network-error\x01s\0\x0einternal-error\x01s\0\x04\0\x09stt-error\x03\0\x04\x01s\x04\
\0\x0dlanguage-code\x03\0\x06\x01m\x06\x03wav\x03mp3\x04flac\x03ogg\x03aac\x03pc\
m\x04\0\x0caudio-format\x03\0\x08\x01ky\x01k}\x01r\x03\x06format\x09\x0bsample-r\
ate\x0a\x08channels\x0b\x04\0\x0caudio-config\x03\0\x0c\x01m\x01\x04word\x04\0\x10\
timing-mark-type\x03\0\x0e\x01kv\x01r\x03\x12start-time-secondsv\x10end-time-sec\
onds\x10\x09mark-type\x0f\x04\0\x0btiming-info\x03\0\x11\x01ks\x01r\x05\x04texts\
\x0astart-timev\x08end-timev\x0aconfidence\x10\x0aspeaker-id\x13\x04\0\x0cword-s\
egment\x03\0\x14\x01p\x15\x01r\x03\x04texts\x0aconfidencev\x05words\x16\x04\0\x16\
transcript-alternative\x03\0\x17\x01r\x05\x10duration-secondsv\x10audio-size-byt\
esy\x0arequest-ids\x05model\x13\x08language\x07\x04\0\x16transcription-metadata\x03\
\0\x19\x01p\x18\x01r\x02\x0calternatives\x1b\x08metadata\x1a\x04\0\x14transcript\
ion-result\x03\0\x1c\x04\0\x15golem:stt/types@1.0.0\x05\0\x02\x03\0\0\x09stt-err\
or\x01B\x10\x02\x03\x02\x01\x01\x04\0\x09stt-error\x03\0\0\x04\0\x0avocabulary\x03\
\x01\x01h\x02\x01@\x01\x04self\x03\0s\x04\0\x1b[method]vocabulary.get-name\x01\x04\
\x01ps\x01@\x01\x04self\x03\0\x05\x04\0\x1e[method]vocabulary.get-phrases\x01\x06\
\x01j\0\x01\x01\x01@\x01\x04self\x03\0\x07\x04\0\x19[method]vocabulary.delete\x01\
\x08\x01i\x02\x01j\x01\x09\x01\x01\x01@\x02\x04names\x07phrases\x05\0\x0a\x04\0\x11\
create-vocabulary\x01\x0b\x04\0\x1cgolem:stt/vocabularies@1.0.0\x05\x02\x02\x03\0\
\0\x0dlanguage-code\x01B\x0a\x02\x03\x02\x01\x03\x04\0\x0dlanguage-code\x03\0\0\x02\
\x03\x02\x01\x01\x04\0\x09stt-error\x03\0\x02\x01r\x03\x04code\x01\x04names\x0bn\
ative-names\x04\0\x0dlanguage-info\x03\0\x04\x01p\x05\x01j\x01\x06\x01\x03\x01@\0\
\0\x07\x04\0\x0elist-languages\x01\x08\x04\0\x19golem:stt/languages@1.0.0\x05\x04\
\x02\x03\0\0\x0caudio-config\x02\x03\0\0\x14transcription-result\x02\x03\0\0\x16\
transcript-alternative\x02\x03\0\x01\x0avocabulary\x01B\x1f\x02\x03\x02\x01\x05\x04\
\0\x0caudio-config\x03\0\0\x02\x03\x02\x01\x06\x04\0\x14transcription-result\x03\
\0\x02\x02\x03\x02\x01\x01\x04\0\x09stt-error\x03\0\x04\x02\x03\x02\x01\x03\x04\0\
\x0dlanguage-code\x03\0\x06\x02\x03\x02\x01\x07\x04\0\x16transcript-alternative\x03\
\0\x08\x02\x03\x02\x01\x08\x04\0\x0avocabulary\x03\0\x0a\x01k\x7f\x01k\x07\x01ks\
\x01ps\x01k\x0f\x01r\x08\x11enable-timestamps\x0c\x1aenable-speaker-diarization\x0c\
\x08language\x0d\x05model\x0e\x10profanity-filter\x0c\x0espeech-context\x10\x16e\
nable-word-confidence\x0c\x14enable-timing-detail\x0c\x04\0\x12transcribe-option\
s\x03\0\x11\x01p}\x01k\x12\x01r\x03\x05audio\x13\x06config\x01\x07options\x14\x04\
\0\x12transcribe-request\x03\0\x15\x01j\x01\x03\x01\x05\x01@\x03\x05audio\x13\x06\
config\x01\x07options\x14\0\x17\x04\0\x0atranscribe\x01\x18\x01p\x16\x01p\x03\x01\
j\x01\x1a\x01\x05\x01@\x01\x08requests\x19\0\x1b\x04\0\x10multi-transcribe\x01\x1c\
\x04\0\x1dgolem:stt/transcription@1.0.0\x05\x09\x04\0\x1bgolem:stt/stt-library@1\
.0.0\x04\0\x0b\x11\x01\0\x0bstt-library\x03\0\0\0G\x09producers\x01\x0cprocessed\
-by\x02\x0dwit-component\x070.227.1\x10wit-bindgen-rust\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
