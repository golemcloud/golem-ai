// Generated by `wit-bindgen` 0.36.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
//   * with "wasi:clocks/wall-clock@0.2.0" = "golem_rust::wasm_rpc::wasi::clocks::wall_clock"
//   * with "wasi:io/poll@0.2.0" = "golem_rust::wasm_rpc::wasi::io::poll"
//   * with "golem:rpc/types@0.2.0" = "golem_rust::wasm_rpc::golem_rpc_0_2_x::types"
use golem_rust::wasm_rpc::wasi::io::poll as __with_name0;
use golem_rust::wasm_rpc::wasi::clocks::wall_clock as __with_name1;
use golem_rust::wasm_rpc::golem_rpc_0_2_x::types as __with_name2;
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod golem {
    pub mod graph {
        /// Core data types and structures unified across graph databases
        #[allow(dead_code, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            /// Temporal types with unified representation
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Date {
                pub year: u32,
                pub month: u8,
                /// 1-12
                pub day: u8,
            }
            impl ::core::fmt::Debug for Date {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Date")
                        .field("year", &self.year)
                        .field("month", &self.month)
                        .field("day", &self.day)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Time {
                pub hour: u8,
                /// 0-23
                pub minute: u8,
                /// 0-59
                pub second: u8,
                /// 0-59
                pub nanosecond: u32,
            }
            impl ::core::fmt::Debug for Time {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Time")
                        .field("hour", &self.hour)
                        .field("minute", &self.minute)
                        .field("second", &self.second)
                        .field("nanosecond", &self.nanosecond)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Datetime {
                pub date: Date,
                pub time: Time,
                pub timezone_offset_minutes: Option<i16>,
            }
            impl ::core::fmt::Debug for Datetime {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Datetime")
                        .field("date", &self.date)
                        .field("time", &self.time)
                        .field("timezone-offset-minutes", &self.timezone_offset_minutes)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Duration {
                pub seconds: i64,
                pub nanoseconds: u32,
            }
            impl ::core::fmt::Debug for Duration {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Duration")
                        .field("seconds", &self.seconds)
                        .field("nanoseconds", &self.nanoseconds)
                        .finish()
                }
            }
            /// Geospatial types (WGS84 coordinates)
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Point {
                pub longitude: f64,
                pub latitude: f64,
                pub altitude: Option<f64>,
            }
            impl ::core::fmt::Debug for Point {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Point")
                        .field("longitude", &self.longitude)
                        .field("latitude", &self.latitude)
                        .field("altitude", &self.altitude)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct Linestring {
                pub coordinates: _rt::Vec<Point>,
            }
            impl ::core::fmt::Debug for Linestring {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Linestring")
                        .field("coordinates", &self.coordinates)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct Polygon {
                pub exterior: _rt::Vec<Point>,
                pub holes: Option<_rt::Vec<_rt::Vec<Point>>>,
            }
            impl ::core::fmt::Debug for Polygon {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Polygon")
                        .field("exterior", &self.exterior)
                        .field("holes", &self.holes)
                        .finish()
                }
            }
            /// Universal property value types that can be represented across all graph databases
            #[derive(Clone)]
            pub enum PropertyValue {
                NullValue,
                Boolean(bool),
                Int8(i8),
                Int16(i16),
                Int32(i32),
                Int64(i64),
                Uint8(u8),
                Uint16(u16),
                Uint32(u32),
                Uint64(u64),
                Float32Value(f32),
                Float64Value(f64),
                StringValue(_rt::String),
                Bytes(_rt::Vec<u8>),
                /// Temporal types (unified representation)
                Date(Date),
                Time(Time),
                Datetime(Datetime),
                Duration(Duration),
                /// Geospatial types (unified GeoJSON-like representation)
                Point(Point),
                Linestring(Linestring),
                Polygon(Polygon),
            }
            impl ::core::fmt::Debug for PropertyValue {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        PropertyValue::NullValue => {
                            f.debug_tuple("PropertyValue::NullValue").finish()
                        }
                        PropertyValue::Boolean(e) => {
                            f.debug_tuple("PropertyValue::Boolean").field(e).finish()
                        }
                        PropertyValue::Int8(e) => {
                            f.debug_tuple("PropertyValue::Int8").field(e).finish()
                        }
                        PropertyValue::Int16(e) => {
                            f.debug_tuple("PropertyValue::Int16").field(e).finish()
                        }
                        PropertyValue::Int32(e) => {
                            f.debug_tuple("PropertyValue::Int32").field(e).finish()
                        }
                        PropertyValue::Int64(e) => {
                            f.debug_tuple("PropertyValue::Int64").field(e).finish()
                        }
                        PropertyValue::Uint8(e) => {
                            f.debug_tuple("PropertyValue::Uint8").field(e).finish()
                        }
                        PropertyValue::Uint16(e) => {
                            f.debug_tuple("PropertyValue::Uint16").field(e).finish()
                        }
                        PropertyValue::Uint32(e) => {
                            f.debug_tuple("PropertyValue::Uint32").field(e).finish()
                        }
                        PropertyValue::Uint64(e) => {
                            f.debug_tuple("PropertyValue::Uint64").field(e).finish()
                        }
                        PropertyValue::Float32Value(e) => {
                            f.debug_tuple("PropertyValue::Float32Value")
                                .field(e)
                                .finish()
                        }
                        PropertyValue::Float64Value(e) => {
                            f.debug_tuple("PropertyValue::Float64Value")
                                .field(e)
                                .finish()
                        }
                        PropertyValue::StringValue(e) => {
                            f.debug_tuple("PropertyValue::StringValue").field(e).finish()
                        }
                        PropertyValue::Bytes(e) => {
                            f.debug_tuple("PropertyValue::Bytes").field(e).finish()
                        }
                        PropertyValue::Date(e) => {
                            f.debug_tuple("PropertyValue::Date").field(e).finish()
                        }
                        PropertyValue::Time(e) => {
                            f.debug_tuple("PropertyValue::Time").field(e).finish()
                        }
                        PropertyValue::Datetime(e) => {
                            f.debug_tuple("PropertyValue::Datetime").field(e).finish()
                        }
                        PropertyValue::Duration(e) => {
                            f.debug_tuple("PropertyValue::Duration").field(e).finish()
                        }
                        PropertyValue::Point(e) => {
                            f.debug_tuple("PropertyValue::Point").field(e).finish()
                        }
                        PropertyValue::Linestring(e) => {
                            f.debug_tuple("PropertyValue::Linestring").field(e).finish()
                        }
                        PropertyValue::Polygon(e) => {
                            f.debug_tuple("PropertyValue::Polygon").field(e).finish()
                        }
                    }
                }
            }
            /// Universal element ID that can represent various database ID schemes
            #[derive(Clone)]
            pub enum ElementId {
                StringValue(_rt::String),
                Int64(i64),
                Uuid(_rt::String),
            }
            impl ::core::fmt::Debug for ElementId {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ElementId::StringValue(e) => {
                            f.debug_tuple("ElementId::StringValue").field(e).finish()
                        }
                        ElementId::Int64(e) => {
                            f.debug_tuple("ElementId::Int64").field(e).finish()
                        }
                        ElementId::Uuid(e) => {
                            f.debug_tuple("ElementId::Uuid").field(e).finish()
                        }
                    }
                }
            }
            /// Property map - consistent with insertion format
            pub type PropertyMap = _rt::Vec<(_rt::String, PropertyValue)>;
            /// Vertex representation
            #[derive(Clone)]
            pub struct Vertex {
                pub id: ElementId,
                pub vertex_type: _rt::String,
                /// Primary type (collection/tag/label)
                pub additional_labels: _rt::Vec<_rt::String>,
                /// Secondary labels (neo4j-style)
                pub properties: PropertyMap,
            }
            impl ::core::fmt::Debug for Vertex {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Vertex")
                        .field("id", &self.id)
                        .field("vertex-type", &self.vertex_type)
                        .field("additional-labels", &self.additional_labels)
                        .field("properties", &self.properties)
                        .finish()
                }
            }
            /// Edge representation
            #[derive(Clone)]
            pub struct Edge {
                pub id: ElementId,
                pub edge_type: _rt::String,
                /// Edge type/relationship type
                pub from_vertex: ElementId,
                pub to_vertex: ElementId,
                pub properties: PropertyMap,
            }
            impl ::core::fmt::Debug for Edge {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Edge")
                        .field("id", &self.id)
                        .field("edge-type", &self.edge_type)
                        .field("from-vertex", &self.from_vertex)
                        .field("to-vertex", &self.to_vertex)
                        .field("properties", &self.properties)
                        .finish()
                }
            }
            /// Path through the graph
            #[derive(Clone)]
            pub struct Path {
                pub vertices: _rt::Vec<Vertex>,
                pub edges: _rt::Vec<Edge>,
                pub length: u32,
            }
            impl ::core::fmt::Debug for Path {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Path")
                        .field("vertices", &self.vertices)
                        .field("edges", &self.edges)
                        .field("length", &self.length)
                        .finish()
                }
            }
            /// Direction for traversals
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum Direction {
                Outgoing,
                Incoming,
                Both,
            }
            impl ::core::fmt::Debug for Direction {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        Direction::Outgoing => {
                            f.debug_tuple("Direction::Outgoing").finish()
                        }
                        Direction::Incoming => {
                            f.debug_tuple("Direction::Incoming").finish()
                        }
                        Direction::Both => f.debug_tuple("Direction::Both").finish(),
                    }
                }
            }
            impl Direction {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> Direction {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => Direction::Outgoing,
                        1 => Direction::Incoming,
                        2 => Direction::Both,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            /// Comparison operators for filtering
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum ComparisonOperator {
                Equal,
                NotEqual,
                LessThan,
                LessThanOrEqual,
                GreaterThan,
                GreaterThanOrEqual,
                Contains,
                StartsWith,
                EndsWith,
                RegexMatch,
                InList,
                NotInList,
            }
            impl ::core::fmt::Debug for ComparisonOperator {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ComparisonOperator::Equal => {
                            f.debug_tuple("ComparisonOperator::Equal").finish()
                        }
                        ComparisonOperator::NotEqual => {
                            f.debug_tuple("ComparisonOperator::NotEqual").finish()
                        }
                        ComparisonOperator::LessThan => {
                            f.debug_tuple("ComparisonOperator::LessThan").finish()
                        }
                        ComparisonOperator::LessThanOrEqual => {
                            f.debug_tuple("ComparisonOperator::LessThanOrEqual").finish()
                        }
                        ComparisonOperator::GreaterThan => {
                            f.debug_tuple("ComparisonOperator::GreaterThan").finish()
                        }
                        ComparisonOperator::GreaterThanOrEqual => {
                            f.debug_tuple("ComparisonOperator::GreaterThanOrEqual")
                                .finish()
                        }
                        ComparisonOperator::Contains => {
                            f.debug_tuple("ComparisonOperator::Contains").finish()
                        }
                        ComparisonOperator::StartsWith => {
                            f.debug_tuple("ComparisonOperator::StartsWith").finish()
                        }
                        ComparisonOperator::EndsWith => {
                            f.debug_tuple("ComparisonOperator::EndsWith").finish()
                        }
                        ComparisonOperator::RegexMatch => {
                            f.debug_tuple("ComparisonOperator::RegexMatch").finish()
                        }
                        ComparisonOperator::InList => {
                            f.debug_tuple("ComparisonOperator::InList").finish()
                        }
                        ComparisonOperator::NotInList => {
                            f.debug_tuple("ComparisonOperator::NotInList").finish()
                        }
                    }
                }
            }
            impl ComparisonOperator {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> ComparisonOperator {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => ComparisonOperator::Equal,
                        1 => ComparisonOperator::NotEqual,
                        2 => ComparisonOperator::LessThan,
                        3 => ComparisonOperator::LessThanOrEqual,
                        4 => ComparisonOperator::GreaterThan,
                        5 => ComparisonOperator::GreaterThanOrEqual,
                        6 => ComparisonOperator::Contains,
                        7 => ComparisonOperator::StartsWith,
                        8 => ComparisonOperator::EndsWith,
                        9 => ComparisonOperator::RegexMatch,
                        10 => ComparisonOperator::InList,
                        11 => ComparisonOperator::NotInList,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            /// Filter condition for queries
            #[derive(Clone)]
            pub struct FilterCondition {
                pub property: _rt::String,
                pub operator: ComparisonOperator,
                pub value: PropertyValue,
            }
            impl ::core::fmt::Debug for FilterCondition {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("FilterCondition")
                        .field("property", &self.property)
                        .field("operator", &self.operator)
                        .field("value", &self.value)
                        .finish()
                }
            }
            /// Sort specification
            #[derive(Clone)]
            pub struct SortSpec {
                pub property: _rt::String,
                pub ascending: bool,
            }
            impl ::core::fmt::Debug for SortSpec {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("SortSpec")
                        .field("property", &self.property)
                        .field("ascending", &self.ascending)
                        .finish()
                }
            }
        }
        /// Error handling unified across all graph database providers
        #[allow(dead_code, clippy::all)]
        pub mod errors {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type ElementId = super::super::super::golem::graph::types::ElementId;
            /// Comprehensive error types that can represent failures across different graph databases
            #[derive(Clone)]
            pub enum GraphError {
                /// Feature/operation not supported by current provider
                UnsupportedOperation(_rt::String),
                /// Connection and authentication errors
                ConnectionFailed(_rt::String),
                AuthenticationFailed(_rt::String),
                AuthorizationFailed(_rt::String),
                /// Data and schema errors
                ElementNotFound(ElementId),
                DuplicateElement(ElementId),
                SchemaViolation(_rt::String),
                ConstraintViolation(_rt::String),
                InvalidPropertyType(_rt::String),
                InvalidQuery(_rt::String),
                /// Transaction errors
                TransactionFailed(_rt::String),
                TransactionConflict,
                TransactionTimeout,
                DeadlockDetected,
                /// System errors
                Timeout,
                ResourceExhausted(_rt::String),
                InternalError(_rt::String),
                ServiceUnavailable(_rt::String),
            }
            impl ::core::fmt::Debug for GraphError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        GraphError::UnsupportedOperation(e) => {
                            f.debug_tuple("GraphError::UnsupportedOperation")
                                .field(e)
                                .finish()
                        }
                        GraphError::ConnectionFailed(e) => {
                            f.debug_tuple("GraphError::ConnectionFailed")
                                .field(e)
                                .finish()
                        }
                        GraphError::AuthenticationFailed(e) => {
                            f.debug_tuple("GraphError::AuthenticationFailed")
                                .field(e)
                                .finish()
                        }
                        GraphError::AuthorizationFailed(e) => {
                            f.debug_tuple("GraphError::AuthorizationFailed")
                                .field(e)
                                .finish()
                        }
                        GraphError::ElementNotFound(e) => {
                            f.debug_tuple("GraphError::ElementNotFound")
                                .field(e)
                                .finish()
                        }
                        GraphError::DuplicateElement(e) => {
                            f.debug_tuple("GraphError::DuplicateElement")
                                .field(e)
                                .finish()
                        }
                        GraphError::SchemaViolation(e) => {
                            f.debug_tuple("GraphError::SchemaViolation")
                                .field(e)
                                .finish()
                        }
                        GraphError::ConstraintViolation(e) => {
                            f.debug_tuple("GraphError::ConstraintViolation")
                                .field(e)
                                .finish()
                        }
                        GraphError::InvalidPropertyType(e) => {
                            f.debug_tuple("GraphError::InvalidPropertyType")
                                .field(e)
                                .finish()
                        }
                        GraphError::InvalidQuery(e) => {
                            f.debug_tuple("GraphError::InvalidQuery").field(e).finish()
                        }
                        GraphError::TransactionFailed(e) => {
                            f.debug_tuple("GraphError::TransactionFailed")
                                .field(e)
                                .finish()
                        }
                        GraphError::TransactionConflict => {
                            f.debug_tuple("GraphError::TransactionConflict").finish()
                        }
                        GraphError::TransactionTimeout => {
                            f.debug_tuple("GraphError::TransactionTimeout").finish()
                        }
                        GraphError::DeadlockDetected => {
                            f.debug_tuple("GraphError::DeadlockDetected").finish()
                        }
                        GraphError::Timeout => {
                            f.debug_tuple("GraphError::Timeout").finish()
                        }
                        GraphError::ResourceExhausted(e) => {
                            f.debug_tuple("GraphError::ResourceExhausted")
                                .field(e)
                                .finish()
                        }
                        GraphError::InternalError(e) => {
                            f.debug_tuple("GraphError::InternalError").field(e).finish()
                        }
                        GraphError::ServiceUnavailable(e) => {
                            f.debug_tuple("GraphError::ServiceUnavailable")
                                .field(e)
                                .finish()
                        }
                    }
                }
            }
            impl ::core::fmt::Display for GraphError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }
            impl std::error::Error for GraphError {}
        }
        /// All graph operations performed within transaction contexts
        #[allow(dead_code, clippy::all)]
        pub mod transactions {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Vertex = super::super::super::golem::graph::types::Vertex;
            pub type Edge = super::super::super::golem::graph::types::Edge;
            pub type ElementId = super::super::super::golem::graph::types::ElementId;
            pub type PropertyMap = super::super::super::golem::graph::types::PropertyMap;
            pub type FilterCondition = super::super::super::golem::graph::types::FilterCondition;
            pub type SortSpec = super::super::super::golem::graph::types::SortSpec;
            pub type Direction = super::super::super::golem::graph::types::Direction;
            pub type GraphError = super::super::super::golem::graph::errors::GraphError;
            /// Transaction resource - all operations go through transactions
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Transaction {
                handle: _rt::Resource<Transaction>,
            }
            impl Transaction {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for Transaction {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:graph/transactions@1.0.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]transaction"]
                            fn drop(_: u32);
                        }
                        drop(_handle);
                    }
                }
            }
            /// Vertex specification for batch creation
            #[derive(Clone)]
            pub struct VertexSpec {
                pub vertex_type: _rt::String,
                pub additional_labels: Option<_rt::Vec<_rt::String>>,
                pub properties: PropertyMap,
            }
            impl ::core::fmt::Debug for VertexSpec {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("VertexSpec")
                        .field("vertex-type", &self.vertex_type)
                        .field("additional-labels", &self.additional_labels)
                        .field("properties", &self.properties)
                        .finish()
                }
            }
            /// Edge specification for batch creation
            #[derive(Clone)]
            pub struct EdgeSpec {
                pub edge_type: _rt::String,
                pub from_vertex: ElementId,
                pub to_vertex: ElementId,
                pub properties: PropertyMap,
            }
            impl ::core::fmt::Debug for EdgeSpec {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("EdgeSpec")
                        .field("edge-type", &self.edge_type)
                        .field("from-vertex", &self.from_vertex)
                        .field("to-vertex", &self.to_vertex)
                        .field("properties", &self.properties)
                        .finish()
                }
            }
            impl Transaction {
                #[allow(unused_unsafe, clippy::all)]
                /// === VERTEX OPERATIONS ===
                /// Create a new vertex
                pub fn create_vertex(
                    &self,
                    vertex_type: &str,
                    properties: &PropertyMap,
                ) -> Result<Vertex, GraphError> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 48]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 48],
                        );
                        let vec0 = vertex_type;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec22 = properties;
                        let len22 = vec22.len();
                        let layout22 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec22.len() * 48,
                            8,
                        );
                        let result22 = if layout22.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout22).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout22);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec22.into_iter().enumerate() {
                            let base = result22.add(i * 48);
                            {
                                let (t1_0, t1_1) = e;
                                let vec2 = t1_0;
                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                let len2 = vec2.len();
                                *base.add(4).cast::<usize>() = len2;
                                *base.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                                use super::super::super::golem::graph::types::PropertyValue as V21;
                                match t1_1 {
                                    V21::NullValue => {
                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                    }
                                    V21::Boolean(e) => {
                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                        *base.add(16).cast::<u8>() = (match e {
                                            true => 1,
                                            false => 0,
                                        }) as u8;
                                    }
                                    V21::Int8(e) => {
                                        *base.add(8).cast::<u8>() = (2i32) as u8;
                                        *base.add(16).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                    }
                                    V21::Int16(e) => {
                                        *base.add(8).cast::<u8>() = (3i32) as u8;
                                        *base.add(16).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                    }
                                    V21::Int32(e) => {
                                        *base.add(8).cast::<u8>() = (4i32) as u8;
                                        *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    V21::Int64(e) => {
                                        *base.add(8).cast::<u8>() = (5i32) as u8;
                                        *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    V21::Uint8(e) => {
                                        *base.add(8).cast::<u8>() = (6i32) as u8;
                                        *base.add(16).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                    }
                                    V21::Uint16(e) => {
                                        *base.add(8).cast::<u8>() = (7i32) as u8;
                                        *base.add(16).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                    }
                                    V21::Uint32(e) => {
                                        *base.add(8).cast::<u8>() = (8i32) as u8;
                                        *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    V21::Uint64(e) => {
                                        *base.add(8).cast::<u8>() = (9i32) as u8;
                                        *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    V21::Float32Value(e) => {
                                        *base.add(8).cast::<u8>() = (10i32) as u8;
                                        *base.add(16).cast::<f32>() = _rt::as_f32(e);
                                    }
                                    V21::Float64Value(e) => {
                                        *base.add(8).cast::<u8>() = (11i32) as u8;
                                        *base.add(16).cast::<f64>() = _rt::as_f64(e);
                                    }
                                    V21::StringValue(e) => {
                                        *base.add(8).cast::<u8>() = (12i32) as u8;
                                        let vec3 = e;
                                        let ptr3 = vec3.as_ptr().cast::<u8>();
                                        let len3 = vec3.len();
                                        *base.add(20).cast::<usize>() = len3;
                                        *base.add(16).cast::<*mut u8>() = ptr3.cast_mut();
                                    }
                                    V21::Bytes(e) => {
                                        *base.add(8).cast::<u8>() = (13i32) as u8;
                                        let vec4 = e;
                                        let ptr4 = vec4.as_ptr().cast::<u8>();
                                        let len4 = vec4.len();
                                        *base.add(20).cast::<usize>() = len4;
                                        *base.add(16).cast::<*mut u8>() = ptr4.cast_mut();
                                    }
                                    V21::Date(e) => {
                                        *base.add(8).cast::<u8>() = (14i32) as u8;
                                        let super::super::super::golem::graph::types::Date {
                                            year: year5,
                                            month: month5,
                                            day: day5,
                                        } = e;
                                        *base.add(16).cast::<i32>() = _rt::as_i32(year5);
                                        *base.add(20).cast::<u8>() = (_rt::as_i32(month5)) as u8;
                                        *base.add(21).cast::<u8>() = (_rt::as_i32(day5)) as u8;
                                    }
                                    V21::Time(e) => {
                                        *base.add(8).cast::<u8>() = (15i32) as u8;
                                        let super::super::super::golem::graph::types::Time {
                                            hour: hour6,
                                            minute: minute6,
                                            second: second6,
                                            nanosecond: nanosecond6,
                                        } = e;
                                        *base.add(16).cast::<u8>() = (_rt::as_i32(hour6)) as u8;
                                        *base.add(17).cast::<u8>() = (_rt::as_i32(minute6)) as u8;
                                        *base.add(18).cast::<u8>() = (_rt::as_i32(second6)) as u8;
                                        *base.add(20).cast::<i32>() = _rt::as_i32(nanosecond6);
                                    }
                                    V21::Datetime(e) => {
                                        *base.add(8).cast::<u8>() = (16i32) as u8;
                                        let super::super::super::golem::graph::types::Datetime {
                                            date: date7,
                                            time: time7,
                                            timezone_offset_minutes: timezone_offset_minutes7,
                                        } = e;
                                        let super::super::super::golem::graph::types::Date {
                                            year: year8,
                                            month: month8,
                                            day: day8,
                                        } = date7;
                                        *base.add(16).cast::<i32>() = _rt::as_i32(year8);
                                        *base.add(20).cast::<u8>() = (_rt::as_i32(month8)) as u8;
                                        *base.add(21).cast::<u8>() = (_rt::as_i32(day8)) as u8;
                                        let super::super::super::golem::graph::types::Time {
                                            hour: hour9,
                                            minute: minute9,
                                            second: second9,
                                            nanosecond: nanosecond9,
                                        } = time7;
                                        *base.add(24).cast::<u8>() = (_rt::as_i32(hour9)) as u8;
                                        *base.add(25).cast::<u8>() = (_rt::as_i32(minute9)) as u8;
                                        *base.add(26).cast::<u8>() = (_rt::as_i32(second9)) as u8;
                                        *base.add(28).cast::<i32>() = _rt::as_i32(nanosecond9);
                                        match timezone_offset_minutes7 {
                                            Some(e) => {
                                                *base.add(32).cast::<u8>() = (1i32) as u8;
                                                *base.add(34).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            None => {
                                                *base.add(32).cast::<u8>() = (0i32) as u8;
                                            }
                                        };
                                    }
                                    V21::Duration(e) => {
                                        *base.add(8).cast::<u8>() = (17i32) as u8;
                                        let super::super::super::golem::graph::types::Duration {
                                            seconds: seconds10,
                                            nanoseconds: nanoseconds10,
                                        } = e;
                                        *base.add(16).cast::<i64>() = _rt::as_i64(seconds10);
                                        *base.add(24).cast::<i32>() = _rt::as_i32(nanoseconds10);
                                    }
                                    V21::Point(e) => {
                                        *base.add(8).cast::<u8>() = (18i32) as u8;
                                        let super::super::super::golem::graph::types::Point {
                                            longitude: longitude11,
                                            latitude: latitude11,
                                            altitude: altitude11,
                                        } = e;
                                        *base.add(16).cast::<f64>() = _rt::as_f64(longitude11);
                                        *base.add(24).cast::<f64>() = _rt::as_f64(latitude11);
                                        match altitude11 {
                                            Some(e) => {
                                                *base.add(32).cast::<u8>() = (1i32) as u8;
                                                *base.add(40).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            None => {
                                                *base.add(32).cast::<u8>() = (0i32) as u8;
                                            }
                                        };
                                    }
                                    V21::Linestring(e) => {
                                        *base.add(8).cast::<u8>() = (19i32) as u8;
                                        let super::super::super::golem::graph::types::Linestring {
                                            coordinates: coordinates12,
                                        } = e;
                                        let vec14 = coordinates12;
                                        let len14 = vec14.len();
                                        let layout14 = _rt::alloc::Layout::from_size_align_unchecked(
                                            vec14.len() * 32,
                                            8,
                                        );
                                        let result14 = if layout14.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout14).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout14);
                                            }
                                            ptr
                                        } else {
                                            ::core::ptr::null_mut()
                                        };
                                        for (i, e) in vec14.into_iter().enumerate() {
                                            let base = result14.add(i * 32);
                                            {
                                                let super::super::super::golem::graph::types::Point {
                                                    longitude: longitude13,
                                                    latitude: latitude13,
                                                    altitude: altitude13,
                                                } = e;
                                                *base.add(0).cast::<f64>() = _rt::as_f64(longitude13);
                                                *base.add(8).cast::<f64>() = _rt::as_f64(latitude13);
                                                match altitude13 {
                                                    Some(e) => {
                                                        *base.add(16).cast::<u8>() = (1i32) as u8;
                                                        *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                    }
                                                    None => {
                                                        *base.add(16).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                        }
                                        *base.add(20).cast::<usize>() = len14;
                                        *base.add(16).cast::<*mut u8>() = result14;
                                        cleanup_list.extend_from_slice(&[(result14, layout14)]);
                                    }
                                    V21::Polygon(e) => {
                                        *base.add(8).cast::<u8>() = (20i32) as u8;
                                        let super::super::super::golem::graph::types::Polygon {
                                            exterior: exterior15,
                                            holes: holes15,
                                        } = e;
                                        let vec17 = exterior15;
                                        let len17 = vec17.len();
                                        let layout17 = _rt::alloc::Layout::from_size_align_unchecked(
                                            vec17.len() * 32,
                                            8,
                                        );
                                        let result17 = if layout17.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout17).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout17);
                                            }
                                            ptr
                                        } else {
                                            ::core::ptr::null_mut()
                                        };
                                        for (i, e) in vec17.into_iter().enumerate() {
                                            let base = result17.add(i * 32);
                                            {
                                                let super::super::super::golem::graph::types::Point {
                                                    longitude: longitude16,
                                                    latitude: latitude16,
                                                    altitude: altitude16,
                                                } = e;
                                                *base.add(0).cast::<f64>() = _rt::as_f64(longitude16);
                                                *base.add(8).cast::<f64>() = _rt::as_f64(latitude16);
                                                match altitude16 {
                                                    Some(e) => {
                                                        *base.add(16).cast::<u8>() = (1i32) as u8;
                                                        *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                    }
                                                    None => {
                                                        *base.add(16).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                        }
                                        *base.add(20).cast::<usize>() = len17;
                                        *base.add(16).cast::<*mut u8>() = result17;
                                        match holes15 {
                                            Some(e) => {
                                                *base.add(24).cast::<u8>() = (1i32) as u8;
                                                let vec20 = e;
                                                let len20 = vec20.len();
                                                let layout20 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec20.len() * 8,
                                                    4,
                                                );
                                                let result20 = if layout20.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout20).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout20);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec20.into_iter().enumerate() {
                                                    let base = result20.add(i * 8);
                                                    {
                                                        let vec19 = e;
                                                        let len19 = vec19.len();
                                                        let layout19 = _rt::alloc::Layout::from_size_align_unchecked(
                                                            vec19.len() * 32,
                                                            8,
                                                        );
                                                        let result19 = if layout19.size() != 0 {
                                                            let ptr = _rt::alloc::alloc(layout19).cast::<u8>();
                                                            if ptr.is_null() {
                                                                _rt::alloc::handle_alloc_error(layout19);
                                                            }
                                                            ptr
                                                        } else {
                                                            ::core::ptr::null_mut()
                                                        };
                                                        for (i, e) in vec19.into_iter().enumerate() {
                                                            let base = result19.add(i * 32);
                                                            {
                                                                let super::super::super::golem::graph::types::Point {
                                                                    longitude: longitude18,
                                                                    latitude: latitude18,
                                                                    altitude: altitude18,
                                                                } = e;
                                                                *base.add(0).cast::<f64>() = _rt::as_f64(longitude18);
                                                                *base.add(8).cast::<f64>() = _rt::as_f64(latitude18);
                                                                match altitude18 {
                                                                    Some(e) => {
                                                                        *base.add(16).cast::<u8>() = (1i32) as u8;
                                                                        *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                                    }
                                                                    None => {
                                                                        *base.add(16).cast::<u8>() = (0i32) as u8;
                                                                    }
                                                                };
                                                            }
                                                        }
                                                        *base.add(4).cast::<usize>() = len19;
                                                        *base.add(0).cast::<*mut u8>() = result19;
                                                        cleanup_list.extend_from_slice(&[(result19, layout19)]);
                                                    }
                                                }
                                                *base.add(32).cast::<usize>() = len20;
                                                *base.add(28).cast::<*mut u8>() = result20;
                                                cleanup_list.extend_from_slice(&[(result20, layout20)]);
                                            }
                                            None => {
                                                *base.add(24).cast::<u8>() = (0i32) as u8;
                                            }
                                        };
                                        cleanup_list.extend_from_slice(&[(result17, layout17)]);
                                    }
                                }
                            }
                        }
                        let ptr23 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:graph/transactions@1.0.0")]
                        extern "C" {
                            #[link_name = "[method]transaction.create-vertex"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            result22,
                            len22,
                            ptr23,
                        );
                        let l24 = i32::from(*ptr23.add(0).cast::<u8>());
                        if layout22.size() != 0 {
                            _rt::alloc::dealloc(result22.cast(), layout22);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l24 {
                            0 => {
                                let e = {
                                    let l25 = i32::from(*ptr23.add(8).cast::<u8>());
                                    use super::super::super::golem::graph::types::ElementId as V33;
                                    let v33 = match l25 {
                                        0 => {
                                            let e33 = {
                                                let l26 = *ptr23.add(16).cast::<*mut u8>();
                                                let l27 = *ptr23.add(20).cast::<usize>();
                                                let len28 = l27;
                                                let bytes28 = _rt::Vec::from_raw_parts(
                                                    l26.cast(),
                                                    len28,
                                                    len28,
                                                );
                                                _rt::string_lift(bytes28)
                                            };
                                            V33::StringValue(e33)
                                        }
                                        1 => {
                                            let e33 = {
                                                let l29 = *ptr23.add(16).cast::<i64>();
                                                l29
                                            };
                                            V33::Int64(e33)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 2, "invalid enum discriminant");
                                            let e33 = {
                                                let l30 = *ptr23.add(16).cast::<*mut u8>();
                                                let l31 = *ptr23.add(20).cast::<usize>();
                                                let len32 = l31;
                                                let bytes32 = _rt::Vec::from_raw_parts(
                                                    l30.cast(),
                                                    len32,
                                                    len32,
                                                );
                                                _rt::string_lift(bytes32)
                                            };
                                            V33::Uuid(e33)
                                        }
                                    };
                                    let l34 = *ptr23.add(24).cast::<*mut u8>();
                                    let l35 = *ptr23.add(28).cast::<usize>();
                                    let len36 = l35;
                                    let bytes36 = _rt::Vec::from_raw_parts(
                                        l34.cast(),
                                        len36,
                                        len36,
                                    );
                                    let l37 = *ptr23.add(32).cast::<*mut u8>();
                                    let l38 = *ptr23.add(36).cast::<usize>();
                                    let base42 = l37;
                                    let len42 = l38;
                                    let mut result42 = _rt::Vec::with_capacity(len42);
                                    for i in 0..len42 {
                                        let base = base42.add(i * 8);
                                        let e42 = {
                                            let l39 = *base.add(0).cast::<*mut u8>();
                                            let l40 = *base.add(4).cast::<usize>();
                                            let len41 = l40;
                                            let bytes41 = _rt::Vec::from_raw_parts(
                                                l39.cast(),
                                                len41,
                                                len41,
                                            );
                                            _rt::string_lift(bytes41)
                                        };
                                        result42.push(e42);
                                    }
                                    _rt::cabi_dealloc(base42, len42 * 8, 4);
                                    let l43 = *ptr23.add(40).cast::<*mut u8>();
                                    let l44 = *ptr23.add(44).cast::<usize>();
                                    let base114 = l43;
                                    let len114 = l44;
                                    let mut result114 = _rt::Vec::with_capacity(len114);
                                    for i in 0..len114 {
                                        let base = base114.add(i * 48);
                                        let e114 = {
                                            let l45 = *base.add(0).cast::<*mut u8>();
                                            let l46 = *base.add(4).cast::<usize>();
                                            let len47 = l46;
                                            let bytes47 = _rt::Vec::from_raw_parts(
                                                l45.cast(),
                                                len47,
                                                len47,
                                            );
                                            let l48 = i32::from(*base.add(8).cast::<u8>());
                                            use super::super::super::golem::graph::types::PropertyValue as V113;
                                            let v113 = match l48 {
                                                0 => V113::NullValue,
                                                1 => {
                                                    let e113 = {
                                                        let l49 = i32::from(*base.add(16).cast::<u8>());
                                                        _rt::bool_lift(l49 as u8)
                                                    };
                                                    V113::Boolean(e113)
                                                }
                                                2 => {
                                                    let e113 = {
                                                        let l50 = i32::from(*base.add(16).cast::<i8>());
                                                        l50 as i8
                                                    };
                                                    V113::Int8(e113)
                                                }
                                                3 => {
                                                    let e113 = {
                                                        let l51 = i32::from(*base.add(16).cast::<i16>());
                                                        l51 as i16
                                                    };
                                                    V113::Int16(e113)
                                                }
                                                4 => {
                                                    let e113 = {
                                                        let l52 = *base.add(16).cast::<i32>();
                                                        l52
                                                    };
                                                    V113::Int32(e113)
                                                }
                                                5 => {
                                                    let e113 = {
                                                        let l53 = *base.add(16).cast::<i64>();
                                                        l53
                                                    };
                                                    V113::Int64(e113)
                                                }
                                                6 => {
                                                    let e113 = {
                                                        let l54 = i32::from(*base.add(16).cast::<u8>());
                                                        l54 as u8
                                                    };
                                                    V113::Uint8(e113)
                                                }
                                                7 => {
                                                    let e113 = {
                                                        let l55 = i32::from(*base.add(16).cast::<u16>());
                                                        l55 as u16
                                                    };
                                                    V113::Uint16(e113)
                                                }
                                                8 => {
                                                    let e113 = {
                                                        let l56 = *base.add(16).cast::<i32>();
                                                        l56 as u32
                                                    };
                                                    V113::Uint32(e113)
                                                }
                                                9 => {
                                                    let e113 = {
                                                        let l57 = *base.add(16).cast::<i64>();
                                                        l57 as u64
                                                    };
                                                    V113::Uint64(e113)
                                                }
                                                10 => {
                                                    let e113 = {
                                                        let l58 = *base.add(16).cast::<f32>();
                                                        l58
                                                    };
                                                    V113::Float32Value(e113)
                                                }
                                                11 => {
                                                    let e113 = {
                                                        let l59 = *base.add(16).cast::<f64>();
                                                        l59
                                                    };
                                                    V113::Float64Value(e113)
                                                }
                                                12 => {
                                                    let e113 = {
                                                        let l60 = *base.add(16).cast::<*mut u8>();
                                                        let l61 = *base.add(20).cast::<usize>();
                                                        let len62 = l61;
                                                        let bytes62 = _rt::Vec::from_raw_parts(
                                                            l60.cast(),
                                                            len62,
                                                            len62,
                                                        );
                                                        _rt::string_lift(bytes62)
                                                    };
                                                    V113::StringValue(e113)
                                                }
                                                13 => {
                                                    let e113 = {
                                                        let l63 = *base.add(16).cast::<*mut u8>();
                                                        let l64 = *base.add(20).cast::<usize>();
                                                        let len65 = l64;
                                                        _rt::Vec::from_raw_parts(l63.cast(), len65, len65)
                                                    };
                                                    V113::Bytes(e113)
                                                }
                                                14 => {
                                                    let e113 = {
                                                        let l66 = *base.add(16).cast::<i32>();
                                                        let l67 = i32::from(*base.add(20).cast::<u8>());
                                                        let l68 = i32::from(*base.add(21).cast::<u8>());
                                                        super::super::super::golem::graph::types::Date {
                                                            year: l66 as u32,
                                                            month: l67 as u8,
                                                            day: l68 as u8,
                                                        }
                                                    };
                                                    V113::Date(e113)
                                                }
                                                15 => {
                                                    let e113 = {
                                                        let l69 = i32::from(*base.add(16).cast::<u8>());
                                                        let l70 = i32::from(*base.add(17).cast::<u8>());
                                                        let l71 = i32::from(*base.add(18).cast::<u8>());
                                                        let l72 = *base.add(20).cast::<i32>();
                                                        super::super::super::golem::graph::types::Time {
                                                            hour: l69 as u8,
                                                            minute: l70 as u8,
                                                            second: l71 as u8,
                                                            nanosecond: l72 as u32,
                                                        }
                                                    };
                                                    V113::Time(e113)
                                                }
                                                16 => {
                                                    let e113 = {
                                                        let l73 = *base.add(16).cast::<i32>();
                                                        let l74 = i32::from(*base.add(20).cast::<u8>());
                                                        let l75 = i32::from(*base.add(21).cast::<u8>());
                                                        let l76 = i32::from(*base.add(24).cast::<u8>());
                                                        let l77 = i32::from(*base.add(25).cast::<u8>());
                                                        let l78 = i32::from(*base.add(26).cast::<u8>());
                                                        let l79 = *base.add(28).cast::<i32>();
                                                        let l80 = i32::from(*base.add(32).cast::<u8>());
                                                        super::super::super::golem::graph::types::Datetime {
                                                            date: super::super::super::golem::graph::types::Date {
                                                                year: l73 as u32,
                                                                month: l74 as u8,
                                                                day: l75 as u8,
                                                            },
                                                            time: super::super::super::golem::graph::types::Time {
                                                                hour: l76 as u8,
                                                                minute: l77 as u8,
                                                                second: l78 as u8,
                                                                nanosecond: l79 as u32,
                                                            },
                                                            timezone_offset_minutes: match l80 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l81 = i32::from(*base.add(34).cast::<i16>());
                                                                        l81 as i16
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                        }
                                                    };
                                                    V113::Datetime(e113)
                                                }
                                                17 => {
                                                    let e113 = {
                                                        let l82 = *base.add(16).cast::<i64>();
                                                        let l83 = *base.add(24).cast::<i32>();
                                                        super::super::super::golem::graph::types::Duration {
                                                            seconds: l82,
                                                            nanoseconds: l83 as u32,
                                                        }
                                                    };
                                                    V113::Duration(e113)
                                                }
                                                18 => {
                                                    let e113 = {
                                                        let l84 = *base.add(16).cast::<f64>();
                                                        let l85 = *base.add(24).cast::<f64>();
                                                        let l86 = i32::from(*base.add(32).cast::<u8>());
                                                        super::super::super::golem::graph::types::Point {
                                                            longitude: l84,
                                                            latitude: l85,
                                                            altitude: match l86 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l87 = *base.add(40).cast::<f64>();
                                                                        l87
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                        }
                                                    };
                                                    V113::Point(e113)
                                                }
                                                19 => {
                                                    let e113 = {
                                                        let l88 = *base.add(16).cast::<*mut u8>();
                                                        let l89 = *base.add(20).cast::<usize>();
                                                        let base94 = l88;
                                                        let len94 = l89;
                                                        let mut result94 = _rt::Vec::with_capacity(len94);
                                                        for i in 0..len94 {
                                                            let base = base94.add(i * 32);
                                                            let e94 = {
                                                                let l90 = *base.add(0).cast::<f64>();
                                                                let l91 = *base.add(8).cast::<f64>();
                                                                let l92 = i32::from(*base.add(16).cast::<u8>());
                                                                super::super::super::golem::graph::types::Point {
                                                                    longitude: l90,
                                                                    latitude: l91,
                                                                    altitude: match l92 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l93 = *base.add(24).cast::<f64>();
                                                                                l93
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            result94.push(e94);
                                                        }
                                                        _rt::cabi_dealloc(base94, len94 * 32, 8);
                                                        super::super::super::golem::graph::types::Linestring {
                                                            coordinates: result94,
                                                        }
                                                    };
                                                    V113::Linestring(e113)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 20, "invalid enum discriminant");
                                                    let e113 = {
                                                        let l95 = *base.add(16).cast::<*mut u8>();
                                                        let l96 = *base.add(20).cast::<usize>();
                                                        let base101 = l95;
                                                        let len101 = l96;
                                                        let mut result101 = _rt::Vec::with_capacity(len101);
                                                        for i in 0..len101 {
                                                            let base = base101.add(i * 32);
                                                            let e101 = {
                                                                let l97 = *base.add(0).cast::<f64>();
                                                                let l98 = *base.add(8).cast::<f64>();
                                                                let l99 = i32::from(*base.add(16).cast::<u8>());
                                                                super::super::super::golem::graph::types::Point {
                                                                    longitude: l97,
                                                                    latitude: l98,
                                                                    altitude: match l99 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l100 = *base.add(24).cast::<f64>();
                                                                                l100
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            result101.push(e101);
                                                        }
                                                        _rt::cabi_dealloc(base101, len101 * 32, 8);
                                                        let l102 = i32::from(*base.add(24).cast::<u8>());
                                                        super::super::super::golem::graph::types::Polygon {
                                                            exterior: result101,
                                                            holes: match l102 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l103 = *base.add(28).cast::<*mut u8>();
                                                                        let l104 = *base.add(32).cast::<usize>();
                                                                        let base112 = l103;
                                                                        let len112 = l104;
                                                                        let mut result112 = _rt::Vec::with_capacity(len112);
                                                                        for i in 0..len112 {
                                                                            let base = base112.add(i * 8);
                                                                            let e112 = {
                                                                                let l105 = *base.add(0).cast::<*mut u8>();
                                                                                let l106 = *base.add(4).cast::<usize>();
                                                                                let base111 = l105;
                                                                                let len111 = l106;
                                                                                let mut result111 = _rt::Vec::with_capacity(len111);
                                                                                for i in 0..len111 {
                                                                                    let base = base111.add(i * 32);
                                                                                    let e111 = {
                                                                                        let l107 = *base.add(0).cast::<f64>();
                                                                                        let l108 = *base.add(8).cast::<f64>();
                                                                                        let l109 = i32::from(*base.add(16).cast::<u8>());
                                                                                        super::super::super::golem::graph::types::Point {
                                                                                            longitude: l107,
                                                                                            latitude: l108,
                                                                                            altitude: match l109 {
                                                                                                0 => None,
                                                                                                1 => {
                                                                                                    let e = {
                                                                                                        let l110 = *base.add(24).cast::<f64>();
                                                                                                        l110
                                                                                                    };
                                                                                                    Some(e)
                                                                                                }
                                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                                            },
                                                                                        }
                                                                                    };
                                                                                    result111.push(e111);
                                                                                }
                                                                                _rt::cabi_dealloc(base111, len111 * 32, 8);
                                                                                result111
                                                                            };
                                                                            result112.push(e112);
                                                                        }
                                                                        _rt::cabi_dealloc(base112, len112 * 8, 4);
                                                                        result112
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                        }
                                                    };
                                                    V113::Polygon(e113)
                                                }
                                            };
                                            (_rt::string_lift(bytes47), v113)
                                        };
                                        result114.push(e114);
                                    }
                                    _rt::cabi_dealloc(base114, len114 * 48, 8);
                                    super::super::super::golem::graph::types::Vertex {
                                        id: v33,
                                        vertex_type: _rt::string_lift(bytes36),
                                        additional_labels: result42,
                                        properties: result114,
                                    }
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l115 = i32::from(*ptr23.add(8).cast::<u8>());
                                    use super::super::super::golem::graph::errors::GraphError as V170;
                                    let v170 = match l115 {
                                        0 => {
                                            let e170 = {
                                                let l116 = *ptr23.add(16).cast::<*mut u8>();
                                                let l117 = *ptr23.add(20).cast::<usize>();
                                                let len118 = l117;
                                                let bytes118 = _rt::Vec::from_raw_parts(
                                                    l116.cast(),
                                                    len118,
                                                    len118,
                                                );
                                                _rt::string_lift(bytes118)
                                            };
                                            V170::UnsupportedOperation(e170)
                                        }
                                        1 => {
                                            let e170 = {
                                                let l119 = *ptr23.add(16).cast::<*mut u8>();
                                                let l120 = *ptr23.add(20).cast::<usize>();
                                                let len121 = l120;
                                                let bytes121 = _rt::Vec::from_raw_parts(
                                                    l119.cast(),
                                                    len121,
                                                    len121,
                                                );
                                                _rt::string_lift(bytes121)
                                            };
                                            V170::ConnectionFailed(e170)
                                        }
                                        2 => {
                                            let e170 = {
                                                let l122 = *ptr23.add(16).cast::<*mut u8>();
                                                let l123 = *ptr23.add(20).cast::<usize>();
                                                let len124 = l123;
                                                let bytes124 = _rt::Vec::from_raw_parts(
                                                    l122.cast(),
                                                    len124,
                                                    len124,
                                                );
                                                _rt::string_lift(bytes124)
                                            };
                                            V170::AuthenticationFailed(e170)
                                        }
                                        3 => {
                                            let e170 = {
                                                let l125 = *ptr23.add(16).cast::<*mut u8>();
                                                let l126 = *ptr23.add(20).cast::<usize>();
                                                let len127 = l126;
                                                let bytes127 = _rt::Vec::from_raw_parts(
                                                    l125.cast(),
                                                    len127,
                                                    len127,
                                                );
                                                _rt::string_lift(bytes127)
                                            };
                                            V170::AuthorizationFailed(e170)
                                        }
                                        4 => {
                                            let e170 = {
                                                let l128 = i32::from(*ptr23.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V136;
                                                let v136 = match l128 {
                                                    0 => {
                                                        let e136 = {
                                                            let l129 = *ptr23.add(24).cast::<*mut u8>();
                                                            let l130 = *ptr23.add(28).cast::<usize>();
                                                            let len131 = l130;
                                                            let bytes131 = _rt::Vec::from_raw_parts(
                                                                l129.cast(),
                                                                len131,
                                                                len131,
                                                            );
                                                            _rt::string_lift(bytes131)
                                                        };
                                                        V136::StringValue(e136)
                                                    }
                                                    1 => {
                                                        let e136 = {
                                                            let l132 = *ptr23.add(24).cast::<i64>();
                                                            l132
                                                        };
                                                        V136::Int64(e136)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e136 = {
                                                            let l133 = *ptr23.add(24).cast::<*mut u8>();
                                                            let l134 = *ptr23.add(28).cast::<usize>();
                                                            let len135 = l134;
                                                            let bytes135 = _rt::Vec::from_raw_parts(
                                                                l133.cast(),
                                                                len135,
                                                                len135,
                                                            );
                                                            _rt::string_lift(bytes135)
                                                        };
                                                        V136::Uuid(e136)
                                                    }
                                                };
                                                v136
                                            };
                                            V170::ElementNotFound(e170)
                                        }
                                        5 => {
                                            let e170 = {
                                                let l137 = i32::from(*ptr23.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V145;
                                                let v145 = match l137 {
                                                    0 => {
                                                        let e145 = {
                                                            let l138 = *ptr23.add(24).cast::<*mut u8>();
                                                            let l139 = *ptr23.add(28).cast::<usize>();
                                                            let len140 = l139;
                                                            let bytes140 = _rt::Vec::from_raw_parts(
                                                                l138.cast(),
                                                                len140,
                                                                len140,
                                                            );
                                                            _rt::string_lift(bytes140)
                                                        };
                                                        V145::StringValue(e145)
                                                    }
                                                    1 => {
                                                        let e145 = {
                                                            let l141 = *ptr23.add(24).cast::<i64>();
                                                            l141
                                                        };
                                                        V145::Int64(e145)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e145 = {
                                                            let l142 = *ptr23.add(24).cast::<*mut u8>();
                                                            let l143 = *ptr23.add(28).cast::<usize>();
                                                            let len144 = l143;
                                                            let bytes144 = _rt::Vec::from_raw_parts(
                                                                l142.cast(),
                                                                len144,
                                                                len144,
                                                            );
                                                            _rt::string_lift(bytes144)
                                                        };
                                                        V145::Uuid(e145)
                                                    }
                                                };
                                                v145
                                            };
                                            V170::DuplicateElement(e170)
                                        }
                                        6 => {
                                            let e170 = {
                                                let l146 = *ptr23.add(16).cast::<*mut u8>();
                                                let l147 = *ptr23.add(20).cast::<usize>();
                                                let len148 = l147;
                                                let bytes148 = _rt::Vec::from_raw_parts(
                                                    l146.cast(),
                                                    len148,
                                                    len148,
                                                );
                                                _rt::string_lift(bytes148)
                                            };
                                            V170::SchemaViolation(e170)
                                        }
                                        7 => {
                                            let e170 = {
                                                let l149 = *ptr23.add(16).cast::<*mut u8>();
                                                let l150 = *ptr23.add(20).cast::<usize>();
                                                let len151 = l150;
                                                let bytes151 = _rt::Vec::from_raw_parts(
                                                    l149.cast(),
                                                    len151,
                                                    len151,
                                                );
                                                _rt::string_lift(bytes151)
                                            };
                                            V170::ConstraintViolation(e170)
                                        }
                                        8 => {
                                            let e170 = {
                                                let l152 = *ptr23.add(16).cast::<*mut u8>();
                                                let l153 = *ptr23.add(20).cast::<usize>();
                                                let len154 = l153;
                                                let bytes154 = _rt::Vec::from_raw_parts(
                                                    l152.cast(),
                                                    len154,
                                                    len154,
                                                );
                                                _rt::string_lift(bytes154)
                                            };
                                            V170::InvalidPropertyType(e170)
                                        }
                                        9 => {
                                            let e170 = {
                                                let l155 = *ptr23.add(16).cast::<*mut u8>();
                                                let l156 = *ptr23.add(20).cast::<usize>();
                                                let len157 = l156;
                                                let bytes157 = _rt::Vec::from_raw_parts(
                                                    l155.cast(),
                                                    len157,
                                                    len157,
                                                );
                                                _rt::string_lift(bytes157)
                                            };
                                            V170::InvalidQuery(e170)
                                        }
                                        10 => {
                                            let e170 = {
                                                let l158 = *ptr23.add(16).cast::<*mut u8>();
                                                let l159 = *ptr23.add(20).cast::<usize>();
                                                let len160 = l159;
                                                let bytes160 = _rt::Vec::from_raw_parts(
                                                    l158.cast(),
                                                    len160,
                                                    len160,
                                                );
                                                _rt::string_lift(bytes160)
                                            };
                                            V170::TransactionFailed(e170)
                                        }
                                        11 => V170::TransactionConflict,
                                        12 => V170::TransactionTimeout,
                                        13 => V170::DeadlockDetected,
                                        14 => V170::Timeout,
                                        15 => {
                                            let e170 = {
                                                let l161 = *ptr23.add(16).cast::<*mut u8>();
                                                let l162 = *ptr23.add(20).cast::<usize>();
                                                let len163 = l162;
                                                let bytes163 = _rt::Vec::from_raw_parts(
                                                    l161.cast(),
                                                    len163,
                                                    len163,
                                                );
                                                _rt::string_lift(bytes163)
                                            };
                                            V170::ResourceExhausted(e170)
                                        }
                                        16 => {
                                            let e170 = {
                                                let l164 = *ptr23.add(16).cast::<*mut u8>();
                                                let l165 = *ptr23.add(20).cast::<usize>();
                                                let len166 = l165;
                                                let bytes166 = _rt::Vec::from_raw_parts(
                                                    l164.cast(),
                                                    len166,
                                                    len166,
                                                );
                                                _rt::string_lift(bytes166)
                                            };
                                            V170::InternalError(e170)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 17, "invalid enum discriminant");
                                            let e170 = {
                                                let l167 = *ptr23.add(16).cast::<*mut u8>();
                                                let l168 = *ptr23.add(20).cast::<usize>();
                                                let len169 = l168;
                                                let bytes169 = _rt::Vec::from_raw_parts(
                                                    l167.cast(),
                                                    len169,
                                                    len169,
                                                );
                                                _rt::string_lift(bytes169)
                                            };
                                            V170::ServiceUnavailable(e170)
                                        }
                                    };
                                    v170
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Transaction {
                #[allow(unused_unsafe, clippy::all)]
                /// Create vertex with additional labels (for multi-label systems like neo4j)
                pub fn create_vertex_with_labels(
                    &self,
                    vertex_type: &str,
                    additional_labels: &[_rt::String],
                    properties: &PropertyMap,
                ) -> Result<Vertex, GraphError> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 48]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 48],
                        );
                        let vec0 = vertex_type;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec2 = additional_labels;
                        let len2 = vec2.len();
                        let layout2 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec2.len() * 8,
                            4,
                        );
                        let result2 = if layout2.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout2).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout2);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec2.into_iter().enumerate() {
                            let base = result2.add(i * 8);
                            {
                                let vec1 = e;
                                let ptr1 = vec1.as_ptr().cast::<u8>();
                                let len1 = vec1.len();
                                *base.add(4).cast::<usize>() = len1;
                                *base.add(0).cast::<*mut u8>() = ptr1.cast_mut();
                            }
                        }
                        let vec24 = properties;
                        let len24 = vec24.len();
                        let layout24 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec24.len() * 48,
                            8,
                        );
                        let result24 = if layout24.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout24).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout24);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec24.into_iter().enumerate() {
                            let base = result24.add(i * 48);
                            {
                                let (t3_0, t3_1) = e;
                                let vec4 = t3_0;
                                let ptr4 = vec4.as_ptr().cast::<u8>();
                                let len4 = vec4.len();
                                *base.add(4).cast::<usize>() = len4;
                                *base.add(0).cast::<*mut u8>() = ptr4.cast_mut();
                                use super::super::super::golem::graph::types::PropertyValue as V23;
                                match t3_1 {
                                    V23::NullValue => {
                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                    }
                                    V23::Boolean(e) => {
                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                        *base.add(16).cast::<u8>() = (match e {
                                            true => 1,
                                            false => 0,
                                        }) as u8;
                                    }
                                    V23::Int8(e) => {
                                        *base.add(8).cast::<u8>() = (2i32) as u8;
                                        *base.add(16).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                    }
                                    V23::Int16(e) => {
                                        *base.add(8).cast::<u8>() = (3i32) as u8;
                                        *base.add(16).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                    }
                                    V23::Int32(e) => {
                                        *base.add(8).cast::<u8>() = (4i32) as u8;
                                        *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    V23::Int64(e) => {
                                        *base.add(8).cast::<u8>() = (5i32) as u8;
                                        *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    V23::Uint8(e) => {
                                        *base.add(8).cast::<u8>() = (6i32) as u8;
                                        *base.add(16).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                    }
                                    V23::Uint16(e) => {
                                        *base.add(8).cast::<u8>() = (7i32) as u8;
                                        *base.add(16).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                    }
                                    V23::Uint32(e) => {
                                        *base.add(8).cast::<u8>() = (8i32) as u8;
                                        *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    V23::Uint64(e) => {
                                        *base.add(8).cast::<u8>() = (9i32) as u8;
                                        *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    V23::Float32Value(e) => {
                                        *base.add(8).cast::<u8>() = (10i32) as u8;
                                        *base.add(16).cast::<f32>() = _rt::as_f32(e);
                                    }
                                    V23::Float64Value(e) => {
                                        *base.add(8).cast::<u8>() = (11i32) as u8;
                                        *base.add(16).cast::<f64>() = _rt::as_f64(e);
                                    }
                                    V23::StringValue(e) => {
                                        *base.add(8).cast::<u8>() = (12i32) as u8;
                                        let vec5 = e;
                                        let ptr5 = vec5.as_ptr().cast::<u8>();
                                        let len5 = vec5.len();
                                        *base.add(20).cast::<usize>() = len5;
                                        *base.add(16).cast::<*mut u8>() = ptr5.cast_mut();
                                    }
                                    V23::Bytes(e) => {
                                        *base.add(8).cast::<u8>() = (13i32) as u8;
                                        let vec6 = e;
                                        let ptr6 = vec6.as_ptr().cast::<u8>();
                                        let len6 = vec6.len();
                                        *base.add(20).cast::<usize>() = len6;
                                        *base.add(16).cast::<*mut u8>() = ptr6.cast_mut();
                                    }
                                    V23::Date(e) => {
                                        *base.add(8).cast::<u8>() = (14i32) as u8;
                                        let super::super::super::golem::graph::types::Date {
                                            year: year7,
                                            month: month7,
                                            day: day7,
                                        } = e;
                                        *base.add(16).cast::<i32>() = _rt::as_i32(year7);
                                        *base.add(20).cast::<u8>() = (_rt::as_i32(month7)) as u8;
                                        *base.add(21).cast::<u8>() = (_rt::as_i32(day7)) as u8;
                                    }
                                    V23::Time(e) => {
                                        *base.add(8).cast::<u8>() = (15i32) as u8;
                                        let super::super::super::golem::graph::types::Time {
                                            hour: hour8,
                                            minute: minute8,
                                            second: second8,
                                            nanosecond: nanosecond8,
                                        } = e;
                                        *base.add(16).cast::<u8>() = (_rt::as_i32(hour8)) as u8;
                                        *base.add(17).cast::<u8>() = (_rt::as_i32(minute8)) as u8;
                                        *base.add(18).cast::<u8>() = (_rt::as_i32(second8)) as u8;
                                        *base.add(20).cast::<i32>() = _rt::as_i32(nanosecond8);
                                    }
                                    V23::Datetime(e) => {
                                        *base.add(8).cast::<u8>() = (16i32) as u8;
                                        let super::super::super::golem::graph::types::Datetime {
                                            date: date9,
                                            time: time9,
                                            timezone_offset_minutes: timezone_offset_minutes9,
                                        } = e;
                                        let super::super::super::golem::graph::types::Date {
                                            year: year10,
                                            month: month10,
                                            day: day10,
                                        } = date9;
                                        *base.add(16).cast::<i32>() = _rt::as_i32(year10);
                                        *base.add(20).cast::<u8>() = (_rt::as_i32(month10)) as u8;
                                        *base.add(21).cast::<u8>() = (_rt::as_i32(day10)) as u8;
                                        let super::super::super::golem::graph::types::Time {
                                            hour: hour11,
                                            minute: minute11,
                                            second: second11,
                                            nanosecond: nanosecond11,
                                        } = time9;
                                        *base.add(24).cast::<u8>() = (_rt::as_i32(hour11)) as u8;
                                        *base.add(25).cast::<u8>() = (_rt::as_i32(minute11)) as u8;
                                        *base.add(26).cast::<u8>() = (_rt::as_i32(second11)) as u8;
                                        *base.add(28).cast::<i32>() = _rt::as_i32(nanosecond11);
                                        match timezone_offset_minutes9 {
                                            Some(e) => {
                                                *base.add(32).cast::<u8>() = (1i32) as u8;
                                                *base.add(34).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            None => {
                                                *base.add(32).cast::<u8>() = (0i32) as u8;
                                            }
                                        };
                                    }
                                    V23::Duration(e) => {
                                        *base.add(8).cast::<u8>() = (17i32) as u8;
                                        let super::super::super::golem::graph::types::Duration {
                                            seconds: seconds12,
                                            nanoseconds: nanoseconds12,
                                        } = e;
                                        *base.add(16).cast::<i64>() = _rt::as_i64(seconds12);
                                        *base.add(24).cast::<i32>() = _rt::as_i32(nanoseconds12);
                                    }
                                    V23::Point(e) => {
                                        *base.add(8).cast::<u8>() = (18i32) as u8;
                                        let super::super::super::golem::graph::types::Point {
                                            longitude: longitude13,
                                            latitude: latitude13,
                                            altitude: altitude13,
                                        } = e;
                                        *base.add(16).cast::<f64>() = _rt::as_f64(longitude13);
                                        *base.add(24).cast::<f64>() = _rt::as_f64(latitude13);
                                        match altitude13 {
                                            Some(e) => {
                                                *base.add(32).cast::<u8>() = (1i32) as u8;
                                                *base.add(40).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            None => {
                                                *base.add(32).cast::<u8>() = (0i32) as u8;
                                            }
                                        };
                                    }
                                    V23::Linestring(e) => {
                                        *base.add(8).cast::<u8>() = (19i32) as u8;
                                        let super::super::super::golem::graph::types::Linestring {
                                            coordinates: coordinates14,
                                        } = e;
                                        let vec16 = coordinates14;
                                        let len16 = vec16.len();
                                        let layout16 = _rt::alloc::Layout::from_size_align_unchecked(
                                            vec16.len() * 32,
                                            8,
                                        );
                                        let result16 = if layout16.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout16).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout16);
                                            }
                                            ptr
                                        } else {
                                            ::core::ptr::null_mut()
                                        };
                                        for (i, e) in vec16.into_iter().enumerate() {
                                            let base = result16.add(i * 32);
                                            {
                                                let super::super::super::golem::graph::types::Point {
                                                    longitude: longitude15,
                                                    latitude: latitude15,
                                                    altitude: altitude15,
                                                } = e;
                                                *base.add(0).cast::<f64>() = _rt::as_f64(longitude15);
                                                *base.add(8).cast::<f64>() = _rt::as_f64(latitude15);
                                                match altitude15 {
                                                    Some(e) => {
                                                        *base.add(16).cast::<u8>() = (1i32) as u8;
                                                        *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                    }
                                                    None => {
                                                        *base.add(16).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                        }
                                        *base.add(20).cast::<usize>() = len16;
                                        *base.add(16).cast::<*mut u8>() = result16;
                                        cleanup_list.extend_from_slice(&[(result16, layout16)]);
                                    }
                                    V23::Polygon(e) => {
                                        *base.add(8).cast::<u8>() = (20i32) as u8;
                                        let super::super::super::golem::graph::types::Polygon {
                                            exterior: exterior17,
                                            holes: holes17,
                                        } = e;
                                        let vec19 = exterior17;
                                        let len19 = vec19.len();
                                        let layout19 = _rt::alloc::Layout::from_size_align_unchecked(
                                            vec19.len() * 32,
                                            8,
                                        );
                                        let result19 = if layout19.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout19).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout19);
                                            }
                                            ptr
                                        } else {
                                            ::core::ptr::null_mut()
                                        };
                                        for (i, e) in vec19.into_iter().enumerate() {
                                            let base = result19.add(i * 32);
                                            {
                                                let super::super::super::golem::graph::types::Point {
                                                    longitude: longitude18,
                                                    latitude: latitude18,
                                                    altitude: altitude18,
                                                } = e;
                                                *base.add(0).cast::<f64>() = _rt::as_f64(longitude18);
                                                *base.add(8).cast::<f64>() = _rt::as_f64(latitude18);
                                                match altitude18 {
                                                    Some(e) => {
                                                        *base.add(16).cast::<u8>() = (1i32) as u8;
                                                        *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                    }
                                                    None => {
                                                        *base.add(16).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                        }
                                        *base.add(20).cast::<usize>() = len19;
                                        *base.add(16).cast::<*mut u8>() = result19;
                                        match holes17 {
                                            Some(e) => {
                                                *base.add(24).cast::<u8>() = (1i32) as u8;
                                                let vec22 = e;
                                                let len22 = vec22.len();
                                                let layout22 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec22.len() * 8,
                                                    4,
                                                );
                                                let result22 = if layout22.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout22).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout22);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec22.into_iter().enumerate() {
                                                    let base = result22.add(i * 8);
                                                    {
                                                        let vec21 = e;
                                                        let len21 = vec21.len();
                                                        let layout21 = _rt::alloc::Layout::from_size_align_unchecked(
                                                            vec21.len() * 32,
                                                            8,
                                                        );
                                                        let result21 = if layout21.size() != 0 {
                                                            let ptr = _rt::alloc::alloc(layout21).cast::<u8>();
                                                            if ptr.is_null() {
                                                                _rt::alloc::handle_alloc_error(layout21);
                                                            }
                                                            ptr
                                                        } else {
                                                            ::core::ptr::null_mut()
                                                        };
                                                        for (i, e) in vec21.into_iter().enumerate() {
                                                            let base = result21.add(i * 32);
                                                            {
                                                                let super::super::super::golem::graph::types::Point {
                                                                    longitude: longitude20,
                                                                    latitude: latitude20,
                                                                    altitude: altitude20,
                                                                } = e;
                                                                *base.add(0).cast::<f64>() = _rt::as_f64(longitude20);
                                                                *base.add(8).cast::<f64>() = _rt::as_f64(latitude20);
                                                                match altitude20 {
                                                                    Some(e) => {
                                                                        *base.add(16).cast::<u8>() = (1i32) as u8;
                                                                        *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                                    }
                                                                    None => {
                                                                        *base.add(16).cast::<u8>() = (0i32) as u8;
                                                                    }
                                                                };
                                                            }
                                                        }
                                                        *base.add(4).cast::<usize>() = len21;
                                                        *base.add(0).cast::<*mut u8>() = result21;
                                                        cleanup_list.extend_from_slice(&[(result21, layout21)]);
                                                    }
                                                }
                                                *base.add(32).cast::<usize>() = len22;
                                                *base.add(28).cast::<*mut u8>() = result22;
                                                cleanup_list.extend_from_slice(&[(result22, layout22)]);
                                            }
                                            None => {
                                                *base.add(24).cast::<u8>() = (0i32) as u8;
                                            }
                                        };
                                        cleanup_list.extend_from_slice(&[(result19, layout19)]);
                                    }
                                }
                            }
                        }
                        let ptr25 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:graph/transactions@1.0.0")]
                        extern "C" {
                            #[link_name = "[method]transaction.create-vertex-with-labels"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            result2,
                            len2,
                            result24,
                            len24,
                            ptr25,
                        );
                        let l26 = i32::from(*ptr25.add(0).cast::<u8>());
                        if layout2.size() != 0 {
                            _rt::alloc::dealloc(result2.cast(), layout2);
                        }
                        if layout24.size() != 0 {
                            _rt::alloc::dealloc(result24.cast(), layout24);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l26 {
                            0 => {
                                let e = {
                                    let l27 = i32::from(*ptr25.add(8).cast::<u8>());
                                    use super::super::super::golem::graph::types::ElementId as V35;
                                    let v35 = match l27 {
                                        0 => {
                                            let e35 = {
                                                let l28 = *ptr25.add(16).cast::<*mut u8>();
                                                let l29 = *ptr25.add(20).cast::<usize>();
                                                let len30 = l29;
                                                let bytes30 = _rt::Vec::from_raw_parts(
                                                    l28.cast(),
                                                    len30,
                                                    len30,
                                                );
                                                _rt::string_lift(bytes30)
                                            };
                                            V35::StringValue(e35)
                                        }
                                        1 => {
                                            let e35 = {
                                                let l31 = *ptr25.add(16).cast::<i64>();
                                                l31
                                            };
                                            V35::Int64(e35)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 2, "invalid enum discriminant");
                                            let e35 = {
                                                let l32 = *ptr25.add(16).cast::<*mut u8>();
                                                let l33 = *ptr25.add(20).cast::<usize>();
                                                let len34 = l33;
                                                let bytes34 = _rt::Vec::from_raw_parts(
                                                    l32.cast(),
                                                    len34,
                                                    len34,
                                                );
                                                _rt::string_lift(bytes34)
                                            };
                                            V35::Uuid(e35)
                                        }
                                    };
                                    let l36 = *ptr25.add(24).cast::<*mut u8>();
                                    let l37 = *ptr25.add(28).cast::<usize>();
                                    let len38 = l37;
                                    let bytes38 = _rt::Vec::from_raw_parts(
                                        l36.cast(),
                                        len38,
                                        len38,
                                    );
                                    let l39 = *ptr25.add(32).cast::<*mut u8>();
                                    let l40 = *ptr25.add(36).cast::<usize>();
                                    let base44 = l39;
                                    let len44 = l40;
                                    let mut result44 = _rt::Vec::with_capacity(len44);
                                    for i in 0..len44 {
                                        let base = base44.add(i * 8);
                                        let e44 = {
                                            let l41 = *base.add(0).cast::<*mut u8>();
                                            let l42 = *base.add(4).cast::<usize>();
                                            let len43 = l42;
                                            let bytes43 = _rt::Vec::from_raw_parts(
                                                l41.cast(),
                                                len43,
                                                len43,
                                            );
                                            _rt::string_lift(bytes43)
                                        };
                                        result44.push(e44);
                                    }
                                    _rt::cabi_dealloc(base44, len44 * 8, 4);
                                    let l45 = *ptr25.add(40).cast::<*mut u8>();
                                    let l46 = *ptr25.add(44).cast::<usize>();
                                    let base116 = l45;
                                    let len116 = l46;
                                    let mut result116 = _rt::Vec::with_capacity(len116);
                                    for i in 0..len116 {
                                        let base = base116.add(i * 48);
                                        let e116 = {
                                            let l47 = *base.add(0).cast::<*mut u8>();
                                            let l48 = *base.add(4).cast::<usize>();
                                            let len49 = l48;
                                            let bytes49 = _rt::Vec::from_raw_parts(
                                                l47.cast(),
                                                len49,
                                                len49,
                                            );
                                            let l50 = i32::from(*base.add(8).cast::<u8>());
                                            use super::super::super::golem::graph::types::PropertyValue as V115;
                                            let v115 = match l50 {
                                                0 => V115::NullValue,
                                                1 => {
                                                    let e115 = {
                                                        let l51 = i32::from(*base.add(16).cast::<u8>());
                                                        _rt::bool_lift(l51 as u8)
                                                    };
                                                    V115::Boolean(e115)
                                                }
                                                2 => {
                                                    let e115 = {
                                                        let l52 = i32::from(*base.add(16).cast::<i8>());
                                                        l52 as i8
                                                    };
                                                    V115::Int8(e115)
                                                }
                                                3 => {
                                                    let e115 = {
                                                        let l53 = i32::from(*base.add(16).cast::<i16>());
                                                        l53 as i16
                                                    };
                                                    V115::Int16(e115)
                                                }
                                                4 => {
                                                    let e115 = {
                                                        let l54 = *base.add(16).cast::<i32>();
                                                        l54
                                                    };
                                                    V115::Int32(e115)
                                                }
                                                5 => {
                                                    let e115 = {
                                                        let l55 = *base.add(16).cast::<i64>();
                                                        l55
                                                    };
                                                    V115::Int64(e115)
                                                }
                                                6 => {
                                                    let e115 = {
                                                        let l56 = i32::from(*base.add(16).cast::<u8>());
                                                        l56 as u8
                                                    };
                                                    V115::Uint8(e115)
                                                }
                                                7 => {
                                                    let e115 = {
                                                        let l57 = i32::from(*base.add(16).cast::<u16>());
                                                        l57 as u16
                                                    };
                                                    V115::Uint16(e115)
                                                }
                                                8 => {
                                                    let e115 = {
                                                        let l58 = *base.add(16).cast::<i32>();
                                                        l58 as u32
                                                    };
                                                    V115::Uint32(e115)
                                                }
                                                9 => {
                                                    let e115 = {
                                                        let l59 = *base.add(16).cast::<i64>();
                                                        l59 as u64
                                                    };
                                                    V115::Uint64(e115)
                                                }
                                                10 => {
                                                    let e115 = {
                                                        let l60 = *base.add(16).cast::<f32>();
                                                        l60
                                                    };
                                                    V115::Float32Value(e115)
                                                }
                                                11 => {
                                                    let e115 = {
                                                        let l61 = *base.add(16).cast::<f64>();
                                                        l61
                                                    };
                                                    V115::Float64Value(e115)
                                                }
                                                12 => {
                                                    let e115 = {
                                                        let l62 = *base.add(16).cast::<*mut u8>();
                                                        let l63 = *base.add(20).cast::<usize>();
                                                        let len64 = l63;
                                                        let bytes64 = _rt::Vec::from_raw_parts(
                                                            l62.cast(),
                                                            len64,
                                                            len64,
                                                        );
                                                        _rt::string_lift(bytes64)
                                                    };
                                                    V115::StringValue(e115)
                                                }
                                                13 => {
                                                    let e115 = {
                                                        let l65 = *base.add(16).cast::<*mut u8>();
                                                        let l66 = *base.add(20).cast::<usize>();
                                                        let len67 = l66;
                                                        _rt::Vec::from_raw_parts(l65.cast(), len67, len67)
                                                    };
                                                    V115::Bytes(e115)
                                                }
                                                14 => {
                                                    let e115 = {
                                                        let l68 = *base.add(16).cast::<i32>();
                                                        let l69 = i32::from(*base.add(20).cast::<u8>());
                                                        let l70 = i32::from(*base.add(21).cast::<u8>());
                                                        super::super::super::golem::graph::types::Date {
                                                            year: l68 as u32,
                                                            month: l69 as u8,
                                                            day: l70 as u8,
                                                        }
                                                    };
                                                    V115::Date(e115)
                                                }
                                                15 => {
                                                    let e115 = {
                                                        let l71 = i32::from(*base.add(16).cast::<u8>());
                                                        let l72 = i32::from(*base.add(17).cast::<u8>());
                                                        let l73 = i32::from(*base.add(18).cast::<u8>());
                                                        let l74 = *base.add(20).cast::<i32>();
                                                        super::super::super::golem::graph::types::Time {
                                                            hour: l71 as u8,
                                                            minute: l72 as u8,
                                                            second: l73 as u8,
                                                            nanosecond: l74 as u32,
                                                        }
                                                    };
                                                    V115::Time(e115)
                                                }
                                                16 => {
                                                    let e115 = {
                                                        let l75 = *base.add(16).cast::<i32>();
                                                        let l76 = i32::from(*base.add(20).cast::<u8>());
                                                        let l77 = i32::from(*base.add(21).cast::<u8>());
                                                        let l78 = i32::from(*base.add(24).cast::<u8>());
                                                        let l79 = i32::from(*base.add(25).cast::<u8>());
                                                        let l80 = i32::from(*base.add(26).cast::<u8>());
                                                        let l81 = *base.add(28).cast::<i32>();
                                                        let l82 = i32::from(*base.add(32).cast::<u8>());
                                                        super::super::super::golem::graph::types::Datetime {
                                                            date: super::super::super::golem::graph::types::Date {
                                                                year: l75 as u32,
                                                                month: l76 as u8,
                                                                day: l77 as u8,
                                                            },
                                                            time: super::super::super::golem::graph::types::Time {
                                                                hour: l78 as u8,
                                                                minute: l79 as u8,
                                                                second: l80 as u8,
                                                                nanosecond: l81 as u32,
                                                            },
                                                            timezone_offset_minutes: match l82 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l83 = i32::from(*base.add(34).cast::<i16>());
                                                                        l83 as i16
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                        }
                                                    };
                                                    V115::Datetime(e115)
                                                }
                                                17 => {
                                                    let e115 = {
                                                        let l84 = *base.add(16).cast::<i64>();
                                                        let l85 = *base.add(24).cast::<i32>();
                                                        super::super::super::golem::graph::types::Duration {
                                                            seconds: l84,
                                                            nanoseconds: l85 as u32,
                                                        }
                                                    };
                                                    V115::Duration(e115)
                                                }
                                                18 => {
                                                    let e115 = {
                                                        let l86 = *base.add(16).cast::<f64>();
                                                        let l87 = *base.add(24).cast::<f64>();
                                                        let l88 = i32::from(*base.add(32).cast::<u8>());
                                                        super::super::super::golem::graph::types::Point {
                                                            longitude: l86,
                                                            latitude: l87,
                                                            altitude: match l88 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l89 = *base.add(40).cast::<f64>();
                                                                        l89
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                        }
                                                    };
                                                    V115::Point(e115)
                                                }
                                                19 => {
                                                    let e115 = {
                                                        let l90 = *base.add(16).cast::<*mut u8>();
                                                        let l91 = *base.add(20).cast::<usize>();
                                                        let base96 = l90;
                                                        let len96 = l91;
                                                        let mut result96 = _rt::Vec::with_capacity(len96);
                                                        for i in 0..len96 {
                                                            let base = base96.add(i * 32);
                                                            let e96 = {
                                                                let l92 = *base.add(0).cast::<f64>();
                                                                let l93 = *base.add(8).cast::<f64>();
                                                                let l94 = i32::from(*base.add(16).cast::<u8>());
                                                                super::super::super::golem::graph::types::Point {
                                                                    longitude: l92,
                                                                    latitude: l93,
                                                                    altitude: match l94 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l95 = *base.add(24).cast::<f64>();
                                                                                l95
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            result96.push(e96);
                                                        }
                                                        _rt::cabi_dealloc(base96, len96 * 32, 8);
                                                        super::super::super::golem::graph::types::Linestring {
                                                            coordinates: result96,
                                                        }
                                                    };
                                                    V115::Linestring(e115)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 20, "invalid enum discriminant");
                                                    let e115 = {
                                                        let l97 = *base.add(16).cast::<*mut u8>();
                                                        let l98 = *base.add(20).cast::<usize>();
                                                        let base103 = l97;
                                                        let len103 = l98;
                                                        let mut result103 = _rt::Vec::with_capacity(len103);
                                                        for i in 0..len103 {
                                                            let base = base103.add(i * 32);
                                                            let e103 = {
                                                                let l99 = *base.add(0).cast::<f64>();
                                                                let l100 = *base.add(8).cast::<f64>();
                                                                let l101 = i32::from(*base.add(16).cast::<u8>());
                                                                super::super::super::golem::graph::types::Point {
                                                                    longitude: l99,
                                                                    latitude: l100,
                                                                    altitude: match l101 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l102 = *base.add(24).cast::<f64>();
                                                                                l102
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            result103.push(e103);
                                                        }
                                                        _rt::cabi_dealloc(base103, len103 * 32, 8);
                                                        let l104 = i32::from(*base.add(24).cast::<u8>());
                                                        super::super::super::golem::graph::types::Polygon {
                                                            exterior: result103,
                                                            holes: match l104 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l105 = *base.add(28).cast::<*mut u8>();
                                                                        let l106 = *base.add(32).cast::<usize>();
                                                                        let base114 = l105;
                                                                        let len114 = l106;
                                                                        let mut result114 = _rt::Vec::with_capacity(len114);
                                                                        for i in 0..len114 {
                                                                            let base = base114.add(i * 8);
                                                                            let e114 = {
                                                                                let l107 = *base.add(0).cast::<*mut u8>();
                                                                                let l108 = *base.add(4).cast::<usize>();
                                                                                let base113 = l107;
                                                                                let len113 = l108;
                                                                                let mut result113 = _rt::Vec::with_capacity(len113);
                                                                                for i in 0..len113 {
                                                                                    let base = base113.add(i * 32);
                                                                                    let e113 = {
                                                                                        let l109 = *base.add(0).cast::<f64>();
                                                                                        let l110 = *base.add(8).cast::<f64>();
                                                                                        let l111 = i32::from(*base.add(16).cast::<u8>());
                                                                                        super::super::super::golem::graph::types::Point {
                                                                                            longitude: l109,
                                                                                            latitude: l110,
                                                                                            altitude: match l111 {
                                                                                                0 => None,
                                                                                                1 => {
                                                                                                    let e = {
                                                                                                        let l112 = *base.add(24).cast::<f64>();
                                                                                                        l112
                                                                                                    };
                                                                                                    Some(e)
                                                                                                }
                                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                                            },
                                                                                        }
                                                                                    };
                                                                                    result113.push(e113);
                                                                                }
                                                                                _rt::cabi_dealloc(base113, len113 * 32, 8);
                                                                                result113
                                                                            };
                                                                            result114.push(e114);
                                                                        }
                                                                        _rt::cabi_dealloc(base114, len114 * 8, 4);
                                                                        result114
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                        }
                                                    };
                                                    V115::Polygon(e115)
                                                }
                                            };
                                            (_rt::string_lift(bytes49), v115)
                                        };
                                        result116.push(e116);
                                    }
                                    _rt::cabi_dealloc(base116, len116 * 48, 8);
                                    super::super::super::golem::graph::types::Vertex {
                                        id: v35,
                                        vertex_type: _rt::string_lift(bytes38),
                                        additional_labels: result44,
                                        properties: result116,
                                    }
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l117 = i32::from(*ptr25.add(8).cast::<u8>());
                                    use super::super::super::golem::graph::errors::GraphError as V172;
                                    let v172 = match l117 {
                                        0 => {
                                            let e172 = {
                                                let l118 = *ptr25.add(16).cast::<*mut u8>();
                                                let l119 = *ptr25.add(20).cast::<usize>();
                                                let len120 = l119;
                                                let bytes120 = _rt::Vec::from_raw_parts(
                                                    l118.cast(),
                                                    len120,
                                                    len120,
                                                );
                                                _rt::string_lift(bytes120)
                                            };
                                            V172::UnsupportedOperation(e172)
                                        }
                                        1 => {
                                            let e172 = {
                                                let l121 = *ptr25.add(16).cast::<*mut u8>();
                                                let l122 = *ptr25.add(20).cast::<usize>();
                                                let len123 = l122;
                                                let bytes123 = _rt::Vec::from_raw_parts(
                                                    l121.cast(),
                                                    len123,
                                                    len123,
                                                );
                                                _rt::string_lift(bytes123)
                                            };
                                            V172::ConnectionFailed(e172)
                                        }
                                        2 => {
                                            let e172 = {
                                                let l124 = *ptr25.add(16).cast::<*mut u8>();
                                                let l125 = *ptr25.add(20).cast::<usize>();
                                                let len126 = l125;
                                                let bytes126 = _rt::Vec::from_raw_parts(
                                                    l124.cast(),
                                                    len126,
                                                    len126,
                                                );
                                                _rt::string_lift(bytes126)
                                            };
                                            V172::AuthenticationFailed(e172)
                                        }
                                        3 => {
                                            let e172 = {
                                                let l127 = *ptr25.add(16).cast::<*mut u8>();
                                                let l128 = *ptr25.add(20).cast::<usize>();
                                                let len129 = l128;
                                                let bytes129 = _rt::Vec::from_raw_parts(
                                                    l127.cast(),
                                                    len129,
                                                    len129,
                                                );
                                                _rt::string_lift(bytes129)
                                            };
                                            V172::AuthorizationFailed(e172)
                                        }
                                        4 => {
                                            let e172 = {
                                                let l130 = i32::from(*ptr25.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V138;
                                                let v138 = match l130 {
                                                    0 => {
                                                        let e138 = {
                                                            let l131 = *ptr25.add(24).cast::<*mut u8>();
                                                            let l132 = *ptr25.add(28).cast::<usize>();
                                                            let len133 = l132;
                                                            let bytes133 = _rt::Vec::from_raw_parts(
                                                                l131.cast(),
                                                                len133,
                                                                len133,
                                                            );
                                                            _rt::string_lift(bytes133)
                                                        };
                                                        V138::StringValue(e138)
                                                    }
                                                    1 => {
                                                        let e138 = {
                                                            let l134 = *ptr25.add(24).cast::<i64>();
                                                            l134
                                                        };
                                                        V138::Int64(e138)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e138 = {
                                                            let l135 = *ptr25.add(24).cast::<*mut u8>();
                                                            let l136 = *ptr25.add(28).cast::<usize>();
                                                            let len137 = l136;
                                                            let bytes137 = _rt::Vec::from_raw_parts(
                                                                l135.cast(),
                                                                len137,
                                                                len137,
                                                            );
                                                            _rt::string_lift(bytes137)
                                                        };
                                                        V138::Uuid(e138)
                                                    }
                                                };
                                                v138
                                            };
                                            V172::ElementNotFound(e172)
                                        }
                                        5 => {
                                            let e172 = {
                                                let l139 = i32::from(*ptr25.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V147;
                                                let v147 = match l139 {
                                                    0 => {
                                                        let e147 = {
                                                            let l140 = *ptr25.add(24).cast::<*mut u8>();
                                                            let l141 = *ptr25.add(28).cast::<usize>();
                                                            let len142 = l141;
                                                            let bytes142 = _rt::Vec::from_raw_parts(
                                                                l140.cast(),
                                                                len142,
                                                                len142,
                                                            );
                                                            _rt::string_lift(bytes142)
                                                        };
                                                        V147::StringValue(e147)
                                                    }
                                                    1 => {
                                                        let e147 = {
                                                            let l143 = *ptr25.add(24).cast::<i64>();
                                                            l143
                                                        };
                                                        V147::Int64(e147)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e147 = {
                                                            let l144 = *ptr25.add(24).cast::<*mut u8>();
                                                            let l145 = *ptr25.add(28).cast::<usize>();
                                                            let len146 = l145;
                                                            let bytes146 = _rt::Vec::from_raw_parts(
                                                                l144.cast(),
                                                                len146,
                                                                len146,
                                                            );
                                                            _rt::string_lift(bytes146)
                                                        };
                                                        V147::Uuid(e147)
                                                    }
                                                };
                                                v147
                                            };
                                            V172::DuplicateElement(e172)
                                        }
                                        6 => {
                                            let e172 = {
                                                let l148 = *ptr25.add(16).cast::<*mut u8>();
                                                let l149 = *ptr25.add(20).cast::<usize>();
                                                let len150 = l149;
                                                let bytes150 = _rt::Vec::from_raw_parts(
                                                    l148.cast(),
                                                    len150,
                                                    len150,
                                                );
                                                _rt::string_lift(bytes150)
                                            };
                                            V172::SchemaViolation(e172)
                                        }
                                        7 => {
                                            let e172 = {
                                                let l151 = *ptr25.add(16).cast::<*mut u8>();
                                                let l152 = *ptr25.add(20).cast::<usize>();
                                                let len153 = l152;
                                                let bytes153 = _rt::Vec::from_raw_parts(
                                                    l151.cast(),
                                                    len153,
                                                    len153,
                                                );
                                                _rt::string_lift(bytes153)
                                            };
                                            V172::ConstraintViolation(e172)
                                        }
                                        8 => {
                                            let e172 = {
                                                let l154 = *ptr25.add(16).cast::<*mut u8>();
                                                let l155 = *ptr25.add(20).cast::<usize>();
                                                let len156 = l155;
                                                let bytes156 = _rt::Vec::from_raw_parts(
                                                    l154.cast(),
                                                    len156,
                                                    len156,
                                                );
                                                _rt::string_lift(bytes156)
                                            };
                                            V172::InvalidPropertyType(e172)
                                        }
                                        9 => {
                                            let e172 = {
                                                let l157 = *ptr25.add(16).cast::<*mut u8>();
                                                let l158 = *ptr25.add(20).cast::<usize>();
                                                let len159 = l158;
                                                let bytes159 = _rt::Vec::from_raw_parts(
                                                    l157.cast(),
                                                    len159,
                                                    len159,
                                                );
                                                _rt::string_lift(bytes159)
                                            };
                                            V172::InvalidQuery(e172)
                                        }
                                        10 => {
                                            let e172 = {
                                                let l160 = *ptr25.add(16).cast::<*mut u8>();
                                                let l161 = *ptr25.add(20).cast::<usize>();
                                                let len162 = l161;
                                                let bytes162 = _rt::Vec::from_raw_parts(
                                                    l160.cast(),
                                                    len162,
                                                    len162,
                                                );
                                                _rt::string_lift(bytes162)
                                            };
                                            V172::TransactionFailed(e172)
                                        }
                                        11 => V172::TransactionConflict,
                                        12 => V172::TransactionTimeout,
                                        13 => V172::DeadlockDetected,
                                        14 => V172::Timeout,
                                        15 => {
                                            let e172 = {
                                                let l163 = *ptr25.add(16).cast::<*mut u8>();
                                                let l164 = *ptr25.add(20).cast::<usize>();
                                                let len165 = l164;
                                                let bytes165 = _rt::Vec::from_raw_parts(
                                                    l163.cast(),
                                                    len165,
                                                    len165,
                                                );
                                                _rt::string_lift(bytes165)
                                            };
                                            V172::ResourceExhausted(e172)
                                        }
                                        16 => {
                                            let e172 = {
                                                let l166 = *ptr25.add(16).cast::<*mut u8>();
                                                let l167 = *ptr25.add(20).cast::<usize>();
                                                let len168 = l167;
                                                let bytes168 = _rt::Vec::from_raw_parts(
                                                    l166.cast(),
                                                    len168,
                                                    len168,
                                                );
                                                _rt::string_lift(bytes168)
                                            };
                                            V172::InternalError(e172)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 17, "invalid enum discriminant");
                                            let e172 = {
                                                let l169 = *ptr25.add(16).cast::<*mut u8>();
                                                let l170 = *ptr25.add(20).cast::<usize>();
                                                let len171 = l170;
                                                let bytes171 = _rt::Vec::from_raw_parts(
                                                    l169.cast(),
                                                    len171,
                                                    len171,
                                                );
                                                _rt::string_lift(bytes171)
                                            };
                                            V172::ServiceUnavailable(e172)
                                        }
                                    };
                                    v172
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Transaction {
                #[allow(unused_unsafe, clippy::all)]
                /// Get vertex by ID
                pub fn get_vertex(
                    &self,
                    id: &ElementId,
                ) -> Result<Option<Vertex>, GraphError> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 56]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 56],
                        );
                        use super::super::super::golem::graph::types::ElementId as V2;
                        let (result3_0, result3_1, result3_2) = match id {
                            V2::StringValue(e) => {
                                let vec0 = e;
                                let ptr0 = vec0.as_ptr().cast::<u8>();
                                let len0 = vec0.len();
                                (
                                    0i32,
                                    {
                                        let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                        t.as_mut_ptr().cast::<*mut u8>().write(ptr0.cast_mut());
                                        t
                                    },
                                    len0,
                                )
                            }
                            V2::Int64(e) => {
                                (
                                    1i32,
                                    ::core::mem::MaybeUninit::new(_rt::as_i64(e) as u64),
                                    0usize,
                                )
                            }
                            V2::Uuid(e) => {
                                let vec1 = e;
                                let ptr1 = vec1.as_ptr().cast::<u8>();
                                let len1 = vec1.len();
                                (
                                    2i32,
                                    {
                                        let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                        t.as_mut_ptr().cast::<*mut u8>().write(ptr1.cast_mut());
                                        t
                                    },
                                    len1,
                                )
                            }
                        };
                        let ptr4 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:graph/transactions@1.0.0")]
                        extern "C" {
                            #[link_name = "[method]transaction.get-vertex"]
                            fn wit_import(
                                _: i32,
                                _: i32,
                                _: ::core::mem::MaybeUninit<u64>,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: i32,
                            _: ::core::mem::MaybeUninit<u64>,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            result3_0,
                            result3_1,
                            result3_2,
                            ptr4,
                        );
                        let l5 = i32::from(*ptr4.add(0).cast::<u8>());
                        match l5 {
                            0 => {
                                let e = {
                                    let l6 = i32::from(*ptr4.add(8).cast::<u8>());
                                    match l6 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l7 = i32::from(*ptr4.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V15;
                                                let v15 = match l7 {
                                                    0 => {
                                                        let e15 = {
                                                            let l8 = *ptr4.add(24).cast::<*mut u8>();
                                                            let l9 = *ptr4.add(28).cast::<usize>();
                                                            let len10 = l9;
                                                            let bytes10 = _rt::Vec::from_raw_parts(
                                                                l8.cast(),
                                                                len10,
                                                                len10,
                                                            );
                                                            _rt::string_lift(bytes10)
                                                        };
                                                        V15::StringValue(e15)
                                                    }
                                                    1 => {
                                                        let e15 = {
                                                            let l11 = *ptr4.add(24).cast::<i64>();
                                                            l11
                                                        };
                                                        V15::Int64(e15)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e15 = {
                                                            let l12 = *ptr4.add(24).cast::<*mut u8>();
                                                            let l13 = *ptr4.add(28).cast::<usize>();
                                                            let len14 = l13;
                                                            let bytes14 = _rt::Vec::from_raw_parts(
                                                                l12.cast(),
                                                                len14,
                                                                len14,
                                                            );
                                                            _rt::string_lift(bytes14)
                                                        };
                                                        V15::Uuid(e15)
                                                    }
                                                };
                                                let l16 = *ptr4.add(32).cast::<*mut u8>();
                                                let l17 = *ptr4.add(36).cast::<usize>();
                                                let len18 = l17;
                                                let bytes18 = _rt::Vec::from_raw_parts(
                                                    l16.cast(),
                                                    len18,
                                                    len18,
                                                );
                                                let l19 = *ptr4.add(40).cast::<*mut u8>();
                                                let l20 = *ptr4.add(44).cast::<usize>();
                                                let base24 = l19;
                                                let len24 = l20;
                                                let mut result24 = _rt::Vec::with_capacity(len24);
                                                for i in 0..len24 {
                                                    let base = base24.add(i * 8);
                                                    let e24 = {
                                                        let l21 = *base.add(0).cast::<*mut u8>();
                                                        let l22 = *base.add(4).cast::<usize>();
                                                        let len23 = l22;
                                                        let bytes23 = _rt::Vec::from_raw_parts(
                                                            l21.cast(),
                                                            len23,
                                                            len23,
                                                        );
                                                        _rt::string_lift(bytes23)
                                                    };
                                                    result24.push(e24);
                                                }
                                                _rt::cabi_dealloc(base24, len24 * 8, 4);
                                                let l25 = *ptr4.add(48).cast::<*mut u8>();
                                                let l26 = *ptr4.add(52).cast::<usize>();
                                                let base96 = l25;
                                                let len96 = l26;
                                                let mut result96 = _rt::Vec::with_capacity(len96);
                                                for i in 0..len96 {
                                                    let base = base96.add(i * 48);
                                                    let e96 = {
                                                        let l27 = *base.add(0).cast::<*mut u8>();
                                                        let l28 = *base.add(4).cast::<usize>();
                                                        let len29 = l28;
                                                        let bytes29 = _rt::Vec::from_raw_parts(
                                                            l27.cast(),
                                                            len29,
                                                            len29,
                                                        );
                                                        let l30 = i32::from(*base.add(8).cast::<u8>());
                                                        use super::super::super::golem::graph::types::PropertyValue as V95;
                                                        let v95 = match l30 {
                                                            0 => V95::NullValue,
                                                            1 => {
                                                                let e95 = {
                                                                    let l31 = i32::from(*base.add(16).cast::<u8>());
                                                                    _rt::bool_lift(l31 as u8)
                                                                };
                                                                V95::Boolean(e95)
                                                            }
                                                            2 => {
                                                                let e95 = {
                                                                    let l32 = i32::from(*base.add(16).cast::<i8>());
                                                                    l32 as i8
                                                                };
                                                                V95::Int8(e95)
                                                            }
                                                            3 => {
                                                                let e95 = {
                                                                    let l33 = i32::from(*base.add(16).cast::<i16>());
                                                                    l33 as i16
                                                                };
                                                                V95::Int16(e95)
                                                            }
                                                            4 => {
                                                                let e95 = {
                                                                    let l34 = *base.add(16).cast::<i32>();
                                                                    l34
                                                                };
                                                                V95::Int32(e95)
                                                            }
                                                            5 => {
                                                                let e95 = {
                                                                    let l35 = *base.add(16).cast::<i64>();
                                                                    l35
                                                                };
                                                                V95::Int64(e95)
                                                            }
                                                            6 => {
                                                                let e95 = {
                                                                    let l36 = i32::from(*base.add(16).cast::<u8>());
                                                                    l36 as u8
                                                                };
                                                                V95::Uint8(e95)
                                                            }
                                                            7 => {
                                                                let e95 = {
                                                                    let l37 = i32::from(*base.add(16).cast::<u16>());
                                                                    l37 as u16
                                                                };
                                                                V95::Uint16(e95)
                                                            }
                                                            8 => {
                                                                let e95 = {
                                                                    let l38 = *base.add(16).cast::<i32>();
                                                                    l38 as u32
                                                                };
                                                                V95::Uint32(e95)
                                                            }
                                                            9 => {
                                                                let e95 = {
                                                                    let l39 = *base.add(16).cast::<i64>();
                                                                    l39 as u64
                                                                };
                                                                V95::Uint64(e95)
                                                            }
                                                            10 => {
                                                                let e95 = {
                                                                    let l40 = *base.add(16).cast::<f32>();
                                                                    l40
                                                                };
                                                                V95::Float32Value(e95)
                                                            }
                                                            11 => {
                                                                let e95 = {
                                                                    let l41 = *base.add(16).cast::<f64>();
                                                                    l41
                                                                };
                                                                V95::Float64Value(e95)
                                                            }
                                                            12 => {
                                                                let e95 = {
                                                                    let l42 = *base.add(16).cast::<*mut u8>();
                                                                    let l43 = *base.add(20).cast::<usize>();
                                                                    let len44 = l43;
                                                                    let bytes44 = _rt::Vec::from_raw_parts(
                                                                        l42.cast(),
                                                                        len44,
                                                                        len44,
                                                                    );
                                                                    _rt::string_lift(bytes44)
                                                                };
                                                                V95::StringValue(e95)
                                                            }
                                                            13 => {
                                                                let e95 = {
                                                                    let l45 = *base.add(16).cast::<*mut u8>();
                                                                    let l46 = *base.add(20).cast::<usize>();
                                                                    let len47 = l46;
                                                                    _rt::Vec::from_raw_parts(l45.cast(), len47, len47)
                                                                };
                                                                V95::Bytes(e95)
                                                            }
                                                            14 => {
                                                                let e95 = {
                                                                    let l48 = *base.add(16).cast::<i32>();
                                                                    let l49 = i32::from(*base.add(20).cast::<u8>());
                                                                    let l50 = i32::from(*base.add(21).cast::<u8>());
                                                                    super::super::super::golem::graph::types::Date {
                                                                        year: l48 as u32,
                                                                        month: l49 as u8,
                                                                        day: l50 as u8,
                                                                    }
                                                                };
                                                                V95::Date(e95)
                                                            }
                                                            15 => {
                                                                let e95 = {
                                                                    let l51 = i32::from(*base.add(16).cast::<u8>());
                                                                    let l52 = i32::from(*base.add(17).cast::<u8>());
                                                                    let l53 = i32::from(*base.add(18).cast::<u8>());
                                                                    let l54 = *base.add(20).cast::<i32>();
                                                                    super::super::super::golem::graph::types::Time {
                                                                        hour: l51 as u8,
                                                                        minute: l52 as u8,
                                                                        second: l53 as u8,
                                                                        nanosecond: l54 as u32,
                                                                    }
                                                                };
                                                                V95::Time(e95)
                                                            }
                                                            16 => {
                                                                let e95 = {
                                                                    let l55 = *base.add(16).cast::<i32>();
                                                                    let l56 = i32::from(*base.add(20).cast::<u8>());
                                                                    let l57 = i32::from(*base.add(21).cast::<u8>());
                                                                    let l58 = i32::from(*base.add(24).cast::<u8>());
                                                                    let l59 = i32::from(*base.add(25).cast::<u8>());
                                                                    let l60 = i32::from(*base.add(26).cast::<u8>());
                                                                    let l61 = *base.add(28).cast::<i32>();
                                                                    let l62 = i32::from(*base.add(32).cast::<u8>());
                                                                    super::super::super::golem::graph::types::Datetime {
                                                                        date: super::super::super::golem::graph::types::Date {
                                                                            year: l55 as u32,
                                                                            month: l56 as u8,
                                                                            day: l57 as u8,
                                                                        },
                                                                        time: super::super::super::golem::graph::types::Time {
                                                                            hour: l58 as u8,
                                                                            minute: l59 as u8,
                                                                            second: l60 as u8,
                                                                            nanosecond: l61 as u32,
                                                                        },
                                                                        timezone_offset_minutes: match l62 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l63 = i32::from(*base.add(34).cast::<i16>());
                                                                                    l63 as i16
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                V95::Datetime(e95)
                                                            }
                                                            17 => {
                                                                let e95 = {
                                                                    let l64 = *base.add(16).cast::<i64>();
                                                                    let l65 = *base.add(24).cast::<i32>();
                                                                    super::super::super::golem::graph::types::Duration {
                                                                        seconds: l64,
                                                                        nanoseconds: l65 as u32,
                                                                    }
                                                                };
                                                                V95::Duration(e95)
                                                            }
                                                            18 => {
                                                                let e95 = {
                                                                    let l66 = *base.add(16).cast::<f64>();
                                                                    let l67 = *base.add(24).cast::<f64>();
                                                                    let l68 = i32::from(*base.add(32).cast::<u8>());
                                                                    super::super::super::golem::graph::types::Point {
                                                                        longitude: l66,
                                                                        latitude: l67,
                                                                        altitude: match l68 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l69 = *base.add(40).cast::<f64>();
                                                                                    l69
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                V95::Point(e95)
                                                            }
                                                            19 => {
                                                                let e95 = {
                                                                    let l70 = *base.add(16).cast::<*mut u8>();
                                                                    let l71 = *base.add(20).cast::<usize>();
                                                                    let base76 = l70;
                                                                    let len76 = l71;
                                                                    let mut result76 = _rt::Vec::with_capacity(len76);
                                                                    for i in 0..len76 {
                                                                        let base = base76.add(i * 32);
                                                                        let e76 = {
                                                                            let l72 = *base.add(0).cast::<f64>();
                                                                            let l73 = *base.add(8).cast::<f64>();
                                                                            let l74 = i32::from(*base.add(16).cast::<u8>());
                                                                            super::super::super::golem::graph::types::Point {
                                                                                longitude: l72,
                                                                                latitude: l73,
                                                                                altitude: match l74 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l75 = *base.add(24).cast::<f64>();
                                                                                            l75
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                },
                                                                            }
                                                                        };
                                                                        result76.push(e76);
                                                                    }
                                                                    _rt::cabi_dealloc(base76, len76 * 32, 8);
                                                                    super::super::super::golem::graph::types::Linestring {
                                                                        coordinates: result76,
                                                                    }
                                                                };
                                                                V95::Linestring(e95)
                                                            }
                                                            n => {
                                                                debug_assert_eq!(n, 20, "invalid enum discriminant");
                                                                let e95 = {
                                                                    let l77 = *base.add(16).cast::<*mut u8>();
                                                                    let l78 = *base.add(20).cast::<usize>();
                                                                    let base83 = l77;
                                                                    let len83 = l78;
                                                                    let mut result83 = _rt::Vec::with_capacity(len83);
                                                                    for i in 0..len83 {
                                                                        let base = base83.add(i * 32);
                                                                        let e83 = {
                                                                            let l79 = *base.add(0).cast::<f64>();
                                                                            let l80 = *base.add(8).cast::<f64>();
                                                                            let l81 = i32::from(*base.add(16).cast::<u8>());
                                                                            super::super::super::golem::graph::types::Point {
                                                                                longitude: l79,
                                                                                latitude: l80,
                                                                                altitude: match l81 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l82 = *base.add(24).cast::<f64>();
                                                                                            l82
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                },
                                                                            }
                                                                        };
                                                                        result83.push(e83);
                                                                    }
                                                                    _rt::cabi_dealloc(base83, len83 * 32, 8);
                                                                    let l84 = i32::from(*base.add(24).cast::<u8>());
                                                                    super::super::super::golem::graph::types::Polygon {
                                                                        exterior: result83,
                                                                        holes: match l84 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l85 = *base.add(28).cast::<*mut u8>();
                                                                                    let l86 = *base.add(32).cast::<usize>();
                                                                                    let base94 = l85;
                                                                                    let len94 = l86;
                                                                                    let mut result94 = _rt::Vec::with_capacity(len94);
                                                                                    for i in 0..len94 {
                                                                                        let base = base94.add(i * 8);
                                                                                        let e94 = {
                                                                                            let l87 = *base.add(0).cast::<*mut u8>();
                                                                                            let l88 = *base.add(4).cast::<usize>();
                                                                                            let base93 = l87;
                                                                                            let len93 = l88;
                                                                                            let mut result93 = _rt::Vec::with_capacity(len93);
                                                                                            for i in 0..len93 {
                                                                                                let base = base93.add(i * 32);
                                                                                                let e93 = {
                                                                                                    let l89 = *base.add(0).cast::<f64>();
                                                                                                    let l90 = *base.add(8).cast::<f64>();
                                                                                                    let l91 = i32::from(*base.add(16).cast::<u8>());
                                                                                                    super::super::super::golem::graph::types::Point {
                                                                                                        longitude: l89,
                                                                                                        latitude: l90,
                                                                                                        altitude: match l91 {
                                                                                                            0 => None,
                                                                                                            1 => {
                                                                                                                let e = {
                                                                                                                    let l92 = *base.add(24).cast::<f64>();
                                                                                                                    l92
                                                                                                                };
                                                                                                                Some(e)
                                                                                                            }
                                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                                        },
                                                                                                    }
                                                                                                };
                                                                                                result93.push(e93);
                                                                                            }
                                                                                            _rt::cabi_dealloc(base93, len93 * 32, 8);
                                                                                            result93
                                                                                        };
                                                                                        result94.push(e94);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base94, len94 * 8, 4);
                                                                                    result94
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                V95::Polygon(e95)
                                                            }
                                                        };
                                                        (_rt::string_lift(bytes29), v95)
                                                    };
                                                    result96.push(e96);
                                                }
                                                _rt::cabi_dealloc(base96, len96 * 48, 8);
                                                super::super::super::golem::graph::types::Vertex {
                                                    id: v15,
                                                    vertex_type: _rt::string_lift(bytes18),
                                                    additional_labels: result24,
                                                    properties: result96,
                                                }
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    }
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l97 = i32::from(*ptr4.add(8).cast::<u8>());
                                    use super::super::super::golem::graph::errors::GraphError as V152;
                                    let v152 = match l97 {
                                        0 => {
                                            let e152 = {
                                                let l98 = *ptr4.add(16).cast::<*mut u8>();
                                                let l99 = *ptr4.add(20).cast::<usize>();
                                                let len100 = l99;
                                                let bytes100 = _rt::Vec::from_raw_parts(
                                                    l98.cast(),
                                                    len100,
                                                    len100,
                                                );
                                                _rt::string_lift(bytes100)
                                            };
                                            V152::UnsupportedOperation(e152)
                                        }
                                        1 => {
                                            let e152 = {
                                                let l101 = *ptr4.add(16).cast::<*mut u8>();
                                                let l102 = *ptr4.add(20).cast::<usize>();
                                                let len103 = l102;
                                                let bytes103 = _rt::Vec::from_raw_parts(
                                                    l101.cast(),
                                                    len103,
                                                    len103,
                                                );
                                                _rt::string_lift(bytes103)
                                            };
                                            V152::ConnectionFailed(e152)
                                        }
                                        2 => {
                                            let e152 = {
                                                let l104 = *ptr4.add(16).cast::<*mut u8>();
                                                let l105 = *ptr4.add(20).cast::<usize>();
                                                let len106 = l105;
                                                let bytes106 = _rt::Vec::from_raw_parts(
                                                    l104.cast(),
                                                    len106,
                                                    len106,
                                                );
                                                _rt::string_lift(bytes106)
                                            };
                                            V152::AuthenticationFailed(e152)
                                        }
                                        3 => {
                                            let e152 = {
                                                let l107 = *ptr4.add(16).cast::<*mut u8>();
                                                let l108 = *ptr4.add(20).cast::<usize>();
                                                let len109 = l108;
                                                let bytes109 = _rt::Vec::from_raw_parts(
                                                    l107.cast(),
                                                    len109,
                                                    len109,
                                                );
                                                _rt::string_lift(bytes109)
                                            };
                                            V152::AuthorizationFailed(e152)
                                        }
                                        4 => {
                                            let e152 = {
                                                let l110 = i32::from(*ptr4.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V118;
                                                let v118 = match l110 {
                                                    0 => {
                                                        let e118 = {
                                                            let l111 = *ptr4.add(24).cast::<*mut u8>();
                                                            let l112 = *ptr4.add(28).cast::<usize>();
                                                            let len113 = l112;
                                                            let bytes113 = _rt::Vec::from_raw_parts(
                                                                l111.cast(),
                                                                len113,
                                                                len113,
                                                            );
                                                            _rt::string_lift(bytes113)
                                                        };
                                                        V118::StringValue(e118)
                                                    }
                                                    1 => {
                                                        let e118 = {
                                                            let l114 = *ptr4.add(24).cast::<i64>();
                                                            l114
                                                        };
                                                        V118::Int64(e118)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e118 = {
                                                            let l115 = *ptr4.add(24).cast::<*mut u8>();
                                                            let l116 = *ptr4.add(28).cast::<usize>();
                                                            let len117 = l116;
                                                            let bytes117 = _rt::Vec::from_raw_parts(
                                                                l115.cast(),
                                                                len117,
                                                                len117,
                                                            );
                                                            _rt::string_lift(bytes117)
                                                        };
                                                        V118::Uuid(e118)
                                                    }
                                                };
                                                v118
                                            };
                                            V152::ElementNotFound(e152)
                                        }
                                        5 => {
                                            let e152 = {
                                                let l119 = i32::from(*ptr4.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V127;
                                                let v127 = match l119 {
                                                    0 => {
                                                        let e127 = {
                                                            let l120 = *ptr4.add(24).cast::<*mut u8>();
                                                            let l121 = *ptr4.add(28).cast::<usize>();
                                                            let len122 = l121;
                                                            let bytes122 = _rt::Vec::from_raw_parts(
                                                                l120.cast(),
                                                                len122,
                                                                len122,
                                                            );
                                                            _rt::string_lift(bytes122)
                                                        };
                                                        V127::StringValue(e127)
                                                    }
                                                    1 => {
                                                        let e127 = {
                                                            let l123 = *ptr4.add(24).cast::<i64>();
                                                            l123
                                                        };
                                                        V127::Int64(e127)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e127 = {
                                                            let l124 = *ptr4.add(24).cast::<*mut u8>();
                                                            let l125 = *ptr4.add(28).cast::<usize>();
                                                            let len126 = l125;
                                                            let bytes126 = _rt::Vec::from_raw_parts(
                                                                l124.cast(),
                                                                len126,
                                                                len126,
                                                            );
                                                            _rt::string_lift(bytes126)
                                                        };
                                                        V127::Uuid(e127)
                                                    }
                                                };
                                                v127
                                            };
                                            V152::DuplicateElement(e152)
                                        }
                                        6 => {
                                            let e152 = {
                                                let l128 = *ptr4.add(16).cast::<*mut u8>();
                                                let l129 = *ptr4.add(20).cast::<usize>();
                                                let len130 = l129;
                                                let bytes130 = _rt::Vec::from_raw_parts(
                                                    l128.cast(),
                                                    len130,
                                                    len130,
                                                );
                                                _rt::string_lift(bytes130)
                                            };
                                            V152::SchemaViolation(e152)
                                        }
                                        7 => {
                                            let e152 = {
                                                let l131 = *ptr4.add(16).cast::<*mut u8>();
                                                let l132 = *ptr4.add(20).cast::<usize>();
                                                let len133 = l132;
                                                let bytes133 = _rt::Vec::from_raw_parts(
                                                    l131.cast(),
                                                    len133,
                                                    len133,
                                                );
                                                _rt::string_lift(bytes133)
                                            };
                                            V152::ConstraintViolation(e152)
                                        }
                                        8 => {
                                            let e152 = {
                                                let l134 = *ptr4.add(16).cast::<*mut u8>();
                                                let l135 = *ptr4.add(20).cast::<usize>();
                                                let len136 = l135;
                                                let bytes136 = _rt::Vec::from_raw_parts(
                                                    l134.cast(),
                                                    len136,
                                                    len136,
                                                );
                                                _rt::string_lift(bytes136)
                                            };
                                            V152::InvalidPropertyType(e152)
                                        }
                                        9 => {
                                            let e152 = {
                                                let l137 = *ptr4.add(16).cast::<*mut u8>();
                                                let l138 = *ptr4.add(20).cast::<usize>();
                                                let len139 = l138;
                                                let bytes139 = _rt::Vec::from_raw_parts(
                                                    l137.cast(),
                                                    len139,
                                                    len139,
                                                );
                                                _rt::string_lift(bytes139)
                                            };
                                            V152::InvalidQuery(e152)
                                        }
                                        10 => {
                                            let e152 = {
                                                let l140 = *ptr4.add(16).cast::<*mut u8>();
                                                let l141 = *ptr4.add(20).cast::<usize>();
                                                let len142 = l141;
                                                let bytes142 = _rt::Vec::from_raw_parts(
                                                    l140.cast(),
                                                    len142,
                                                    len142,
                                                );
                                                _rt::string_lift(bytes142)
                                            };
                                            V152::TransactionFailed(e152)
                                        }
                                        11 => V152::TransactionConflict,
                                        12 => V152::TransactionTimeout,
                                        13 => V152::DeadlockDetected,
                                        14 => V152::Timeout,
                                        15 => {
                                            let e152 = {
                                                let l143 = *ptr4.add(16).cast::<*mut u8>();
                                                let l144 = *ptr4.add(20).cast::<usize>();
                                                let len145 = l144;
                                                let bytes145 = _rt::Vec::from_raw_parts(
                                                    l143.cast(),
                                                    len145,
                                                    len145,
                                                );
                                                _rt::string_lift(bytes145)
                                            };
                                            V152::ResourceExhausted(e152)
                                        }
                                        16 => {
                                            let e152 = {
                                                let l146 = *ptr4.add(16).cast::<*mut u8>();
                                                let l147 = *ptr4.add(20).cast::<usize>();
                                                let len148 = l147;
                                                let bytes148 = _rt::Vec::from_raw_parts(
                                                    l146.cast(),
                                                    len148,
                                                    len148,
                                                );
                                                _rt::string_lift(bytes148)
                                            };
                                            V152::InternalError(e152)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 17, "invalid enum discriminant");
                                            let e152 = {
                                                let l149 = *ptr4.add(16).cast::<*mut u8>();
                                                let l150 = *ptr4.add(20).cast::<usize>();
                                                let len151 = l150;
                                                let bytes151 = _rt::Vec::from_raw_parts(
                                                    l149.cast(),
                                                    len151,
                                                    len151,
                                                );
                                                _rt::string_lift(bytes151)
                                            };
                                            V152::ServiceUnavailable(e152)
                                        }
                                    };
                                    v152
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Transaction {
                #[allow(unused_unsafe, clippy::all)]
                /// Update vertex properties (replaces all properties)
                pub fn update_vertex(
                    &self,
                    id: &ElementId,
                    properties: &PropertyMap,
                ) -> Result<Vertex, GraphError> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 48]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 48],
                        );
                        use super::super::super::golem::graph::types::ElementId as V2;
                        let (result3_0, result3_1, result3_2) = match id {
                            V2::StringValue(e) => {
                                let vec0 = e;
                                let ptr0 = vec0.as_ptr().cast::<u8>();
                                let len0 = vec0.len();
                                (
                                    0i32,
                                    {
                                        let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                        t.as_mut_ptr().cast::<*mut u8>().write(ptr0.cast_mut());
                                        t
                                    },
                                    len0,
                                )
                            }
                            V2::Int64(e) => {
                                (
                                    1i32,
                                    ::core::mem::MaybeUninit::new(_rt::as_i64(e) as u64),
                                    0usize,
                                )
                            }
                            V2::Uuid(e) => {
                                let vec1 = e;
                                let ptr1 = vec1.as_ptr().cast::<u8>();
                                let len1 = vec1.len();
                                (
                                    2i32,
                                    {
                                        let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                        t.as_mut_ptr().cast::<*mut u8>().write(ptr1.cast_mut());
                                        t
                                    },
                                    len1,
                                )
                            }
                        };
                        let vec25 = properties;
                        let len25 = vec25.len();
                        let layout25 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec25.len() * 48,
                            8,
                        );
                        let result25 = if layout25.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout25).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout25);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec25.into_iter().enumerate() {
                            let base = result25.add(i * 48);
                            {
                                let (t4_0, t4_1) = e;
                                let vec5 = t4_0;
                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                let len5 = vec5.len();
                                *base.add(4).cast::<usize>() = len5;
                                *base.add(0).cast::<*mut u8>() = ptr5.cast_mut();
                                use super::super::super::golem::graph::types::PropertyValue as V24;
                                match t4_1 {
                                    V24::NullValue => {
                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                    }
                                    V24::Boolean(e) => {
                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                        *base.add(16).cast::<u8>() = (match e {
                                            true => 1,
                                            false => 0,
                                        }) as u8;
                                    }
                                    V24::Int8(e) => {
                                        *base.add(8).cast::<u8>() = (2i32) as u8;
                                        *base.add(16).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                    }
                                    V24::Int16(e) => {
                                        *base.add(8).cast::<u8>() = (3i32) as u8;
                                        *base.add(16).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                    }
                                    V24::Int32(e) => {
                                        *base.add(8).cast::<u8>() = (4i32) as u8;
                                        *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    V24::Int64(e) => {
                                        *base.add(8).cast::<u8>() = (5i32) as u8;
                                        *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    V24::Uint8(e) => {
                                        *base.add(8).cast::<u8>() = (6i32) as u8;
                                        *base.add(16).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                    }
                                    V24::Uint16(e) => {
                                        *base.add(8).cast::<u8>() = (7i32) as u8;
                                        *base.add(16).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                    }
                                    V24::Uint32(e) => {
                                        *base.add(8).cast::<u8>() = (8i32) as u8;
                                        *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    V24::Uint64(e) => {
                                        *base.add(8).cast::<u8>() = (9i32) as u8;
                                        *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    V24::Float32Value(e) => {
                                        *base.add(8).cast::<u8>() = (10i32) as u8;
                                        *base.add(16).cast::<f32>() = _rt::as_f32(e);
                                    }
                                    V24::Float64Value(e) => {
                                        *base.add(8).cast::<u8>() = (11i32) as u8;
                                        *base.add(16).cast::<f64>() = _rt::as_f64(e);
                                    }
                                    V24::StringValue(e) => {
                                        *base.add(8).cast::<u8>() = (12i32) as u8;
                                        let vec6 = e;
                                        let ptr6 = vec6.as_ptr().cast::<u8>();
                                        let len6 = vec6.len();
                                        *base.add(20).cast::<usize>() = len6;
                                        *base.add(16).cast::<*mut u8>() = ptr6.cast_mut();
                                    }
                                    V24::Bytes(e) => {
                                        *base.add(8).cast::<u8>() = (13i32) as u8;
                                        let vec7 = e;
                                        let ptr7 = vec7.as_ptr().cast::<u8>();
                                        let len7 = vec7.len();
                                        *base.add(20).cast::<usize>() = len7;
                                        *base.add(16).cast::<*mut u8>() = ptr7.cast_mut();
                                    }
                                    V24::Date(e) => {
                                        *base.add(8).cast::<u8>() = (14i32) as u8;
                                        let super::super::super::golem::graph::types::Date {
                                            year: year8,
                                            month: month8,
                                            day: day8,
                                        } = e;
                                        *base.add(16).cast::<i32>() = _rt::as_i32(year8);
                                        *base.add(20).cast::<u8>() = (_rt::as_i32(month8)) as u8;
                                        *base.add(21).cast::<u8>() = (_rt::as_i32(day8)) as u8;
                                    }
                                    V24::Time(e) => {
                                        *base.add(8).cast::<u8>() = (15i32) as u8;
                                        let super::super::super::golem::graph::types::Time {
                                            hour: hour9,
                                            minute: minute9,
                                            second: second9,
                                            nanosecond: nanosecond9,
                                        } = e;
                                        *base.add(16).cast::<u8>() = (_rt::as_i32(hour9)) as u8;
                                        *base.add(17).cast::<u8>() = (_rt::as_i32(minute9)) as u8;
                                        *base.add(18).cast::<u8>() = (_rt::as_i32(second9)) as u8;
                                        *base.add(20).cast::<i32>() = _rt::as_i32(nanosecond9);
                                    }
                                    V24::Datetime(e) => {
                                        *base.add(8).cast::<u8>() = (16i32) as u8;
                                        let super::super::super::golem::graph::types::Datetime {
                                            date: date10,
                                            time: time10,
                                            timezone_offset_minutes: timezone_offset_minutes10,
                                        } = e;
                                        let super::super::super::golem::graph::types::Date {
                                            year: year11,
                                            month: month11,
                                            day: day11,
                                        } = date10;
                                        *base.add(16).cast::<i32>() = _rt::as_i32(year11);
                                        *base.add(20).cast::<u8>() = (_rt::as_i32(month11)) as u8;
                                        *base.add(21).cast::<u8>() = (_rt::as_i32(day11)) as u8;
                                        let super::super::super::golem::graph::types::Time {
                                            hour: hour12,
                                            minute: minute12,
                                            second: second12,
                                            nanosecond: nanosecond12,
                                        } = time10;
                                        *base.add(24).cast::<u8>() = (_rt::as_i32(hour12)) as u8;
                                        *base.add(25).cast::<u8>() = (_rt::as_i32(minute12)) as u8;
                                        *base.add(26).cast::<u8>() = (_rt::as_i32(second12)) as u8;
                                        *base.add(28).cast::<i32>() = _rt::as_i32(nanosecond12);
                                        match timezone_offset_minutes10 {
                                            Some(e) => {
                                                *base.add(32).cast::<u8>() = (1i32) as u8;
                                                *base.add(34).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            None => {
                                                *base.add(32).cast::<u8>() = (0i32) as u8;
                                            }
                                        };
                                    }
                                    V24::Duration(e) => {
                                        *base.add(8).cast::<u8>() = (17i32) as u8;
                                        let super::super::super::golem::graph::types::Duration {
                                            seconds: seconds13,
                                            nanoseconds: nanoseconds13,
                                        } = e;
                                        *base.add(16).cast::<i64>() = _rt::as_i64(seconds13);
                                        *base.add(24).cast::<i32>() = _rt::as_i32(nanoseconds13);
                                    }
                                    V24::Point(e) => {
                                        *base.add(8).cast::<u8>() = (18i32) as u8;
                                        let super::super::super::golem::graph::types::Point {
                                            longitude: longitude14,
                                            latitude: latitude14,
                                            altitude: altitude14,
                                        } = e;
                                        *base.add(16).cast::<f64>() = _rt::as_f64(longitude14);
                                        *base.add(24).cast::<f64>() = _rt::as_f64(latitude14);
                                        match altitude14 {
                                            Some(e) => {
                                                *base.add(32).cast::<u8>() = (1i32) as u8;
                                                *base.add(40).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            None => {
                                                *base.add(32).cast::<u8>() = (0i32) as u8;
                                            }
                                        };
                                    }
                                    V24::Linestring(e) => {
                                        *base.add(8).cast::<u8>() = (19i32) as u8;
                                        let super::super::super::golem::graph::types::Linestring {
                                            coordinates: coordinates15,
                                        } = e;
                                        let vec17 = coordinates15;
                                        let len17 = vec17.len();
                                        let layout17 = _rt::alloc::Layout::from_size_align_unchecked(
                                            vec17.len() * 32,
                                            8,
                                        );
                                        let result17 = if layout17.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout17).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout17);
                                            }
                                            ptr
                                        } else {
                                            ::core::ptr::null_mut()
                                        };
                                        for (i, e) in vec17.into_iter().enumerate() {
                                            let base = result17.add(i * 32);
                                            {
                                                let super::super::super::golem::graph::types::Point {
                                                    longitude: longitude16,
                                                    latitude: latitude16,
                                                    altitude: altitude16,
                                                } = e;
                                                *base.add(0).cast::<f64>() = _rt::as_f64(longitude16);
                                                *base.add(8).cast::<f64>() = _rt::as_f64(latitude16);
                                                match altitude16 {
                                                    Some(e) => {
                                                        *base.add(16).cast::<u8>() = (1i32) as u8;
                                                        *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                    }
                                                    None => {
                                                        *base.add(16).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                        }
                                        *base.add(20).cast::<usize>() = len17;
                                        *base.add(16).cast::<*mut u8>() = result17;
                                        cleanup_list.extend_from_slice(&[(result17, layout17)]);
                                    }
                                    V24::Polygon(e) => {
                                        *base.add(8).cast::<u8>() = (20i32) as u8;
                                        let super::super::super::golem::graph::types::Polygon {
                                            exterior: exterior18,
                                            holes: holes18,
                                        } = e;
                                        let vec20 = exterior18;
                                        let len20 = vec20.len();
                                        let layout20 = _rt::alloc::Layout::from_size_align_unchecked(
                                            vec20.len() * 32,
                                            8,
                                        );
                                        let result20 = if layout20.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout20).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout20);
                                            }
                                            ptr
                                        } else {
                                            ::core::ptr::null_mut()
                                        };
                                        for (i, e) in vec20.into_iter().enumerate() {
                                            let base = result20.add(i * 32);
                                            {
                                                let super::super::super::golem::graph::types::Point {
                                                    longitude: longitude19,
                                                    latitude: latitude19,
                                                    altitude: altitude19,
                                                } = e;
                                                *base.add(0).cast::<f64>() = _rt::as_f64(longitude19);
                                                *base.add(8).cast::<f64>() = _rt::as_f64(latitude19);
                                                match altitude19 {
                                                    Some(e) => {
                                                        *base.add(16).cast::<u8>() = (1i32) as u8;
                                                        *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                    }
                                                    None => {
                                                        *base.add(16).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                        }
                                        *base.add(20).cast::<usize>() = len20;
                                        *base.add(16).cast::<*mut u8>() = result20;
                                        match holes18 {
                                            Some(e) => {
                                                *base.add(24).cast::<u8>() = (1i32) as u8;
                                                let vec23 = e;
                                                let len23 = vec23.len();
                                                let layout23 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec23.len() * 8,
                                                    4,
                                                );
                                                let result23 = if layout23.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout23).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout23);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec23.into_iter().enumerate() {
                                                    let base = result23.add(i * 8);
                                                    {
                                                        let vec22 = e;
                                                        let len22 = vec22.len();
                                                        let layout22 = _rt::alloc::Layout::from_size_align_unchecked(
                                                            vec22.len() * 32,
                                                            8,
                                                        );
                                                        let result22 = if layout22.size() != 0 {
                                                            let ptr = _rt::alloc::alloc(layout22).cast::<u8>();
                                                            if ptr.is_null() {
                                                                _rt::alloc::handle_alloc_error(layout22);
                                                            }
                                                            ptr
                                                        } else {
                                                            ::core::ptr::null_mut()
                                                        };
                                                        for (i, e) in vec22.into_iter().enumerate() {
                                                            let base = result22.add(i * 32);
                                                            {
                                                                let super::super::super::golem::graph::types::Point {
                                                                    longitude: longitude21,
                                                                    latitude: latitude21,
                                                                    altitude: altitude21,
                                                                } = e;
                                                                *base.add(0).cast::<f64>() = _rt::as_f64(longitude21);
                                                                *base.add(8).cast::<f64>() = _rt::as_f64(latitude21);
                                                                match altitude21 {
                                                                    Some(e) => {
                                                                        *base.add(16).cast::<u8>() = (1i32) as u8;
                                                                        *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                                    }
                                                                    None => {
                                                                        *base.add(16).cast::<u8>() = (0i32) as u8;
                                                                    }
                                                                };
                                                            }
                                                        }
                                                        *base.add(4).cast::<usize>() = len22;
                                                        *base.add(0).cast::<*mut u8>() = result22;
                                                        cleanup_list.extend_from_slice(&[(result22, layout22)]);
                                                    }
                                                }
                                                *base.add(32).cast::<usize>() = len23;
                                                *base.add(28).cast::<*mut u8>() = result23;
                                                cleanup_list.extend_from_slice(&[(result23, layout23)]);
                                            }
                                            None => {
                                                *base.add(24).cast::<u8>() = (0i32) as u8;
                                            }
                                        };
                                        cleanup_list.extend_from_slice(&[(result20, layout20)]);
                                    }
                                }
                            }
                        }
                        let ptr26 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:graph/transactions@1.0.0")]
                        extern "C" {
                            #[link_name = "[method]transaction.update-vertex"]
                            fn wit_import(
                                _: i32,
                                _: i32,
                                _: ::core::mem::MaybeUninit<u64>,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: i32,
                            _: ::core::mem::MaybeUninit<u64>,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            result3_0,
                            result3_1,
                            result3_2,
                            result25,
                            len25,
                            ptr26,
                        );
                        let l27 = i32::from(*ptr26.add(0).cast::<u8>());
                        if layout25.size() != 0 {
                            _rt::alloc::dealloc(result25.cast(), layout25);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l27 {
                            0 => {
                                let e = {
                                    let l28 = i32::from(*ptr26.add(8).cast::<u8>());
                                    use super::super::super::golem::graph::types::ElementId as V36;
                                    let v36 = match l28 {
                                        0 => {
                                            let e36 = {
                                                let l29 = *ptr26.add(16).cast::<*mut u8>();
                                                let l30 = *ptr26.add(20).cast::<usize>();
                                                let len31 = l30;
                                                let bytes31 = _rt::Vec::from_raw_parts(
                                                    l29.cast(),
                                                    len31,
                                                    len31,
                                                );
                                                _rt::string_lift(bytes31)
                                            };
                                            V36::StringValue(e36)
                                        }
                                        1 => {
                                            let e36 = {
                                                let l32 = *ptr26.add(16).cast::<i64>();
                                                l32
                                            };
                                            V36::Int64(e36)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 2, "invalid enum discriminant");
                                            let e36 = {
                                                let l33 = *ptr26.add(16).cast::<*mut u8>();
                                                let l34 = *ptr26.add(20).cast::<usize>();
                                                let len35 = l34;
                                                let bytes35 = _rt::Vec::from_raw_parts(
                                                    l33.cast(),
                                                    len35,
                                                    len35,
                                                );
                                                _rt::string_lift(bytes35)
                                            };
                                            V36::Uuid(e36)
                                        }
                                    };
                                    let l37 = *ptr26.add(24).cast::<*mut u8>();
                                    let l38 = *ptr26.add(28).cast::<usize>();
                                    let len39 = l38;
                                    let bytes39 = _rt::Vec::from_raw_parts(
                                        l37.cast(),
                                        len39,
                                        len39,
                                    );
                                    let l40 = *ptr26.add(32).cast::<*mut u8>();
                                    let l41 = *ptr26.add(36).cast::<usize>();
                                    let base45 = l40;
                                    let len45 = l41;
                                    let mut result45 = _rt::Vec::with_capacity(len45);
                                    for i in 0..len45 {
                                        let base = base45.add(i * 8);
                                        let e45 = {
                                            let l42 = *base.add(0).cast::<*mut u8>();
                                            let l43 = *base.add(4).cast::<usize>();
                                            let len44 = l43;
                                            let bytes44 = _rt::Vec::from_raw_parts(
                                                l42.cast(),
                                                len44,
                                                len44,
                                            );
                                            _rt::string_lift(bytes44)
                                        };
                                        result45.push(e45);
                                    }
                                    _rt::cabi_dealloc(base45, len45 * 8, 4);
                                    let l46 = *ptr26.add(40).cast::<*mut u8>();
                                    let l47 = *ptr26.add(44).cast::<usize>();
                                    let base117 = l46;
                                    let len117 = l47;
                                    let mut result117 = _rt::Vec::with_capacity(len117);
                                    for i in 0..len117 {
                                        let base = base117.add(i * 48);
                                        let e117 = {
                                            let l48 = *base.add(0).cast::<*mut u8>();
                                            let l49 = *base.add(4).cast::<usize>();
                                            let len50 = l49;
                                            let bytes50 = _rt::Vec::from_raw_parts(
                                                l48.cast(),
                                                len50,
                                                len50,
                                            );
                                            let l51 = i32::from(*base.add(8).cast::<u8>());
                                            use super::super::super::golem::graph::types::PropertyValue as V116;
                                            let v116 = match l51 {
                                                0 => V116::NullValue,
                                                1 => {
                                                    let e116 = {
                                                        let l52 = i32::from(*base.add(16).cast::<u8>());
                                                        _rt::bool_lift(l52 as u8)
                                                    };
                                                    V116::Boolean(e116)
                                                }
                                                2 => {
                                                    let e116 = {
                                                        let l53 = i32::from(*base.add(16).cast::<i8>());
                                                        l53 as i8
                                                    };
                                                    V116::Int8(e116)
                                                }
                                                3 => {
                                                    let e116 = {
                                                        let l54 = i32::from(*base.add(16).cast::<i16>());
                                                        l54 as i16
                                                    };
                                                    V116::Int16(e116)
                                                }
                                                4 => {
                                                    let e116 = {
                                                        let l55 = *base.add(16).cast::<i32>();
                                                        l55
                                                    };
                                                    V116::Int32(e116)
                                                }
                                                5 => {
                                                    let e116 = {
                                                        let l56 = *base.add(16).cast::<i64>();
                                                        l56
                                                    };
                                                    V116::Int64(e116)
                                                }
                                                6 => {
                                                    let e116 = {
                                                        let l57 = i32::from(*base.add(16).cast::<u8>());
                                                        l57 as u8
                                                    };
                                                    V116::Uint8(e116)
                                                }
                                                7 => {
                                                    let e116 = {
                                                        let l58 = i32::from(*base.add(16).cast::<u16>());
                                                        l58 as u16
                                                    };
                                                    V116::Uint16(e116)
                                                }
                                                8 => {
                                                    let e116 = {
                                                        let l59 = *base.add(16).cast::<i32>();
                                                        l59 as u32
                                                    };
                                                    V116::Uint32(e116)
                                                }
                                                9 => {
                                                    let e116 = {
                                                        let l60 = *base.add(16).cast::<i64>();
                                                        l60 as u64
                                                    };
                                                    V116::Uint64(e116)
                                                }
                                                10 => {
                                                    let e116 = {
                                                        let l61 = *base.add(16).cast::<f32>();
                                                        l61
                                                    };
                                                    V116::Float32Value(e116)
                                                }
                                                11 => {
                                                    let e116 = {
                                                        let l62 = *base.add(16).cast::<f64>();
                                                        l62
                                                    };
                                                    V116::Float64Value(e116)
                                                }
                                                12 => {
                                                    let e116 = {
                                                        let l63 = *base.add(16).cast::<*mut u8>();
                                                        let l64 = *base.add(20).cast::<usize>();
                                                        let len65 = l64;
                                                        let bytes65 = _rt::Vec::from_raw_parts(
                                                            l63.cast(),
                                                            len65,
                                                            len65,
                                                        );
                                                        _rt::string_lift(bytes65)
                                                    };
                                                    V116::StringValue(e116)
                                                }
                                                13 => {
                                                    let e116 = {
                                                        let l66 = *base.add(16).cast::<*mut u8>();
                                                        let l67 = *base.add(20).cast::<usize>();
                                                        let len68 = l67;
                                                        _rt::Vec::from_raw_parts(l66.cast(), len68, len68)
                                                    };
                                                    V116::Bytes(e116)
                                                }
                                                14 => {
                                                    let e116 = {
                                                        let l69 = *base.add(16).cast::<i32>();
                                                        let l70 = i32::from(*base.add(20).cast::<u8>());
                                                        let l71 = i32::from(*base.add(21).cast::<u8>());
                                                        super::super::super::golem::graph::types::Date {
                                                            year: l69 as u32,
                                                            month: l70 as u8,
                                                            day: l71 as u8,
                                                        }
                                                    };
                                                    V116::Date(e116)
                                                }
                                                15 => {
                                                    let e116 = {
                                                        let l72 = i32::from(*base.add(16).cast::<u8>());
                                                        let l73 = i32::from(*base.add(17).cast::<u8>());
                                                        let l74 = i32::from(*base.add(18).cast::<u8>());
                                                        let l75 = *base.add(20).cast::<i32>();
                                                        super::super::super::golem::graph::types::Time {
                                                            hour: l72 as u8,
                                                            minute: l73 as u8,
                                                            second: l74 as u8,
                                                            nanosecond: l75 as u32,
                                                        }
                                                    };
                                                    V116::Time(e116)
                                                }
                                                16 => {
                                                    let e116 = {
                                                        let l76 = *base.add(16).cast::<i32>();
                                                        let l77 = i32::from(*base.add(20).cast::<u8>());
                                                        let l78 = i32::from(*base.add(21).cast::<u8>());
                                                        let l79 = i32::from(*base.add(24).cast::<u8>());
                                                        let l80 = i32::from(*base.add(25).cast::<u8>());
                                                        let l81 = i32::from(*base.add(26).cast::<u8>());
                                                        let l82 = *base.add(28).cast::<i32>();
                                                        let l83 = i32::from(*base.add(32).cast::<u8>());
                                                        super::super::super::golem::graph::types::Datetime {
                                                            date: super::super::super::golem::graph::types::Date {
                                                                year: l76 as u32,
                                                                month: l77 as u8,
                                                                day: l78 as u8,
                                                            },
                                                            time: super::super::super::golem::graph::types::Time {
                                                                hour: l79 as u8,
                                                                minute: l80 as u8,
                                                                second: l81 as u8,
                                                                nanosecond: l82 as u32,
                                                            },
                                                            timezone_offset_minutes: match l83 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l84 = i32::from(*base.add(34).cast::<i16>());
                                                                        l84 as i16
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                        }
                                                    };
                                                    V116::Datetime(e116)
                                                }
                                                17 => {
                                                    let e116 = {
                                                        let l85 = *base.add(16).cast::<i64>();
                                                        let l86 = *base.add(24).cast::<i32>();
                                                        super::super::super::golem::graph::types::Duration {
                                                            seconds: l85,
                                                            nanoseconds: l86 as u32,
                                                        }
                                                    };
                                                    V116::Duration(e116)
                                                }
                                                18 => {
                                                    let e116 = {
                                                        let l87 = *base.add(16).cast::<f64>();
                                                        let l88 = *base.add(24).cast::<f64>();
                                                        let l89 = i32::from(*base.add(32).cast::<u8>());
                                                        super::super::super::golem::graph::types::Point {
                                                            longitude: l87,
                                                            latitude: l88,
                                                            altitude: match l89 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l90 = *base.add(40).cast::<f64>();
                                                                        l90
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                        }
                                                    };
                                                    V116::Point(e116)
                                                }
                                                19 => {
                                                    let e116 = {
                                                        let l91 = *base.add(16).cast::<*mut u8>();
                                                        let l92 = *base.add(20).cast::<usize>();
                                                        let base97 = l91;
                                                        let len97 = l92;
                                                        let mut result97 = _rt::Vec::with_capacity(len97);
                                                        for i in 0..len97 {
                                                            let base = base97.add(i * 32);
                                                            let e97 = {
                                                                let l93 = *base.add(0).cast::<f64>();
                                                                let l94 = *base.add(8).cast::<f64>();
                                                                let l95 = i32::from(*base.add(16).cast::<u8>());
                                                                super::super::super::golem::graph::types::Point {
                                                                    longitude: l93,
                                                                    latitude: l94,
                                                                    altitude: match l95 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l96 = *base.add(24).cast::<f64>();
                                                                                l96
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            result97.push(e97);
                                                        }
                                                        _rt::cabi_dealloc(base97, len97 * 32, 8);
                                                        super::super::super::golem::graph::types::Linestring {
                                                            coordinates: result97,
                                                        }
                                                    };
                                                    V116::Linestring(e116)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 20, "invalid enum discriminant");
                                                    let e116 = {
                                                        let l98 = *base.add(16).cast::<*mut u8>();
                                                        let l99 = *base.add(20).cast::<usize>();
                                                        let base104 = l98;
                                                        let len104 = l99;
                                                        let mut result104 = _rt::Vec::with_capacity(len104);
                                                        for i in 0..len104 {
                                                            let base = base104.add(i * 32);
                                                            let e104 = {
                                                                let l100 = *base.add(0).cast::<f64>();
                                                                let l101 = *base.add(8).cast::<f64>();
                                                                let l102 = i32::from(*base.add(16).cast::<u8>());
                                                                super::super::super::golem::graph::types::Point {
                                                                    longitude: l100,
                                                                    latitude: l101,
                                                                    altitude: match l102 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l103 = *base.add(24).cast::<f64>();
                                                                                l103
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            result104.push(e104);
                                                        }
                                                        _rt::cabi_dealloc(base104, len104 * 32, 8);
                                                        let l105 = i32::from(*base.add(24).cast::<u8>());
                                                        super::super::super::golem::graph::types::Polygon {
                                                            exterior: result104,
                                                            holes: match l105 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l106 = *base.add(28).cast::<*mut u8>();
                                                                        let l107 = *base.add(32).cast::<usize>();
                                                                        let base115 = l106;
                                                                        let len115 = l107;
                                                                        let mut result115 = _rt::Vec::with_capacity(len115);
                                                                        for i in 0..len115 {
                                                                            let base = base115.add(i * 8);
                                                                            let e115 = {
                                                                                let l108 = *base.add(0).cast::<*mut u8>();
                                                                                let l109 = *base.add(4).cast::<usize>();
                                                                                let base114 = l108;
                                                                                let len114 = l109;
                                                                                let mut result114 = _rt::Vec::with_capacity(len114);
                                                                                for i in 0..len114 {
                                                                                    let base = base114.add(i * 32);
                                                                                    let e114 = {
                                                                                        let l110 = *base.add(0).cast::<f64>();
                                                                                        let l111 = *base.add(8).cast::<f64>();
                                                                                        let l112 = i32::from(*base.add(16).cast::<u8>());
                                                                                        super::super::super::golem::graph::types::Point {
                                                                                            longitude: l110,
                                                                                            latitude: l111,
                                                                                            altitude: match l112 {
                                                                                                0 => None,
                                                                                                1 => {
                                                                                                    let e = {
                                                                                                        let l113 = *base.add(24).cast::<f64>();
                                                                                                        l113
                                                                                                    };
                                                                                                    Some(e)
                                                                                                }
                                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                                            },
                                                                                        }
                                                                                    };
                                                                                    result114.push(e114);
                                                                                }
                                                                                _rt::cabi_dealloc(base114, len114 * 32, 8);
                                                                                result114
                                                                            };
                                                                            result115.push(e115);
                                                                        }
                                                                        _rt::cabi_dealloc(base115, len115 * 8, 4);
                                                                        result115
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                        }
                                                    };
                                                    V116::Polygon(e116)
                                                }
                                            };
                                            (_rt::string_lift(bytes50), v116)
                                        };
                                        result117.push(e117);
                                    }
                                    _rt::cabi_dealloc(base117, len117 * 48, 8);
                                    super::super::super::golem::graph::types::Vertex {
                                        id: v36,
                                        vertex_type: _rt::string_lift(bytes39),
                                        additional_labels: result45,
                                        properties: result117,
                                    }
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l118 = i32::from(*ptr26.add(8).cast::<u8>());
                                    use super::super::super::golem::graph::errors::GraphError as V173;
                                    let v173 = match l118 {
                                        0 => {
                                            let e173 = {
                                                let l119 = *ptr26.add(16).cast::<*mut u8>();
                                                let l120 = *ptr26.add(20).cast::<usize>();
                                                let len121 = l120;
                                                let bytes121 = _rt::Vec::from_raw_parts(
                                                    l119.cast(),
                                                    len121,
                                                    len121,
                                                );
                                                _rt::string_lift(bytes121)
                                            };
                                            V173::UnsupportedOperation(e173)
                                        }
                                        1 => {
                                            let e173 = {
                                                let l122 = *ptr26.add(16).cast::<*mut u8>();
                                                let l123 = *ptr26.add(20).cast::<usize>();
                                                let len124 = l123;
                                                let bytes124 = _rt::Vec::from_raw_parts(
                                                    l122.cast(),
                                                    len124,
                                                    len124,
                                                );
                                                _rt::string_lift(bytes124)
                                            };
                                            V173::ConnectionFailed(e173)
                                        }
                                        2 => {
                                            let e173 = {
                                                let l125 = *ptr26.add(16).cast::<*mut u8>();
                                                let l126 = *ptr26.add(20).cast::<usize>();
                                                let len127 = l126;
                                                let bytes127 = _rt::Vec::from_raw_parts(
                                                    l125.cast(),
                                                    len127,
                                                    len127,
                                                );
                                                _rt::string_lift(bytes127)
                                            };
                                            V173::AuthenticationFailed(e173)
                                        }
                                        3 => {
                                            let e173 = {
                                                let l128 = *ptr26.add(16).cast::<*mut u8>();
                                                let l129 = *ptr26.add(20).cast::<usize>();
                                                let len130 = l129;
                                                let bytes130 = _rt::Vec::from_raw_parts(
                                                    l128.cast(),
                                                    len130,
                                                    len130,
                                                );
                                                _rt::string_lift(bytes130)
                                            };
                                            V173::AuthorizationFailed(e173)
                                        }
                                        4 => {
                                            let e173 = {
                                                let l131 = i32::from(*ptr26.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V139;
                                                let v139 = match l131 {
                                                    0 => {
                                                        let e139 = {
                                                            let l132 = *ptr26.add(24).cast::<*mut u8>();
                                                            let l133 = *ptr26.add(28).cast::<usize>();
                                                            let len134 = l133;
                                                            let bytes134 = _rt::Vec::from_raw_parts(
                                                                l132.cast(),
                                                                len134,
                                                                len134,
                                                            );
                                                            _rt::string_lift(bytes134)
                                                        };
                                                        V139::StringValue(e139)
                                                    }
                                                    1 => {
                                                        let e139 = {
                                                            let l135 = *ptr26.add(24).cast::<i64>();
                                                            l135
                                                        };
                                                        V139::Int64(e139)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e139 = {
                                                            let l136 = *ptr26.add(24).cast::<*mut u8>();
                                                            let l137 = *ptr26.add(28).cast::<usize>();
                                                            let len138 = l137;
                                                            let bytes138 = _rt::Vec::from_raw_parts(
                                                                l136.cast(),
                                                                len138,
                                                                len138,
                                                            );
                                                            _rt::string_lift(bytes138)
                                                        };
                                                        V139::Uuid(e139)
                                                    }
                                                };
                                                v139
                                            };
                                            V173::ElementNotFound(e173)
                                        }
                                        5 => {
                                            let e173 = {
                                                let l140 = i32::from(*ptr26.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V148;
                                                let v148 = match l140 {
                                                    0 => {
                                                        let e148 = {
                                                            let l141 = *ptr26.add(24).cast::<*mut u8>();
                                                            let l142 = *ptr26.add(28).cast::<usize>();
                                                            let len143 = l142;
                                                            let bytes143 = _rt::Vec::from_raw_parts(
                                                                l141.cast(),
                                                                len143,
                                                                len143,
                                                            );
                                                            _rt::string_lift(bytes143)
                                                        };
                                                        V148::StringValue(e148)
                                                    }
                                                    1 => {
                                                        let e148 = {
                                                            let l144 = *ptr26.add(24).cast::<i64>();
                                                            l144
                                                        };
                                                        V148::Int64(e148)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e148 = {
                                                            let l145 = *ptr26.add(24).cast::<*mut u8>();
                                                            let l146 = *ptr26.add(28).cast::<usize>();
                                                            let len147 = l146;
                                                            let bytes147 = _rt::Vec::from_raw_parts(
                                                                l145.cast(),
                                                                len147,
                                                                len147,
                                                            );
                                                            _rt::string_lift(bytes147)
                                                        };
                                                        V148::Uuid(e148)
                                                    }
                                                };
                                                v148
                                            };
                                            V173::DuplicateElement(e173)
                                        }
                                        6 => {
                                            let e173 = {
                                                let l149 = *ptr26.add(16).cast::<*mut u8>();
                                                let l150 = *ptr26.add(20).cast::<usize>();
                                                let len151 = l150;
                                                let bytes151 = _rt::Vec::from_raw_parts(
                                                    l149.cast(),
                                                    len151,
                                                    len151,
                                                );
                                                _rt::string_lift(bytes151)
                                            };
                                            V173::SchemaViolation(e173)
                                        }
                                        7 => {
                                            let e173 = {
                                                let l152 = *ptr26.add(16).cast::<*mut u8>();
                                                let l153 = *ptr26.add(20).cast::<usize>();
                                                let len154 = l153;
                                                let bytes154 = _rt::Vec::from_raw_parts(
                                                    l152.cast(),
                                                    len154,
                                                    len154,
                                                );
                                                _rt::string_lift(bytes154)
                                            };
                                            V173::ConstraintViolation(e173)
                                        }
                                        8 => {
                                            let e173 = {
                                                let l155 = *ptr26.add(16).cast::<*mut u8>();
                                                let l156 = *ptr26.add(20).cast::<usize>();
                                                let len157 = l156;
                                                let bytes157 = _rt::Vec::from_raw_parts(
                                                    l155.cast(),
                                                    len157,
                                                    len157,
                                                );
                                                _rt::string_lift(bytes157)
                                            };
                                            V173::InvalidPropertyType(e173)
                                        }
                                        9 => {
                                            let e173 = {
                                                let l158 = *ptr26.add(16).cast::<*mut u8>();
                                                let l159 = *ptr26.add(20).cast::<usize>();
                                                let len160 = l159;
                                                let bytes160 = _rt::Vec::from_raw_parts(
                                                    l158.cast(),
                                                    len160,
                                                    len160,
                                                );
                                                _rt::string_lift(bytes160)
                                            };
                                            V173::InvalidQuery(e173)
                                        }
                                        10 => {
                                            let e173 = {
                                                let l161 = *ptr26.add(16).cast::<*mut u8>();
                                                let l162 = *ptr26.add(20).cast::<usize>();
                                                let len163 = l162;
                                                let bytes163 = _rt::Vec::from_raw_parts(
                                                    l161.cast(),
                                                    len163,
                                                    len163,
                                                );
                                                _rt::string_lift(bytes163)
                                            };
                                            V173::TransactionFailed(e173)
                                        }
                                        11 => V173::TransactionConflict,
                                        12 => V173::TransactionTimeout,
                                        13 => V173::DeadlockDetected,
                                        14 => V173::Timeout,
                                        15 => {
                                            let e173 = {
                                                let l164 = *ptr26.add(16).cast::<*mut u8>();
                                                let l165 = *ptr26.add(20).cast::<usize>();
                                                let len166 = l165;
                                                let bytes166 = _rt::Vec::from_raw_parts(
                                                    l164.cast(),
                                                    len166,
                                                    len166,
                                                );
                                                _rt::string_lift(bytes166)
                                            };
                                            V173::ResourceExhausted(e173)
                                        }
                                        16 => {
                                            let e173 = {
                                                let l167 = *ptr26.add(16).cast::<*mut u8>();
                                                let l168 = *ptr26.add(20).cast::<usize>();
                                                let len169 = l168;
                                                let bytes169 = _rt::Vec::from_raw_parts(
                                                    l167.cast(),
                                                    len169,
                                                    len169,
                                                );
                                                _rt::string_lift(bytes169)
                                            };
                                            V173::InternalError(e173)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 17, "invalid enum discriminant");
                                            let e173 = {
                                                let l170 = *ptr26.add(16).cast::<*mut u8>();
                                                let l171 = *ptr26.add(20).cast::<usize>();
                                                let len172 = l171;
                                                let bytes172 = _rt::Vec::from_raw_parts(
                                                    l170.cast(),
                                                    len172,
                                                    len172,
                                                );
                                                _rt::string_lift(bytes172)
                                            };
                                            V173::ServiceUnavailable(e173)
                                        }
                                    };
                                    v173
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Transaction {
                #[allow(unused_unsafe, clippy::all)]
                /// Update specific vertex properties (partial update)
                pub fn update_vertex_properties(
                    &self,
                    id: &ElementId,
                    updates: &PropertyMap,
                ) -> Result<Vertex, GraphError> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 48]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 48],
                        );
                        use super::super::super::golem::graph::types::ElementId as V2;
                        let (result3_0, result3_1, result3_2) = match id {
                            V2::StringValue(e) => {
                                let vec0 = e;
                                let ptr0 = vec0.as_ptr().cast::<u8>();
                                let len0 = vec0.len();
                                (
                                    0i32,
                                    {
                                        let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                        t.as_mut_ptr().cast::<*mut u8>().write(ptr0.cast_mut());
                                        t
                                    },
                                    len0,
                                )
                            }
                            V2::Int64(e) => {
                                (
                                    1i32,
                                    ::core::mem::MaybeUninit::new(_rt::as_i64(e) as u64),
                                    0usize,
                                )
                            }
                            V2::Uuid(e) => {
                                let vec1 = e;
                                let ptr1 = vec1.as_ptr().cast::<u8>();
                                let len1 = vec1.len();
                                (
                                    2i32,
                                    {
                                        let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                        t.as_mut_ptr().cast::<*mut u8>().write(ptr1.cast_mut());
                                        t
                                    },
                                    len1,
                                )
                            }
                        };
                        let vec25 = updates;
                        let len25 = vec25.len();
                        let layout25 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec25.len() * 48,
                            8,
                        );
                        let result25 = if layout25.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout25).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout25);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec25.into_iter().enumerate() {
                            let base = result25.add(i * 48);
                            {
                                let (t4_0, t4_1) = e;
                                let vec5 = t4_0;
                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                let len5 = vec5.len();
                                *base.add(4).cast::<usize>() = len5;
                                *base.add(0).cast::<*mut u8>() = ptr5.cast_mut();
                                use super::super::super::golem::graph::types::PropertyValue as V24;
                                match t4_1 {
                                    V24::NullValue => {
                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                    }
                                    V24::Boolean(e) => {
                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                        *base.add(16).cast::<u8>() = (match e {
                                            true => 1,
                                            false => 0,
                                        }) as u8;
                                    }
                                    V24::Int8(e) => {
                                        *base.add(8).cast::<u8>() = (2i32) as u8;
                                        *base.add(16).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                    }
                                    V24::Int16(e) => {
                                        *base.add(8).cast::<u8>() = (3i32) as u8;
                                        *base.add(16).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                    }
                                    V24::Int32(e) => {
                                        *base.add(8).cast::<u8>() = (4i32) as u8;
                                        *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    V24::Int64(e) => {
                                        *base.add(8).cast::<u8>() = (5i32) as u8;
                                        *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    V24::Uint8(e) => {
                                        *base.add(8).cast::<u8>() = (6i32) as u8;
                                        *base.add(16).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                    }
                                    V24::Uint16(e) => {
                                        *base.add(8).cast::<u8>() = (7i32) as u8;
                                        *base.add(16).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                    }
                                    V24::Uint32(e) => {
                                        *base.add(8).cast::<u8>() = (8i32) as u8;
                                        *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    V24::Uint64(e) => {
                                        *base.add(8).cast::<u8>() = (9i32) as u8;
                                        *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    V24::Float32Value(e) => {
                                        *base.add(8).cast::<u8>() = (10i32) as u8;
                                        *base.add(16).cast::<f32>() = _rt::as_f32(e);
                                    }
                                    V24::Float64Value(e) => {
                                        *base.add(8).cast::<u8>() = (11i32) as u8;
                                        *base.add(16).cast::<f64>() = _rt::as_f64(e);
                                    }
                                    V24::StringValue(e) => {
                                        *base.add(8).cast::<u8>() = (12i32) as u8;
                                        let vec6 = e;
                                        let ptr6 = vec6.as_ptr().cast::<u8>();
                                        let len6 = vec6.len();
                                        *base.add(20).cast::<usize>() = len6;
                                        *base.add(16).cast::<*mut u8>() = ptr6.cast_mut();
                                    }
                                    V24::Bytes(e) => {
                                        *base.add(8).cast::<u8>() = (13i32) as u8;
                                        let vec7 = e;
                                        let ptr7 = vec7.as_ptr().cast::<u8>();
                                        let len7 = vec7.len();
                                        *base.add(20).cast::<usize>() = len7;
                                        *base.add(16).cast::<*mut u8>() = ptr7.cast_mut();
                                    }
                                    V24::Date(e) => {
                                        *base.add(8).cast::<u8>() = (14i32) as u8;
                                        let super::super::super::golem::graph::types::Date {
                                            year: year8,
                                            month: month8,
                                            day: day8,
                                        } = e;
                                        *base.add(16).cast::<i32>() = _rt::as_i32(year8);
                                        *base.add(20).cast::<u8>() = (_rt::as_i32(month8)) as u8;
                                        *base.add(21).cast::<u8>() = (_rt::as_i32(day8)) as u8;
                                    }
                                    V24::Time(e) => {
                                        *base.add(8).cast::<u8>() = (15i32) as u8;
                                        let super::super::super::golem::graph::types::Time {
                                            hour: hour9,
                                            minute: minute9,
                                            second: second9,
                                            nanosecond: nanosecond9,
                                        } = e;
                                        *base.add(16).cast::<u8>() = (_rt::as_i32(hour9)) as u8;
                                        *base.add(17).cast::<u8>() = (_rt::as_i32(minute9)) as u8;
                                        *base.add(18).cast::<u8>() = (_rt::as_i32(second9)) as u8;
                                        *base.add(20).cast::<i32>() = _rt::as_i32(nanosecond9);
                                    }
                                    V24::Datetime(e) => {
                                        *base.add(8).cast::<u8>() = (16i32) as u8;
                                        let super::super::super::golem::graph::types::Datetime {
                                            date: date10,
                                            time: time10,
                                            timezone_offset_minutes: timezone_offset_minutes10,
                                        } = e;
                                        let super::super::super::golem::graph::types::Date {
                                            year: year11,
                                            month: month11,
                                            day: day11,
                                        } = date10;
                                        *base.add(16).cast::<i32>() = _rt::as_i32(year11);
                                        *base.add(20).cast::<u8>() = (_rt::as_i32(month11)) as u8;
                                        *base.add(21).cast::<u8>() = (_rt::as_i32(day11)) as u8;
                                        let super::super::super::golem::graph::types::Time {
                                            hour: hour12,
                                            minute: minute12,
                                            second: second12,
                                            nanosecond: nanosecond12,
                                        } = time10;
                                        *base.add(24).cast::<u8>() = (_rt::as_i32(hour12)) as u8;
                                        *base.add(25).cast::<u8>() = (_rt::as_i32(minute12)) as u8;
                                        *base.add(26).cast::<u8>() = (_rt::as_i32(second12)) as u8;
                                        *base.add(28).cast::<i32>() = _rt::as_i32(nanosecond12);
                                        match timezone_offset_minutes10 {
                                            Some(e) => {
                                                *base.add(32).cast::<u8>() = (1i32) as u8;
                                                *base.add(34).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            None => {
                                                *base.add(32).cast::<u8>() = (0i32) as u8;
                                            }
                                        };
                                    }
                                    V24::Duration(e) => {
                                        *base.add(8).cast::<u8>() = (17i32) as u8;
                                        let super::super::super::golem::graph::types::Duration {
                                            seconds: seconds13,
                                            nanoseconds: nanoseconds13,
                                        } = e;
                                        *base.add(16).cast::<i64>() = _rt::as_i64(seconds13);
                                        *base.add(24).cast::<i32>() = _rt::as_i32(nanoseconds13);
                                    }
                                    V24::Point(e) => {
                                        *base.add(8).cast::<u8>() = (18i32) as u8;
                                        let super::super::super::golem::graph::types::Point {
                                            longitude: longitude14,
                                            latitude: latitude14,
                                            altitude: altitude14,
                                        } = e;
                                        *base.add(16).cast::<f64>() = _rt::as_f64(longitude14);
                                        *base.add(24).cast::<f64>() = _rt::as_f64(latitude14);
                                        match altitude14 {
                                            Some(e) => {
                                                *base.add(32).cast::<u8>() = (1i32) as u8;
                                                *base.add(40).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            None => {
                                                *base.add(32).cast::<u8>() = (0i32) as u8;
                                            }
                                        };
                                    }
                                    V24::Linestring(e) => {
                                        *base.add(8).cast::<u8>() = (19i32) as u8;
                                        let super::super::super::golem::graph::types::Linestring {
                                            coordinates: coordinates15,
                                        } = e;
                                        let vec17 = coordinates15;
                                        let len17 = vec17.len();
                                        let layout17 = _rt::alloc::Layout::from_size_align_unchecked(
                                            vec17.len() * 32,
                                            8,
                                        );
                                        let result17 = if layout17.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout17).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout17);
                                            }
                                            ptr
                                        } else {
                                            ::core::ptr::null_mut()
                                        };
                                        for (i, e) in vec17.into_iter().enumerate() {
                                            let base = result17.add(i * 32);
                                            {
                                                let super::super::super::golem::graph::types::Point {
                                                    longitude: longitude16,
                                                    latitude: latitude16,
                                                    altitude: altitude16,
                                                } = e;
                                                *base.add(0).cast::<f64>() = _rt::as_f64(longitude16);
                                                *base.add(8).cast::<f64>() = _rt::as_f64(latitude16);
                                                match altitude16 {
                                                    Some(e) => {
                                                        *base.add(16).cast::<u8>() = (1i32) as u8;
                                                        *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                    }
                                                    None => {
                                                        *base.add(16).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                        }
                                        *base.add(20).cast::<usize>() = len17;
                                        *base.add(16).cast::<*mut u8>() = result17;
                                        cleanup_list.extend_from_slice(&[(result17, layout17)]);
                                    }
                                    V24::Polygon(e) => {
                                        *base.add(8).cast::<u8>() = (20i32) as u8;
                                        let super::super::super::golem::graph::types::Polygon {
                                            exterior: exterior18,
                                            holes: holes18,
                                        } = e;
                                        let vec20 = exterior18;
                                        let len20 = vec20.len();
                                        let layout20 = _rt::alloc::Layout::from_size_align_unchecked(
                                            vec20.len() * 32,
                                            8,
                                        );
                                        let result20 = if layout20.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout20).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout20);
                                            }
                                            ptr
                                        } else {
                                            ::core::ptr::null_mut()
                                        };
                                        for (i, e) in vec20.into_iter().enumerate() {
                                            let base = result20.add(i * 32);
                                            {
                                                let super::super::super::golem::graph::types::Point {
                                                    longitude: longitude19,
                                                    latitude: latitude19,
                                                    altitude: altitude19,
                                                } = e;
                                                *base.add(0).cast::<f64>() = _rt::as_f64(longitude19);
                                                *base.add(8).cast::<f64>() = _rt::as_f64(latitude19);
                                                match altitude19 {
                                                    Some(e) => {
                                                        *base.add(16).cast::<u8>() = (1i32) as u8;
                                                        *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                    }
                                                    None => {
                                                        *base.add(16).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                        }
                                        *base.add(20).cast::<usize>() = len20;
                                        *base.add(16).cast::<*mut u8>() = result20;
                                        match holes18 {
                                            Some(e) => {
                                                *base.add(24).cast::<u8>() = (1i32) as u8;
                                                let vec23 = e;
                                                let len23 = vec23.len();
                                                let layout23 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec23.len() * 8,
                                                    4,
                                                );
                                                let result23 = if layout23.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout23).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout23);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec23.into_iter().enumerate() {
                                                    let base = result23.add(i * 8);
                                                    {
                                                        let vec22 = e;
                                                        let len22 = vec22.len();
                                                        let layout22 = _rt::alloc::Layout::from_size_align_unchecked(
                                                            vec22.len() * 32,
                                                            8,
                                                        );
                                                        let result22 = if layout22.size() != 0 {
                                                            let ptr = _rt::alloc::alloc(layout22).cast::<u8>();
                                                            if ptr.is_null() {
                                                                _rt::alloc::handle_alloc_error(layout22);
                                                            }
                                                            ptr
                                                        } else {
                                                            ::core::ptr::null_mut()
                                                        };
                                                        for (i, e) in vec22.into_iter().enumerate() {
                                                            let base = result22.add(i * 32);
                                                            {
                                                                let super::super::super::golem::graph::types::Point {
                                                                    longitude: longitude21,
                                                                    latitude: latitude21,
                                                                    altitude: altitude21,
                                                                } = e;
                                                                *base.add(0).cast::<f64>() = _rt::as_f64(longitude21);
                                                                *base.add(8).cast::<f64>() = _rt::as_f64(latitude21);
                                                                match altitude21 {
                                                                    Some(e) => {
                                                                        *base.add(16).cast::<u8>() = (1i32) as u8;
                                                                        *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                                    }
                                                                    None => {
                                                                        *base.add(16).cast::<u8>() = (0i32) as u8;
                                                                    }
                                                                };
                                                            }
                                                        }
                                                        *base.add(4).cast::<usize>() = len22;
                                                        *base.add(0).cast::<*mut u8>() = result22;
                                                        cleanup_list.extend_from_slice(&[(result22, layout22)]);
                                                    }
                                                }
                                                *base.add(32).cast::<usize>() = len23;
                                                *base.add(28).cast::<*mut u8>() = result23;
                                                cleanup_list.extend_from_slice(&[(result23, layout23)]);
                                            }
                                            None => {
                                                *base.add(24).cast::<u8>() = (0i32) as u8;
                                            }
                                        };
                                        cleanup_list.extend_from_slice(&[(result20, layout20)]);
                                    }
                                }
                            }
                        }
                        let ptr26 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:graph/transactions@1.0.0")]
                        extern "C" {
                            #[link_name = "[method]transaction.update-vertex-properties"]
                            fn wit_import(
                                _: i32,
                                _: i32,
                                _: ::core::mem::MaybeUninit<u64>,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: i32,
                            _: ::core::mem::MaybeUninit<u64>,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            result3_0,
                            result3_1,
                            result3_2,
                            result25,
                            len25,
                            ptr26,
                        );
                        let l27 = i32::from(*ptr26.add(0).cast::<u8>());
                        if layout25.size() != 0 {
                            _rt::alloc::dealloc(result25.cast(), layout25);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l27 {
                            0 => {
                                let e = {
                                    let l28 = i32::from(*ptr26.add(8).cast::<u8>());
                                    use super::super::super::golem::graph::types::ElementId as V36;
                                    let v36 = match l28 {
                                        0 => {
                                            let e36 = {
                                                let l29 = *ptr26.add(16).cast::<*mut u8>();
                                                let l30 = *ptr26.add(20).cast::<usize>();
                                                let len31 = l30;
                                                let bytes31 = _rt::Vec::from_raw_parts(
                                                    l29.cast(),
                                                    len31,
                                                    len31,
                                                );
                                                _rt::string_lift(bytes31)
                                            };
                                            V36::StringValue(e36)
                                        }
                                        1 => {
                                            let e36 = {
                                                let l32 = *ptr26.add(16).cast::<i64>();
                                                l32
                                            };
                                            V36::Int64(e36)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 2, "invalid enum discriminant");
                                            let e36 = {
                                                let l33 = *ptr26.add(16).cast::<*mut u8>();
                                                let l34 = *ptr26.add(20).cast::<usize>();
                                                let len35 = l34;
                                                let bytes35 = _rt::Vec::from_raw_parts(
                                                    l33.cast(),
                                                    len35,
                                                    len35,
                                                );
                                                _rt::string_lift(bytes35)
                                            };
                                            V36::Uuid(e36)
                                        }
                                    };
                                    let l37 = *ptr26.add(24).cast::<*mut u8>();
                                    let l38 = *ptr26.add(28).cast::<usize>();
                                    let len39 = l38;
                                    let bytes39 = _rt::Vec::from_raw_parts(
                                        l37.cast(),
                                        len39,
                                        len39,
                                    );
                                    let l40 = *ptr26.add(32).cast::<*mut u8>();
                                    let l41 = *ptr26.add(36).cast::<usize>();
                                    let base45 = l40;
                                    let len45 = l41;
                                    let mut result45 = _rt::Vec::with_capacity(len45);
                                    for i in 0..len45 {
                                        let base = base45.add(i * 8);
                                        let e45 = {
                                            let l42 = *base.add(0).cast::<*mut u8>();
                                            let l43 = *base.add(4).cast::<usize>();
                                            let len44 = l43;
                                            let bytes44 = _rt::Vec::from_raw_parts(
                                                l42.cast(),
                                                len44,
                                                len44,
                                            );
                                            _rt::string_lift(bytes44)
                                        };
                                        result45.push(e45);
                                    }
                                    _rt::cabi_dealloc(base45, len45 * 8, 4);
                                    let l46 = *ptr26.add(40).cast::<*mut u8>();
                                    let l47 = *ptr26.add(44).cast::<usize>();
                                    let base117 = l46;
                                    let len117 = l47;
                                    let mut result117 = _rt::Vec::with_capacity(len117);
                                    for i in 0..len117 {
                                        let base = base117.add(i * 48);
                                        let e117 = {
                                            let l48 = *base.add(0).cast::<*mut u8>();
                                            let l49 = *base.add(4).cast::<usize>();
                                            let len50 = l49;
                                            let bytes50 = _rt::Vec::from_raw_parts(
                                                l48.cast(),
                                                len50,
                                                len50,
                                            );
                                            let l51 = i32::from(*base.add(8).cast::<u8>());
                                            use super::super::super::golem::graph::types::PropertyValue as V116;
                                            let v116 = match l51 {
                                                0 => V116::NullValue,
                                                1 => {
                                                    let e116 = {
                                                        let l52 = i32::from(*base.add(16).cast::<u8>());
                                                        _rt::bool_lift(l52 as u8)
                                                    };
                                                    V116::Boolean(e116)
                                                }
                                                2 => {
                                                    let e116 = {
                                                        let l53 = i32::from(*base.add(16).cast::<i8>());
                                                        l53 as i8
                                                    };
                                                    V116::Int8(e116)
                                                }
                                                3 => {
                                                    let e116 = {
                                                        let l54 = i32::from(*base.add(16).cast::<i16>());
                                                        l54 as i16
                                                    };
                                                    V116::Int16(e116)
                                                }
                                                4 => {
                                                    let e116 = {
                                                        let l55 = *base.add(16).cast::<i32>();
                                                        l55
                                                    };
                                                    V116::Int32(e116)
                                                }
                                                5 => {
                                                    let e116 = {
                                                        let l56 = *base.add(16).cast::<i64>();
                                                        l56
                                                    };
                                                    V116::Int64(e116)
                                                }
                                                6 => {
                                                    let e116 = {
                                                        let l57 = i32::from(*base.add(16).cast::<u8>());
                                                        l57 as u8
                                                    };
                                                    V116::Uint8(e116)
                                                }
                                                7 => {
                                                    let e116 = {
                                                        let l58 = i32::from(*base.add(16).cast::<u16>());
                                                        l58 as u16
                                                    };
                                                    V116::Uint16(e116)
                                                }
                                                8 => {
                                                    let e116 = {
                                                        let l59 = *base.add(16).cast::<i32>();
                                                        l59 as u32
                                                    };
                                                    V116::Uint32(e116)
                                                }
                                                9 => {
                                                    let e116 = {
                                                        let l60 = *base.add(16).cast::<i64>();
                                                        l60 as u64
                                                    };
                                                    V116::Uint64(e116)
                                                }
                                                10 => {
                                                    let e116 = {
                                                        let l61 = *base.add(16).cast::<f32>();
                                                        l61
                                                    };
                                                    V116::Float32Value(e116)
                                                }
                                                11 => {
                                                    let e116 = {
                                                        let l62 = *base.add(16).cast::<f64>();
                                                        l62
                                                    };
                                                    V116::Float64Value(e116)
                                                }
                                                12 => {
                                                    let e116 = {
                                                        let l63 = *base.add(16).cast::<*mut u8>();
                                                        let l64 = *base.add(20).cast::<usize>();
                                                        let len65 = l64;
                                                        let bytes65 = _rt::Vec::from_raw_parts(
                                                            l63.cast(),
                                                            len65,
                                                            len65,
                                                        );
                                                        _rt::string_lift(bytes65)
                                                    };
                                                    V116::StringValue(e116)
                                                }
                                                13 => {
                                                    let e116 = {
                                                        let l66 = *base.add(16).cast::<*mut u8>();
                                                        let l67 = *base.add(20).cast::<usize>();
                                                        let len68 = l67;
                                                        _rt::Vec::from_raw_parts(l66.cast(), len68, len68)
                                                    };
                                                    V116::Bytes(e116)
                                                }
                                                14 => {
                                                    let e116 = {
                                                        let l69 = *base.add(16).cast::<i32>();
                                                        let l70 = i32::from(*base.add(20).cast::<u8>());
                                                        let l71 = i32::from(*base.add(21).cast::<u8>());
                                                        super::super::super::golem::graph::types::Date {
                                                            year: l69 as u32,
                                                            month: l70 as u8,
                                                            day: l71 as u8,
                                                        }
                                                    };
                                                    V116::Date(e116)
                                                }
                                                15 => {
                                                    let e116 = {
                                                        let l72 = i32::from(*base.add(16).cast::<u8>());
                                                        let l73 = i32::from(*base.add(17).cast::<u8>());
                                                        let l74 = i32::from(*base.add(18).cast::<u8>());
                                                        let l75 = *base.add(20).cast::<i32>();
                                                        super::super::super::golem::graph::types::Time {
                                                            hour: l72 as u8,
                                                            minute: l73 as u8,
                                                            second: l74 as u8,
                                                            nanosecond: l75 as u32,
                                                        }
                                                    };
                                                    V116::Time(e116)
                                                }
                                                16 => {
                                                    let e116 = {
                                                        let l76 = *base.add(16).cast::<i32>();
                                                        let l77 = i32::from(*base.add(20).cast::<u8>());
                                                        let l78 = i32::from(*base.add(21).cast::<u8>());
                                                        let l79 = i32::from(*base.add(24).cast::<u8>());
                                                        let l80 = i32::from(*base.add(25).cast::<u8>());
                                                        let l81 = i32::from(*base.add(26).cast::<u8>());
                                                        let l82 = *base.add(28).cast::<i32>();
                                                        let l83 = i32::from(*base.add(32).cast::<u8>());
                                                        super::super::super::golem::graph::types::Datetime {
                                                            date: super::super::super::golem::graph::types::Date {
                                                                year: l76 as u32,
                                                                month: l77 as u8,
                                                                day: l78 as u8,
                                                            },
                                                            time: super::super::super::golem::graph::types::Time {
                                                                hour: l79 as u8,
                                                                minute: l80 as u8,
                                                                second: l81 as u8,
                                                                nanosecond: l82 as u32,
                                                            },
                                                            timezone_offset_minutes: match l83 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l84 = i32::from(*base.add(34).cast::<i16>());
                                                                        l84 as i16
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                        }
                                                    };
                                                    V116::Datetime(e116)
                                                }
                                                17 => {
                                                    let e116 = {
                                                        let l85 = *base.add(16).cast::<i64>();
                                                        let l86 = *base.add(24).cast::<i32>();
                                                        super::super::super::golem::graph::types::Duration {
                                                            seconds: l85,
                                                            nanoseconds: l86 as u32,
                                                        }
                                                    };
                                                    V116::Duration(e116)
                                                }
                                                18 => {
                                                    let e116 = {
                                                        let l87 = *base.add(16).cast::<f64>();
                                                        let l88 = *base.add(24).cast::<f64>();
                                                        let l89 = i32::from(*base.add(32).cast::<u8>());
                                                        super::super::super::golem::graph::types::Point {
                                                            longitude: l87,
                                                            latitude: l88,
                                                            altitude: match l89 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l90 = *base.add(40).cast::<f64>();
                                                                        l90
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                        }
                                                    };
                                                    V116::Point(e116)
                                                }
                                                19 => {
                                                    let e116 = {
                                                        let l91 = *base.add(16).cast::<*mut u8>();
                                                        let l92 = *base.add(20).cast::<usize>();
                                                        let base97 = l91;
                                                        let len97 = l92;
                                                        let mut result97 = _rt::Vec::with_capacity(len97);
                                                        for i in 0..len97 {
                                                            let base = base97.add(i * 32);
                                                            let e97 = {
                                                                let l93 = *base.add(0).cast::<f64>();
                                                                let l94 = *base.add(8).cast::<f64>();
                                                                let l95 = i32::from(*base.add(16).cast::<u8>());
                                                                super::super::super::golem::graph::types::Point {
                                                                    longitude: l93,
                                                                    latitude: l94,
                                                                    altitude: match l95 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l96 = *base.add(24).cast::<f64>();
                                                                                l96
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            result97.push(e97);
                                                        }
                                                        _rt::cabi_dealloc(base97, len97 * 32, 8);
                                                        super::super::super::golem::graph::types::Linestring {
                                                            coordinates: result97,
                                                        }
                                                    };
                                                    V116::Linestring(e116)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 20, "invalid enum discriminant");
                                                    let e116 = {
                                                        let l98 = *base.add(16).cast::<*mut u8>();
                                                        let l99 = *base.add(20).cast::<usize>();
                                                        let base104 = l98;
                                                        let len104 = l99;
                                                        let mut result104 = _rt::Vec::with_capacity(len104);
                                                        for i in 0..len104 {
                                                            let base = base104.add(i * 32);
                                                            let e104 = {
                                                                let l100 = *base.add(0).cast::<f64>();
                                                                let l101 = *base.add(8).cast::<f64>();
                                                                let l102 = i32::from(*base.add(16).cast::<u8>());
                                                                super::super::super::golem::graph::types::Point {
                                                                    longitude: l100,
                                                                    latitude: l101,
                                                                    altitude: match l102 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l103 = *base.add(24).cast::<f64>();
                                                                                l103
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            result104.push(e104);
                                                        }
                                                        _rt::cabi_dealloc(base104, len104 * 32, 8);
                                                        let l105 = i32::from(*base.add(24).cast::<u8>());
                                                        super::super::super::golem::graph::types::Polygon {
                                                            exterior: result104,
                                                            holes: match l105 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l106 = *base.add(28).cast::<*mut u8>();
                                                                        let l107 = *base.add(32).cast::<usize>();
                                                                        let base115 = l106;
                                                                        let len115 = l107;
                                                                        let mut result115 = _rt::Vec::with_capacity(len115);
                                                                        for i in 0..len115 {
                                                                            let base = base115.add(i * 8);
                                                                            let e115 = {
                                                                                let l108 = *base.add(0).cast::<*mut u8>();
                                                                                let l109 = *base.add(4).cast::<usize>();
                                                                                let base114 = l108;
                                                                                let len114 = l109;
                                                                                let mut result114 = _rt::Vec::with_capacity(len114);
                                                                                for i in 0..len114 {
                                                                                    let base = base114.add(i * 32);
                                                                                    let e114 = {
                                                                                        let l110 = *base.add(0).cast::<f64>();
                                                                                        let l111 = *base.add(8).cast::<f64>();
                                                                                        let l112 = i32::from(*base.add(16).cast::<u8>());
                                                                                        super::super::super::golem::graph::types::Point {
                                                                                            longitude: l110,
                                                                                            latitude: l111,
                                                                                            altitude: match l112 {
                                                                                                0 => None,
                                                                                                1 => {
                                                                                                    let e = {
                                                                                                        let l113 = *base.add(24).cast::<f64>();
                                                                                                        l113
                                                                                                    };
                                                                                                    Some(e)
                                                                                                }
                                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                                            },
                                                                                        }
                                                                                    };
                                                                                    result114.push(e114);
                                                                                }
                                                                                _rt::cabi_dealloc(base114, len114 * 32, 8);
                                                                                result114
                                                                            };
                                                                            result115.push(e115);
                                                                        }
                                                                        _rt::cabi_dealloc(base115, len115 * 8, 4);
                                                                        result115
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                        }
                                                    };
                                                    V116::Polygon(e116)
                                                }
                                            };
                                            (_rt::string_lift(bytes50), v116)
                                        };
                                        result117.push(e117);
                                    }
                                    _rt::cabi_dealloc(base117, len117 * 48, 8);
                                    super::super::super::golem::graph::types::Vertex {
                                        id: v36,
                                        vertex_type: _rt::string_lift(bytes39),
                                        additional_labels: result45,
                                        properties: result117,
                                    }
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l118 = i32::from(*ptr26.add(8).cast::<u8>());
                                    use super::super::super::golem::graph::errors::GraphError as V173;
                                    let v173 = match l118 {
                                        0 => {
                                            let e173 = {
                                                let l119 = *ptr26.add(16).cast::<*mut u8>();
                                                let l120 = *ptr26.add(20).cast::<usize>();
                                                let len121 = l120;
                                                let bytes121 = _rt::Vec::from_raw_parts(
                                                    l119.cast(),
                                                    len121,
                                                    len121,
                                                );
                                                _rt::string_lift(bytes121)
                                            };
                                            V173::UnsupportedOperation(e173)
                                        }
                                        1 => {
                                            let e173 = {
                                                let l122 = *ptr26.add(16).cast::<*mut u8>();
                                                let l123 = *ptr26.add(20).cast::<usize>();
                                                let len124 = l123;
                                                let bytes124 = _rt::Vec::from_raw_parts(
                                                    l122.cast(),
                                                    len124,
                                                    len124,
                                                );
                                                _rt::string_lift(bytes124)
                                            };
                                            V173::ConnectionFailed(e173)
                                        }
                                        2 => {
                                            let e173 = {
                                                let l125 = *ptr26.add(16).cast::<*mut u8>();
                                                let l126 = *ptr26.add(20).cast::<usize>();
                                                let len127 = l126;
                                                let bytes127 = _rt::Vec::from_raw_parts(
                                                    l125.cast(),
                                                    len127,
                                                    len127,
                                                );
                                                _rt::string_lift(bytes127)
                                            };
                                            V173::AuthenticationFailed(e173)
                                        }
                                        3 => {
                                            let e173 = {
                                                let l128 = *ptr26.add(16).cast::<*mut u8>();
                                                let l129 = *ptr26.add(20).cast::<usize>();
                                                let len130 = l129;
                                                let bytes130 = _rt::Vec::from_raw_parts(
                                                    l128.cast(),
                                                    len130,
                                                    len130,
                                                );
                                                _rt::string_lift(bytes130)
                                            };
                                            V173::AuthorizationFailed(e173)
                                        }
                                        4 => {
                                            let e173 = {
                                                let l131 = i32::from(*ptr26.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V139;
                                                let v139 = match l131 {
                                                    0 => {
                                                        let e139 = {
                                                            let l132 = *ptr26.add(24).cast::<*mut u8>();
                                                            let l133 = *ptr26.add(28).cast::<usize>();
                                                            let len134 = l133;
                                                            let bytes134 = _rt::Vec::from_raw_parts(
                                                                l132.cast(),
                                                                len134,
                                                                len134,
                                                            );
                                                            _rt::string_lift(bytes134)
                                                        };
                                                        V139::StringValue(e139)
                                                    }
                                                    1 => {
                                                        let e139 = {
                                                            let l135 = *ptr26.add(24).cast::<i64>();
                                                            l135
                                                        };
                                                        V139::Int64(e139)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e139 = {
                                                            let l136 = *ptr26.add(24).cast::<*mut u8>();
                                                            let l137 = *ptr26.add(28).cast::<usize>();
                                                            let len138 = l137;
                                                            let bytes138 = _rt::Vec::from_raw_parts(
                                                                l136.cast(),
                                                                len138,
                                                                len138,
                                                            );
                                                            _rt::string_lift(bytes138)
                                                        };
                                                        V139::Uuid(e139)
                                                    }
                                                };
                                                v139
                                            };
                                            V173::ElementNotFound(e173)
                                        }
                                        5 => {
                                            let e173 = {
                                                let l140 = i32::from(*ptr26.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V148;
                                                let v148 = match l140 {
                                                    0 => {
                                                        let e148 = {
                                                            let l141 = *ptr26.add(24).cast::<*mut u8>();
                                                            let l142 = *ptr26.add(28).cast::<usize>();
                                                            let len143 = l142;
                                                            let bytes143 = _rt::Vec::from_raw_parts(
                                                                l141.cast(),
                                                                len143,
                                                                len143,
                                                            );
                                                            _rt::string_lift(bytes143)
                                                        };
                                                        V148::StringValue(e148)
                                                    }
                                                    1 => {
                                                        let e148 = {
                                                            let l144 = *ptr26.add(24).cast::<i64>();
                                                            l144
                                                        };
                                                        V148::Int64(e148)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e148 = {
                                                            let l145 = *ptr26.add(24).cast::<*mut u8>();
                                                            let l146 = *ptr26.add(28).cast::<usize>();
                                                            let len147 = l146;
                                                            let bytes147 = _rt::Vec::from_raw_parts(
                                                                l145.cast(),
                                                                len147,
                                                                len147,
                                                            );
                                                            _rt::string_lift(bytes147)
                                                        };
                                                        V148::Uuid(e148)
                                                    }
                                                };
                                                v148
                                            };
                                            V173::DuplicateElement(e173)
                                        }
                                        6 => {
                                            let e173 = {
                                                let l149 = *ptr26.add(16).cast::<*mut u8>();
                                                let l150 = *ptr26.add(20).cast::<usize>();
                                                let len151 = l150;
                                                let bytes151 = _rt::Vec::from_raw_parts(
                                                    l149.cast(),
                                                    len151,
                                                    len151,
                                                );
                                                _rt::string_lift(bytes151)
                                            };
                                            V173::SchemaViolation(e173)
                                        }
                                        7 => {
                                            let e173 = {
                                                let l152 = *ptr26.add(16).cast::<*mut u8>();
                                                let l153 = *ptr26.add(20).cast::<usize>();
                                                let len154 = l153;
                                                let bytes154 = _rt::Vec::from_raw_parts(
                                                    l152.cast(),
                                                    len154,
                                                    len154,
                                                );
                                                _rt::string_lift(bytes154)
                                            };
                                            V173::ConstraintViolation(e173)
                                        }
                                        8 => {
                                            let e173 = {
                                                let l155 = *ptr26.add(16).cast::<*mut u8>();
                                                let l156 = *ptr26.add(20).cast::<usize>();
                                                let len157 = l156;
                                                let bytes157 = _rt::Vec::from_raw_parts(
                                                    l155.cast(),
                                                    len157,
                                                    len157,
                                                );
                                                _rt::string_lift(bytes157)
                                            };
                                            V173::InvalidPropertyType(e173)
                                        }
                                        9 => {
                                            let e173 = {
                                                let l158 = *ptr26.add(16).cast::<*mut u8>();
                                                let l159 = *ptr26.add(20).cast::<usize>();
                                                let len160 = l159;
                                                let bytes160 = _rt::Vec::from_raw_parts(
                                                    l158.cast(),
                                                    len160,
                                                    len160,
                                                );
                                                _rt::string_lift(bytes160)
                                            };
                                            V173::InvalidQuery(e173)
                                        }
                                        10 => {
                                            let e173 = {
                                                let l161 = *ptr26.add(16).cast::<*mut u8>();
                                                let l162 = *ptr26.add(20).cast::<usize>();
                                                let len163 = l162;
                                                let bytes163 = _rt::Vec::from_raw_parts(
                                                    l161.cast(),
                                                    len163,
                                                    len163,
                                                );
                                                _rt::string_lift(bytes163)
                                            };
                                            V173::TransactionFailed(e173)
                                        }
                                        11 => V173::TransactionConflict,
                                        12 => V173::TransactionTimeout,
                                        13 => V173::DeadlockDetected,
                                        14 => V173::Timeout,
                                        15 => {
                                            let e173 = {
                                                let l164 = *ptr26.add(16).cast::<*mut u8>();
                                                let l165 = *ptr26.add(20).cast::<usize>();
                                                let len166 = l165;
                                                let bytes166 = _rt::Vec::from_raw_parts(
                                                    l164.cast(),
                                                    len166,
                                                    len166,
                                                );
                                                _rt::string_lift(bytes166)
                                            };
                                            V173::ResourceExhausted(e173)
                                        }
                                        16 => {
                                            let e173 = {
                                                let l167 = *ptr26.add(16).cast::<*mut u8>();
                                                let l168 = *ptr26.add(20).cast::<usize>();
                                                let len169 = l168;
                                                let bytes169 = _rt::Vec::from_raw_parts(
                                                    l167.cast(),
                                                    len169,
                                                    len169,
                                                );
                                                _rt::string_lift(bytes169)
                                            };
                                            V173::InternalError(e173)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 17, "invalid enum discriminant");
                                            let e173 = {
                                                let l170 = *ptr26.add(16).cast::<*mut u8>();
                                                let l171 = *ptr26.add(20).cast::<usize>();
                                                let len172 = l171;
                                                let bytes172 = _rt::Vec::from_raw_parts(
                                                    l170.cast(),
                                                    len172,
                                                    len172,
                                                );
                                                _rt::string_lift(bytes172)
                                            };
                                            V173::ServiceUnavailable(e173)
                                        }
                                    };
                                    v173
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Transaction {
                #[allow(unused_unsafe, clippy::all)]
                /// Delete vertex (and optionally its edges)
                pub fn delete_vertex(
                    &self,
                    id: &ElementId,
                    delete_edges: bool,
                ) -> Result<(), GraphError> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 32]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 32],
                        );
                        use super::super::super::golem::graph::types::ElementId as V2;
                        let (result3_0, result3_1, result3_2) = match id {
                            V2::StringValue(e) => {
                                let vec0 = e;
                                let ptr0 = vec0.as_ptr().cast::<u8>();
                                let len0 = vec0.len();
                                (
                                    0i32,
                                    {
                                        let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                        t.as_mut_ptr().cast::<*mut u8>().write(ptr0.cast_mut());
                                        t
                                    },
                                    len0,
                                )
                            }
                            V2::Int64(e) => {
                                (
                                    1i32,
                                    ::core::mem::MaybeUninit::new(_rt::as_i64(e) as u64),
                                    0usize,
                                )
                            }
                            V2::Uuid(e) => {
                                let vec1 = e;
                                let ptr1 = vec1.as_ptr().cast::<u8>();
                                let len1 = vec1.len();
                                (
                                    2i32,
                                    {
                                        let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                        t.as_mut_ptr().cast::<*mut u8>().write(ptr1.cast_mut());
                                        t
                                    },
                                    len1,
                                )
                            }
                        };
                        let ptr4 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:graph/transactions@1.0.0")]
                        extern "C" {
                            #[link_name = "[method]transaction.delete-vertex"]
                            fn wit_import(
                                _: i32,
                                _: i32,
                                _: ::core::mem::MaybeUninit<u64>,
                                _: usize,
                                _: i32,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: i32,
                            _: ::core::mem::MaybeUninit<u64>,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            result3_0,
                            result3_1,
                            result3_2,
                            match &delete_edges {
                                true => 1,
                                false => 0,
                            },
                            ptr4,
                        );
                        let l5 = i32::from(*ptr4.add(0).cast::<u8>());
                        match l5 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l6 = i32::from(*ptr4.add(8).cast::<u8>());
                                    use super::super::super::golem::graph::errors::GraphError as V61;
                                    let v61 = match l6 {
                                        0 => {
                                            let e61 = {
                                                let l7 = *ptr4.add(16).cast::<*mut u8>();
                                                let l8 = *ptr4.add(20).cast::<usize>();
                                                let len9 = l8;
                                                let bytes9 = _rt::Vec::from_raw_parts(
                                                    l7.cast(),
                                                    len9,
                                                    len9,
                                                );
                                                _rt::string_lift(bytes9)
                                            };
                                            V61::UnsupportedOperation(e61)
                                        }
                                        1 => {
                                            let e61 = {
                                                let l10 = *ptr4.add(16).cast::<*mut u8>();
                                                let l11 = *ptr4.add(20).cast::<usize>();
                                                let len12 = l11;
                                                let bytes12 = _rt::Vec::from_raw_parts(
                                                    l10.cast(),
                                                    len12,
                                                    len12,
                                                );
                                                _rt::string_lift(bytes12)
                                            };
                                            V61::ConnectionFailed(e61)
                                        }
                                        2 => {
                                            let e61 = {
                                                let l13 = *ptr4.add(16).cast::<*mut u8>();
                                                let l14 = *ptr4.add(20).cast::<usize>();
                                                let len15 = l14;
                                                let bytes15 = _rt::Vec::from_raw_parts(
                                                    l13.cast(),
                                                    len15,
                                                    len15,
                                                );
                                                _rt::string_lift(bytes15)
                                            };
                                            V61::AuthenticationFailed(e61)
                                        }
                                        3 => {
                                            let e61 = {
                                                let l16 = *ptr4.add(16).cast::<*mut u8>();
                                                let l17 = *ptr4.add(20).cast::<usize>();
                                                let len18 = l17;
                                                let bytes18 = _rt::Vec::from_raw_parts(
                                                    l16.cast(),
                                                    len18,
                                                    len18,
                                                );
                                                _rt::string_lift(bytes18)
                                            };
                                            V61::AuthorizationFailed(e61)
                                        }
                                        4 => {
                                            let e61 = {
                                                let l19 = i32::from(*ptr4.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V27;
                                                let v27 = match l19 {
                                                    0 => {
                                                        let e27 = {
                                                            let l20 = *ptr4.add(24).cast::<*mut u8>();
                                                            let l21 = *ptr4.add(28).cast::<usize>();
                                                            let len22 = l21;
                                                            let bytes22 = _rt::Vec::from_raw_parts(
                                                                l20.cast(),
                                                                len22,
                                                                len22,
                                                            );
                                                            _rt::string_lift(bytes22)
                                                        };
                                                        V27::StringValue(e27)
                                                    }
                                                    1 => {
                                                        let e27 = {
                                                            let l23 = *ptr4.add(24).cast::<i64>();
                                                            l23
                                                        };
                                                        V27::Int64(e27)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e27 = {
                                                            let l24 = *ptr4.add(24).cast::<*mut u8>();
                                                            let l25 = *ptr4.add(28).cast::<usize>();
                                                            let len26 = l25;
                                                            let bytes26 = _rt::Vec::from_raw_parts(
                                                                l24.cast(),
                                                                len26,
                                                                len26,
                                                            );
                                                            _rt::string_lift(bytes26)
                                                        };
                                                        V27::Uuid(e27)
                                                    }
                                                };
                                                v27
                                            };
                                            V61::ElementNotFound(e61)
                                        }
                                        5 => {
                                            let e61 = {
                                                let l28 = i32::from(*ptr4.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V36;
                                                let v36 = match l28 {
                                                    0 => {
                                                        let e36 = {
                                                            let l29 = *ptr4.add(24).cast::<*mut u8>();
                                                            let l30 = *ptr4.add(28).cast::<usize>();
                                                            let len31 = l30;
                                                            let bytes31 = _rt::Vec::from_raw_parts(
                                                                l29.cast(),
                                                                len31,
                                                                len31,
                                                            );
                                                            _rt::string_lift(bytes31)
                                                        };
                                                        V36::StringValue(e36)
                                                    }
                                                    1 => {
                                                        let e36 = {
                                                            let l32 = *ptr4.add(24).cast::<i64>();
                                                            l32
                                                        };
                                                        V36::Int64(e36)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e36 = {
                                                            let l33 = *ptr4.add(24).cast::<*mut u8>();
                                                            let l34 = *ptr4.add(28).cast::<usize>();
                                                            let len35 = l34;
                                                            let bytes35 = _rt::Vec::from_raw_parts(
                                                                l33.cast(),
                                                                len35,
                                                                len35,
                                                            );
                                                            _rt::string_lift(bytes35)
                                                        };
                                                        V36::Uuid(e36)
                                                    }
                                                };
                                                v36
                                            };
                                            V61::DuplicateElement(e61)
                                        }
                                        6 => {
                                            let e61 = {
                                                let l37 = *ptr4.add(16).cast::<*mut u8>();
                                                let l38 = *ptr4.add(20).cast::<usize>();
                                                let len39 = l38;
                                                let bytes39 = _rt::Vec::from_raw_parts(
                                                    l37.cast(),
                                                    len39,
                                                    len39,
                                                );
                                                _rt::string_lift(bytes39)
                                            };
                                            V61::SchemaViolation(e61)
                                        }
                                        7 => {
                                            let e61 = {
                                                let l40 = *ptr4.add(16).cast::<*mut u8>();
                                                let l41 = *ptr4.add(20).cast::<usize>();
                                                let len42 = l41;
                                                let bytes42 = _rt::Vec::from_raw_parts(
                                                    l40.cast(),
                                                    len42,
                                                    len42,
                                                );
                                                _rt::string_lift(bytes42)
                                            };
                                            V61::ConstraintViolation(e61)
                                        }
                                        8 => {
                                            let e61 = {
                                                let l43 = *ptr4.add(16).cast::<*mut u8>();
                                                let l44 = *ptr4.add(20).cast::<usize>();
                                                let len45 = l44;
                                                let bytes45 = _rt::Vec::from_raw_parts(
                                                    l43.cast(),
                                                    len45,
                                                    len45,
                                                );
                                                _rt::string_lift(bytes45)
                                            };
                                            V61::InvalidPropertyType(e61)
                                        }
                                        9 => {
                                            let e61 = {
                                                let l46 = *ptr4.add(16).cast::<*mut u8>();
                                                let l47 = *ptr4.add(20).cast::<usize>();
                                                let len48 = l47;
                                                let bytes48 = _rt::Vec::from_raw_parts(
                                                    l46.cast(),
                                                    len48,
                                                    len48,
                                                );
                                                _rt::string_lift(bytes48)
                                            };
                                            V61::InvalidQuery(e61)
                                        }
                                        10 => {
                                            let e61 = {
                                                let l49 = *ptr4.add(16).cast::<*mut u8>();
                                                let l50 = *ptr4.add(20).cast::<usize>();
                                                let len51 = l50;
                                                let bytes51 = _rt::Vec::from_raw_parts(
                                                    l49.cast(),
                                                    len51,
                                                    len51,
                                                );
                                                _rt::string_lift(bytes51)
                                            };
                                            V61::TransactionFailed(e61)
                                        }
                                        11 => V61::TransactionConflict,
                                        12 => V61::TransactionTimeout,
                                        13 => V61::DeadlockDetected,
                                        14 => V61::Timeout,
                                        15 => {
                                            let e61 = {
                                                let l52 = *ptr4.add(16).cast::<*mut u8>();
                                                let l53 = *ptr4.add(20).cast::<usize>();
                                                let len54 = l53;
                                                let bytes54 = _rt::Vec::from_raw_parts(
                                                    l52.cast(),
                                                    len54,
                                                    len54,
                                                );
                                                _rt::string_lift(bytes54)
                                            };
                                            V61::ResourceExhausted(e61)
                                        }
                                        16 => {
                                            let e61 = {
                                                let l55 = *ptr4.add(16).cast::<*mut u8>();
                                                let l56 = *ptr4.add(20).cast::<usize>();
                                                let len57 = l56;
                                                let bytes57 = _rt::Vec::from_raw_parts(
                                                    l55.cast(),
                                                    len57,
                                                    len57,
                                                );
                                                _rt::string_lift(bytes57)
                                            };
                                            V61::InternalError(e61)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 17, "invalid enum discriminant");
                                            let e61 = {
                                                let l58 = *ptr4.add(16).cast::<*mut u8>();
                                                let l59 = *ptr4.add(20).cast::<usize>();
                                                let len60 = l59;
                                                let bytes60 = _rt::Vec::from_raw_parts(
                                                    l58.cast(),
                                                    len60,
                                                    len60,
                                                );
                                                _rt::string_lift(bytes60)
                                            };
                                            V61::ServiceUnavailable(e61)
                                        }
                                    };
                                    v61
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Transaction {
                #[allow(unused_unsafe, clippy::all)]
                /// Find vertices by type and optional filters
                pub fn find_vertices(
                    &self,
                    vertex_type: Option<&str>,
                    filters: Option<&[FilterCondition]>,
                    sort: Option<&[SortSpec]>,
                    limit: Option<u32>,
                    offset: Option<u32>,
                ) -> Result<_rt::Vec<Vertex>, GraphError> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 32]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 32],
                        );
                        let (result1_0, result1_1, result1_2) = match vertex_type {
                            Some(e) => {
                                let vec0 = e;
                                let ptr0 = vec0.as_ptr().cast::<u8>();
                                let len0 = vec0.len();
                                (1i32, ptr0.cast_mut(), len0)
                            }
                            None => (0i32, ::core::ptr::null_mut(), 0usize),
                        };
                        let (result24_0, result24_1, result24_2) = match filters {
                            Some(e) => {
                                let vec23 = e;
                                let len23 = vec23.len();
                                let layout23 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec23.len() * 56,
                                    8,
                                );
                                let result23 = if layout23.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout23).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout23);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec23.into_iter().enumerate() {
                                    let base = result23.add(i * 56);
                                    {
                                        let super::super::super::golem::graph::types::FilterCondition {
                                            property: property2,
                                            operator: operator2,
                                            value: value2,
                                        } = e;
                                        let vec3 = property2;
                                        let ptr3 = vec3.as_ptr().cast::<u8>();
                                        let len3 = vec3.len();
                                        *base.add(4).cast::<usize>() = len3;
                                        *base.add(0).cast::<*mut u8>() = ptr3.cast_mut();
                                        *base.add(8).cast::<u8>() = (operator2.clone() as i32)
                                            as u8;
                                        use super::super::super::golem::graph::types::PropertyValue as V22;
                                        match value2 {
                                            V22::NullValue => {
                                                *base.add(16).cast::<u8>() = (0i32) as u8;
                                            }
                                            V22::Boolean(e) => {
                                                *base.add(16).cast::<u8>() = (1i32) as u8;
                                                *base.add(24).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                }) as u8;
                                            }
                                            V22::Int8(e) => {
                                                *base.add(16).cast::<u8>() = (2i32) as u8;
                                                *base.add(24).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            V22::Int16(e) => {
                                                *base.add(16).cast::<u8>() = (3i32) as u8;
                                                *base.add(24).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            V22::Int32(e) => {
                                                *base.add(16).cast::<u8>() = (4i32) as u8;
                                                *base.add(24).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            V22::Int64(e) => {
                                                *base.add(16).cast::<u8>() = (5i32) as u8;
                                                *base.add(24).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            V22::Uint8(e) => {
                                                *base.add(16).cast::<u8>() = (6i32) as u8;
                                                *base.add(24).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            V22::Uint16(e) => {
                                                *base.add(16).cast::<u8>() = (7i32) as u8;
                                                *base.add(24).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            V22::Uint32(e) => {
                                                *base.add(16).cast::<u8>() = (8i32) as u8;
                                                *base.add(24).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            V22::Uint64(e) => {
                                                *base.add(16).cast::<u8>() = (9i32) as u8;
                                                *base.add(24).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            V22::Float32Value(e) => {
                                                *base.add(16).cast::<u8>() = (10i32) as u8;
                                                *base.add(24).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            V22::Float64Value(e) => {
                                                *base.add(16).cast::<u8>() = (11i32) as u8;
                                                *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            V22::StringValue(e) => {
                                                *base.add(16).cast::<u8>() = (12i32) as u8;
                                                let vec4 = e;
                                                let ptr4 = vec4.as_ptr().cast::<u8>();
                                                let len4 = vec4.len();
                                                *base.add(28).cast::<usize>() = len4;
                                                *base.add(24).cast::<*mut u8>() = ptr4.cast_mut();
                                            }
                                            V22::Bytes(e) => {
                                                *base.add(16).cast::<u8>() = (13i32) as u8;
                                                let vec5 = e;
                                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                                let len5 = vec5.len();
                                                *base.add(28).cast::<usize>() = len5;
                                                *base.add(24).cast::<*mut u8>() = ptr5.cast_mut();
                                            }
                                            V22::Date(e) => {
                                                *base.add(16).cast::<u8>() = (14i32) as u8;
                                                let super::super::super::golem::graph::types::Date {
                                                    year: year6,
                                                    month: month6,
                                                    day: day6,
                                                } = e;
                                                *base.add(24).cast::<i32>() = _rt::as_i32(year6);
                                                *base.add(28).cast::<u8>() = (_rt::as_i32(month6)) as u8;
                                                *base.add(29).cast::<u8>() = (_rt::as_i32(day6)) as u8;
                                            }
                                            V22::Time(e) => {
                                                *base.add(16).cast::<u8>() = (15i32) as u8;
                                                let super::super::super::golem::graph::types::Time {
                                                    hour: hour7,
                                                    minute: minute7,
                                                    second: second7,
                                                    nanosecond: nanosecond7,
                                                } = e;
                                                *base.add(24).cast::<u8>() = (_rt::as_i32(hour7)) as u8;
                                                *base.add(25).cast::<u8>() = (_rt::as_i32(minute7)) as u8;
                                                *base.add(26).cast::<u8>() = (_rt::as_i32(second7)) as u8;
                                                *base.add(28).cast::<i32>() = _rt::as_i32(nanosecond7);
                                            }
                                            V22::Datetime(e) => {
                                                *base.add(16).cast::<u8>() = (16i32) as u8;
                                                let super::super::super::golem::graph::types::Datetime {
                                                    date: date8,
                                                    time: time8,
                                                    timezone_offset_minutes: timezone_offset_minutes8,
                                                } = e;
                                                let super::super::super::golem::graph::types::Date {
                                                    year: year9,
                                                    month: month9,
                                                    day: day9,
                                                } = date8;
                                                *base.add(24).cast::<i32>() = _rt::as_i32(year9);
                                                *base.add(28).cast::<u8>() = (_rt::as_i32(month9)) as u8;
                                                *base.add(29).cast::<u8>() = (_rt::as_i32(day9)) as u8;
                                                let super::super::super::golem::graph::types::Time {
                                                    hour: hour10,
                                                    minute: minute10,
                                                    second: second10,
                                                    nanosecond: nanosecond10,
                                                } = time8;
                                                *base.add(32).cast::<u8>() = (_rt::as_i32(hour10)) as u8;
                                                *base.add(33).cast::<u8>() = (_rt::as_i32(minute10)) as u8;
                                                *base.add(34).cast::<u8>() = (_rt::as_i32(second10)) as u8;
                                                *base.add(36).cast::<i32>() = _rt::as_i32(nanosecond10);
                                                match timezone_offset_minutes8 {
                                                    Some(e) => {
                                                        *base.add(40).cast::<u8>() = (1i32) as u8;
                                                        *base.add(42).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                                    }
                                                    None => {
                                                        *base.add(40).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            V22::Duration(e) => {
                                                *base.add(16).cast::<u8>() = (17i32) as u8;
                                                let super::super::super::golem::graph::types::Duration {
                                                    seconds: seconds11,
                                                    nanoseconds: nanoseconds11,
                                                } = e;
                                                *base.add(24).cast::<i64>() = _rt::as_i64(seconds11);
                                                *base.add(32).cast::<i32>() = _rt::as_i32(nanoseconds11);
                                            }
                                            V22::Point(e) => {
                                                *base.add(16).cast::<u8>() = (18i32) as u8;
                                                let super::super::super::golem::graph::types::Point {
                                                    longitude: longitude12,
                                                    latitude: latitude12,
                                                    altitude: altitude12,
                                                } = e;
                                                *base.add(24).cast::<f64>() = _rt::as_f64(longitude12);
                                                *base.add(32).cast::<f64>() = _rt::as_f64(latitude12);
                                                match altitude12 {
                                                    Some(e) => {
                                                        *base.add(40).cast::<u8>() = (1i32) as u8;
                                                        *base.add(48).cast::<f64>() = _rt::as_f64(e);
                                                    }
                                                    None => {
                                                        *base.add(40).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            V22::Linestring(e) => {
                                                *base.add(16).cast::<u8>() = (19i32) as u8;
                                                let super::super::super::golem::graph::types::Linestring {
                                                    coordinates: coordinates13,
                                                } = e;
                                                let vec15 = coordinates13;
                                                let len15 = vec15.len();
                                                let layout15 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec15.len() * 32,
                                                    8,
                                                );
                                                let result15 = if layout15.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout15).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout15);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec15.into_iter().enumerate() {
                                                    let base = result15.add(i * 32);
                                                    {
                                                        let super::super::super::golem::graph::types::Point {
                                                            longitude: longitude14,
                                                            latitude: latitude14,
                                                            altitude: altitude14,
                                                        } = e;
                                                        *base.add(0).cast::<f64>() = _rt::as_f64(longitude14);
                                                        *base.add(8).cast::<f64>() = _rt::as_f64(latitude14);
                                                        match altitude14 {
                                                            Some(e) => {
                                                                *base.add(16).cast::<u8>() = (1i32) as u8;
                                                                *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                            }
                                                            None => {
                                                                *base.add(16).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                }
                                                *base.add(28).cast::<usize>() = len15;
                                                *base.add(24).cast::<*mut u8>() = result15;
                                                cleanup_list.extend_from_slice(&[(result15, layout15)]);
                                            }
                                            V22::Polygon(e) => {
                                                *base.add(16).cast::<u8>() = (20i32) as u8;
                                                let super::super::super::golem::graph::types::Polygon {
                                                    exterior: exterior16,
                                                    holes: holes16,
                                                } = e;
                                                let vec18 = exterior16;
                                                let len18 = vec18.len();
                                                let layout18 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec18.len() * 32,
                                                    8,
                                                );
                                                let result18 = if layout18.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout18).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout18);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec18.into_iter().enumerate() {
                                                    let base = result18.add(i * 32);
                                                    {
                                                        let super::super::super::golem::graph::types::Point {
                                                            longitude: longitude17,
                                                            latitude: latitude17,
                                                            altitude: altitude17,
                                                        } = e;
                                                        *base.add(0).cast::<f64>() = _rt::as_f64(longitude17);
                                                        *base.add(8).cast::<f64>() = _rt::as_f64(latitude17);
                                                        match altitude17 {
                                                            Some(e) => {
                                                                *base.add(16).cast::<u8>() = (1i32) as u8;
                                                                *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                            }
                                                            None => {
                                                                *base.add(16).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                }
                                                *base.add(28).cast::<usize>() = len18;
                                                *base.add(24).cast::<*mut u8>() = result18;
                                                match holes16 {
                                                    Some(e) => {
                                                        *base.add(32).cast::<u8>() = (1i32) as u8;
                                                        let vec21 = e;
                                                        let len21 = vec21.len();
                                                        let layout21 = _rt::alloc::Layout::from_size_align_unchecked(
                                                            vec21.len() * 8,
                                                            4,
                                                        );
                                                        let result21 = if layout21.size() != 0 {
                                                            let ptr = _rt::alloc::alloc(layout21).cast::<u8>();
                                                            if ptr.is_null() {
                                                                _rt::alloc::handle_alloc_error(layout21);
                                                            }
                                                            ptr
                                                        } else {
                                                            ::core::ptr::null_mut()
                                                        };
                                                        for (i, e) in vec21.into_iter().enumerate() {
                                                            let base = result21.add(i * 8);
                                                            {
                                                                let vec20 = e;
                                                                let len20 = vec20.len();
                                                                let layout20 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                    vec20.len() * 32,
                                                                    8,
                                                                );
                                                                let result20 = if layout20.size() != 0 {
                                                                    let ptr = _rt::alloc::alloc(layout20).cast::<u8>();
                                                                    if ptr.is_null() {
                                                                        _rt::alloc::handle_alloc_error(layout20);
                                                                    }
                                                                    ptr
                                                                } else {
                                                                    ::core::ptr::null_mut()
                                                                };
                                                                for (i, e) in vec20.into_iter().enumerate() {
                                                                    let base = result20.add(i * 32);
                                                                    {
                                                                        let super::super::super::golem::graph::types::Point {
                                                                            longitude: longitude19,
                                                                            latitude: latitude19,
                                                                            altitude: altitude19,
                                                                        } = e;
                                                                        *base.add(0).cast::<f64>() = _rt::as_f64(longitude19);
                                                                        *base.add(8).cast::<f64>() = _rt::as_f64(latitude19);
                                                                        match altitude19 {
                                                                            Some(e) => {
                                                                                *base.add(16).cast::<u8>() = (1i32) as u8;
                                                                                *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                                            }
                                                                            None => {
                                                                                *base.add(16).cast::<u8>() = (0i32) as u8;
                                                                            }
                                                                        };
                                                                    }
                                                                }
                                                                *base.add(4).cast::<usize>() = len20;
                                                                *base.add(0).cast::<*mut u8>() = result20;
                                                                cleanup_list.extend_from_slice(&[(result20, layout20)]);
                                                            }
                                                        }
                                                        *base.add(40).cast::<usize>() = len21;
                                                        *base.add(36).cast::<*mut u8>() = result21;
                                                        cleanup_list.extend_from_slice(&[(result21, layout21)]);
                                                    }
                                                    None => {
                                                        *base.add(32).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                                cleanup_list.extend_from_slice(&[(result18, layout18)]);
                                            }
                                        }
                                    }
                                }
                                cleanup_list.extend_from_slice(&[(result23, layout23)]);
                                (1i32, result23, len23)
                            }
                            None => (0i32, ::core::ptr::null_mut(), 0usize),
                        };
                        let (result28_0, result28_1, result28_2) = match sort {
                            Some(e) => {
                                let vec27 = e;
                                let len27 = vec27.len();
                                let layout27 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec27.len() * 12,
                                    4,
                                );
                                let result27 = if layout27.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout27).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout27);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec27.into_iter().enumerate() {
                                    let base = result27.add(i * 12);
                                    {
                                        let super::super::super::golem::graph::types::SortSpec {
                                            property: property25,
                                            ascending: ascending25,
                                        } = e;
                                        let vec26 = property25;
                                        let ptr26 = vec26.as_ptr().cast::<u8>();
                                        let len26 = vec26.len();
                                        *base.add(4).cast::<usize>() = len26;
                                        *base.add(0).cast::<*mut u8>() = ptr26.cast_mut();
                                        *base.add(8).cast::<u8>() = (match ascending25 {
                                            true => 1,
                                            false => 0,
                                        }) as u8;
                                    }
                                }
                                cleanup_list.extend_from_slice(&[(result27, layout27)]);
                                (1i32, result27, len27)
                            }
                            None => (0i32, ::core::ptr::null_mut(), 0usize),
                        };
                        let (result29_0, result29_1) = match limit {
                            Some(e) => (1i32, _rt::as_i32(e)),
                            None => (0i32, 0i32),
                        };
                        let (result30_0, result30_1) = match offset {
                            Some(e) => (1i32, _rt::as_i32(e)),
                            None => (0i32, 0i32),
                        };
                        let ptr31 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:graph/transactions@1.0.0")]
                        extern "C" {
                            #[link_name = "[method]transaction.find-vertices"]
                            fn wit_import(
                                _: i32,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                                _: i32,
                                _: i32,
                                _: i32,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: i32,
                            _: i32,
                            _: i32,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            result1_0,
                            result1_1,
                            result1_2,
                            result24_0,
                            result24_1,
                            result24_2,
                            result28_0,
                            result28_1,
                            result28_2,
                            result29_0,
                            result29_1,
                            result30_0,
                            result30_1,
                            ptr31,
                        );
                        let l32 = i32::from(*ptr31.add(0).cast::<u8>());
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l32 {
                            0 => {
                                let e = {
                                    let l33 = *ptr31.add(8).cast::<*mut u8>();
                                    let l34 = *ptr31.add(12).cast::<usize>();
                                    let base125 = l33;
                                    let len125 = l34;
                                    let mut result125 = _rt::Vec::with_capacity(len125);
                                    for i in 0..len125 {
                                        let base = base125.add(i * 40);
                                        let e125 = {
                                            let l35 = i32::from(*base.add(0).cast::<u8>());
                                            use super::super::super::golem::graph::types::ElementId as V43;
                                            let v43 = match l35 {
                                                0 => {
                                                    let e43 = {
                                                        let l36 = *base.add(8).cast::<*mut u8>();
                                                        let l37 = *base.add(12).cast::<usize>();
                                                        let len38 = l37;
                                                        let bytes38 = _rt::Vec::from_raw_parts(
                                                            l36.cast(),
                                                            len38,
                                                            len38,
                                                        );
                                                        _rt::string_lift(bytes38)
                                                    };
                                                    V43::StringValue(e43)
                                                }
                                                1 => {
                                                    let e43 = {
                                                        let l39 = *base.add(8).cast::<i64>();
                                                        l39
                                                    };
                                                    V43::Int64(e43)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                    let e43 = {
                                                        let l40 = *base.add(8).cast::<*mut u8>();
                                                        let l41 = *base.add(12).cast::<usize>();
                                                        let len42 = l41;
                                                        let bytes42 = _rt::Vec::from_raw_parts(
                                                            l40.cast(),
                                                            len42,
                                                            len42,
                                                        );
                                                        _rt::string_lift(bytes42)
                                                    };
                                                    V43::Uuid(e43)
                                                }
                                            };
                                            let l44 = *base.add(16).cast::<*mut u8>();
                                            let l45 = *base.add(20).cast::<usize>();
                                            let len46 = l45;
                                            let bytes46 = _rt::Vec::from_raw_parts(
                                                l44.cast(),
                                                len46,
                                                len46,
                                            );
                                            let l47 = *base.add(24).cast::<*mut u8>();
                                            let l48 = *base.add(28).cast::<usize>();
                                            let base52 = l47;
                                            let len52 = l48;
                                            let mut result52 = _rt::Vec::with_capacity(len52);
                                            for i in 0..len52 {
                                                let base = base52.add(i * 8);
                                                let e52 = {
                                                    let l49 = *base.add(0).cast::<*mut u8>();
                                                    let l50 = *base.add(4).cast::<usize>();
                                                    let len51 = l50;
                                                    let bytes51 = _rt::Vec::from_raw_parts(
                                                        l49.cast(),
                                                        len51,
                                                        len51,
                                                    );
                                                    _rt::string_lift(bytes51)
                                                };
                                                result52.push(e52);
                                            }
                                            _rt::cabi_dealloc(base52, len52 * 8, 4);
                                            let l53 = *base.add(32).cast::<*mut u8>();
                                            let l54 = *base.add(36).cast::<usize>();
                                            let base124 = l53;
                                            let len124 = l54;
                                            let mut result124 = _rt::Vec::with_capacity(len124);
                                            for i in 0..len124 {
                                                let base = base124.add(i * 48);
                                                let e124 = {
                                                    let l55 = *base.add(0).cast::<*mut u8>();
                                                    let l56 = *base.add(4).cast::<usize>();
                                                    let len57 = l56;
                                                    let bytes57 = _rt::Vec::from_raw_parts(
                                                        l55.cast(),
                                                        len57,
                                                        len57,
                                                    );
                                                    let l58 = i32::from(*base.add(8).cast::<u8>());
                                                    use super::super::super::golem::graph::types::PropertyValue as V123;
                                                    let v123 = match l58 {
                                                        0 => V123::NullValue,
                                                        1 => {
                                                            let e123 = {
                                                                let l59 = i32::from(*base.add(16).cast::<u8>());
                                                                _rt::bool_lift(l59 as u8)
                                                            };
                                                            V123::Boolean(e123)
                                                        }
                                                        2 => {
                                                            let e123 = {
                                                                let l60 = i32::from(*base.add(16).cast::<i8>());
                                                                l60 as i8
                                                            };
                                                            V123::Int8(e123)
                                                        }
                                                        3 => {
                                                            let e123 = {
                                                                let l61 = i32::from(*base.add(16).cast::<i16>());
                                                                l61 as i16
                                                            };
                                                            V123::Int16(e123)
                                                        }
                                                        4 => {
                                                            let e123 = {
                                                                let l62 = *base.add(16).cast::<i32>();
                                                                l62
                                                            };
                                                            V123::Int32(e123)
                                                        }
                                                        5 => {
                                                            let e123 = {
                                                                let l63 = *base.add(16).cast::<i64>();
                                                                l63
                                                            };
                                                            V123::Int64(e123)
                                                        }
                                                        6 => {
                                                            let e123 = {
                                                                let l64 = i32::from(*base.add(16).cast::<u8>());
                                                                l64 as u8
                                                            };
                                                            V123::Uint8(e123)
                                                        }
                                                        7 => {
                                                            let e123 = {
                                                                let l65 = i32::from(*base.add(16).cast::<u16>());
                                                                l65 as u16
                                                            };
                                                            V123::Uint16(e123)
                                                        }
                                                        8 => {
                                                            let e123 = {
                                                                let l66 = *base.add(16).cast::<i32>();
                                                                l66 as u32
                                                            };
                                                            V123::Uint32(e123)
                                                        }
                                                        9 => {
                                                            let e123 = {
                                                                let l67 = *base.add(16).cast::<i64>();
                                                                l67 as u64
                                                            };
                                                            V123::Uint64(e123)
                                                        }
                                                        10 => {
                                                            let e123 = {
                                                                let l68 = *base.add(16).cast::<f32>();
                                                                l68
                                                            };
                                                            V123::Float32Value(e123)
                                                        }
                                                        11 => {
                                                            let e123 = {
                                                                let l69 = *base.add(16).cast::<f64>();
                                                                l69
                                                            };
                                                            V123::Float64Value(e123)
                                                        }
                                                        12 => {
                                                            let e123 = {
                                                                let l70 = *base.add(16).cast::<*mut u8>();
                                                                let l71 = *base.add(20).cast::<usize>();
                                                                let len72 = l71;
                                                                let bytes72 = _rt::Vec::from_raw_parts(
                                                                    l70.cast(),
                                                                    len72,
                                                                    len72,
                                                                );
                                                                _rt::string_lift(bytes72)
                                                            };
                                                            V123::StringValue(e123)
                                                        }
                                                        13 => {
                                                            let e123 = {
                                                                let l73 = *base.add(16).cast::<*mut u8>();
                                                                let l74 = *base.add(20).cast::<usize>();
                                                                let len75 = l74;
                                                                _rt::Vec::from_raw_parts(l73.cast(), len75, len75)
                                                            };
                                                            V123::Bytes(e123)
                                                        }
                                                        14 => {
                                                            let e123 = {
                                                                let l76 = *base.add(16).cast::<i32>();
                                                                let l77 = i32::from(*base.add(20).cast::<u8>());
                                                                let l78 = i32::from(*base.add(21).cast::<u8>());
                                                                super::super::super::golem::graph::types::Date {
                                                                    year: l76 as u32,
                                                                    month: l77 as u8,
                                                                    day: l78 as u8,
                                                                }
                                                            };
                                                            V123::Date(e123)
                                                        }
                                                        15 => {
                                                            let e123 = {
                                                                let l79 = i32::from(*base.add(16).cast::<u8>());
                                                                let l80 = i32::from(*base.add(17).cast::<u8>());
                                                                let l81 = i32::from(*base.add(18).cast::<u8>());
                                                                let l82 = *base.add(20).cast::<i32>();
                                                                super::super::super::golem::graph::types::Time {
                                                                    hour: l79 as u8,
                                                                    minute: l80 as u8,
                                                                    second: l81 as u8,
                                                                    nanosecond: l82 as u32,
                                                                }
                                                            };
                                                            V123::Time(e123)
                                                        }
                                                        16 => {
                                                            let e123 = {
                                                                let l83 = *base.add(16).cast::<i32>();
                                                                let l84 = i32::from(*base.add(20).cast::<u8>());
                                                                let l85 = i32::from(*base.add(21).cast::<u8>());
                                                                let l86 = i32::from(*base.add(24).cast::<u8>());
                                                                let l87 = i32::from(*base.add(25).cast::<u8>());
                                                                let l88 = i32::from(*base.add(26).cast::<u8>());
                                                                let l89 = *base.add(28).cast::<i32>();
                                                                let l90 = i32::from(*base.add(32).cast::<u8>());
                                                                super::super::super::golem::graph::types::Datetime {
                                                                    date: super::super::super::golem::graph::types::Date {
                                                                        year: l83 as u32,
                                                                        month: l84 as u8,
                                                                        day: l85 as u8,
                                                                    },
                                                                    time: super::super::super::golem::graph::types::Time {
                                                                        hour: l86 as u8,
                                                                        minute: l87 as u8,
                                                                        second: l88 as u8,
                                                                        nanosecond: l89 as u32,
                                                                    },
                                                                    timezone_offset_minutes: match l90 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l91 = i32::from(*base.add(34).cast::<i16>());
                                                                                l91 as i16
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            V123::Datetime(e123)
                                                        }
                                                        17 => {
                                                            let e123 = {
                                                                let l92 = *base.add(16).cast::<i64>();
                                                                let l93 = *base.add(24).cast::<i32>();
                                                                super::super::super::golem::graph::types::Duration {
                                                                    seconds: l92,
                                                                    nanoseconds: l93 as u32,
                                                                }
                                                            };
                                                            V123::Duration(e123)
                                                        }
                                                        18 => {
                                                            let e123 = {
                                                                let l94 = *base.add(16).cast::<f64>();
                                                                let l95 = *base.add(24).cast::<f64>();
                                                                let l96 = i32::from(*base.add(32).cast::<u8>());
                                                                super::super::super::golem::graph::types::Point {
                                                                    longitude: l94,
                                                                    latitude: l95,
                                                                    altitude: match l96 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l97 = *base.add(40).cast::<f64>();
                                                                                l97
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            V123::Point(e123)
                                                        }
                                                        19 => {
                                                            let e123 = {
                                                                let l98 = *base.add(16).cast::<*mut u8>();
                                                                let l99 = *base.add(20).cast::<usize>();
                                                                let base104 = l98;
                                                                let len104 = l99;
                                                                let mut result104 = _rt::Vec::with_capacity(len104);
                                                                for i in 0..len104 {
                                                                    let base = base104.add(i * 32);
                                                                    let e104 = {
                                                                        let l100 = *base.add(0).cast::<f64>();
                                                                        let l101 = *base.add(8).cast::<f64>();
                                                                        let l102 = i32::from(*base.add(16).cast::<u8>());
                                                                        super::super::super::golem::graph::types::Point {
                                                                            longitude: l100,
                                                                            latitude: l101,
                                                                            altitude: match l102 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l103 = *base.add(24).cast::<f64>();
                                                                                        l103
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            },
                                                                        }
                                                                    };
                                                                    result104.push(e104);
                                                                }
                                                                _rt::cabi_dealloc(base104, len104 * 32, 8);
                                                                super::super::super::golem::graph::types::Linestring {
                                                                    coordinates: result104,
                                                                }
                                                            };
                                                            V123::Linestring(e123)
                                                        }
                                                        n => {
                                                            debug_assert_eq!(n, 20, "invalid enum discriminant");
                                                            let e123 = {
                                                                let l105 = *base.add(16).cast::<*mut u8>();
                                                                let l106 = *base.add(20).cast::<usize>();
                                                                let base111 = l105;
                                                                let len111 = l106;
                                                                let mut result111 = _rt::Vec::with_capacity(len111);
                                                                for i in 0..len111 {
                                                                    let base = base111.add(i * 32);
                                                                    let e111 = {
                                                                        let l107 = *base.add(0).cast::<f64>();
                                                                        let l108 = *base.add(8).cast::<f64>();
                                                                        let l109 = i32::from(*base.add(16).cast::<u8>());
                                                                        super::super::super::golem::graph::types::Point {
                                                                            longitude: l107,
                                                                            latitude: l108,
                                                                            altitude: match l109 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l110 = *base.add(24).cast::<f64>();
                                                                                        l110
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            },
                                                                        }
                                                                    };
                                                                    result111.push(e111);
                                                                }
                                                                _rt::cabi_dealloc(base111, len111 * 32, 8);
                                                                let l112 = i32::from(*base.add(24).cast::<u8>());
                                                                super::super::super::golem::graph::types::Polygon {
                                                                    exterior: result111,
                                                                    holes: match l112 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l113 = *base.add(28).cast::<*mut u8>();
                                                                                let l114 = *base.add(32).cast::<usize>();
                                                                                let base122 = l113;
                                                                                let len122 = l114;
                                                                                let mut result122 = _rt::Vec::with_capacity(len122);
                                                                                for i in 0..len122 {
                                                                                    let base = base122.add(i * 8);
                                                                                    let e122 = {
                                                                                        let l115 = *base.add(0).cast::<*mut u8>();
                                                                                        let l116 = *base.add(4).cast::<usize>();
                                                                                        let base121 = l115;
                                                                                        let len121 = l116;
                                                                                        let mut result121 = _rt::Vec::with_capacity(len121);
                                                                                        for i in 0..len121 {
                                                                                            let base = base121.add(i * 32);
                                                                                            let e121 = {
                                                                                                let l117 = *base.add(0).cast::<f64>();
                                                                                                let l118 = *base.add(8).cast::<f64>();
                                                                                                let l119 = i32::from(*base.add(16).cast::<u8>());
                                                                                                super::super::super::golem::graph::types::Point {
                                                                                                    longitude: l117,
                                                                                                    latitude: l118,
                                                                                                    altitude: match l119 {
                                                                                                        0 => None,
                                                                                                        1 => {
                                                                                                            let e = {
                                                                                                                let l120 = *base.add(24).cast::<f64>();
                                                                                                                l120
                                                                                                            };
                                                                                                            Some(e)
                                                                                                        }
                                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                                    },
                                                                                                }
                                                                                            };
                                                                                            result121.push(e121);
                                                                                        }
                                                                                        _rt::cabi_dealloc(base121, len121 * 32, 8);
                                                                                        result121
                                                                                    };
                                                                                    result122.push(e122);
                                                                                }
                                                                                _rt::cabi_dealloc(base122, len122 * 8, 4);
                                                                                result122
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            V123::Polygon(e123)
                                                        }
                                                    };
                                                    (_rt::string_lift(bytes57), v123)
                                                };
                                                result124.push(e124);
                                            }
                                            _rt::cabi_dealloc(base124, len124 * 48, 8);
                                            super::super::super::golem::graph::types::Vertex {
                                                id: v43,
                                                vertex_type: _rt::string_lift(bytes46),
                                                additional_labels: result52,
                                                properties: result124,
                                            }
                                        };
                                        result125.push(e125);
                                    }
                                    _rt::cabi_dealloc(base125, len125 * 40, 8);
                                    result125
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l126 = i32::from(*ptr31.add(8).cast::<u8>());
                                    use super::super::super::golem::graph::errors::GraphError as V181;
                                    let v181 = match l126 {
                                        0 => {
                                            let e181 = {
                                                let l127 = *ptr31.add(16).cast::<*mut u8>();
                                                let l128 = *ptr31.add(20).cast::<usize>();
                                                let len129 = l128;
                                                let bytes129 = _rt::Vec::from_raw_parts(
                                                    l127.cast(),
                                                    len129,
                                                    len129,
                                                );
                                                _rt::string_lift(bytes129)
                                            };
                                            V181::UnsupportedOperation(e181)
                                        }
                                        1 => {
                                            let e181 = {
                                                let l130 = *ptr31.add(16).cast::<*mut u8>();
                                                let l131 = *ptr31.add(20).cast::<usize>();
                                                let len132 = l131;
                                                let bytes132 = _rt::Vec::from_raw_parts(
                                                    l130.cast(),
                                                    len132,
                                                    len132,
                                                );
                                                _rt::string_lift(bytes132)
                                            };
                                            V181::ConnectionFailed(e181)
                                        }
                                        2 => {
                                            let e181 = {
                                                let l133 = *ptr31.add(16).cast::<*mut u8>();
                                                let l134 = *ptr31.add(20).cast::<usize>();
                                                let len135 = l134;
                                                let bytes135 = _rt::Vec::from_raw_parts(
                                                    l133.cast(),
                                                    len135,
                                                    len135,
                                                );
                                                _rt::string_lift(bytes135)
                                            };
                                            V181::AuthenticationFailed(e181)
                                        }
                                        3 => {
                                            let e181 = {
                                                let l136 = *ptr31.add(16).cast::<*mut u8>();
                                                let l137 = *ptr31.add(20).cast::<usize>();
                                                let len138 = l137;
                                                let bytes138 = _rt::Vec::from_raw_parts(
                                                    l136.cast(),
                                                    len138,
                                                    len138,
                                                );
                                                _rt::string_lift(bytes138)
                                            };
                                            V181::AuthorizationFailed(e181)
                                        }
                                        4 => {
                                            let e181 = {
                                                let l139 = i32::from(*ptr31.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V147;
                                                let v147 = match l139 {
                                                    0 => {
                                                        let e147 = {
                                                            let l140 = *ptr31.add(24).cast::<*mut u8>();
                                                            let l141 = *ptr31.add(28).cast::<usize>();
                                                            let len142 = l141;
                                                            let bytes142 = _rt::Vec::from_raw_parts(
                                                                l140.cast(),
                                                                len142,
                                                                len142,
                                                            );
                                                            _rt::string_lift(bytes142)
                                                        };
                                                        V147::StringValue(e147)
                                                    }
                                                    1 => {
                                                        let e147 = {
                                                            let l143 = *ptr31.add(24).cast::<i64>();
                                                            l143
                                                        };
                                                        V147::Int64(e147)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e147 = {
                                                            let l144 = *ptr31.add(24).cast::<*mut u8>();
                                                            let l145 = *ptr31.add(28).cast::<usize>();
                                                            let len146 = l145;
                                                            let bytes146 = _rt::Vec::from_raw_parts(
                                                                l144.cast(),
                                                                len146,
                                                                len146,
                                                            );
                                                            _rt::string_lift(bytes146)
                                                        };
                                                        V147::Uuid(e147)
                                                    }
                                                };
                                                v147
                                            };
                                            V181::ElementNotFound(e181)
                                        }
                                        5 => {
                                            let e181 = {
                                                let l148 = i32::from(*ptr31.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V156;
                                                let v156 = match l148 {
                                                    0 => {
                                                        let e156 = {
                                                            let l149 = *ptr31.add(24).cast::<*mut u8>();
                                                            let l150 = *ptr31.add(28).cast::<usize>();
                                                            let len151 = l150;
                                                            let bytes151 = _rt::Vec::from_raw_parts(
                                                                l149.cast(),
                                                                len151,
                                                                len151,
                                                            );
                                                            _rt::string_lift(bytes151)
                                                        };
                                                        V156::StringValue(e156)
                                                    }
                                                    1 => {
                                                        let e156 = {
                                                            let l152 = *ptr31.add(24).cast::<i64>();
                                                            l152
                                                        };
                                                        V156::Int64(e156)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e156 = {
                                                            let l153 = *ptr31.add(24).cast::<*mut u8>();
                                                            let l154 = *ptr31.add(28).cast::<usize>();
                                                            let len155 = l154;
                                                            let bytes155 = _rt::Vec::from_raw_parts(
                                                                l153.cast(),
                                                                len155,
                                                                len155,
                                                            );
                                                            _rt::string_lift(bytes155)
                                                        };
                                                        V156::Uuid(e156)
                                                    }
                                                };
                                                v156
                                            };
                                            V181::DuplicateElement(e181)
                                        }
                                        6 => {
                                            let e181 = {
                                                let l157 = *ptr31.add(16).cast::<*mut u8>();
                                                let l158 = *ptr31.add(20).cast::<usize>();
                                                let len159 = l158;
                                                let bytes159 = _rt::Vec::from_raw_parts(
                                                    l157.cast(),
                                                    len159,
                                                    len159,
                                                );
                                                _rt::string_lift(bytes159)
                                            };
                                            V181::SchemaViolation(e181)
                                        }
                                        7 => {
                                            let e181 = {
                                                let l160 = *ptr31.add(16).cast::<*mut u8>();
                                                let l161 = *ptr31.add(20).cast::<usize>();
                                                let len162 = l161;
                                                let bytes162 = _rt::Vec::from_raw_parts(
                                                    l160.cast(),
                                                    len162,
                                                    len162,
                                                );
                                                _rt::string_lift(bytes162)
                                            };
                                            V181::ConstraintViolation(e181)
                                        }
                                        8 => {
                                            let e181 = {
                                                let l163 = *ptr31.add(16).cast::<*mut u8>();
                                                let l164 = *ptr31.add(20).cast::<usize>();
                                                let len165 = l164;
                                                let bytes165 = _rt::Vec::from_raw_parts(
                                                    l163.cast(),
                                                    len165,
                                                    len165,
                                                );
                                                _rt::string_lift(bytes165)
                                            };
                                            V181::InvalidPropertyType(e181)
                                        }
                                        9 => {
                                            let e181 = {
                                                let l166 = *ptr31.add(16).cast::<*mut u8>();
                                                let l167 = *ptr31.add(20).cast::<usize>();
                                                let len168 = l167;
                                                let bytes168 = _rt::Vec::from_raw_parts(
                                                    l166.cast(),
                                                    len168,
                                                    len168,
                                                );
                                                _rt::string_lift(bytes168)
                                            };
                                            V181::InvalidQuery(e181)
                                        }
                                        10 => {
                                            let e181 = {
                                                let l169 = *ptr31.add(16).cast::<*mut u8>();
                                                let l170 = *ptr31.add(20).cast::<usize>();
                                                let len171 = l170;
                                                let bytes171 = _rt::Vec::from_raw_parts(
                                                    l169.cast(),
                                                    len171,
                                                    len171,
                                                );
                                                _rt::string_lift(bytes171)
                                            };
                                            V181::TransactionFailed(e181)
                                        }
                                        11 => V181::TransactionConflict,
                                        12 => V181::TransactionTimeout,
                                        13 => V181::DeadlockDetected,
                                        14 => V181::Timeout,
                                        15 => {
                                            let e181 = {
                                                let l172 = *ptr31.add(16).cast::<*mut u8>();
                                                let l173 = *ptr31.add(20).cast::<usize>();
                                                let len174 = l173;
                                                let bytes174 = _rt::Vec::from_raw_parts(
                                                    l172.cast(),
                                                    len174,
                                                    len174,
                                                );
                                                _rt::string_lift(bytes174)
                                            };
                                            V181::ResourceExhausted(e181)
                                        }
                                        16 => {
                                            let e181 = {
                                                let l175 = *ptr31.add(16).cast::<*mut u8>();
                                                let l176 = *ptr31.add(20).cast::<usize>();
                                                let len177 = l176;
                                                let bytes177 = _rt::Vec::from_raw_parts(
                                                    l175.cast(),
                                                    len177,
                                                    len177,
                                                );
                                                _rt::string_lift(bytes177)
                                            };
                                            V181::InternalError(e181)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 17, "invalid enum discriminant");
                                            let e181 = {
                                                let l178 = *ptr31.add(16).cast::<*mut u8>();
                                                let l179 = *ptr31.add(20).cast::<usize>();
                                                let len180 = l179;
                                                let bytes180 = _rt::Vec::from_raw_parts(
                                                    l178.cast(),
                                                    len180,
                                                    len180,
                                                );
                                                _rt::string_lift(bytes180)
                                            };
                                            V181::ServiceUnavailable(e181)
                                        }
                                    };
                                    v181
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Transaction {
                #[allow(unused_unsafe, clippy::all)]
                /// === EDGE OPERATIONS ===
                /// Create a new edge
                pub fn create_edge(
                    &self,
                    edge_type: &str,
                    from_vertex: &ElementId,
                    to_vertex: &ElementId,
                    properties: &PropertyMap,
                ) -> Result<Edge, GraphError> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 72]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 72],
                        );
                        let vec0 = edge_type;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        use super::super::super::golem::graph::types::ElementId as V3;
                        let (result4_0, result4_1, result4_2) = match from_vertex {
                            V3::StringValue(e) => {
                                let vec1 = e;
                                let ptr1 = vec1.as_ptr().cast::<u8>();
                                let len1 = vec1.len();
                                (
                                    0i32,
                                    {
                                        let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                        t.as_mut_ptr().cast::<*mut u8>().write(ptr1.cast_mut());
                                        t
                                    },
                                    len1,
                                )
                            }
                            V3::Int64(e) => {
                                (
                                    1i32,
                                    ::core::mem::MaybeUninit::new(_rt::as_i64(e) as u64),
                                    0usize,
                                )
                            }
                            V3::Uuid(e) => {
                                let vec2 = e;
                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                let len2 = vec2.len();
                                (
                                    2i32,
                                    {
                                        let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                        t.as_mut_ptr().cast::<*mut u8>().write(ptr2.cast_mut());
                                        t
                                    },
                                    len2,
                                )
                            }
                        };
                        use super::super::super::golem::graph::types::ElementId as V7;
                        let (result8_0, result8_1, result8_2) = match to_vertex {
                            V7::StringValue(e) => {
                                let vec5 = e;
                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                let len5 = vec5.len();
                                (
                                    0i32,
                                    {
                                        let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                        t.as_mut_ptr().cast::<*mut u8>().write(ptr5.cast_mut());
                                        t
                                    },
                                    len5,
                                )
                            }
                            V7::Int64(e) => {
                                (
                                    1i32,
                                    ::core::mem::MaybeUninit::new(_rt::as_i64(e) as u64),
                                    0usize,
                                )
                            }
                            V7::Uuid(e) => {
                                let vec6 = e;
                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                let len6 = vec6.len();
                                (
                                    2i32,
                                    {
                                        let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                        t.as_mut_ptr().cast::<*mut u8>().write(ptr6.cast_mut());
                                        t
                                    },
                                    len6,
                                )
                            }
                        };
                        let vec30 = properties;
                        let len30 = vec30.len();
                        let layout30 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec30.len() * 48,
                            8,
                        );
                        let result30 = if layout30.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout30).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout30);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec30.into_iter().enumerate() {
                            let base = result30.add(i * 48);
                            {
                                let (t9_0, t9_1) = e;
                                let vec10 = t9_0;
                                let ptr10 = vec10.as_ptr().cast::<u8>();
                                let len10 = vec10.len();
                                *base.add(4).cast::<usize>() = len10;
                                *base.add(0).cast::<*mut u8>() = ptr10.cast_mut();
                                use super::super::super::golem::graph::types::PropertyValue as V29;
                                match t9_1 {
                                    V29::NullValue => {
                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                    }
                                    V29::Boolean(e) => {
                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                        *base.add(16).cast::<u8>() = (match e {
                                            true => 1,
                                            false => 0,
                                        }) as u8;
                                    }
                                    V29::Int8(e) => {
                                        *base.add(8).cast::<u8>() = (2i32) as u8;
                                        *base.add(16).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                    }
                                    V29::Int16(e) => {
                                        *base.add(8).cast::<u8>() = (3i32) as u8;
                                        *base.add(16).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                    }
                                    V29::Int32(e) => {
                                        *base.add(8).cast::<u8>() = (4i32) as u8;
                                        *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    V29::Int64(e) => {
                                        *base.add(8).cast::<u8>() = (5i32) as u8;
                                        *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    V29::Uint8(e) => {
                                        *base.add(8).cast::<u8>() = (6i32) as u8;
                                        *base.add(16).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                    }
                                    V29::Uint16(e) => {
                                        *base.add(8).cast::<u8>() = (7i32) as u8;
                                        *base.add(16).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                    }
                                    V29::Uint32(e) => {
                                        *base.add(8).cast::<u8>() = (8i32) as u8;
                                        *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    V29::Uint64(e) => {
                                        *base.add(8).cast::<u8>() = (9i32) as u8;
                                        *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    V29::Float32Value(e) => {
                                        *base.add(8).cast::<u8>() = (10i32) as u8;
                                        *base.add(16).cast::<f32>() = _rt::as_f32(e);
                                    }
                                    V29::Float64Value(e) => {
                                        *base.add(8).cast::<u8>() = (11i32) as u8;
                                        *base.add(16).cast::<f64>() = _rt::as_f64(e);
                                    }
                                    V29::StringValue(e) => {
                                        *base.add(8).cast::<u8>() = (12i32) as u8;
                                        let vec11 = e;
                                        let ptr11 = vec11.as_ptr().cast::<u8>();
                                        let len11 = vec11.len();
                                        *base.add(20).cast::<usize>() = len11;
                                        *base.add(16).cast::<*mut u8>() = ptr11.cast_mut();
                                    }
                                    V29::Bytes(e) => {
                                        *base.add(8).cast::<u8>() = (13i32) as u8;
                                        let vec12 = e;
                                        let ptr12 = vec12.as_ptr().cast::<u8>();
                                        let len12 = vec12.len();
                                        *base.add(20).cast::<usize>() = len12;
                                        *base.add(16).cast::<*mut u8>() = ptr12.cast_mut();
                                    }
                                    V29::Date(e) => {
                                        *base.add(8).cast::<u8>() = (14i32) as u8;
                                        let super::super::super::golem::graph::types::Date {
                                            year: year13,
                                            month: month13,
                                            day: day13,
                                        } = e;
                                        *base.add(16).cast::<i32>() = _rt::as_i32(year13);
                                        *base.add(20).cast::<u8>() = (_rt::as_i32(month13)) as u8;
                                        *base.add(21).cast::<u8>() = (_rt::as_i32(day13)) as u8;
                                    }
                                    V29::Time(e) => {
                                        *base.add(8).cast::<u8>() = (15i32) as u8;
                                        let super::super::super::golem::graph::types::Time {
                                            hour: hour14,
                                            minute: minute14,
                                            second: second14,
                                            nanosecond: nanosecond14,
                                        } = e;
                                        *base.add(16).cast::<u8>() = (_rt::as_i32(hour14)) as u8;
                                        *base.add(17).cast::<u8>() = (_rt::as_i32(minute14)) as u8;
                                        *base.add(18).cast::<u8>() = (_rt::as_i32(second14)) as u8;
                                        *base.add(20).cast::<i32>() = _rt::as_i32(nanosecond14);
                                    }
                                    V29::Datetime(e) => {
                                        *base.add(8).cast::<u8>() = (16i32) as u8;
                                        let super::super::super::golem::graph::types::Datetime {
                                            date: date15,
                                            time: time15,
                                            timezone_offset_minutes: timezone_offset_minutes15,
                                        } = e;
                                        let super::super::super::golem::graph::types::Date {
                                            year: year16,
                                            month: month16,
                                            day: day16,
                                        } = date15;
                                        *base.add(16).cast::<i32>() = _rt::as_i32(year16);
                                        *base.add(20).cast::<u8>() = (_rt::as_i32(month16)) as u8;
                                        *base.add(21).cast::<u8>() = (_rt::as_i32(day16)) as u8;
                                        let super::super::super::golem::graph::types::Time {
                                            hour: hour17,
                                            minute: minute17,
                                            second: second17,
                                            nanosecond: nanosecond17,
                                        } = time15;
                                        *base.add(24).cast::<u8>() = (_rt::as_i32(hour17)) as u8;
                                        *base.add(25).cast::<u8>() = (_rt::as_i32(minute17)) as u8;
                                        *base.add(26).cast::<u8>() = (_rt::as_i32(second17)) as u8;
                                        *base.add(28).cast::<i32>() = _rt::as_i32(nanosecond17);
                                        match timezone_offset_minutes15 {
                                            Some(e) => {
                                                *base.add(32).cast::<u8>() = (1i32) as u8;
                                                *base.add(34).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            None => {
                                                *base.add(32).cast::<u8>() = (0i32) as u8;
                                            }
                                        };
                                    }
                                    V29::Duration(e) => {
                                        *base.add(8).cast::<u8>() = (17i32) as u8;
                                        let super::super::super::golem::graph::types::Duration {
                                            seconds: seconds18,
                                            nanoseconds: nanoseconds18,
                                        } = e;
                                        *base.add(16).cast::<i64>() = _rt::as_i64(seconds18);
                                        *base.add(24).cast::<i32>() = _rt::as_i32(nanoseconds18);
                                    }
                                    V29::Point(e) => {
                                        *base.add(8).cast::<u8>() = (18i32) as u8;
                                        let super::super::super::golem::graph::types::Point {
                                            longitude: longitude19,
                                            latitude: latitude19,
                                            altitude: altitude19,
                                        } = e;
                                        *base.add(16).cast::<f64>() = _rt::as_f64(longitude19);
                                        *base.add(24).cast::<f64>() = _rt::as_f64(latitude19);
                                        match altitude19 {
                                            Some(e) => {
                                                *base.add(32).cast::<u8>() = (1i32) as u8;
                                                *base.add(40).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            None => {
                                                *base.add(32).cast::<u8>() = (0i32) as u8;
                                            }
                                        };
                                    }
                                    V29::Linestring(e) => {
                                        *base.add(8).cast::<u8>() = (19i32) as u8;
                                        let super::super::super::golem::graph::types::Linestring {
                                            coordinates: coordinates20,
                                        } = e;
                                        let vec22 = coordinates20;
                                        let len22 = vec22.len();
                                        let layout22 = _rt::alloc::Layout::from_size_align_unchecked(
                                            vec22.len() * 32,
                                            8,
                                        );
                                        let result22 = if layout22.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout22).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout22);
                                            }
                                            ptr
                                        } else {
                                            ::core::ptr::null_mut()
                                        };
                                        for (i, e) in vec22.into_iter().enumerate() {
                                            let base = result22.add(i * 32);
                                            {
                                                let super::super::super::golem::graph::types::Point {
                                                    longitude: longitude21,
                                                    latitude: latitude21,
                                                    altitude: altitude21,
                                                } = e;
                                                *base.add(0).cast::<f64>() = _rt::as_f64(longitude21);
                                                *base.add(8).cast::<f64>() = _rt::as_f64(latitude21);
                                                match altitude21 {
                                                    Some(e) => {
                                                        *base.add(16).cast::<u8>() = (1i32) as u8;
                                                        *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                    }
                                                    None => {
                                                        *base.add(16).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                        }
                                        *base.add(20).cast::<usize>() = len22;
                                        *base.add(16).cast::<*mut u8>() = result22;
                                        cleanup_list.extend_from_slice(&[(result22, layout22)]);
                                    }
                                    V29::Polygon(e) => {
                                        *base.add(8).cast::<u8>() = (20i32) as u8;
                                        let super::super::super::golem::graph::types::Polygon {
                                            exterior: exterior23,
                                            holes: holes23,
                                        } = e;
                                        let vec25 = exterior23;
                                        let len25 = vec25.len();
                                        let layout25 = _rt::alloc::Layout::from_size_align_unchecked(
                                            vec25.len() * 32,
                                            8,
                                        );
                                        let result25 = if layout25.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout25).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout25);
                                            }
                                            ptr
                                        } else {
                                            ::core::ptr::null_mut()
                                        };
                                        for (i, e) in vec25.into_iter().enumerate() {
                                            let base = result25.add(i * 32);
                                            {
                                                let super::super::super::golem::graph::types::Point {
                                                    longitude: longitude24,
                                                    latitude: latitude24,
                                                    altitude: altitude24,
                                                } = e;
                                                *base.add(0).cast::<f64>() = _rt::as_f64(longitude24);
                                                *base.add(8).cast::<f64>() = _rt::as_f64(latitude24);
                                                match altitude24 {
                                                    Some(e) => {
                                                        *base.add(16).cast::<u8>() = (1i32) as u8;
                                                        *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                    }
                                                    None => {
                                                        *base.add(16).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                        }
                                        *base.add(20).cast::<usize>() = len25;
                                        *base.add(16).cast::<*mut u8>() = result25;
                                        match holes23 {
                                            Some(e) => {
                                                *base.add(24).cast::<u8>() = (1i32) as u8;
                                                let vec28 = e;
                                                let len28 = vec28.len();
                                                let layout28 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec28.len() * 8,
                                                    4,
                                                );
                                                let result28 = if layout28.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout28).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout28);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec28.into_iter().enumerate() {
                                                    let base = result28.add(i * 8);
                                                    {
                                                        let vec27 = e;
                                                        let len27 = vec27.len();
                                                        let layout27 = _rt::alloc::Layout::from_size_align_unchecked(
                                                            vec27.len() * 32,
                                                            8,
                                                        );
                                                        let result27 = if layout27.size() != 0 {
                                                            let ptr = _rt::alloc::alloc(layout27).cast::<u8>();
                                                            if ptr.is_null() {
                                                                _rt::alloc::handle_alloc_error(layout27);
                                                            }
                                                            ptr
                                                        } else {
                                                            ::core::ptr::null_mut()
                                                        };
                                                        for (i, e) in vec27.into_iter().enumerate() {
                                                            let base = result27.add(i * 32);
                                                            {
                                                                let super::super::super::golem::graph::types::Point {
                                                                    longitude: longitude26,
                                                                    latitude: latitude26,
                                                                    altitude: altitude26,
                                                                } = e;
                                                                *base.add(0).cast::<f64>() = _rt::as_f64(longitude26);
                                                                *base.add(8).cast::<f64>() = _rt::as_f64(latitude26);
                                                                match altitude26 {
                                                                    Some(e) => {
                                                                        *base.add(16).cast::<u8>() = (1i32) as u8;
                                                                        *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                                    }
                                                                    None => {
                                                                        *base.add(16).cast::<u8>() = (0i32) as u8;
                                                                    }
                                                                };
                                                            }
                                                        }
                                                        *base.add(4).cast::<usize>() = len27;
                                                        *base.add(0).cast::<*mut u8>() = result27;
                                                        cleanup_list.extend_from_slice(&[(result27, layout27)]);
                                                    }
                                                }
                                                *base.add(32).cast::<usize>() = len28;
                                                *base.add(28).cast::<*mut u8>() = result28;
                                                cleanup_list.extend_from_slice(&[(result28, layout28)]);
                                            }
                                            None => {
                                                *base.add(24).cast::<u8>() = (0i32) as u8;
                                            }
                                        };
                                        cleanup_list.extend_from_slice(&[(result25, layout25)]);
                                    }
                                }
                            }
                        }
                        let ptr31 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:graph/transactions@1.0.0")]
                        extern "C" {
                            #[link_name = "[method]transaction.create-edge"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                                _: ::core::mem::MaybeUninit<u64>,
                                _: usize,
                                _: i32,
                                _: ::core::mem::MaybeUninit<u64>,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: ::core::mem::MaybeUninit<u64>,
                            _: usize,
                            _: i32,
                            _: ::core::mem::MaybeUninit<u64>,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            result4_0,
                            result4_1,
                            result4_2,
                            result8_0,
                            result8_1,
                            result8_2,
                            result30,
                            len30,
                            ptr31,
                        );
                        let l32 = i32::from(*ptr31.add(0).cast::<u8>());
                        if layout30.size() != 0 {
                            _rt::alloc::dealloc(result30.cast(), layout30);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l32 {
                            0 => {
                                let e = {
                                    let l33 = i32::from(*ptr31.add(8).cast::<u8>());
                                    use super::super::super::golem::graph::types::ElementId as V41;
                                    let v41 = match l33 {
                                        0 => {
                                            let e41 = {
                                                let l34 = *ptr31.add(16).cast::<*mut u8>();
                                                let l35 = *ptr31.add(20).cast::<usize>();
                                                let len36 = l35;
                                                let bytes36 = _rt::Vec::from_raw_parts(
                                                    l34.cast(),
                                                    len36,
                                                    len36,
                                                );
                                                _rt::string_lift(bytes36)
                                            };
                                            V41::StringValue(e41)
                                        }
                                        1 => {
                                            let e41 = {
                                                let l37 = *ptr31.add(16).cast::<i64>();
                                                l37
                                            };
                                            V41::Int64(e41)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 2, "invalid enum discriminant");
                                            let e41 = {
                                                let l38 = *ptr31.add(16).cast::<*mut u8>();
                                                let l39 = *ptr31.add(20).cast::<usize>();
                                                let len40 = l39;
                                                let bytes40 = _rt::Vec::from_raw_parts(
                                                    l38.cast(),
                                                    len40,
                                                    len40,
                                                );
                                                _rt::string_lift(bytes40)
                                            };
                                            V41::Uuid(e41)
                                        }
                                    };
                                    let l42 = *ptr31.add(24).cast::<*mut u8>();
                                    let l43 = *ptr31.add(28).cast::<usize>();
                                    let len44 = l43;
                                    let bytes44 = _rt::Vec::from_raw_parts(
                                        l42.cast(),
                                        len44,
                                        len44,
                                    );
                                    let l45 = i32::from(*ptr31.add(32).cast::<u8>());
                                    use super::super::super::golem::graph::types::ElementId as V53;
                                    let v53 = match l45 {
                                        0 => {
                                            let e53 = {
                                                let l46 = *ptr31.add(40).cast::<*mut u8>();
                                                let l47 = *ptr31.add(44).cast::<usize>();
                                                let len48 = l47;
                                                let bytes48 = _rt::Vec::from_raw_parts(
                                                    l46.cast(),
                                                    len48,
                                                    len48,
                                                );
                                                _rt::string_lift(bytes48)
                                            };
                                            V53::StringValue(e53)
                                        }
                                        1 => {
                                            let e53 = {
                                                let l49 = *ptr31.add(40).cast::<i64>();
                                                l49
                                            };
                                            V53::Int64(e53)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 2, "invalid enum discriminant");
                                            let e53 = {
                                                let l50 = *ptr31.add(40).cast::<*mut u8>();
                                                let l51 = *ptr31.add(44).cast::<usize>();
                                                let len52 = l51;
                                                let bytes52 = _rt::Vec::from_raw_parts(
                                                    l50.cast(),
                                                    len52,
                                                    len52,
                                                );
                                                _rt::string_lift(bytes52)
                                            };
                                            V53::Uuid(e53)
                                        }
                                    };
                                    let l54 = i32::from(*ptr31.add(48).cast::<u8>());
                                    use super::super::super::golem::graph::types::ElementId as V62;
                                    let v62 = match l54 {
                                        0 => {
                                            let e62 = {
                                                let l55 = *ptr31.add(56).cast::<*mut u8>();
                                                let l56 = *ptr31.add(60).cast::<usize>();
                                                let len57 = l56;
                                                let bytes57 = _rt::Vec::from_raw_parts(
                                                    l55.cast(),
                                                    len57,
                                                    len57,
                                                );
                                                _rt::string_lift(bytes57)
                                            };
                                            V62::StringValue(e62)
                                        }
                                        1 => {
                                            let e62 = {
                                                let l58 = *ptr31.add(56).cast::<i64>();
                                                l58
                                            };
                                            V62::Int64(e62)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 2, "invalid enum discriminant");
                                            let e62 = {
                                                let l59 = *ptr31.add(56).cast::<*mut u8>();
                                                let l60 = *ptr31.add(60).cast::<usize>();
                                                let len61 = l60;
                                                let bytes61 = _rt::Vec::from_raw_parts(
                                                    l59.cast(),
                                                    len61,
                                                    len61,
                                                );
                                                _rt::string_lift(bytes61)
                                            };
                                            V62::Uuid(e62)
                                        }
                                    };
                                    let l63 = *ptr31.add(64).cast::<*mut u8>();
                                    let l64 = *ptr31.add(68).cast::<usize>();
                                    let base134 = l63;
                                    let len134 = l64;
                                    let mut result134 = _rt::Vec::with_capacity(len134);
                                    for i in 0..len134 {
                                        let base = base134.add(i * 48);
                                        let e134 = {
                                            let l65 = *base.add(0).cast::<*mut u8>();
                                            let l66 = *base.add(4).cast::<usize>();
                                            let len67 = l66;
                                            let bytes67 = _rt::Vec::from_raw_parts(
                                                l65.cast(),
                                                len67,
                                                len67,
                                            );
                                            let l68 = i32::from(*base.add(8).cast::<u8>());
                                            use super::super::super::golem::graph::types::PropertyValue as V133;
                                            let v133 = match l68 {
                                                0 => V133::NullValue,
                                                1 => {
                                                    let e133 = {
                                                        let l69 = i32::from(*base.add(16).cast::<u8>());
                                                        _rt::bool_lift(l69 as u8)
                                                    };
                                                    V133::Boolean(e133)
                                                }
                                                2 => {
                                                    let e133 = {
                                                        let l70 = i32::from(*base.add(16).cast::<i8>());
                                                        l70 as i8
                                                    };
                                                    V133::Int8(e133)
                                                }
                                                3 => {
                                                    let e133 = {
                                                        let l71 = i32::from(*base.add(16).cast::<i16>());
                                                        l71 as i16
                                                    };
                                                    V133::Int16(e133)
                                                }
                                                4 => {
                                                    let e133 = {
                                                        let l72 = *base.add(16).cast::<i32>();
                                                        l72
                                                    };
                                                    V133::Int32(e133)
                                                }
                                                5 => {
                                                    let e133 = {
                                                        let l73 = *base.add(16).cast::<i64>();
                                                        l73
                                                    };
                                                    V133::Int64(e133)
                                                }
                                                6 => {
                                                    let e133 = {
                                                        let l74 = i32::from(*base.add(16).cast::<u8>());
                                                        l74 as u8
                                                    };
                                                    V133::Uint8(e133)
                                                }
                                                7 => {
                                                    let e133 = {
                                                        let l75 = i32::from(*base.add(16).cast::<u16>());
                                                        l75 as u16
                                                    };
                                                    V133::Uint16(e133)
                                                }
                                                8 => {
                                                    let e133 = {
                                                        let l76 = *base.add(16).cast::<i32>();
                                                        l76 as u32
                                                    };
                                                    V133::Uint32(e133)
                                                }
                                                9 => {
                                                    let e133 = {
                                                        let l77 = *base.add(16).cast::<i64>();
                                                        l77 as u64
                                                    };
                                                    V133::Uint64(e133)
                                                }
                                                10 => {
                                                    let e133 = {
                                                        let l78 = *base.add(16).cast::<f32>();
                                                        l78
                                                    };
                                                    V133::Float32Value(e133)
                                                }
                                                11 => {
                                                    let e133 = {
                                                        let l79 = *base.add(16).cast::<f64>();
                                                        l79
                                                    };
                                                    V133::Float64Value(e133)
                                                }
                                                12 => {
                                                    let e133 = {
                                                        let l80 = *base.add(16).cast::<*mut u8>();
                                                        let l81 = *base.add(20).cast::<usize>();
                                                        let len82 = l81;
                                                        let bytes82 = _rt::Vec::from_raw_parts(
                                                            l80.cast(),
                                                            len82,
                                                            len82,
                                                        );
                                                        _rt::string_lift(bytes82)
                                                    };
                                                    V133::StringValue(e133)
                                                }
                                                13 => {
                                                    let e133 = {
                                                        let l83 = *base.add(16).cast::<*mut u8>();
                                                        let l84 = *base.add(20).cast::<usize>();
                                                        let len85 = l84;
                                                        _rt::Vec::from_raw_parts(l83.cast(), len85, len85)
                                                    };
                                                    V133::Bytes(e133)
                                                }
                                                14 => {
                                                    let e133 = {
                                                        let l86 = *base.add(16).cast::<i32>();
                                                        let l87 = i32::from(*base.add(20).cast::<u8>());
                                                        let l88 = i32::from(*base.add(21).cast::<u8>());
                                                        super::super::super::golem::graph::types::Date {
                                                            year: l86 as u32,
                                                            month: l87 as u8,
                                                            day: l88 as u8,
                                                        }
                                                    };
                                                    V133::Date(e133)
                                                }
                                                15 => {
                                                    let e133 = {
                                                        let l89 = i32::from(*base.add(16).cast::<u8>());
                                                        let l90 = i32::from(*base.add(17).cast::<u8>());
                                                        let l91 = i32::from(*base.add(18).cast::<u8>());
                                                        let l92 = *base.add(20).cast::<i32>();
                                                        super::super::super::golem::graph::types::Time {
                                                            hour: l89 as u8,
                                                            minute: l90 as u8,
                                                            second: l91 as u8,
                                                            nanosecond: l92 as u32,
                                                        }
                                                    };
                                                    V133::Time(e133)
                                                }
                                                16 => {
                                                    let e133 = {
                                                        let l93 = *base.add(16).cast::<i32>();
                                                        let l94 = i32::from(*base.add(20).cast::<u8>());
                                                        let l95 = i32::from(*base.add(21).cast::<u8>());
                                                        let l96 = i32::from(*base.add(24).cast::<u8>());
                                                        let l97 = i32::from(*base.add(25).cast::<u8>());
                                                        let l98 = i32::from(*base.add(26).cast::<u8>());
                                                        let l99 = *base.add(28).cast::<i32>();
                                                        let l100 = i32::from(*base.add(32).cast::<u8>());
                                                        super::super::super::golem::graph::types::Datetime {
                                                            date: super::super::super::golem::graph::types::Date {
                                                                year: l93 as u32,
                                                                month: l94 as u8,
                                                                day: l95 as u8,
                                                            },
                                                            time: super::super::super::golem::graph::types::Time {
                                                                hour: l96 as u8,
                                                                minute: l97 as u8,
                                                                second: l98 as u8,
                                                                nanosecond: l99 as u32,
                                                            },
                                                            timezone_offset_minutes: match l100 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l101 = i32::from(*base.add(34).cast::<i16>());
                                                                        l101 as i16
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                        }
                                                    };
                                                    V133::Datetime(e133)
                                                }
                                                17 => {
                                                    let e133 = {
                                                        let l102 = *base.add(16).cast::<i64>();
                                                        let l103 = *base.add(24).cast::<i32>();
                                                        super::super::super::golem::graph::types::Duration {
                                                            seconds: l102,
                                                            nanoseconds: l103 as u32,
                                                        }
                                                    };
                                                    V133::Duration(e133)
                                                }
                                                18 => {
                                                    let e133 = {
                                                        let l104 = *base.add(16).cast::<f64>();
                                                        let l105 = *base.add(24).cast::<f64>();
                                                        let l106 = i32::from(*base.add(32).cast::<u8>());
                                                        super::super::super::golem::graph::types::Point {
                                                            longitude: l104,
                                                            latitude: l105,
                                                            altitude: match l106 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l107 = *base.add(40).cast::<f64>();
                                                                        l107
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                        }
                                                    };
                                                    V133::Point(e133)
                                                }
                                                19 => {
                                                    let e133 = {
                                                        let l108 = *base.add(16).cast::<*mut u8>();
                                                        let l109 = *base.add(20).cast::<usize>();
                                                        let base114 = l108;
                                                        let len114 = l109;
                                                        let mut result114 = _rt::Vec::with_capacity(len114);
                                                        for i in 0..len114 {
                                                            let base = base114.add(i * 32);
                                                            let e114 = {
                                                                let l110 = *base.add(0).cast::<f64>();
                                                                let l111 = *base.add(8).cast::<f64>();
                                                                let l112 = i32::from(*base.add(16).cast::<u8>());
                                                                super::super::super::golem::graph::types::Point {
                                                                    longitude: l110,
                                                                    latitude: l111,
                                                                    altitude: match l112 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l113 = *base.add(24).cast::<f64>();
                                                                                l113
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            result114.push(e114);
                                                        }
                                                        _rt::cabi_dealloc(base114, len114 * 32, 8);
                                                        super::super::super::golem::graph::types::Linestring {
                                                            coordinates: result114,
                                                        }
                                                    };
                                                    V133::Linestring(e133)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 20, "invalid enum discriminant");
                                                    let e133 = {
                                                        let l115 = *base.add(16).cast::<*mut u8>();
                                                        let l116 = *base.add(20).cast::<usize>();
                                                        let base121 = l115;
                                                        let len121 = l116;
                                                        let mut result121 = _rt::Vec::with_capacity(len121);
                                                        for i in 0..len121 {
                                                            let base = base121.add(i * 32);
                                                            let e121 = {
                                                                let l117 = *base.add(0).cast::<f64>();
                                                                let l118 = *base.add(8).cast::<f64>();
                                                                let l119 = i32::from(*base.add(16).cast::<u8>());
                                                                super::super::super::golem::graph::types::Point {
                                                                    longitude: l117,
                                                                    latitude: l118,
                                                                    altitude: match l119 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l120 = *base.add(24).cast::<f64>();
                                                                                l120
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            result121.push(e121);
                                                        }
                                                        _rt::cabi_dealloc(base121, len121 * 32, 8);
                                                        let l122 = i32::from(*base.add(24).cast::<u8>());
                                                        super::super::super::golem::graph::types::Polygon {
                                                            exterior: result121,
                                                            holes: match l122 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l123 = *base.add(28).cast::<*mut u8>();
                                                                        let l124 = *base.add(32).cast::<usize>();
                                                                        let base132 = l123;
                                                                        let len132 = l124;
                                                                        let mut result132 = _rt::Vec::with_capacity(len132);
                                                                        for i in 0..len132 {
                                                                            let base = base132.add(i * 8);
                                                                            let e132 = {
                                                                                let l125 = *base.add(0).cast::<*mut u8>();
                                                                                let l126 = *base.add(4).cast::<usize>();
                                                                                let base131 = l125;
                                                                                let len131 = l126;
                                                                                let mut result131 = _rt::Vec::with_capacity(len131);
                                                                                for i in 0..len131 {
                                                                                    let base = base131.add(i * 32);
                                                                                    let e131 = {
                                                                                        let l127 = *base.add(0).cast::<f64>();
                                                                                        let l128 = *base.add(8).cast::<f64>();
                                                                                        let l129 = i32::from(*base.add(16).cast::<u8>());
                                                                                        super::super::super::golem::graph::types::Point {
                                                                                            longitude: l127,
                                                                                            latitude: l128,
                                                                                            altitude: match l129 {
                                                                                                0 => None,
                                                                                                1 => {
                                                                                                    let e = {
                                                                                                        let l130 = *base.add(24).cast::<f64>();
                                                                                                        l130
                                                                                                    };
                                                                                                    Some(e)
                                                                                                }
                                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                                            },
                                                                                        }
                                                                                    };
                                                                                    result131.push(e131);
                                                                                }
                                                                                _rt::cabi_dealloc(base131, len131 * 32, 8);
                                                                                result131
                                                                            };
                                                                            result132.push(e132);
                                                                        }
                                                                        _rt::cabi_dealloc(base132, len132 * 8, 4);
                                                                        result132
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                        }
                                                    };
                                                    V133::Polygon(e133)
                                                }
                                            };
                                            (_rt::string_lift(bytes67), v133)
                                        };
                                        result134.push(e134);
                                    }
                                    _rt::cabi_dealloc(base134, len134 * 48, 8);
                                    super::super::super::golem::graph::types::Edge {
                                        id: v41,
                                        edge_type: _rt::string_lift(bytes44),
                                        from_vertex: v53,
                                        to_vertex: v62,
                                        properties: result134,
                                    }
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l135 = i32::from(*ptr31.add(8).cast::<u8>());
                                    use super::super::super::golem::graph::errors::GraphError as V190;
                                    let v190 = match l135 {
                                        0 => {
                                            let e190 = {
                                                let l136 = *ptr31.add(16).cast::<*mut u8>();
                                                let l137 = *ptr31.add(20).cast::<usize>();
                                                let len138 = l137;
                                                let bytes138 = _rt::Vec::from_raw_parts(
                                                    l136.cast(),
                                                    len138,
                                                    len138,
                                                );
                                                _rt::string_lift(bytes138)
                                            };
                                            V190::UnsupportedOperation(e190)
                                        }
                                        1 => {
                                            let e190 = {
                                                let l139 = *ptr31.add(16).cast::<*mut u8>();
                                                let l140 = *ptr31.add(20).cast::<usize>();
                                                let len141 = l140;
                                                let bytes141 = _rt::Vec::from_raw_parts(
                                                    l139.cast(),
                                                    len141,
                                                    len141,
                                                );
                                                _rt::string_lift(bytes141)
                                            };
                                            V190::ConnectionFailed(e190)
                                        }
                                        2 => {
                                            let e190 = {
                                                let l142 = *ptr31.add(16).cast::<*mut u8>();
                                                let l143 = *ptr31.add(20).cast::<usize>();
                                                let len144 = l143;
                                                let bytes144 = _rt::Vec::from_raw_parts(
                                                    l142.cast(),
                                                    len144,
                                                    len144,
                                                );
                                                _rt::string_lift(bytes144)
                                            };
                                            V190::AuthenticationFailed(e190)
                                        }
                                        3 => {
                                            let e190 = {
                                                let l145 = *ptr31.add(16).cast::<*mut u8>();
                                                let l146 = *ptr31.add(20).cast::<usize>();
                                                let len147 = l146;
                                                let bytes147 = _rt::Vec::from_raw_parts(
                                                    l145.cast(),
                                                    len147,
                                                    len147,
                                                );
                                                _rt::string_lift(bytes147)
                                            };
                                            V190::AuthorizationFailed(e190)
                                        }
                                        4 => {
                                            let e190 = {
                                                let l148 = i32::from(*ptr31.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V156;
                                                let v156 = match l148 {
                                                    0 => {
                                                        let e156 = {
                                                            let l149 = *ptr31.add(24).cast::<*mut u8>();
                                                            let l150 = *ptr31.add(28).cast::<usize>();
                                                            let len151 = l150;
                                                            let bytes151 = _rt::Vec::from_raw_parts(
                                                                l149.cast(),
                                                                len151,
                                                                len151,
                                                            );
                                                            _rt::string_lift(bytes151)
                                                        };
                                                        V156::StringValue(e156)
                                                    }
                                                    1 => {
                                                        let e156 = {
                                                            let l152 = *ptr31.add(24).cast::<i64>();
                                                            l152
                                                        };
                                                        V156::Int64(e156)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e156 = {
                                                            let l153 = *ptr31.add(24).cast::<*mut u8>();
                                                            let l154 = *ptr31.add(28).cast::<usize>();
                                                            let len155 = l154;
                                                            let bytes155 = _rt::Vec::from_raw_parts(
                                                                l153.cast(),
                                                                len155,
                                                                len155,
                                                            );
                                                            _rt::string_lift(bytes155)
                                                        };
                                                        V156::Uuid(e156)
                                                    }
                                                };
                                                v156
                                            };
                                            V190::ElementNotFound(e190)
                                        }
                                        5 => {
                                            let e190 = {
                                                let l157 = i32::from(*ptr31.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V165;
                                                let v165 = match l157 {
                                                    0 => {
                                                        let e165 = {
                                                            let l158 = *ptr31.add(24).cast::<*mut u8>();
                                                            let l159 = *ptr31.add(28).cast::<usize>();
                                                            let len160 = l159;
                                                            let bytes160 = _rt::Vec::from_raw_parts(
                                                                l158.cast(),
                                                                len160,
                                                                len160,
                                                            );
                                                            _rt::string_lift(bytes160)
                                                        };
                                                        V165::StringValue(e165)
                                                    }
                                                    1 => {
                                                        let e165 = {
                                                            let l161 = *ptr31.add(24).cast::<i64>();
                                                            l161
                                                        };
                                                        V165::Int64(e165)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e165 = {
                                                            let l162 = *ptr31.add(24).cast::<*mut u8>();
                                                            let l163 = *ptr31.add(28).cast::<usize>();
                                                            let len164 = l163;
                                                            let bytes164 = _rt::Vec::from_raw_parts(
                                                                l162.cast(),
                                                                len164,
                                                                len164,
                                                            );
                                                            _rt::string_lift(bytes164)
                                                        };
                                                        V165::Uuid(e165)
                                                    }
                                                };
                                                v165
                                            };
                                            V190::DuplicateElement(e190)
                                        }
                                        6 => {
                                            let e190 = {
                                                let l166 = *ptr31.add(16).cast::<*mut u8>();
                                                let l167 = *ptr31.add(20).cast::<usize>();
                                                let len168 = l167;
                                                let bytes168 = _rt::Vec::from_raw_parts(
                                                    l166.cast(),
                                                    len168,
                                                    len168,
                                                );
                                                _rt::string_lift(bytes168)
                                            };
                                            V190::SchemaViolation(e190)
                                        }
                                        7 => {
                                            let e190 = {
                                                let l169 = *ptr31.add(16).cast::<*mut u8>();
                                                let l170 = *ptr31.add(20).cast::<usize>();
                                                let len171 = l170;
                                                let bytes171 = _rt::Vec::from_raw_parts(
                                                    l169.cast(),
                                                    len171,
                                                    len171,
                                                );
                                                _rt::string_lift(bytes171)
                                            };
                                            V190::ConstraintViolation(e190)
                                        }
                                        8 => {
                                            let e190 = {
                                                let l172 = *ptr31.add(16).cast::<*mut u8>();
                                                let l173 = *ptr31.add(20).cast::<usize>();
                                                let len174 = l173;
                                                let bytes174 = _rt::Vec::from_raw_parts(
                                                    l172.cast(),
                                                    len174,
                                                    len174,
                                                );
                                                _rt::string_lift(bytes174)
                                            };
                                            V190::InvalidPropertyType(e190)
                                        }
                                        9 => {
                                            let e190 = {
                                                let l175 = *ptr31.add(16).cast::<*mut u8>();
                                                let l176 = *ptr31.add(20).cast::<usize>();
                                                let len177 = l176;
                                                let bytes177 = _rt::Vec::from_raw_parts(
                                                    l175.cast(),
                                                    len177,
                                                    len177,
                                                );
                                                _rt::string_lift(bytes177)
                                            };
                                            V190::InvalidQuery(e190)
                                        }
                                        10 => {
                                            let e190 = {
                                                let l178 = *ptr31.add(16).cast::<*mut u8>();
                                                let l179 = *ptr31.add(20).cast::<usize>();
                                                let len180 = l179;
                                                let bytes180 = _rt::Vec::from_raw_parts(
                                                    l178.cast(),
                                                    len180,
                                                    len180,
                                                );
                                                _rt::string_lift(bytes180)
                                            };
                                            V190::TransactionFailed(e190)
                                        }
                                        11 => V190::TransactionConflict,
                                        12 => V190::TransactionTimeout,
                                        13 => V190::DeadlockDetected,
                                        14 => V190::Timeout,
                                        15 => {
                                            let e190 = {
                                                let l181 = *ptr31.add(16).cast::<*mut u8>();
                                                let l182 = *ptr31.add(20).cast::<usize>();
                                                let len183 = l182;
                                                let bytes183 = _rt::Vec::from_raw_parts(
                                                    l181.cast(),
                                                    len183,
                                                    len183,
                                                );
                                                _rt::string_lift(bytes183)
                                            };
                                            V190::ResourceExhausted(e190)
                                        }
                                        16 => {
                                            let e190 = {
                                                let l184 = *ptr31.add(16).cast::<*mut u8>();
                                                let l185 = *ptr31.add(20).cast::<usize>();
                                                let len186 = l185;
                                                let bytes186 = _rt::Vec::from_raw_parts(
                                                    l184.cast(),
                                                    len186,
                                                    len186,
                                                );
                                                _rt::string_lift(bytes186)
                                            };
                                            V190::InternalError(e190)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 17, "invalid enum discriminant");
                                            let e190 = {
                                                let l187 = *ptr31.add(16).cast::<*mut u8>();
                                                let l188 = *ptr31.add(20).cast::<usize>();
                                                let len189 = l188;
                                                let bytes189 = _rt::Vec::from_raw_parts(
                                                    l187.cast(),
                                                    len189,
                                                    len189,
                                                );
                                                _rt::string_lift(bytes189)
                                            };
                                            V190::ServiceUnavailable(e190)
                                        }
                                    };
                                    v190
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Transaction {
                #[allow(unused_unsafe, clippy::all)]
                /// Get edge by ID
                pub fn get_edge(
                    &self,
                    id: &ElementId,
                ) -> Result<Option<Edge>, GraphError> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 80]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 80],
                        );
                        use super::super::super::golem::graph::types::ElementId as V2;
                        let (result3_0, result3_1, result3_2) = match id {
                            V2::StringValue(e) => {
                                let vec0 = e;
                                let ptr0 = vec0.as_ptr().cast::<u8>();
                                let len0 = vec0.len();
                                (
                                    0i32,
                                    {
                                        let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                        t.as_mut_ptr().cast::<*mut u8>().write(ptr0.cast_mut());
                                        t
                                    },
                                    len0,
                                )
                            }
                            V2::Int64(e) => {
                                (
                                    1i32,
                                    ::core::mem::MaybeUninit::new(_rt::as_i64(e) as u64),
                                    0usize,
                                )
                            }
                            V2::Uuid(e) => {
                                let vec1 = e;
                                let ptr1 = vec1.as_ptr().cast::<u8>();
                                let len1 = vec1.len();
                                (
                                    2i32,
                                    {
                                        let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                        t.as_mut_ptr().cast::<*mut u8>().write(ptr1.cast_mut());
                                        t
                                    },
                                    len1,
                                )
                            }
                        };
                        let ptr4 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:graph/transactions@1.0.0")]
                        extern "C" {
                            #[link_name = "[method]transaction.get-edge"]
                            fn wit_import(
                                _: i32,
                                _: i32,
                                _: ::core::mem::MaybeUninit<u64>,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: i32,
                            _: ::core::mem::MaybeUninit<u64>,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            result3_0,
                            result3_1,
                            result3_2,
                            ptr4,
                        );
                        let l5 = i32::from(*ptr4.add(0).cast::<u8>());
                        match l5 {
                            0 => {
                                let e = {
                                    let l6 = i32::from(*ptr4.add(8).cast::<u8>());
                                    match l6 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l7 = i32::from(*ptr4.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V15;
                                                let v15 = match l7 {
                                                    0 => {
                                                        let e15 = {
                                                            let l8 = *ptr4.add(24).cast::<*mut u8>();
                                                            let l9 = *ptr4.add(28).cast::<usize>();
                                                            let len10 = l9;
                                                            let bytes10 = _rt::Vec::from_raw_parts(
                                                                l8.cast(),
                                                                len10,
                                                                len10,
                                                            );
                                                            _rt::string_lift(bytes10)
                                                        };
                                                        V15::StringValue(e15)
                                                    }
                                                    1 => {
                                                        let e15 = {
                                                            let l11 = *ptr4.add(24).cast::<i64>();
                                                            l11
                                                        };
                                                        V15::Int64(e15)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e15 = {
                                                            let l12 = *ptr4.add(24).cast::<*mut u8>();
                                                            let l13 = *ptr4.add(28).cast::<usize>();
                                                            let len14 = l13;
                                                            let bytes14 = _rt::Vec::from_raw_parts(
                                                                l12.cast(),
                                                                len14,
                                                                len14,
                                                            );
                                                            _rt::string_lift(bytes14)
                                                        };
                                                        V15::Uuid(e15)
                                                    }
                                                };
                                                let l16 = *ptr4.add(32).cast::<*mut u8>();
                                                let l17 = *ptr4.add(36).cast::<usize>();
                                                let len18 = l17;
                                                let bytes18 = _rt::Vec::from_raw_parts(
                                                    l16.cast(),
                                                    len18,
                                                    len18,
                                                );
                                                let l19 = i32::from(*ptr4.add(40).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V27;
                                                let v27 = match l19 {
                                                    0 => {
                                                        let e27 = {
                                                            let l20 = *ptr4.add(48).cast::<*mut u8>();
                                                            let l21 = *ptr4.add(52).cast::<usize>();
                                                            let len22 = l21;
                                                            let bytes22 = _rt::Vec::from_raw_parts(
                                                                l20.cast(),
                                                                len22,
                                                                len22,
                                                            );
                                                            _rt::string_lift(bytes22)
                                                        };
                                                        V27::StringValue(e27)
                                                    }
                                                    1 => {
                                                        let e27 = {
                                                            let l23 = *ptr4.add(48).cast::<i64>();
                                                            l23
                                                        };
                                                        V27::Int64(e27)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e27 = {
                                                            let l24 = *ptr4.add(48).cast::<*mut u8>();
                                                            let l25 = *ptr4.add(52).cast::<usize>();
                                                            let len26 = l25;
                                                            let bytes26 = _rt::Vec::from_raw_parts(
                                                                l24.cast(),
                                                                len26,
                                                                len26,
                                                            );
                                                            _rt::string_lift(bytes26)
                                                        };
                                                        V27::Uuid(e27)
                                                    }
                                                };
                                                let l28 = i32::from(*ptr4.add(56).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V36;
                                                let v36 = match l28 {
                                                    0 => {
                                                        let e36 = {
                                                            let l29 = *ptr4.add(64).cast::<*mut u8>();
                                                            let l30 = *ptr4.add(68).cast::<usize>();
                                                            let len31 = l30;
                                                            let bytes31 = _rt::Vec::from_raw_parts(
                                                                l29.cast(),
                                                                len31,
                                                                len31,
                                                            );
                                                            _rt::string_lift(bytes31)
                                                        };
                                                        V36::StringValue(e36)
                                                    }
                                                    1 => {
                                                        let e36 = {
                                                            let l32 = *ptr4.add(64).cast::<i64>();
                                                            l32
                                                        };
                                                        V36::Int64(e36)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e36 = {
                                                            let l33 = *ptr4.add(64).cast::<*mut u8>();
                                                            let l34 = *ptr4.add(68).cast::<usize>();
                                                            let len35 = l34;
                                                            let bytes35 = _rt::Vec::from_raw_parts(
                                                                l33.cast(),
                                                                len35,
                                                                len35,
                                                            );
                                                            _rt::string_lift(bytes35)
                                                        };
                                                        V36::Uuid(e36)
                                                    }
                                                };
                                                let l37 = *ptr4.add(72).cast::<*mut u8>();
                                                let l38 = *ptr4.add(76).cast::<usize>();
                                                let base108 = l37;
                                                let len108 = l38;
                                                let mut result108 = _rt::Vec::with_capacity(len108);
                                                for i in 0..len108 {
                                                    let base = base108.add(i * 48);
                                                    let e108 = {
                                                        let l39 = *base.add(0).cast::<*mut u8>();
                                                        let l40 = *base.add(4).cast::<usize>();
                                                        let len41 = l40;
                                                        let bytes41 = _rt::Vec::from_raw_parts(
                                                            l39.cast(),
                                                            len41,
                                                            len41,
                                                        );
                                                        let l42 = i32::from(*base.add(8).cast::<u8>());
                                                        use super::super::super::golem::graph::types::PropertyValue as V107;
                                                        let v107 = match l42 {
                                                            0 => V107::NullValue,
                                                            1 => {
                                                                let e107 = {
                                                                    let l43 = i32::from(*base.add(16).cast::<u8>());
                                                                    _rt::bool_lift(l43 as u8)
                                                                };
                                                                V107::Boolean(e107)
                                                            }
                                                            2 => {
                                                                let e107 = {
                                                                    let l44 = i32::from(*base.add(16).cast::<i8>());
                                                                    l44 as i8
                                                                };
                                                                V107::Int8(e107)
                                                            }
                                                            3 => {
                                                                let e107 = {
                                                                    let l45 = i32::from(*base.add(16).cast::<i16>());
                                                                    l45 as i16
                                                                };
                                                                V107::Int16(e107)
                                                            }
                                                            4 => {
                                                                let e107 = {
                                                                    let l46 = *base.add(16).cast::<i32>();
                                                                    l46
                                                                };
                                                                V107::Int32(e107)
                                                            }
                                                            5 => {
                                                                let e107 = {
                                                                    let l47 = *base.add(16).cast::<i64>();
                                                                    l47
                                                                };
                                                                V107::Int64(e107)
                                                            }
                                                            6 => {
                                                                let e107 = {
                                                                    let l48 = i32::from(*base.add(16).cast::<u8>());
                                                                    l48 as u8
                                                                };
                                                                V107::Uint8(e107)
                                                            }
                                                            7 => {
                                                                let e107 = {
                                                                    let l49 = i32::from(*base.add(16).cast::<u16>());
                                                                    l49 as u16
                                                                };
                                                                V107::Uint16(e107)
                                                            }
                                                            8 => {
                                                                let e107 = {
                                                                    let l50 = *base.add(16).cast::<i32>();
                                                                    l50 as u32
                                                                };
                                                                V107::Uint32(e107)
                                                            }
                                                            9 => {
                                                                let e107 = {
                                                                    let l51 = *base.add(16).cast::<i64>();
                                                                    l51 as u64
                                                                };
                                                                V107::Uint64(e107)
                                                            }
                                                            10 => {
                                                                let e107 = {
                                                                    let l52 = *base.add(16).cast::<f32>();
                                                                    l52
                                                                };
                                                                V107::Float32Value(e107)
                                                            }
                                                            11 => {
                                                                let e107 = {
                                                                    let l53 = *base.add(16).cast::<f64>();
                                                                    l53
                                                                };
                                                                V107::Float64Value(e107)
                                                            }
                                                            12 => {
                                                                let e107 = {
                                                                    let l54 = *base.add(16).cast::<*mut u8>();
                                                                    let l55 = *base.add(20).cast::<usize>();
                                                                    let len56 = l55;
                                                                    let bytes56 = _rt::Vec::from_raw_parts(
                                                                        l54.cast(),
                                                                        len56,
                                                                        len56,
                                                                    );
                                                                    _rt::string_lift(bytes56)
                                                                };
                                                                V107::StringValue(e107)
                                                            }
                                                            13 => {
                                                                let e107 = {
                                                                    let l57 = *base.add(16).cast::<*mut u8>();
                                                                    let l58 = *base.add(20).cast::<usize>();
                                                                    let len59 = l58;
                                                                    _rt::Vec::from_raw_parts(l57.cast(), len59, len59)
                                                                };
                                                                V107::Bytes(e107)
                                                            }
                                                            14 => {
                                                                let e107 = {
                                                                    let l60 = *base.add(16).cast::<i32>();
                                                                    let l61 = i32::from(*base.add(20).cast::<u8>());
                                                                    let l62 = i32::from(*base.add(21).cast::<u8>());
                                                                    super::super::super::golem::graph::types::Date {
                                                                        year: l60 as u32,
                                                                        month: l61 as u8,
                                                                        day: l62 as u8,
                                                                    }
                                                                };
                                                                V107::Date(e107)
                                                            }
                                                            15 => {
                                                                let e107 = {
                                                                    let l63 = i32::from(*base.add(16).cast::<u8>());
                                                                    let l64 = i32::from(*base.add(17).cast::<u8>());
                                                                    let l65 = i32::from(*base.add(18).cast::<u8>());
                                                                    let l66 = *base.add(20).cast::<i32>();
                                                                    super::super::super::golem::graph::types::Time {
                                                                        hour: l63 as u8,
                                                                        minute: l64 as u8,
                                                                        second: l65 as u8,
                                                                        nanosecond: l66 as u32,
                                                                    }
                                                                };
                                                                V107::Time(e107)
                                                            }
                                                            16 => {
                                                                let e107 = {
                                                                    let l67 = *base.add(16).cast::<i32>();
                                                                    let l68 = i32::from(*base.add(20).cast::<u8>());
                                                                    let l69 = i32::from(*base.add(21).cast::<u8>());
                                                                    let l70 = i32::from(*base.add(24).cast::<u8>());
                                                                    let l71 = i32::from(*base.add(25).cast::<u8>());
                                                                    let l72 = i32::from(*base.add(26).cast::<u8>());
                                                                    let l73 = *base.add(28).cast::<i32>();
                                                                    let l74 = i32::from(*base.add(32).cast::<u8>());
                                                                    super::super::super::golem::graph::types::Datetime {
                                                                        date: super::super::super::golem::graph::types::Date {
                                                                            year: l67 as u32,
                                                                            month: l68 as u8,
                                                                            day: l69 as u8,
                                                                        },
                                                                        time: super::super::super::golem::graph::types::Time {
                                                                            hour: l70 as u8,
                                                                            minute: l71 as u8,
                                                                            second: l72 as u8,
                                                                            nanosecond: l73 as u32,
                                                                        },
                                                                        timezone_offset_minutes: match l74 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l75 = i32::from(*base.add(34).cast::<i16>());
                                                                                    l75 as i16
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                V107::Datetime(e107)
                                                            }
                                                            17 => {
                                                                let e107 = {
                                                                    let l76 = *base.add(16).cast::<i64>();
                                                                    let l77 = *base.add(24).cast::<i32>();
                                                                    super::super::super::golem::graph::types::Duration {
                                                                        seconds: l76,
                                                                        nanoseconds: l77 as u32,
                                                                    }
                                                                };
                                                                V107::Duration(e107)
                                                            }
                                                            18 => {
                                                                let e107 = {
                                                                    let l78 = *base.add(16).cast::<f64>();
                                                                    let l79 = *base.add(24).cast::<f64>();
                                                                    let l80 = i32::from(*base.add(32).cast::<u8>());
                                                                    super::super::super::golem::graph::types::Point {
                                                                        longitude: l78,
                                                                        latitude: l79,
                                                                        altitude: match l80 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l81 = *base.add(40).cast::<f64>();
                                                                                    l81
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                V107::Point(e107)
                                                            }
                                                            19 => {
                                                                let e107 = {
                                                                    let l82 = *base.add(16).cast::<*mut u8>();
                                                                    let l83 = *base.add(20).cast::<usize>();
                                                                    let base88 = l82;
                                                                    let len88 = l83;
                                                                    let mut result88 = _rt::Vec::with_capacity(len88);
                                                                    for i in 0..len88 {
                                                                        let base = base88.add(i * 32);
                                                                        let e88 = {
                                                                            let l84 = *base.add(0).cast::<f64>();
                                                                            let l85 = *base.add(8).cast::<f64>();
                                                                            let l86 = i32::from(*base.add(16).cast::<u8>());
                                                                            super::super::super::golem::graph::types::Point {
                                                                                longitude: l84,
                                                                                latitude: l85,
                                                                                altitude: match l86 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l87 = *base.add(24).cast::<f64>();
                                                                                            l87
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                },
                                                                            }
                                                                        };
                                                                        result88.push(e88);
                                                                    }
                                                                    _rt::cabi_dealloc(base88, len88 * 32, 8);
                                                                    super::super::super::golem::graph::types::Linestring {
                                                                        coordinates: result88,
                                                                    }
                                                                };
                                                                V107::Linestring(e107)
                                                            }
                                                            n => {
                                                                debug_assert_eq!(n, 20, "invalid enum discriminant");
                                                                let e107 = {
                                                                    let l89 = *base.add(16).cast::<*mut u8>();
                                                                    let l90 = *base.add(20).cast::<usize>();
                                                                    let base95 = l89;
                                                                    let len95 = l90;
                                                                    let mut result95 = _rt::Vec::with_capacity(len95);
                                                                    for i in 0..len95 {
                                                                        let base = base95.add(i * 32);
                                                                        let e95 = {
                                                                            let l91 = *base.add(0).cast::<f64>();
                                                                            let l92 = *base.add(8).cast::<f64>();
                                                                            let l93 = i32::from(*base.add(16).cast::<u8>());
                                                                            super::super::super::golem::graph::types::Point {
                                                                                longitude: l91,
                                                                                latitude: l92,
                                                                                altitude: match l93 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l94 = *base.add(24).cast::<f64>();
                                                                                            l94
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                },
                                                                            }
                                                                        };
                                                                        result95.push(e95);
                                                                    }
                                                                    _rt::cabi_dealloc(base95, len95 * 32, 8);
                                                                    let l96 = i32::from(*base.add(24).cast::<u8>());
                                                                    super::super::super::golem::graph::types::Polygon {
                                                                        exterior: result95,
                                                                        holes: match l96 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l97 = *base.add(28).cast::<*mut u8>();
                                                                                    let l98 = *base.add(32).cast::<usize>();
                                                                                    let base106 = l97;
                                                                                    let len106 = l98;
                                                                                    let mut result106 = _rt::Vec::with_capacity(len106);
                                                                                    for i in 0..len106 {
                                                                                        let base = base106.add(i * 8);
                                                                                        let e106 = {
                                                                                            let l99 = *base.add(0).cast::<*mut u8>();
                                                                                            let l100 = *base.add(4).cast::<usize>();
                                                                                            let base105 = l99;
                                                                                            let len105 = l100;
                                                                                            let mut result105 = _rt::Vec::with_capacity(len105);
                                                                                            for i in 0..len105 {
                                                                                                let base = base105.add(i * 32);
                                                                                                let e105 = {
                                                                                                    let l101 = *base.add(0).cast::<f64>();
                                                                                                    let l102 = *base.add(8).cast::<f64>();
                                                                                                    let l103 = i32::from(*base.add(16).cast::<u8>());
                                                                                                    super::super::super::golem::graph::types::Point {
                                                                                                        longitude: l101,
                                                                                                        latitude: l102,
                                                                                                        altitude: match l103 {
                                                                                                            0 => None,
                                                                                                            1 => {
                                                                                                                let e = {
                                                                                                                    let l104 = *base.add(24).cast::<f64>();
                                                                                                                    l104
                                                                                                                };
                                                                                                                Some(e)
                                                                                                            }
                                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                                        },
                                                                                                    }
                                                                                                };
                                                                                                result105.push(e105);
                                                                                            }
                                                                                            _rt::cabi_dealloc(base105, len105 * 32, 8);
                                                                                            result105
                                                                                        };
                                                                                        result106.push(e106);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base106, len106 * 8, 4);
                                                                                    result106
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                V107::Polygon(e107)
                                                            }
                                                        };
                                                        (_rt::string_lift(bytes41), v107)
                                                    };
                                                    result108.push(e108);
                                                }
                                                _rt::cabi_dealloc(base108, len108 * 48, 8);
                                                super::super::super::golem::graph::types::Edge {
                                                    id: v15,
                                                    edge_type: _rt::string_lift(bytes18),
                                                    from_vertex: v27,
                                                    to_vertex: v36,
                                                    properties: result108,
                                                }
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    }
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l109 = i32::from(*ptr4.add(8).cast::<u8>());
                                    use super::super::super::golem::graph::errors::GraphError as V164;
                                    let v164 = match l109 {
                                        0 => {
                                            let e164 = {
                                                let l110 = *ptr4.add(16).cast::<*mut u8>();
                                                let l111 = *ptr4.add(20).cast::<usize>();
                                                let len112 = l111;
                                                let bytes112 = _rt::Vec::from_raw_parts(
                                                    l110.cast(),
                                                    len112,
                                                    len112,
                                                );
                                                _rt::string_lift(bytes112)
                                            };
                                            V164::UnsupportedOperation(e164)
                                        }
                                        1 => {
                                            let e164 = {
                                                let l113 = *ptr4.add(16).cast::<*mut u8>();
                                                let l114 = *ptr4.add(20).cast::<usize>();
                                                let len115 = l114;
                                                let bytes115 = _rt::Vec::from_raw_parts(
                                                    l113.cast(),
                                                    len115,
                                                    len115,
                                                );
                                                _rt::string_lift(bytes115)
                                            };
                                            V164::ConnectionFailed(e164)
                                        }
                                        2 => {
                                            let e164 = {
                                                let l116 = *ptr4.add(16).cast::<*mut u8>();
                                                let l117 = *ptr4.add(20).cast::<usize>();
                                                let len118 = l117;
                                                let bytes118 = _rt::Vec::from_raw_parts(
                                                    l116.cast(),
                                                    len118,
                                                    len118,
                                                );
                                                _rt::string_lift(bytes118)
                                            };
                                            V164::AuthenticationFailed(e164)
                                        }
                                        3 => {
                                            let e164 = {
                                                let l119 = *ptr4.add(16).cast::<*mut u8>();
                                                let l120 = *ptr4.add(20).cast::<usize>();
                                                let len121 = l120;
                                                let bytes121 = _rt::Vec::from_raw_parts(
                                                    l119.cast(),
                                                    len121,
                                                    len121,
                                                );
                                                _rt::string_lift(bytes121)
                                            };
                                            V164::AuthorizationFailed(e164)
                                        }
                                        4 => {
                                            let e164 = {
                                                let l122 = i32::from(*ptr4.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V130;
                                                let v130 = match l122 {
                                                    0 => {
                                                        let e130 = {
                                                            let l123 = *ptr4.add(24).cast::<*mut u8>();
                                                            let l124 = *ptr4.add(28).cast::<usize>();
                                                            let len125 = l124;
                                                            let bytes125 = _rt::Vec::from_raw_parts(
                                                                l123.cast(),
                                                                len125,
                                                                len125,
                                                            );
                                                            _rt::string_lift(bytes125)
                                                        };
                                                        V130::StringValue(e130)
                                                    }
                                                    1 => {
                                                        let e130 = {
                                                            let l126 = *ptr4.add(24).cast::<i64>();
                                                            l126
                                                        };
                                                        V130::Int64(e130)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e130 = {
                                                            let l127 = *ptr4.add(24).cast::<*mut u8>();
                                                            let l128 = *ptr4.add(28).cast::<usize>();
                                                            let len129 = l128;
                                                            let bytes129 = _rt::Vec::from_raw_parts(
                                                                l127.cast(),
                                                                len129,
                                                                len129,
                                                            );
                                                            _rt::string_lift(bytes129)
                                                        };
                                                        V130::Uuid(e130)
                                                    }
                                                };
                                                v130
                                            };
                                            V164::ElementNotFound(e164)
                                        }
                                        5 => {
                                            let e164 = {
                                                let l131 = i32::from(*ptr4.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V139;
                                                let v139 = match l131 {
                                                    0 => {
                                                        let e139 = {
                                                            let l132 = *ptr4.add(24).cast::<*mut u8>();
                                                            let l133 = *ptr4.add(28).cast::<usize>();
                                                            let len134 = l133;
                                                            let bytes134 = _rt::Vec::from_raw_parts(
                                                                l132.cast(),
                                                                len134,
                                                                len134,
                                                            );
                                                            _rt::string_lift(bytes134)
                                                        };
                                                        V139::StringValue(e139)
                                                    }
                                                    1 => {
                                                        let e139 = {
                                                            let l135 = *ptr4.add(24).cast::<i64>();
                                                            l135
                                                        };
                                                        V139::Int64(e139)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e139 = {
                                                            let l136 = *ptr4.add(24).cast::<*mut u8>();
                                                            let l137 = *ptr4.add(28).cast::<usize>();
                                                            let len138 = l137;
                                                            let bytes138 = _rt::Vec::from_raw_parts(
                                                                l136.cast(),
                                                                len138,
                                                                len138,
                                                            );
                                                            _rt::string_lift(bytes138)
                                                        };
                                                        V139::Uuid(e139)
                                                    }
                                                };
                                                v139
                                            };
                                            V164::DuplicateElement(e164)
                                        }
                                        6 => {
                                            let e164 = {
                                                let l140 = *ptr4.add(16).cast::<*mut u8>();
                                                let l141 = *ptr4.add(20).cast::<usize>();
                                                let len142 = l141;
                                                let bytes142 = _rt::Vec::from_raw_parts(
                                                    l140.cast(),
                                                    len142,
                                                    len142,
                                                );
                                                _rt::string_lift(bytes142)
                                            };
                                            V164::SchemaViolation(e164)
                                        }
                                        7 => {
                                            let e164 = {
                                                let l143 = *ptr4.add(16).cast::<*mut u8>();
                                                let l144 = *ptr4.add(20).cast::<usize>();
                                                let len145 = l144;
                                                let bytes145 = _rt::Vec::from_raw_parts(
                                                    l143.cast(),
                                                    len145,
                                                    len145,
                                                );
                                                _rt::string_lift(bytes145)
                                            };
                                            V164::ConstraintViolation(e164)
                                        }
                                        8 => {
                                            let e164 = {
                                                let l146 = *ptr4.add(16).cast::<*mut u8>();
                                                let l147 = *ptr4.add(20).cast::<usize>();
                                                let len148 = l147;
                                                let bytes148 = _rt::Vec::from_raw_parts(
                                                    l146.cast(),
                                                    len148,
                                                    len148,
                                                );
                                                _rt::string_lift(bytes148)
                                            };
                                            V164::InvalidPropertyType(e164)
                                        }
                                        9 => {
                                            let e164 = {
                                                let l149 = *ptr4.add(16).cast::<*mut u8>();
                                                let l150 = *ptr4.add(20).cast::<usize>();
                                                let len151 = l150;
                                                let bytes151 = _rt::Vec::from_raw_parts(
                                                    l149.cast(),
                                                    len151,
                                                    len151,
                                                );
                                                _rt::string_lift(bytes151)
                                            };
                                            V164::InvalidQuery(e164)
                                        }
                                        10 => {
                                            let e164 = {
                                                let l152 = *ptr4.add(16).cast::<*mut u8>();
                                                let l153 = *ptr4.add(20).cast::<usize>();
                                                let len154 = l153;
                                                let bytes154 = _rt::Vec::from_raw_parts(
                                                    l152.cast(),
                                                    len154,
                                                    len154,
                                                );
                                                _rt::string_lift(bytes154)
                                            };
                                            V164::TransactionFailed(e164)
                                        }
                                        11 => V164::TransactionConflict,
                                        12 => V164::TransactionTimeout,
                                        13 => V164::DeadlockDetected,
                                        14 => V164::Timeout,
                                        15 => {
                                            let e164 = {
                                                let l155 = *ptr4.add(16).cast::<*mut u8>();
                                                let l156 = *ptr4.add(20).cast::<usize>();
                                                let len157 = l156;
                                                let bytes157 = _rt::Vec::from_raw_parts(
                                                    l155.cast(),
                                                    len157,
                                                    len157,
                                                );
                                                _rt::string_lift(bytes157)
                                            };
                                            V164::ResourceExhausted(e164)
                                        }
                                        16 => {
                                            let e164 = {
                                                let l158 = *ptr4.add(16).cast::<*mut u8>();
                                                let l159 = *ptr4.add(20).cast::<usize>();
                                                let len160 = l159;
                                                let bytes160 = _rt::Vec::from_raw_parts(
                                                    l158.cast(),
                                                    len160,
                                                    len160,
                                                );
                                                _rt::string_lift(bytes160)
                                            };
                                            V164::InternalError(e164)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 17, "invalid enum discriminant");
                                            let e164 = {
                                                let l161 = *ptr4.add(16).cast::<*mut u8>();
                                                let l162 = *ptr4.add(20).cast::<usize>();
                                                let len163 = l162;
                                                let bytes163 = _rt::Vec::from_raw_parts(
                                                    l161.cast(),
                                                    len163,
                                                    len163,
                                                );
                                                _rt::string_lift(bytes163)
                                            };
                                            V164::ServiceUnavailable(e164)
                                        }
                                    };
                                    v164
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Transaction {
                #[allow(unused_unsafe, clippy::all)]
                /// Update edge properties
                pub fn update_edge(
                    &self,
                    id: &ElementId,
                    properties: &PropertyMap,
                ) -> Result<Edge, GraphError> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 72]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 72],
                        );
                        use super::super::super::golem::graph::types::ElementId as V2;
                        let (result3_0, result3_1, result3_2) = match id {
                            V2::StringValue(e) => {
                                let vec0 = e;
                                let ptr0 = vec0.as_ptr().cast::<u8>();
                                let len0 = vec0.len();
                                (
                                    0i32,
                                    {
                                        let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                        t.as_mut_ptr().cast::<*mut u8>().write(ptr0.cast_mut());
                                        t
                                    },
                                    len0,
                                )
                            }
                            V2::Int64(e) => {
                                (
                                    1i32,
                                    ::core::mem::MaybeUninit::new(_rt::as_i64(e) as u64),
                                    0usize,
                                )
                            }
                            V2::Uuid(e) => {
                                let vec1 = e;
                                let ptr1 = vec1.as_ptr().cast::<u8>();
                                let len1 = vec1.len();
                                (
                                    2i32,
                                    {
                                        let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                        t.as_mut_ptr().cast::<*mut u8>().write(ptr1.cast_mut());
                                        t
                                    },
                                    len1,
                                )
                            }
                        };
                        let vec25 = properties;
                        let len25 = vec25.len();
                        let layout25 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec25.len() * 48,
                            8,
                        );
                        let result25 = if layout25.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout25).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout25);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec25.into_iter().enumerate() {
                            let base = result25.add(i * 48);
                            {
                                let (t4_0, t4_1) = e;
                                let vec5 = t4_0;
                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                let len5 = vec5.len();
                                *base.add(4).cast::<usize>() = len5;
                                *base.add(0).cast::<*mut u8>() = ptr5.cast_mut();
                                use super::super::super::golem::graph::types::PropertyValue as V24;
                                match t4_1 {
                                    V24::NullValue => {
                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                    }
                                    V24::Boolean(e) => {
                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                        *base.add(16).cast::<u8>() = (match e {
                                            true => 1,
                                            false => 0,
                                        }) as u8;
                                    }
                                    V24::Int8(e) => {
                                        *base.add(8).cast::<u8>() = (2i32) as u8;
                                        *base.add(16).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                    }
                                    V24::Int16(e) => {
                                        *base.add(8).cast::<u8>() = (3i32) as u8;
                                        *base.add(16).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                    }
                                    V24::Int32(e) => {
                                        *base.add(8).cast::<u8>() = (4i32) as u8;
                                        *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    V24::Int64(e) => {
                                        *base.add(8).cast::<u8>() = (5i32) as u8;
                                        *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    V24::Uint8(e) => {
                                        *base.add(8).cast::<u8>() = (6i32) as u8;
                                        *base.add(16).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                    }
                                    V24::Uint16(e) => {
                                        *base.add(8).cast::<u8>() = (7i32) as u8;
                                        *base.add(16).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                    }
                                    V24::Uint32(e) => {
                                        *base.add(8).cast::<u8>() = (8i32) as u8;
                                        *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    V24::Uint64(e) => {
                                        *base.add(8).cast::<u8>() = (9i32) as u8;
                                        *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    V24::Float32Value(e) => {
                                        *base.add(8).cast::<u8>() = (10i32) as u8;
                                        *base.add(16).cast::<f32>() = _rt::as_f32(e);
                                    }
                                    V24::Float64Value(e) => {
                                        *base.add(8).cast::<u8>() = (11i32) as u8;
                                        *base.add(16).cast::<f64>() = _rt::as_f64(e);
                                    }
                                    V24::StringValue(e) => {
                                        *base.add(8).cast::<u8>() = (12i32) as u8;
                                        let vec6 = e;
                                        let ptr6 = vec6.as_ptr().cast::<u8>();
                                        let len6 = vec6.len();
                                        *base.add(20).cast::<usize>() = len6;
                                        *base.add(16).cast::<*mut u8>() = ptr6.cast_mut();
                                    }
                                    V24::Bytes(e) => {
                                        *base.add(8).cast::<u8>() = (13i32) as u8;
                                        let vec7 = e;
                                        let ptr7 = vec7.as_ptr().cast::<u8>();
                                        let len7 = vec7.len();
                                        *base.add(20).cast::<usize>() = len7;
                                        *base.add(16).cast::<*mut u8>() = ptr7.cast_mut();
                                    }
                                    V24::Date(e) => {
                                        *base.add(8).cast::<u8>() = (14i32) as u8;
                                        let super::super::super::golem::graph::types::Date {
                                            year: year8,
                                            month: month8,
                                            day: day8,
                                        } = e;
                                        *base.add(16).cast::<i32>() = _rt::as_i32(year8);
                                        *base.add(20).cast::<u8>() = (_rt::as_i32(month8)) as u8;
                                        *base.add(21).cast::<u8>() = (_rt::as_i32(day8)) as u8;
                                    }
                                    V24::Time(e) => {
                                        *base.add(8).cast::<u8>() = (15i32) as u8;
                                        let super::super::super::golem::graph::types::Time {
                                            hour: hour9,
                                            minute: minute9,
                                            second: second9,
                                            nanosecond: nanosecond9,
                                        } = e;
                                        *base.add(16).cast::<u8>() = (_rt::as_i32(hour9)) as u8;
                                        *base.add(17).cast::<u8>() = (_rt::as_i32(minute9)) as u8;
                                        *base.add(18).cast::<u8>() = (_rt::as_i32(second9)) as u8;
                                        *base.add(20).cast::<i32>() = _rt::as_i32(nanosecond9);
                                    }
                                    V24::Datetime(e) => {
                                        *base.add(8).cast::<u8>() = (16i32) as u8;
                                        let super::super::super::golem::graph::types::Datetime {
                                            date: date10,
                                            time: time10,
                                            timezone_offset_minutes: timezone_offset_minutes10,
                                        } = e;
                                        let super::super::super::golem::graph::types::Date {
                                            year: year11,
                                            month: month11,
                                            day: day11,
                                        } = date10;
                                        *base.add(16).cast::<i32>() = _rt::as_i32(year11);
                                        *base.add(20).cast::<u8>() = (_rt::as_i32(month11)) as u8;
                                        *base.add(21).cast::<u8>() = (_rt::as_i32(day11)) as u8;
                                        let super::super::super::golem::graph::types::Time {
                                            hour: hour12,
                                            minute: minute12,
                                            second: second12,
                                            nanosecond: nanosecond12,
                                        } = time10;
                                        *base.add(24).cast::<u8>() = (_rt::as_i32(hour12)) as u8;
                                        *base.add(25).cast::<u8>() = (_rt::as_i32(minute12)) as u8;
                                        *base.add(26).cast::<u8>() = (_rt::as_i32(second12)) as u8;
                                        *base.add(28).cast::<i32>() = _rt::as_i32(nanosecond12);
                                        match timezone_offset_minutes10 {
                                            Some(e) => {
                                                *base.add(32).cast::<u8>() = (1i32) as u8;
                                                *base.add(34).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            None => {
                                                *base.add(32).cast::<u8>() = (0i32) as u8;
                                            }
                                        };
                                    }
                                    V24::Duration(e) => {
                                        *base.add(8).cast::<u8>() = (17i32) as u8;
                                        let super::super::super::golem::graph::types::Duration {
                                            seconds: seconds13,
                                            nanoseconds: nanoseconds13,
                                        } = e;
                                        *base.add(16).cast::<i64>() = _rt::as_i64(seconds13);
                                        *base.add(24).cast::<i32>() = _rt::as_i32(nanoseconds13);
                                    }
                                    V24::Point(e) => {
                                        *base.add(8).cast::<u8>() = (18i32) as u8;
                                        let super::super::super::golem::graph::types::Point {
                                            longitude: longitude14,
                                            latitude: latitude14,
                                            altitude: altitude14,
                                        } = e;
                                        *base.add(16).cast::<f64>() = _rt::as_f64(longitude14);
                                        *base.add(24).cast::<f64>() = _rt::as_f64(latitude14);
                                        match altitude14 {
                                            Some(e) => {
                                                *base.add(32).cast::<u8>() = (1i32) as u8;
                                                *base.add(40).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            None => {
                                                *base.add(32).cast::<u8>() = (0i32) as u8;
                                            }
                                        };
                                    }
                                    V24::Linestring(e) => {
                                        *base.add(8).cast::<u8>() = (19i32) as u8;
                                        let super::super::super::golem::graph::types::Linestring {
                                            coordinates: coordinates15,
                                        } = e;
                                        let vec17 = coordinates15;
                                        let len17 = vec17.len();
                                        let layout17 = _rt::alloc::Layout::from_size_align_unchecked(
                                            vec17.len() * 32,
                                            8,
                                        );
                                        let result17 = if layout17.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout17).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout17);
                                            }
                                            ptr
                                        } else {
                                            ::core::ptr::null_mut()
                                        };
                                        for (i, e) in vec17.into_iter().enumerate() {
                                            let base = result17.add(i * 32);
                                            {
                                                let super::super::super::golem::graph::types::Point {
                                                    longitude: longitude16,
                                                    latitude: latitude16,
                                                    altitude: altitude16,
                                                } = e;
                                                *base.add(0).cast::<f64>() = _rt::as_f64(longitude16);
                                                *base.add(8).cast::<f64>() = _rt::as_f64(latitude16);
                                                match altitude16 {
                                                    Some(e) => {
                                                        *base.add(16).cast::<u8>() = (1i32) as u8;
                                                        *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                    }
                                                    None => {
                                                        *base.add(16).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                        }
                                        *base.add(20).cast::<usize>() = len17;
                                        *base.add(16).cast::<*mut u8>() = result17;
                                        cleanup_list.extend_from_slice(&[(result17, layout17)]);
                                    }
                                    V24::Polygon(e) => {
                                        *base.add(8).cast::<u8>() = (20i32) as u8;
                                        let super::super::super::golem::graph::types::Polygon {
                                            exterior: exterior18,
                                            holes: holes18,
                                        } = e;
                                        let vec20 = exterior18;
                                        let len20 = vec20.len();
                                        let layout20 = _rt::alloc::Layout::from_size_align_unchecked(
                                            vec20.len() * 32,
                                            8,
                                        );
                                        let result20 = if layout20.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout20).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout20);
                                            }
                                            ptr
                                        } else {
                                            ::core::ptr::null_mut()
                                        };
                                        for (i, e) in vec20.into_iter().enumerate() {
                                            let base = result20.add(i * 32);
                                            {
                                                let super::super::super::golem::graph::types::Point {
                                                    longitude: longitude19,
                                                    latitude: latitude19,
                                                    altitude: altitude19,
                                                } = e;
                                                *base.add(0).cast::<f64>() = _rt::as_f64(longitude19);
                                                *base.add(8).cast::<f64>() = _rt::as_f64(latitude19);
                                                match altitude19 {
                                                    Some(e) => {
                                                        *base.add(16).cast::<u8>() = (1i32) as u8;
                                                        *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                    }
                                                    None => {
                                                        *base.add(16).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                        }
                                        *base.add(20).cast::<usize>() = len20;
                                        *base.add(16).cast::<*mut u8>() = result20;
                                        match holes18 {
                                            Some(e) => {
                                                *base.add(24).cast::<u8>() = (1i32) as u8;
                                                let vec23 = e;
                                                let len23 = vec23.len();
                                                let layout23 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec23.len() * 8,
                                                    4,
                                                );
                                                let result23 = if layout23.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout23).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout23);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec23.into_iter().enumerate() {
                                                    let base = result23.add(i * 8);
                                                    {
                                                        let vec22 = e;
                                                        let len22 = vec22.len();
                                                        let layout22 = _rt::alloc::Layout::from_size_align_unchecked(
                                                            vec22.len() * 32,
                                                            8,
                                                        );
                                                        let result22 = if layout22.size() != 0 {
                                                            let ptr = _rt::alloc::alloc(layout22).cast::<u8>();
                                                            if ptr.is_null() {
                                                                _rt::alloc::handle_alloc_error(layout22);
                                                            }
                                                            ptr
                                                        } else {
                                                            ::core::ptr::null_mut()
                                                        };
                                                        for (i, e) in vec22.into_iter().enumerate() {
                                                            let base = result22.add(i * 32);
                                                            {
                                                                let super::super::super::golem::graph::types::Point {
                                                                    longitude: longitude21,
                                                                    latitude: latitude21,
                                                                    altitude: altitude21,
                                                                } = e;
                                                                *base.add(0).cast::<f64>() = _rt::as_f64(longitude21);
                                                                *base.add(8).cast::<f64>() = _rt::as_f64(latitude21);
                                                                match altitude21 {
                                                                    Some(e) => {
                                                                        *base.add(16).cast::<u8>() = (1i32) as u8;
                                                                        *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                                    }
                                                                    None => {
                                                                        *base.add(16).cast::<u8>() = (0i32) as u8;
                                                                    }
                                                                };
                                                            }
                                                        }
                                                        *base.add(4).cast::<usize>() = len22;
                                                        *base.add(0).cast::<*mut u8>() = result22;
                                                        cleanup_list.extend_from_slice(&[(result22, layout22)]);
                                                    }
                                                }
                                                *base.add(32).cast::<usize>() = len23;
                                                *base.add(28).cast::<*mut u8>() = result23;
                                                cleanup_list.extend_from_slice(&[(result23, layout23)]);
                                            }
                                            None => {
                                                *base.add(24).cast::<u8>() = (0i32) as u8;
                                            }
                                        };
                                        cleanup_list.extend_from_slice(&[(result20, layout20)]);
                                    }
                                }
                            }
                        }
                        let ptr26 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:graph/transactions@1.0.0")]
                        extern "C" {
                            #[link_name = "[method]transaction.update-edge"]
                            fn wit_import(
                                _: i32,
                                _: i32,
                                _: ::core::mem::MaybeUninit<u64>,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: i32,
                            _: ::core::mem::MaybeUninit<u64>,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            result3_0,
                            result3_1,
                            result3_2,
                            result25,
                            len25,
                            ptr26,
                        );
                        let l27 = i32::from(*ptr26.add(0).cast::<u8>());
                        if layout25.size() != 0 {
                            _rt::alloc::dealloc(result25.cast(), layout25);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l27 {
                            0 => {
                                let e = {
                                    let l28 = i32::from(*ptr26.add(8).cast::<u8>());
                                    use super::super::super::golem::graph::types::ElementId as V36;
                                    let v36 = match l28 {
                                        0 => {
                                            let e36 = {
                                                let l29 = *ptr26.add(16).cast::<*mut u8>();
                                                let l30 = *ptr26.add(20).cast::<usize>();
                                                let len31 = l30;
                                                let bytes31 = _rt::Vec::from_raw_parts(
                                                    l29.cast(),
                                                    len31,
                                                    len31,
                                                );
                                                _rt::string_lift(bytes31)
                                            };
                                            V36::StringValue(e36)
                                        }
                                        1 => {
                                            let e36 = {
                                                let l32 = *ptr26.add(16).cast::<i64>();
                                                l32
                                            };
                                            V36::Int64(e36)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 2, "invalid enum discriminant");
                                            let e36 = {
                                                let l33 = *ptr26.add(16).cast::<*mut u8>();
                                                let l34 = *ptr26.add(20).cast::<usize>();
                                                let len35 = l34;
                                                let bytes35 = _rt::Vec::from_raw_parts(
                                                    l33.cast(),
                                                    len35,
                                                    len35,
                                                );
                                                _rt::string_lift(bytes35)
                                            };
                                            V36::Uuid(e36)
                                        }
                                    };
                                    let l37 = *ptr26.add(24).cast::<*mut u8>();
                                    let l38 = *ptr26.add(28).cast::<usize>();
                                    let len39 = l38;
                                    let bytes39 = _rt::Vec::from_raw_parts(
                                        l37.cast(),
                                        len39,
                                        len39,
                                    );
                                    let l40 = i32::from(*ptr26.add(32).cast::<u8>());
                                    use super::super::super::golem::graph::types::ElementId as V48;
                                    let v48 = match l40 {
                                        0 => {
                                            let e48 = {
                                                let l41 = *ptr26.add(40).cast::<*mut u8>();
                                                let l42 = *ptr26.add(44).cast::<usize>();
                                                let len43 = l42;
                                                let bytes43 = _rt::Vec::from_raw_parts(
                                                    l41.cast(),
                                                    len43,
                                                    len43,
                                                );
                                                _rt::string_lift(bytes43)
                                            };
                                            V48::StringValue(e48)
                                        }
                                        1 => {
                                            let e48 = {
                                                let l44 = *ptr26.add(40).cast::<i64>();
                                                l44
                                            };
                                            V48::Int64(e48)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 2, "invalid enum discriminant");
                                            let e48 = {
                                                let l45 = *ptr26.add(40).cast::<*mut u8>();
                                                let l46 = *ptr26.add(44).cast::<usize>();
                                                let len47 = l46;
                                                let bytes47 = _rt::Vec::from_raw_parts(
                                                    l45.cast(),
                                                    len47,
                                                    len47,
                                                );
                                                _rt::string_lift(bytes47)
                                            };
                                            V48::Uuid(e48)
                                        }
                                    };
                                    let l49 = i32::from(*ptr26.add(48).cast::<u8>());
                                    use super::super::super::golem::graph::types::ElementId as V57;
                                    let v57 = match l49 {
                                        0 => {
                                            let e57 = {
                                                let l50 = *ptr26.add(56).cast::<*mut u8>();
                                                let l51 = *ptr26.add(60).cast::<usize>();
                                                let len52 = l51;
                                                let bytes52 = _rt::Vec::from_raw_parts(
                                                    l50.cast(),
                                                    len52,
                                                    len52,
                                                );
                                                _rt::string_lift(bytes52)
                                            };
                                            V57::StringValue(e57)
                                        }
                                        1 => {
                                            let e57 = {
                                                let l53 = *ptr26.add(56).cast::<i64>();
                                                l53
                                            };
                                            V57::Int64(e57)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 2, "invalid enum discriminant");
                                            let e57 = {
                                                let l54 = *ptr26.add(56).cast::<*mut u8>();
                                                let l55 = *ptr26.add(60).cast::<usize>();
                                                let len56 = l55;
                                                let bytes56 = _rt::Vec::from_raw_parts(
                                                    l54.cast(),
                                                    len56,
                                                    len56,
                                                );
                                                _rt::string_lift(bytes56)
                                            };
                                            V57::Uuid(e57)
                                        }
                                    };
                                    let l58 = *ptr26.add(64).cast::<*mut u8>();
                                    let l59 = *ptr26.add(68).cast::<usize>();
                                    let base129 = l58;
                                    let len129 = l59;
                                    let mut result129 = _rt::Vec::with_capacity(len129);
                                    for i in 0..len129 {
                                        let base = base129.add(i * 48);
                                        let e129 = {
                                            let l60 = *base.add(0).cast::<*mut u8>();
                                            let l61 = *base.add(4).cast::<usize>();
                                            let len62 = l61;
                                            let bytes62 = _rt::Vec::from_raw_parts(
                                                l60.cast(),
                                                len62,
                                                len62,
                                            );
                                            let l63 = i32::from(*base.add(8).cast::<u8>());
                                            use super::super::super::golem::graph::types::PropertyValue as V128;
                                            let v128 = match l63 {
                                                0 => V128::NullValue,
                                                1 => {
                                                    let e128 = {
                                                        let l64 = i32::from(*base.add(16).cast::<u8>());
                                                        _rt::bool_lift(l64 as u8)
                                                    };
                                                    V128::Boolean(e128)
                                                }
                                                2 => {
                                                    let e128 = {
                                                        let l65 = i32::from(*base.add(16).cast::<i8>());
                                                        l65 as i8
                                                    };
                                                    V128::Int8(e128)
                                                }
                                                3 => {
                                                    let e128 = {
                                                        let l66 = i32::from(*base.add(16).cast::<i16>());
                                                        l66 as i16
                                                    };
                                                    V128::Int16(e128)
                                                }
                                                4 => {
                                                    let e128 = {
                                                        let l67 = *base.add(16).cast::<i32>();
                                                        l67
                                                    };
                                                    V128::Int32(e128)
                                                }
                                                5 => {
                                                    let e128 = {
                                                        let l68 = *base.add(16).cast::<i64>();
                                                        l68
                                                    };
                                                    V128::Int64(e128)
                                                }
                                                6 => {
                                                    let e128 = {
                                                        let l69 = i32::from(*base.add(16).cast::<u8>());
                                                        l69 as u8
                                                    };
                                                    V128::Uint8(e128)
                                                }
                                                7 => {
                                                    let e128 = {
                                                        let l70 = i32::from(*base.add(16).cast::<u16>());
                                                        l70 as u16
                                                    };
                                                    V128::Uint16(e128)
                                                }
                                                8 => {
                                                    let e128 = {
                                                        let l71 = *base.add(16).cast::<i32>();
                                                        l71 as u32
                                                    };
                                                    V128::Uint32(e128)
                                                }
                                                9 => {
                                                    let e128 = {
                                                        let l72 = *base.add(16).cast::<i64>();
                                                        l72 as u64
                                                    };
                                                    V128::Uint64(e128)
                                                }
                                                10 => {
                                                    let e128 = {
                                                        let l73 = *base.add(16).cast::<f32>();
                                                        l73
                                                    };
                                                    V128::Float32Value(e128)
                                                }
                                                11 => {
                                                    let e128 = {
                                                        let l74 = *base.add(16).cast::<f64>();
                                                        l74
                                                    };
                                                    V128::Float64Value(e128)
                                                }
                                                12 => {
                                                    let e128 = {
                                                        let l75 = *base.add(16).cast::<*mut u8>();
                                                        let l76 = *base.add(20).cast::<usize>();
                                                        let len77 = l76;
                                                        let bytes77 = _rt::Vec::from_raw_parts(
                                                            l75.cast(),
                                                            len77,
                                                            len77,
                                                        );
                                                        _rt::string_lift(bytes77)
                                                    };
                                                    V128::StringValue(e128)
                                                }
                                                13 => {
                                                    let e128 = {
                                                        let l78 = *base.add(16).cast::<*mut u8>();
                                                        let l79 = *base.add(20).cast::<usize>();
                                                        let len80 = l79;
                                                        _rt::Vec::from_raw_parts(l78.cast(), len80, len80)
                                                    };
                                                    V128::Bytes(e128)
                                                }
                                                14 => {
                                                    let e128 = {
                                                        let l81 = *base.add(16).cast::<i32>();
                                                        let l82 = i32::from(*base.add(20).cast::<u8>());
                                                        let l83 = i32::from(*base.add(21).cast::<u8>());
                                                        super::super::super::golem::graph::types::Date {
                                                            year: l81 as u32,
                                                            month: l82 as u8,
                                                            day: l83 as u8,
                                                        }
                                                    };
                                                    V128::Date(e128)
                                                }
                                                15 => {
                                                    let e128 = {
                                                        let l84 = i32::from(*base.add(16).cast::<u8>());
                                                        let l85 = i32::from(*base.add(17).cast::<u8>());
                                                        let l86 = i32::from(*base.add(18).cast::<u8>());
                                                        let l87 = *base.add(20).cast::<i32>();
                                                        super::super::super::golem::graph::types::Time {
                                                            hour: l84 as u8,
                                                            minute: l85 as u8,
                                                            second: l86 as u8,
                                                            nanosecond: l87 as u32,
                                                        }
                                                    };
                                                    V128::Time(e128)
                                                }
                                                16 => {
                                                    let e128 = {
                                                        let l88 = *base.add(16).cast::<i32>();
                                                        let l89 = i32::from(*base.add(20).cast::<u8>());
                                                        let l90 = i32::from(*base.add(21).cast::<u8>());
                                                        let l91 = i32::from(*base.add(24).cast::<u8>());
                                                        let l92 = i32::from(*base.add(25).cast::<u8>());
                                                        let l93 = i32::from(*base.add(26).cast::<u8>());
                                                        let l94 = *base.add(28).cast::<i32>();
                                                        let l95 = i32::from(*base.add(32).cast::<u8>());
                                                        super::super::super::golem::graph::types::Datetime {
                                                            date: super::super::super::golem::graph::types::Date {
                                                                year: l88 as u32,
                                                                month: l89 as u8,
                                                                day: l90 as u8,
                                                            },
                                                            time: super::super::super::golem::graph::types::Time {
                                                                hour: l91 as u8,
                                                                minute: l92 as u8,
                                                                second: l93 as u8,
                                                                nanosecond: l94 as u32,
                                                            },
                                                            timezone_offset_minutes: match l95 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l96 = i32::from(*base.add(34).cast::<i16>());
                                                                        l96 as i16
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                        }
                                                    };
                                                    V128::Datetime(e128)
                                                }
                                                17 => {
                                                    let e128 = {
                                                        let l97 = *base.add(16).cast::<i64>();
                                                        let l98 = *base.add(24).cast::<i32>();
                                                        super::super::super::golem::graph::types::Duration {
                                                            seconds: l97,
                                                            nanoseconds: l98 as u32,
                                                        }
                                                    };
                                                    V128::Duration(e128)
                                                }
                                                18 => {
                                                    let e128 = {
                                                        let l99 = *base.add(16).cast::<f64>();
                                                        let l100 = *base.add(24).cast::<f64>();
                                                        let l101 = i32::from(*base.add(32).cast::<u8>());
                                                        super::super::super::golem::graph::types::Point {
                                                            longitude: l99,
                                                            latitude: l100,
                                                            altitude: match l101 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l102 = *base.add(40).cast::<f64>();
                                                                        l102
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                        }
                                                    };
                                                    V128::Point(e128)
                                                }
                                                19 => {
                                                    let e128 = {
                                                        let l103 = *base.add(16).cast::<*mut u8>();
                                                        let l104 = *base.add(20).cast::<usize>();
                                                        let base109 = l103;
                                                        let len109 = l104;
                                                        let mut result109 = _rt::Vec::with_capacity(len109);
                                                        for i in 0..len109 {
                                                            let base = base109.add(i * 32);
                                                            let e109 = {
                                                                let l105 = *base.add(0).cast::<f64>();
                                                                let l106 = *base.add(8).cast::<f64>();
                                                                let l107 = i32::from(*base.add(16).cast::<u8>());
                                                                super::super::super::golem::graph::types::Point {
                                                                    longitude: l105,
                                                                    latitude: l106,
                                                                    altitude: match l107 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l108 = *base.add(24).cast::<f64>();
                                                                                l108
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            result109.push(e109);
                                                        }
                                                        _rt::cabi_dealloc(base109, len109 * 32, 8);
                                                        super::super::super::golem::graph::types::Linestring {
                                                            coordinates: result109,
                                                        }
                                                    };
                                                    V128::Linestring(e128)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 20, "invalid enum discriminant");
                                                    let e128 = {
                                                        let l110 = *base.add(16).cast::<*mut u8>();
                                                        let l111 = *base.add(20).cast::<usize>();
                                                        let base116 = l110;
                                                        let len116 = l111;
                                                        let mut result116 = _rt::Vec::with_capacity(len116);
                                                        for i in 0..len116 {
                                                            let base = base116.add(i * 32);
                                                            let e116 = {
                                                                let l112 = *base.add(0).cast::<f64>();
                                                                let l113 = *base.add(8).cast::<f64>();
                                                                let l114 = i32::from(*base.add(16).cast::<u8>());
                                                                super::super::super::golem::graph::types::Point {
                                                                    longitude: l112,
                                                                    latitude: l113,
                                                                    altitude: match l114 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l115 = *base.add(24).cast::<f64>();
                                                                                l115
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            result116.push(e116);
                                                        }
                                                        _rt::cabi_dealloc(base116, len116 * 32, 8);
                                                        let l117 = i32::from(*base.add(24).cast::<u8>());
                                                        super::super::super::golem::graph::types::Polygon {
                                                            exterior: result116,
                                                            holes: match l117 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l118 = *base.add(28).cast::<*mut u8>();
                                                                        let l119 = *base.add(32).cast::<usize>();
                                                                        let base127 = l118;
                                                                        let len127 = l119;
                                                                        let mut result127 = _rt::Vec::with_capacity(len127);
                                                                        for i in 0..len127 {
                                                                            let base = base127.add(i * 8);
                                                                            let e127 = {
                                                                                let l120 = *base.add(0).cast::<*mut u8>();
                                                                                let l121 = *base.add(4).cast::<usize>();
                                                                                let base126 = l120;
                                                                                let len126 = l121;
                                                                                let mut result126 = _rt::Vec::with_capacity(len126);
                                                                                for i in 0..len126 {
                                                                                    let base = base126.add(i * 32);
                                                                                    let e126 = {
                                                                                        let l122 = *base.add(0).cast::<f64>();
                                                                                        let l123 = *base.add(8).cast::<f64>();
                                                                                        let l124 = i32::from(*base.add(16).cast::<u8>());
                                                                                        super::super::super::golem::graph::types::Point {
                                                                                            longitude: l122,
                                                                                            latitude: l123,
                                                                                            altitude: match l124 {
                                                                                                0 => None,
                                                                                                1 => {
                                                                                                    let e = {
                                                                                                        let l125 = *base.add(24).cast::<f64>();
                                                                                                        l125
                                                                                                    };
                                                                                                    Some(e)
                                                                                                }
                                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                                            },
                                                                                        }
                                                                                    };
                                                                                    result126.push(e126);
                                                                                }
                                                                                _rt::cabi_dealloc(base126, len126 * 32, 8);
                                                                                result126
                                                                            };
                                                                            result127.push(e127);
                                                                        }
                                                                        _rt::cabi_dealloc(base127, len127 * 8, 4);
                                                                        result127
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                        }
                                                    };
                                                    V128::Polygon(e128)
                                                }
                                            };
                                            (_rt::string_lift(bytes62), v128)
                                        };
                                        result129.push(e129);
                                    }
                                    _rt::cabi_dealloc(base129, len129 * 48, 8);
                                    super::super::super::golem::graph::types::Edge {
                                        id: v36,
                                        edge_type: _rt::string_lift(bytes39),
                                        from_vertex: v48,
                                        to_vertex: v57,
                                        properties: result129,
                                    }
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l130 = i32::from(*ptr26.add(8).cast::<u8>());
                                    use super::super::super::golem::graph::errors::GraphError as V185;
                                    let v185 = match l130 {
                                        0 => {
                                            let e185 = {
                                                let l131 = *ptr26.add(16).cast::<*mut u8>();
                                                let l132 = *ptr26.add(20).cast::<usize>();
                                                let len133 = l132;
                                                let bytes133 = _rt::Vec::from_raw_parts(
                                                    l131.cast(),
                                                    len133,
                                                    len133,
                                                );
                                                _rt::string_lift(bytes133)
                                            };
                                            V185::UnsupportedOperation(e185)
                                        }
                                        1 => {
                                            let e185 = {
                                                let l134 = *ptr26.add(16).cast::<*mut u8>();
                                                let l135 = *ptr26.add(20).cast::<usize>();
                                                let len136 = l135;
                                                let bytes136 = _rt::Vec::from_raw_parts(
                                                    l134.cast(),
                                                    len136,
                                                    len136,
                                                );
                                                _rt::string_lift(bytes136)
                                            };
                                            V185::ConnectionFailed(e185)
                                        }
                                        2 => {
                                            let e185 = {
                                                let l137 = *ptr26.add(16).cast::<*mut u8>();
                                                let l138 = *ptr26.add(20).cast::<usize>();
                                                let len139 = l138;
                                                let bytes139 = _rt::Vec::from_raw_parts(
                                                    l137.cast(),
                                                    len139,
                                                    len139,
                                                );
                                                _rt::string_lift(bytes139)
                                            };
                                            V185::AuthenticationFailed(e185)
                                        }
                                        3 => {
                                            let e185 = {
                                                let l140 = *ptr26.add(16).cast::<*mut u8>();
                                                let l141 = *ptr26.add(20).cast::<usize>();
                                                let len142 = l141;
                                                let bytes142 = _rt::Vec::from_raw_parts(
                                                    l140.cast(),
                                                    len142,
                                                    len142,
                                                );
                                                _rt::string_lift(bytes142)
                                            };
                                            V185::AuthorizationFailed(e185)
                                        }
                                        4 => {
                                            let e185 = {
                                                let l143 = i32::from(*ptr26.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V151;
                                                let v151 = match l143 {
                                                    0 => {
                                                        let e151 = {
                                                            let l144 = *ptr26.add(24).cast::<*mut u8>();
                                                            let l145 = *ptr26.add(28).cast::<usize>();
                                                            let len146 = l145;
                                                            let bytes146 = _rt::Vec::from_raw_parts(
                                                                l144.cast(),
                                                                len146,
                                                                len146,
                                                            );
                                                            _rt::string_lift(bytes146)
                                                        };
                                                        V151::StringValue(e151)
                                                    }
                                                    1 => {
                                                        let e151 = {
                                                            let l147 = *ptr26.add(24).cast::<i64>();
                                                            l147
                                                        };
                                                        V151::Int64(e151)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e151 = {
                                                            let l148 = *ptr26.add(24).cast::<*mut u8>();
                                                            let l149 = *ptr26.add(28).cast::<usize>();
                                                            let len150 = l149;
                                                            let bytes150 = _rt::Vec::from_raw_parts(
                                                                l148.cast(),
                                                                len150,
                                                                len150,
                                                            );
                                                            _rt::string_lift(bytes150)
                                                        };
                                                        V151::Uuid(e151)
                                                    }
                                                };
                                                v151
                                            };
                                            V185::ElementNotFound(e185)
                                        }
                                        5 => {
                                            let e185 = {
                                                let l152 = i32::from(*ptr26.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V160;
                                                let v160 = match l152 {
                                                    0 => {
                                                        let e160 = {
                                                            let l153 = *ptr26.add(24).cast::<*mut u8>();
                                                            let l154 = *ptr26.add(28).cast::<usize>();
                                                            let len155 = l154;
                                                            let bytes155 = _rt::Vec::from_raw_parts(
                                                                l153.cast(),
                                                                len155,
                                                                len155,
                                                            );
                                                            _rt::string_lift(bytes155)
                                                        };
                                                        V160::StringValue(e160)
                                                    }
                                                    1 => {
                                                        let e160 = {
                                                            let l156 = *ptr26.add(24).cast::<i64>();
                                                            l156
                                                        };
                                                        V160::Int64(e160)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e160 = {
                                                            let l157 = *ptr26.add(24).cast::<*mut u8>();
                                                            let l158 = *ptr26.add(28).cast::<usize>();
                                                            let len159 = l158;
                                                            let bytes159 = _rt::Vec::from_raw_parts(
                                                                l157.cast(),
                                                                len159,
                                                                len159,
                                                            );
                                                            _rt::string_lift(bytes159)
                                                        };
                                                        V160::Uuid(e160)
                                                    }
                                                };
                                                v160
                                            };
                                            V185::DuplicateElement(e185)
                                        }
                                        6 => {
                                            let e185 = {
                                                let l161 = *ptr26.add(16).cast::<*mut u8>();
                                                let l162 = *ptr26.add(20).cast::<usize>();
                                                let len163 = l162;
                                                let bytes163 = _rt::Vec::from_raw_parts(
                                                    l161.cast(),
                                                    len163,
                                                    len163,
                                                );
                                                _rt::string_lift(bytes163)
                                            };
                                            V185::SchemaViolation(e185)
                                        }
                                        7 => {
                                            let e185 = {
                                                let l164 = *ptr26.add(16).cast::<*mut u8>();
                                                let l165 = *ptr26.add(20).cast::<usize>();
                                                let len166 = l165;
                                                let bytes166 = _rt::Vec::from_raw_parts(
                                                    l164.cast(),
                                                    len166,
                                                    len166,
                                                );
                                                _rt::string_lift(bytes166)
                                            };
                                            V185::ConstraintViolation(e185)
                                        }
                                        8 => {
                                            let e185 = {
                                                let l167 = *ptr26.add(16).cast::<*mut u8>();
                                                let l168 = *ptr26.add(20).cast::<usize>();
                                                let len169 = l168;
                                                let bytes169 = _rt::Vec::from_raw_parts(
                                                    l167.cast(),
                                                    len169,
                                                    len169,
                                                );
                                                _rt::string_lift(bytes169)
                                            };
                                            V185::InvalidPropertyType(e185)
                                        }
                                        9 => {
                                            let e185 = {
                                                let l170 = *ptr26.add(16).cast::<*mut u8>();
                                                let l171 = *ptr26.add(20).cast::<usize>();
                                                let len172 = l171;
                                                let bytes172 = _rt::Vec::from_raw_parts(
                                                    l170.cast(),
                                                    len172,
                                                    len172,
                                                );
                                                _rt::string_lift(bytes172)
                                            };
                                            V185::InvalidQuery(e185)
                                        }
                                        10 => {
                                            let e185 = {
                                                let l173 = *ptr26.add(16).cast::<*mut u8>();
                                                let l174 = *ptr26.add(20).cast::<usize>();
                                                let len175 = l174;
                                                let bytes175 = _rt::Vec::from_raw_parts(
                                                    l173.cast(),
                                                    len175,
                                                    len175,
                                                );
                                                _rt::string_lift(bytes175)
                                            };
                                            V185::TransactionFailed(e185)
                                        }
                                        11 => V185::TransactionConflict,
                                        12 => V185::TransactionTimeout,
                                        13 => V185::DeadlockDetected,
                                        14 => V185::Timeout,
                                        15 => {
                                            let e185 = {
                                                let l176 = *ptr26.add(16).cast::<*mut u8>();
                                                let l177 = *ptr26.add(20).cast::<usize>();
                                                let len178 = l177;
                                                let bytes178 = _rt::Vec::from_raw_parts(
                                                    l176.cast(),
                                                    len178,
                                                    len178,
                                                );
                                                _rt::string_lift(bytes178)
                                            };
                                            V185::ResourceExhausted(e185)
                                        }
                                        16 => {
                                            let e185 = {
                                                let l179 = *ptr26.add(16).cast::<*mut u8>();
                                                let l180 = *ptr26.add(20).cast::<usize>();
                                                let len181 = l180;
                                                let bytes181 = _rt::Vec::from_raw_parts(
                                                    l179.cast(),
                                                    len181,
                                                    len181,
                                                );
                                                _rt::string_lift(bytes181)
                                            };
                                            V185::InternalError(e185)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 17, "invalid enum discriminant");
                                            let e185 = {
                                                let l182 = *ptr26.add(16).cast::<*mut u8>();
                                                let l183 = *ptr26.add(20).cast::<usize>();
                                                let len184 = l183;
                                                let bytes184 = _rt::Vec::from_raw_parts(
                                                    l182.cast(),
                                                    len184,
                                                    len184,
                                                );
                                                _rt::string_lift(bytes184)
                                            };
                                            V185::ServiceUnavailable(e185)
                                        }
                                    };
                                    v185
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Transaction {
                #[allow(unused_unsafe, clippy::all)]
                /// Update specific edge properties (partial update)
                pub fn update_edge_properties(
                    &self,
                    id: &ElementId,
                    updates: &PropertyMap,
                ) -> Result<Edge, GraphError> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 72]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 72],
                        );
                        use super::super::super::golem::graph::types::ElementId as V2;
                        let (result3_0, result3_1, result3_2) = match id {
                            V2::StringValue(e) => {
                                let vec0 = e;
                                let ptr0 = vec0.as_ptr().cast::<u8>();
                                let len0 = vec0.len();
                                (
                                    0i32,
                                    {
                                        let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                        t.as_mut_ptr().cast::<*mut u8>().write(ptr0.cast_mut());
                                        t
                                    },
                                    len0,
                                )
                            }
                            V2::Int64(e) => {
                                (
                                    1i32,
                                    ::core::mem::MaybeUninit::new(_rt::as_i64(e) as u64),
                                    0usize,
                                )
                            }
                            V2::Uuid(e) => {
                                let vec1 = e;
                                let ptr1 = vec1.as_ptr().cast::<u8>();
                                let len1 = vec1.len();
                                (
                                    2i32,
                                    {
                                        let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                        t.as_mut_ptr().cast::<*mut u8>().write(ptr1.cast_mut());
                                        t
                                    },
                                    len1,
                                )
                            }
                        };
                        let vec25 = updates;
                        let len25 = vec25.len();
                        let layout25 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec25.len() * 48,
                            8,
                        );
                        let result25 = if layout25.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout25).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout25);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec25.into_iter().enumerate() {
                            let base = result25.add(i * 48);
                            {
                                let (t4_0, t4_1) = e;
                                let vec5 = t4_0;
                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                let len5 = vec5.len();
                                *base.add(4).cast::<usize>() = len5;
                                *base.add(0).cast::<*mut u8>() = ptr5.cast_mut();
                                use super::super::super::golem::graph::types::PropertyValue as V24;
                                match t4_1 {
                                    V24::NullValue => {
                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                    }
                                    V24::Boolean(e) => {
                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                        *base.add(16).cast::<u8>() = (match e {
                                            true => 1,
                                            false => 0,
                                        }) as u8;
                                    }
                                    V24::Int8(e) => {
                                        *base.add(8).cast::<u8>() = (2i32) as u8;
                                        *base.add(16).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                    }
                                    V24::Int16(e) => {
                                        *base.add(8).cast::<u8>() = (3i32) as u8;
                                        *base.add(16).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                    }
                                    V24::Int32(e) => {
                                        *base.add(8).cast::<u8>() = (4i32) as u8;
                                        *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    V24::Int64(e) => {
                                        *base.add(8).cast::<u8>() = (5i32) as u8;
                                        *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    V24::Uint8(e) => {
                                        *base.add(8).cast::<u8>() = (6i32) as u8;
                                        *base.add(16).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                    }
                                    V24::Uint16(e) => {
                                        *base.add(8).cast::<u8>() = (7i32) as u8;
                                        *base.add(16).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                    }
                                    V24::Uint32(e) => {
                                        *base.add(8).cast::<u8>() = (8i32) as u8;
                                        *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    V24::Uint64(e) => {
                                        *base.add(8).cast::<u8>() = (9i32) as u8;
                                        *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    V24::Float32Value(e) => {
                                        *base.add(8).cast::<u8>() = (10i32) as u8;
                                        *base.add(16).cast::<f32>() = _rt::as_f32(e);
                                    }
                                    V24::Float64Value(e) => {
                                        *base.add(8).cast::<u8>() = (11i32) as u8;
                                        *base.add(16).cast::<f64>() = _rt::as_f64(e);
                                    }
                                    V24::StringValue(e) => {
                                        *base.add(8).cast::<u8>() = (12i32) as u8;
                                        let vec6 = e;
                                        let ptr6 = vec6.as_ptr().cast::<u8>();
                                        let len6 = vec6.len();
                                        *base.add(20).cast::<usize>() = len6;
                                        *base.add(16).cast::<*mut u8>() = ptr6.cast_mut();
                                    }
                                    V24::Bytes(e) => {
                                        *base.add(8).cast::<u8>() = (13i32) as u8;
                                        let vec7 = e;
                                        let ptr7 = vec7.as_ptr().cast::<u8>();
                                        let len7 = vec7.len();
                                        *base.add(20).cast::<usize>() = len7;
                                        *base.add(16).cast::<*mut u8>() = ptr7.cast_mut();
                                    }
                                    V24::Date(e) => {
                                        *base.add(8).cast::<u8>() = (14i32) as u8;
                                        let super::super::super::golem::graph::types::Date {
                                            year: year8,
                                            month: month8,
                                            day: day8,
                                        } = e;
                                        *base.add(16).cast::<i32>() = _rt::as_i32(year8);
                                        *base.add(20).cast::<u8>() = (_rt::as_i32(month8)) as u8;
                                        *base.add(21).cast::<u8>() = (_rt::as_i32(day8)) as u8;
                                    }
                                    V24::Time(e) => {
                                        *base.add(8).cast::<u8>() = (15i32) as u8;
                                        let super::super::super::golem::graph::types::Time {
                                            hour: hour9,
                                            minute: minute9,
                                            second: second9,
                                            nanosecond: nanosecond9,
                                        } = e;
                                        *base.add(16).cast::<u8>() = (_rt::as_i32(hour9)) as u8;
                                        *base.add(17).cast::<u8>() = (_rt::as_i32(minute9)) as u8;
                                        *base.add(18).cast::<u8>() = (_rt::as_i32(second9)) as u8;
                                        *base.add(20).cast::<i32>() = _rt::as_i32(nanosecond9);
                                    }
                                    V24::Datetime(e) => {
                                        *base.add(8).cast::<u8>() = (16i32) as u8;
                                        let super::super::super::golem::graph::types::Datetime {
                                            date: date10,
                                            time: time10,
                                            timezone_offset_minutes: timezone_offset_minutes10,
                                        } = e;
                                        let super::super::super::golem::graph::types::Date {
                                            year: year11,
                                            month: month11,
                                            day: day11,
                                        } = date10;
                                        *base.add(16).cast::<i32>() = _rt::as_i32(year11);
                                        *base.add(20).cast::<u8>() = (_rt::as_i32(month11)) as u8;
                                        *base.add(21).cast::<u8>() = (_rt::as_i32(day11)) as u8;
                                        let super::super::super::golem::graph::types::Time {
                                            hour: hour12,
                                            minute: minute12,
                                            second: second12,
                                            nanosecond: nanosecond12,
                                        } = time10;
                                        *base.add(24).cast::<u8>() = (_rt::as_i32(hour12)) as u8;
                                        *base.add(25).cast::<u8>() = (_rt::as_i32(minute12)) as u8;
                                        *base.add(26).cast::<u8>() = (_rt::as_i32(second12)) as u8;
                                        *base.add(28).cast::<i32>() = _rt::as_i32(nanosecond12);
                                        match timezone_offset_minutes10 {
                                            Some(e) => {
                                                *base.add(32).cast::<u8>() = (1i32) as u8;
                                                *base.add(34).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            None => {
                                                *base.add(32).cast::<u8>() = (0i32) as u8;
                                            }
                                        };
                                    }
                                    V24::Duration(e) => {
                                        *base.add(8).cast::<u8>() = (17i32) as u8;
                                        let super::super::super::golem::graph::types::Duration {
                                            seconds: seconds13,
                                            nanoseconds: nanoseconds13,
                                        } = e;
                                        *base.add(16).cast::<i64>() = _rt::as_i64(seconds13);
                                        *base.add(24).cast::<i32>() = _rt::as_i32(nanoseconds13);
                                    }
                                    V24::Point(e) => {
                                        *base.add(8).cast::<u8>() = (18i32) as u8;
                                        let super::super::super::golem::graph::types::Point {
                                            longitude: longitude14,
                                            latitude: latitude14,
                                            altitude: altitude14,
                                        } = e;
                                        *base.add(16).cast::<f64>() = _rt::as_f64(longitude14);
                                        *base.add(24).cast::<f64>() = _rt::as_f64(latitude14);
                                        match altitude14 {
                                            Some(e) => {
                                                *base.add(32).cast::<u8>() = (1i32) as u8;
                                                *base.add(40).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            None => {
                                                *base.add(32).cast::<u8>() = (0i32) as u8;
                                            }
                                        };
                                    }
                                    V24::Linestring(e) => {
                                        *base.add(8).cast::<u8>() = (19i32) as u8;
                                        let super::super::super::golem::graph::types::Linestring {
                                            coordinates: coordinates15,
                                        } = e;
                                        let vec17 = coordinates15;
                                        let len17 = vec17.len();
                                        let layout17 = _rt::alloc::Layout::from_size_align_unchecked(
                                            vec17.len() * 32,
                                            8,
                                        );
                                        let result17 = if layout17.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout17).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout17);
                                            }
                                            ptr
                                        } else {
                                            ::core::ptr::null_mut()
                                        };
                                        for (i, e) in vec17.into_iter().enumerate() {
                                            let base = result17.add(i * 32);
                                            {
                                                let super::super::super::golem::graph::types::Point {
                                                    longitude: longitude16,
                                                    latitude: latitude16,
                                                    altitude: altitude16,
                                                } = e;
                                                *base.add(0).cast::<f64>() = _rt::as_f64(longitude16);
                                                *base.add(8).cast::<f64>() = _rt::as_f64(latitude16);
                                                match altitude16 {
                                                    Some(e) => {
                                                        *base.add(16).cast::<u8>() = (1i32) as u8;
                                                        *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                    }
                                                    None => {
                                                        *base.add(16).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                        }
                                        *base.add(20).cast::<usize>() = len17;
                                        *base.add(16).cast::<*mut u8>() = result17;
                                        cleanup_list.extend_from_slice(&[(result17, layout17)]);
                                    }
                                    V24::Polygon(e) => {
                                        *base.add(8).cast::<u8>() = (20i32) as u8;
                                        let super::super::super::golem::graph::types::Polygon {
                                            exterior: exterior18,
                                            holes: holes18,
                                        } = e;
                                        let vec20 = exterior18;
                                        let len20 = vec20.len();
                                        let layout20 = _rt::alloc::Layout::from_size_align_unchecked(
                                            vec20.len() * 32,
                                            8,
                                        );
                                        let result20 = if layout20.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout20).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout20);
                                            }
                                            ptr
                                        } else {
                                            ::core::ptr::null_mut()
                                        };
                                        for (i, e) in vec20.into_iter().enumerate() {
                                            let base = result20.add(i * 32);
                                            {
                                                let super::super::super::golem::graph::types::Point {
                                                    longitude: longitude19,
                                                    latitude: latitude19,
                                                    altitude: altitude19,
                                                } = e;
                                                *base.add(0).cast::<f64>() = _rt::as_f64(longitude19);
                                                *base.add(8).cast::<f64>() = _rt::as_f64(latitude19);
                                                match altitude19 {
                                                    Some(e) => {
                                                        *base.add(16).cast::<u8>() = (1i32) as u8;
                                                        *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                    }
                                                    None => {
                                                        *base.add(16).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                        }
                                        *base.add(20).cast::<usize>() = len20;
                                        *base.add(16).cast::<*mut u8>() = result20;
                                        match holes18 {
                                            Some(e) => {
                                                *base.add(24).cast::<u8>() = (1i32) as u8;
                                                let vec23 = e;
                                                let len23 = vec23.len();
                                                let layout23 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec23.len() * 8,
                                                    4,
                                                );
                                                let result23 = if layout23.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout23).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout23);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec23.into_iter().enumerate() {
                                                    let base = result23.add(i * 8);
                                                    {
                                                        let vec22 = e;
                                                        let len22 = vec22.len();
                                                        let layout22 = _rt::alloc::Layout::from_size_align_unchecked(
                                                            vec22.len() * 32,
                                                            8,
                                                        );
                                                        let result22 = if layout22.size() != 0 {
                                                            let ptr = _rt::alloc::alloc(layout22).cast::<u8>();
                                                            if ptr.is_null() {
                                                                _rt::alloc::handle_alloc_error(layout22);
                                                            }
                                                            ptr
                                                        } else {
                                                            ::core::ptr::null_mut()
                                                        };
                                                        for (i, e) in vec22.into_iter().enumerate() {
                                                            let base = result22.add(i * 32);
                                                            {
                                                                let super::super::super::golem::graph::types::Point {
                                                                    longitude: longitude21,
                                                                    latitude: latitude21,
                                                                    altitude: altitude21,
                                                                } = e;
                                                                *base.add(0).cast::<f64>() = _rt::as_f64(longitude21);
                                                                *base.add(8).cast::<f64>() = _rt::as_f64(latitude21);
                                                                match altitude21 {
                                                                    Some(e) => {
                                                                        *base.add(16).cast::<u8>() = (1i32) as u8;
                                                                        *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                                    }
                                                                    None => {
                                                                        *base.add(16).cast::<u8>() = (0i32) as u8;
                                                                    }
                                                                };
                                                            }
                                                        }
                                                        *base.add(4).cast::<usize>() = len22;
                                                        *base.add(0).cast::<*mut u8>() = result22;
                                                        cleanup_list.extend_from_slice(&[(result22, layout22)]);
                                                    }
                                                }
                                                *base.add(32).cast::<usize>() = len23;
                                                *base.add(28).cast::<*mut u8>() = result23;
                                                cleanup_list.extend_from_slice(&[(result23, layout23)]);
                                            }
                                            None => {
                                                *base.add(24).cast::<u8>() = (0i32) as u8;
                                            }
                                        };
                                        cleanup_list.extend_from_slice(&[(result20, layout20)]);
                                    }
                                }
                            }
                        }
                        let ptr26 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:graph/transactions@1.0.0")]
                        extern "C" {
                            #[link_name = "[method]transaction.update-edge-properties"]
                            fn wit_import(
                                _: i32,
                                _: i32,
                                _: ::core::mem::MaybeUninit<u64>,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: i32,
                            _: ::core::mem::MaybeUninit<u64>,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            result3_0,
                            result3_1,
                            result3_2,
                            result25,
                            len25,
                            ptr26,
                        );
                        let l27 = i32::from(*ptr26.add(0).cast::<u8>());
                        if layout25.size() != 0 {
                            _rt::alloc::dealloc(result25.cast(), layout25);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l27 {
                            0 => {
                                let e = {
                                    let l28 = i32::from(*ptr26.add(8).cast::<u8>());
                                    use super::super::super::golem::graph::types::ElementId as V36;
                                    let v36 = match l28 {
                                        0 => {
                                            let e36 = {
                                                let l29 = *ptr26.add(16).cast::<*mut u8>();
                                                let l30 = *ptr26.add(20).cast::<usize>();
                                                let len31 = l30;
                                                let bytes31 = _rt::Vec::from_raw_parts(
                                                    l29.cast(),
                                                    len31,
                                                    len31,
                                                );
                                                _rt::string_lift(bytes31)
                                            };
                                            V36::StringValue(e36)
                                        }
                                        1 => {
                                            let e36 = {
                                                let l32 = *ptr26.add(16).cast::<i64>();
                                                l32
                                            };
                                            V36::Int64(e36)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 2, "invalid enum discriminant");
                                            let e36 = {
                                                let l33 = *ptr26.add(16).cast::<*mut u8>();
                                                let l34 = *ptr26.add(20).cast::<usize>();
                                                let len35 = l34;
                                                let bytes35 = _rt::Vec::from_raw_parts(
                                                    l33.cast(),
                                                    len35,
                                                    len35,
                                                );
                                                _rt::string_lift(bytes35)
                                            };
                                            V36::Uuid(e36)
                                        }
                                    };
                                    let l37 = *ptr26.add(24).cast::<*mut u8>();
                                    let l38 = *ptr26.add(28).cast::<usize>();
                                    let len39 = l38;
                                    let bytes39 = _rt::Vec::from_raw_parts(
                                        l37.cast(),
                                        len39,
                                        len39,
                                    );
                                    let l40 = i32::from(*ptr26.add(32).cast::<u8>());
                                    use super::super::super::golem::graph::types::ElementId as V48;
                                    let v48 = match l40 {
                                        0 => {
                                            let e48 = {
                                                let l41 = *ptr26.add(40).cast::<*mut u8>();
                                                let l42 = *ptr26.add(44).cast::<usize>();
                                                let len43 = l42;
                                                let bytes43 = _rt::Vec::from_raw_parts(
                                                    l41.cast(),
                                                    len43,
                                                    len43,
                                                );
                                                _rt::string_lift(bytes43)
                                            };
                                            V48::StringValue(e48)
                                        }
                                        1 => {
                                            let e48 = {
                                                let l44 = *ptr26.add(40).cast::<i64>();
                                                l44
                                            };
                                            V48::Int64(e48)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 2, "invalid enum discriminant");
                                            let e48 = {
                                                let l45 = *ptr26.add(40).cast::<*mut u8>();
                                                let l46 = *ptr26.add(44).cast::<usize>();
                                                let len47 = l46;
                                                let bytes47 = _rt::Vec::from_raw_parts(
                                                    l45.cast(),
                                                    len47,
                                                    len47,
                                                );
                                                _rt::string_lift(bytes47)
                                            };
                                            V48::Uuid(e48)
                                        }
                                    };
                                    let l49 = i32::from(*ptr26.add(48).cast::<u8>());
                                    use super::super::super::golem::graph::types::ElementId as V57;
                                    let v57 = match l49 {
                                        0 => {
                                            let e57 = {
                                                let l50 = *ptr26.add(56).cast::<*mut u8>();
                                                let l51 = *ptr26.add(60).cast::<usize>();
                                                let len52 = l51;
                                                let bytes52 = _rt::Vec::from_raw_parts(
                                                    l50.cast(),
                                                    len52,
                                                    len52,
                                                );
                                                _rt::string_lift(bytes52)
                                            };
                                            V57::StringValue(e57)
                                        }
                                        1 => {
                                            let e57 = {
                                                let l53 = *ptr26.add(56).cast::<i64>();
                                                l53
                                            };
                                            V57::Int64(e57)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 2, "invalid enum discriminant");
                                            let e57 = {
                                                let l54 = *ptr26.add(56).cast::<*mut u8>();
                                                let l55 = *ptr26.add(60).cast::<usize>();
                                                let len56 = l55;
                                                let bytes56 = _rt::Vec::from_raw_parts(
                                                    l54.cast(),
                                                    len56,
                                                    len56,
                                                );
                                                _rt::string_lift(bytes56)
                                            };
                                            V57::Uuid(e57)
                                        }
                                    };
                                    let l58 = *ptr26.add(64).cast::<*mut u8>();
                                    let l59 = *ptr26.add(68).cast::<usize>();
                                    let base129 = l58;
                                    let len129 = l59;
                                    let mut result129 = _rt::Vec::with_capacity(len129);
                                    for i in 0..len129 {
                                        let base = base129.add(i * 48);
                                        let e129 = {
                                            let l60 = *base.add(0).cast::<*mut u8>();
                                            let l61 = *base.add(4).cast::<usize>();
                                            let len62 = l61;
                                            let bytes62 = _rt::Vec::from_raw_parts(
                                                l60.cast(),
                                                len62,
                                                len62,
                                            );
                                            let l63 = i32::from(*base.add(8).cast::<u8>());
                                            use super::super::super::golem::graph::types::PropertyValue as V128;
                                            let v128 = match l63 {
                                                0 => V128::NullValue,
                                                1 => {
                                                    let e128 = {
                                                        let l64 = i32::from(*base.add(16).cast::<u8>());
                                                        _rt::bool_lift(l64 as u8)
                                                    };
                                                    V128::Boolean(e128)
                                                }
                                                2 => {
                                                    let e128 = {
                                                        let l65 = i32::from(*base.add(16).cast::<i8>());
                                                        l65 as i8
                                                    };
                                                    V128::Int8(e128)
                                                }
                                                3 => {
                                                    let e128 = {
                                                        let l66 = i32::from(*base.add(16).cast::<i16>());
                                                        l66 as i16
                                                    };
                                                    V128::Int16(e128)
                                                }
                                                4 => {
                                                    let e128 = {
                                                        let l67 = *base.add(16).cast::<i32>();
                                                        l67
                                                    };
                                                    V128::Int32(e128)
                                                }
                                                5 => {
                                                    let e128 = {
                                                        let l68 = *base.add(16).cast::<i64>();
                                                        l68
                                                    };
                                                    V128::Int64(e128)
                                                }
                                                6 => {
                                                    let e128 = {
                                                        let l69 = i32::from(*base.add(16).cast::<u8>());
                                                        l69 as u8
                                                    };
                                                    V128::Uint8(e128)
                                                }
                                                7 => {
                                                    let e128 = {
                                                        let l70 = i32::from(*base.add(16).cast::<u16>());
                                                        l70 as u16
                                                    };
                                                    V128::Uint16(e128)
                                                }
                                                8 => {
                                                    let e128 = {
                                                        let l71 = *base.add(16).cast::<i32>();
                                                        l71 as u32
                                                    };
                                                    V128::Uint32(e128)
                                                }
                                                9 => {
                                                    let e128 = {
                                                        let l72 = *base.add(16).cast::<i64>();
                                                        l72 as u64
                                                    };
                                                    V128::Uint64(e128)
                                                }
                                                10 => {
                                                    let e128 = {
                                                        let l73 = *base.add(16).cast::<f32>();
                                                        l73
                                                    };
                                                    V128::Float32Value(e128)
                                                }
                                                11 => {
                                                    let e128 = {
                                                        let l74 = *base.add(16).cast::<f64>();
                                                        l74
                                                    };
                                                    V128::Float64Value(e128)
                                                }
                                                12 => {
                                                    let e128 = {
                                                        let l75 = *base.add(16).cast::<*mut u8>();
                                                        let l76 = *base.add(20).cast::<usize>();
                                                        let len77 = l76;
                                                        let bytes77 = _rt::Vec::from_raw_parts(
                                                            l75.cast(),
                                                            len77,
                                                            len77,
                                                        );
                                                        _rt::string_lift(bytes77)
                                                    };
                                                    V128::StringValue(e128)
                                                }
                                                13 => {
                                                    let e128 = {
                                                        let l78 = *base.add(16).cast::<*mut u8>();
                                                        let l79 = *base.add(20).cast::<usize>();
                                                        let len80 = l79;
                                                        _rt::Vec::from_raw_parts(l78.cast(), len80, len80)
                                                    };
                                                    V128::Bytes(e128)
                                                }
                                                14 => {
                                                    let e128 = {
                                                        let l81 = *base.add(16).cast::<i32>();
                                                        let l82 = i32::from(*base.add(20).cast::<u8>());
                                                        let l83 = i32::from(*base.add(21).cast::<u8>());
                                                        super::super::super::golem::graph::types::Date {
                                                            year: l81 as u32,
                                                            month: l82 as u8,
                                                            day: l83 as u8,
                                                        }
                                                    };
                                                    V128::Date(e128)
                                                }
                                                15 => {
                                                    let e128 = {
                                                        let l84 = i32::from(*base.add(16).cast::<u8>());
                                                        let l85 = i32::from(*base.add(17).cast::<u8>());
                                                        let l86 = i32::from(*base.add(18).cast::<u8>());
                                                        let l87 = *base.add(20).cast::<i32>();
                                                        super::super::super::golem::graph::types::Time {
                                                            hour: l84 as u8,
                                                            minute: l85 as u8,
                                                            second: l86 as u8,
                                                            nanosecond: l87 as u32,
                                                        }
                                                    };
                                                    V128::Time(e128)
                                                }
                                                16 => {
                                                    let e128 = {
                                                        let l88 = *base.add(16).cast::<i32>();
                                                        let l89 = i32::from(*base.add(20).cast::<u8>());
                                                        let l90 = i32::from(*base.add(21).cast::<u8>());
                                                        let l91 = i32::from(*base.add(24).cast::<u8>());
                                                        let l92 = i32::from(*base.add(25).cast::<u8>());
                                                        let l93 = i32::from(*base.add(26).cast::<u8>());
                                                        let l94 = *base.add(28).cast::<i32>();
                                                        let l95 = i32::from(*base.add(32).cast::<u8>());
                                                        super::super::super::golem::graph::types::Datetime {
                                                            date: super::super::super::golem::graph::types::Date {
                                                                year: l88 as u32,
                                                                month: l89 as u8,
                                                                day: l90 as u8,
                                                            },
                                                            time: super::super::super::golem::graph::types::Time {
                                                                hour: l91 as u8,
                                                                minute: l92 as u8,
                                                                second: l93 as u8,
                                                                nanosecond: l94 as u32,
                                                            },
                                                            timezone_offset_minutes: match l95 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l96 = i32::from(*base.add(34).cast::<i16>());
                                                                        l96 as i16
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                        }
                                                    };
                                                    V128::Datetime(e128)
                                                }
                                                17 => {
                                                    let e128 = {
                                                        let l97 = *base.add(16).cast::<i64>();
                                                        let l98 = *base.add(24).cast::<i32>();
                                                        super::super::super::golem::graph::types::Duration {
                                                            seconds: l97,
                                                            nanoseconds: l98 as u32,
                                                        }
                                                    };
                                                    V128::Duration(e128)
                                                }
                                                18 => {
                                                    let e128 = {
                                                        let l99 = *base.add(16).cast::<f64>();
                                                        let l100 = *base.add(24).cast::<f64>();
                                                        let l101 = i32::from(*base.add(32).cast::<u8>());
                                                        super::super::super::golem::graph::types::Point {
                                                            longitude: l99,
                                                            latitude: l100,
                                                            altitude: match l101 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l102 = *base.add(40).cast::<f64>();
                                                                        l102
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                        }
                                                    };
                                                    V128::Point(e128)
                                                }
                                                19 => {
                                                    let e128 = {
                                                        let l103 = *base.add(16).cast::<*mut u8>();
                                                        let l104 = *base.add(20).cast::<usize>();
                                                        let base109 = l103;
                                                        let len109 = l104;
                                                        let mut result109 = _rt::Vec::with_capacity(len109);
                                                        for i in 0..len109 {
                                                            let base = base109.add(i * 32);
                                                            let e109 = {
                                                                let l105 = *base.add(0).cast::<f64>();
                                                                let l106 = *base.add(8).cast::<f64>();
                                                                let l107 = i32::from(*base.add(16).cast::<u8>());
                                                                super::super::super::golem::graph::types::Point {
                                                                    longitude: l105,
                                                                    latitude: l106,
                                                                    altitude: match l107 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l108 = *base.add(24).cast::<f64>();
                                                                                l108
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            result109.push(e109);
                                                        }
                                                        _rt::cabi_dealloc(base109, len109 * 32, 8);
                                                        super::super::super::golem::graph::types::Linestring {
                                                            coordinates: result109,
                                                        }
                                                    };
                                                    V128::Linestring(e128)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 20, "invalid enum discriminant");
                                                    let e128 = {
                                                        let l110 = *base.add(16).cast::<*mut u8>();
                                                        let l111 = *base.add(20).cast::<usize>();
                                                        let base116 = l110;
                                                        let len116 = l111;
                                                        let mut result116 = _rt::Vec::with_capacity(len116);
                                                        for i in 0..len116 {
                                                            let base = base116.add(i * 32);
                                                            let e116 = {
                                                                let l112 = *base.add(0).cast::<f64>();
                                                                let l113 = *base.add(8).cast::<f64>();
                                                                let l114 = i32::from(*base.add(16).cast::<u8>());
                                                                super::super::super::golem::graph::types::Point {
                                                                    longitude: l112,
                                                                    latitude: l113,
                                                                    altitude: match l114 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l115 = *base.add(24).cast::<f64>();
                                                                                l115
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            result116.push(e116);
                                                        }
                                                        _rt::cabi_dealloc(base116, len116 * 32, 8);
                                                        let l117 = i32::from(*base.add(24).cast::<u8>());
                                                        super::super::super::golem::graph::types::Polygon {
                                                            exterior: result116,
                                                            holes: match l117 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l118 = *base.add(28).cast::<*mut u8>();
                                                                        let l119 = *base.add(32).cast::<usize>();
                                                                        let base127 = l118;
                                                                        let len127 = l119;
                                                                        let mut result127 = _rt::Vec::with_capacity(len127);
                                                                        for i in 0..len127 {
                                                                            let base = base127.add(i * 8);
                                                                            let e127 = {
                                                                                let l120 = *base.add(0).cast::<*mut u8>();
                                                                                let l121 = *base.add(4).cast::<usize>();
                                                                                let base126 = l120;
                                                                                let len126 = l121;
                                                                                let mut result126 = _rt::Vec::with_capacity(len126);
                                                                                for i in 0..len126 {
                                                                                    let base = base126.add(i * 32);
                                                                                    let e126 = {
                                                                                        let l122 = *base.add(0).cast::<f64>();
                                                                                        let l123 = *base.add(8).cast::<f64>();
                                                                                        let l124 = i32::from(*base.add(16).cast::<u8>());
                                                                                        super::super::super::golem::graph::types::Point {
                                                                                            longitude: l122,
                                                                                            latitude: l123,
                                                                                            altitude: match l124 {
                                                                                                0 => None,
                                                                                                1 => {
                                                                                                    let e = {
                                                                                                        let l125 = *base.add(24).cast::<f64>();
                                                                                                        l125
                                                                                                    };
                                                                                                    Some(e)
                                                                                                }
                                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                                            },
                                                                                        }
                                                                                    };
                                                                                    result126.push(e126);
                                                                                }
                                                                                _rt::cabi_dealloc(base126, len126 * 32, 8);
                                                                                result126
                                                                            };
                                                                            result127.push(e127);
                                                                        }
                                                                        _rt::cabi_dealloc(base127, len127 * 8, 4);
                                                                        result127
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                        }
                                                    };
                                                    V128::Polygon(e128)
                                                }
                                            };
                                            (_rt::string_lift(bytes62), v128)
                                        };
                                        result129.push(e129);
                                    }
                                    _rt::cabi_dealloc(base129, len129 * 48, 8);
                                    super::super::super::golem::graph::types::Edge {
                                        id: v36,
                                        edge_type: _rt::string_lift(bytes39),
                                        from_vertex: v48,
                                        to_vertex: v57,
                                        properties: result129,
                                    }
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l130 = i32::from(*ptr26.add(8).cast::<u8>());
                                    use super::super::super::golem::graph::errors::GraphError as V185;
                                    let v185 = match l130 {
                                        0 => {
                                            let e185 = {
                                                let l131 = *ptr26.add(16).cast::<*mut u8>();
                                                let l132 = *ptr26.add(20).cast::<usize>();
                                                let len133 = l132;
                                                let bytes133 = _rt::Vec::from_raw_parts(
                                                    l131.cast(),
                                                    len133,
                                                    len133,
                                                );
                                                _rt::string_lift(bytes133)
                                            };
                                            V185::UnsupportedOperation(e185)
                                        }
                                        1 => {
                                            let e185 = {
                                                let l134 = *ptr26.add(16).cast::<*mut u8>();
                                                let l135 = *ptr26.add(20).cast::<usize>();
                                                let len136 = l135;
                                                let bytes136 = _rt::Vec::from_raw_parts(
                                                    l134.cast(),
                                                    len136,
                                                    len136,
                                                );
                                                _rt::string_lift(bytes136)
                                            };
                                            V185::ConnectionFailed(e185)
                                        }
                                        2 => {
                                            let e185 = {
                                                let l137 = *ptr26.add(16).cast::<*mut u8>();
                                                let l138 = *ptr26.add(20).cast::<usize>();
                                                let len139 = l138;
                                                let bytes139 = _rt::Vec::from_raw_parts(
                                                    l137.cast(),
                                                    len139,
                                                    len139,
                                                );
                                                _rt::string_lift(bytes139)
                                            };
                                            V185::AuthenticationFailed(e185)
                                        }
                                        3 => {
                                            let e185 = {
                                                let l140 = *ptr26.add(16).cast::<*mut u8>();
                                                let l141 = *ptr26.add(20).cast::<usize>();
                                                let len142 = l141;
                                                let bytes142 = _rt::Vec::from_raw_parts(
                                                    l140.cast(),
                                                    len142,
                                                    len142,
                                                );
                                                _rt::string_lift(bytes142)
                                            };
                                            V185::AuthorizationFailed(e185)
                                        }
                                        4 => {
                                            let e185 = {
                                                let l143 = i32::from(*ptr26.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V151;
                                                let v151 = match l143 {
                                                    0 => {
                                                        let e151 = {
                                                            let l144 = *ptr26.add(24).cast::<*mut u8>();
                                                            let l145 = *ptr26.add(28).cast::<usize>();
                                                            let len146 = l145;
                                                            let bytes146 = _rt::Vec::from_raw_parts(
                                                                l144.cast(),
                                                                len146,
                                                                len146,
                                                            );
                                                            _rt::string_lift(bytes146)
                                                        };
                                                        V151::StringValue(e151)
                                                    }
                                                    1 => {
                                                        let e151 = {
                                                            let l147 = *ptr26.add(24).cast::<i64>();
                                                            l147
                                                        };
                                                        V151::Int64(e151)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e151 = {
                                                            let l148 = *ptr26.add(24).cast::<*mut u8>();
                                                            let l149 = *ptr26.add(28).cast::<usize>();
                                                            let len150 = l149;
                                                            let bytes150 = _rt::Vec::from_raw_parts(
                                                                l148.cast(),
                                                                len150,
                                                                len150,
                                                            );
                                                            _rt::string_lift(bytes150)
                                                        };
                                                        V151::Uuid(e151)
                                                    }
                                                };
                                                v151
                                            };
                                            V185::ElementNotFound(e185)
                                        }
                                        5 => {
                                            let e185 = {
                                                let l152 = i32::from(*ptr26.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V160;
                                                let v160 = match l152 {
                                                    0 => {
                                                        let e160 = {
                                                            let l153 = *ptr26.add(24).cast::<*mut u8>();
                                                            let l154 = *ptr26.add(28).cast::<usize>();
                                                            let len155 = l154;
                                                            let bytes155 = _rt::Vec::from_raw_parts(
                                                                l153.cast(),
                                                                len155,
                                                                len155,
                                                            );
                                                            _rt::string_lift(bytes155)
                                                        };
                                                        V160::StringValue(e160)
                                                    }
                                                    1 => {
                                                        let e160 = {
                                                            let l156 = *ptr26.add(24).cast::<i64>();
                                                            l156
                                                        };
                                                        V160::Int64(e160)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e160 = {
                                                            let l157 = *ptr26.add(24).cast::<*mut u8>();
                                                            let l158 = *ptr26.add(28).cast::<usize>();
                                                            let len159 = l158;
                                                            let bytes159 = _rt::Vec::from_raw_parts(
                                                                l157.cast(),
                                                                len159,
                                                                len159,
                                                            );
                                                            _rt::string_lift(bytes159)
                                                        };
                                                        V160::Uuid(e160)
                                                    }
                                                };
                                                v160
                                            };
                                            V185::DuplicateElement(e185)
                                        }
                                        6 => {
                                            let e185 = {
                                                let l161 = *ptr26.add(16).cast::<*mut u8>();
                                                let l162 = *ptr26.add(20).cast::<usize>();
                                                let len163 = l162;
                                                let bytes163 = _rt::Vec::from_raw_parts(
                                                    l161.cast(),
                                                    len163,
                                                    len163,
                                                );
                                                _rt::string_lift(bytes163)
                                            };
                                            V185::SchemaViolation(e185)
                                        }
                                        7 => {
                                            let e185 = {
                                                let l164 = *ptr26.add(16).cast::<*mut u8>();
                                                let l165 = *ptr26.add(20).cast::<usize>();
                                                let len166 = l165;
                                                let bytes166 = _rt::Vec::from_raw_parts(
                                                    l164.cast(),
                                                    len166,
                                                    len166,
                                                );
                                                _rt::string_lift(bytes166)
                                            };
                                            V185::ConstraintViolation(e185)
                                        }
                                        8 => {
                                            let e185 = {
                                                let l167 = *ptr26.add(16).cast::<*mut u8>();
                                                let l168 = *ptr26.add(20).cast::<usize>();
                                                let len169 = l168;
                                                let bytes169 = _rt::Vec::from_raw_parts(
                                                    l167.cast(),
                                                    len169,
                                                    len169,
                                                );
                                                _rt::string_lift(bytes169)
                                            };
                                            V185::InvalidPropertyType(e185)
                                        }
                                        9 => {
                                            let e185 = {
                                                let l170 = *ptr26.add(16).cast::<*mut u8>();
                                                let l171 = *ptr26.add(20).cast::<usize>();
                                                let len172 = l171;
                                                let bytes172 = _rt::Vec::from_raw_parts(
                                                    l170.cast(),
                                                    len172,
                                                    len172,
                                                );
                                                _rt::string_lift(bytes172)
                                            };
                                            V185::InvalidQuery(e185)
                                        }
                                        10 => {
                                            let e185 = {
                                                let l173 = *ptr26.add(16).cast::<*mut u8>();
                                                let l174 = *ptr26.add(20).cast::<usize>();
                                                let len175 = l174;
                                                let bytes175 = _rt::Vec::from_raw_parts(
                                                    l173.cast(),
                                                    len175,
                                                    len175,
                                                );
                                                _rt::string_lift(bytes175)
                                            };
                                            V185::TransactionFailed(e185)
                                        }
                                        11 => V185::TransactionConflict,
                                        12 => V185::TransactionTimeout,
                                        13 => V185::DeadlockDetected,
                                        14 => V185::Timeout,
                                        15 => {
                                            let e185 = {
                                                let l176 = *ptr26.add(16).cast::<*mut u8>();
                                                let l177 = *ptr26.add(20).cast::<usize>();
                                                let len178 = l177;
                                                let bytes178 = _rt::Vec::from_raw_parts(
                                                    l176.cast(),
                                                    len178,
                                                    len178,
                                                );
                                                _rt::string_lift(bytes178)
                                            };
                                            V185::ResourceExhausted(e185)
                                        }
                                        16 => {
                                            let e185 = {
                                                let l179 = *ptr26.add(16).cast::<*mut u8>();
                                                let l180 = *ptr26.add(20).cast::<usize>();
                                                let len181 = l180;
                                                let bytes181 = _rt::Vec::from_raw_parts(
                                                    l179.cast(),
                                                    len181,
                                                    len181,
                                                );
                                                _rt::string_lift(bytes181)
                                            };
                                            V185::InternalError(e185)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 17, "invalid enum discriminant");
                                            let e185 = {
                                                let l182 = *ptr26.add(16).cast::<*mut u8>();
                                                let l183 = *ptr26.add(20).cast::<usize>();
                                                let len184 = l183;
                                                let bytes184 = _rt::Vec::from_raw_parts(
                                                    l182.cast(),
                                                    len184,
                                                    len184,
                                                );
                                                _rt::string_lift(bytes184)
                                            };
                                            V185::ServiceUnavailable(e185)
                                        }
                                    };
                                    v185
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Transaction {
                #[allow(unused_unsafe, clippy::all)]
                /// Delete edge
                pub fn delete_edge(&self, id: &ElementId) -> Result<(), GraphError> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 32]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 32],
                        );
                        use super::super::super::golem::graph::types::ElementId as V2;
                        let (result3_0, result3_1, result3_2) = match id {
                            V2::StringValue(e) => {
                                let vec0 = e;
                                let ptr0 = vec0.as_ptr().cast::<u8>();
                                let len0 = vec0.len();
                                (
                                    0i32,
                                    {
                                        let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                        t.as_mut_ptr().cast::<*mut u8>().write(ptr0.cast_mut());
                                        t
                                    },
                                    len0,
                                )
                            }
                            V2::Int64(e) => {
                                (
                                    1i32,
                                    ::core::mem::MaybeUninit::new(_rt::as_i64(e) as u64),
                                    0usize,
                                )
                            }
                            V2::Uuid(e) => {
                                let vec1 = e;
                                let ptr1 = vec1.as_ptr().cast::<u8>();
                                let len1 = vec1.len();
                                (
                                    2i32,
                                    {
                                        let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                        t.as_mut_ptr().cast::<*mut u8>().write(ptr1.cast_mut());
                                        t
                                    },
                                    len1,
                                )
                            }
                        };
                        let ptr4 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:graph/transactions@1.0.0")]
                        extern "C" {
                            #[link_name = "[method]transaction.delete-edge"]
                            fn wit_import(
                                _: i32,
                                _: i32,
                                _: ::core::mem::MaybeUninit<u64>,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: i32,
                            _: ::core::mem::MaybeUninit<u64>,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            result3_0,
                            result3_1,
                            result3_2,
                            ptr4,
                        );
                        let l5 = i32::from(*ptr4.add(0).cast::<u8>());
                        match l5 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l6 = i32::from(*ptr4.add(8).cast::<u8>());
                                    use super::super::super::golem::graph::errors::GraphError as V61;
                                    let v61 = match l6 {
                                        0 => {
                                            let e61 = {
                                                let l7 = *ptr4.add(16).cast::<*mut u8>();
                                                let l8 = *ptr4.add(20).cast::<usize>();
                                                let len9 = l8;
                                                let bytes9 = _rt::Vec::from_raw_parts(
                                                    l7.cast(),
                                                    len9,
                                                    len9,
                                                );
                                                _rt::string_lift(bytes9)
                                            };
                                            V61::UnsupportedOperation(e61)
                                        }
                                        1 => {
                                            let e61 = {
                                                let l10 = *ptr4.add(16).cast::<*mut u8>();
                                                let l11 = *ptr4.add(20).cast::<usize>();
                                                let len12 = l11;
                                                let bytes12 = _rt::Vec::from_raw_parts(
                                                    l10.cast(),
                                                    len12,
                                                    len12,
                                                );
                                                _rt::string_lift(bytes12)
                                            };
                                            V61::ConnectionFailed(e61)
                                        }
                                        2 => {
                                            let e61 = {
                                                let l13 = *ptr4.add(16).cast::<*mut u8>();
                                                let l14 = *ptr4.add(20).cast::<usize>();
                                                let len15 = l14;
                                                let bytes15 = _rt::Vec::from_raw_parts(
                                                    l13.cast(),
                                                    len15,
                                                    len15,
                                                );
                                                _rt::string_lift(bytes15)
                                            };
                                            V61::AuthenticationFailed(e61)
                                        }
                                        3 => {
                                            let e61 = {
                                                let l16 = *ptr4.add(16).cast::<*mut u8>();
                                                let l17 = *ptr4.add(20).cast::<usize>();
                                                let len18 = l17;
                                                let bytes18 = _rt::Vec::from_raw_parts(
                                                    l16.cast(),
                                                    len18,
                                                    len18,
                                                );
                                                _rt::string_lift(bytes18)
                                            };
                                            V61::AuthorizationFailed(e61)
                                        }
                                        4 => {
                                            let e61 = {
                                                let l19 = i32::from(*ptr4.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V27;
                                                let v27 = match l19 {
                                                    0 => {
                                                        let e27 = {
                                                            let l20 = *ptr4.add(24).cast::<*mut u8>();
                                                            let l21 = *ptr4.add(28).cast::<usize>();
                                                            let len22 = l21;
                                                            let bytes22 = _rt::Vec::from_raw_parts(
                                                                l20.cast(),
                                                                len22,
                                                                len22,
                                                            );
                                                            _rt::string_lift(bytes22)
                                                        };
                                                        V27::StringValue(e27)
                                                    }
                                                    1 => {
                                                        let e27 = {
                                                            let l23 = *ptr4.add(24).cast::<i64>();
                                                            l23
                                                        };
                                                        V27::Int64(e27)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e27 = {
                                                            let l24 = *ptr4.add(24).cast::<*mut u8>();
                                                            let l25 = *ptr4.add(28).cast::<usize>();
                                                            let len26 = l25;
                                                            let bytes26 = _rt::Vec::from_raw_parts(
                                                                l24.cast(),
                                                                len26,
                                                                len26,
                                                            );
                                                            _rt::string_lift(bytes26)
                                                        };
                                                        V27::Uuid(e27)
                                                    }
                                                };
                                                v27
                                            };
                                            V61::ElementNotFound(e61)
                                        }
                                        5 => {
                                            let e61 = {
                                                let l28 = i32::from(*ptr4.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V36;
                                                let v36 = match l28 {
                                                    0 => {
                                                        let e36 = {
                                                            let l29 = *ptr4.add(24).cast::<*mut u8>();
                                                            let l30 = *ptr4.add(28).cast::<usize>();
                                                            let len31 = l30;
                                                            let bytes31 = _rt::Vec::from_raw_parts(
                                                                l29.cast(),
                                                                len31,
                                                                len31,
                                                            );
                                                            _rt::string_lift(bytes31)
                                                        };
                                                        V36::StringValue(e36)
                                                    }
                                                    1 => {
                                                        let e36 = {
                                                            let l32 = *ptr4.add(24).cast::<i64>();
                                                            l32
                                                        };
                                                        V36::Int64(e36)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e36 = {
                                                            let l33 = *ptr4.add(24).cast::<*mut u8>();
                                                            let l34 = *ptr4.add(28).cast::<usize>();
                                                            let len35 = l34;
                                                            let bytes35 = _rt::Vec::from_raw_parts(
                                                                l33.cast(),
                                                                len35,
                                                                len35,
                                                            );
                                                            _rt::string_lift(bytes35)
                                                        };
                                                        V36::Uuid(e36)
                                                    }
                                                };
                                                v36
                                            };
                                            V61::DuplicateElement(e61)
                                        }
                                        6 => {
                                            let e61 = {
                                                let l37 = *ptr4.add(16).cast::<*mut u8>();
                                                let l38 = *ptr4.add(20).cast::<usize>();
                                                let len39 = l38;
                                                let bytes39 = _rt::Vec::from_raw_parts(
                                                    l37.cast(),
                                                    len39,
                                                    len39,
                                                );
                                                _rt::string_lift(bytes39)
                                            };
                                            V61::SchemaViolation(e61)
                                        }
                                        7 => {
                                            let e61 = {
                                                let l40 = *ptr4.add(16).cast::<*mut u8>();
                                                let l41 = *ptr4.add(20).cast::<usize>();
                                                let len42 = l41;
                                                let bytes42 = _rt::Vec::from_raw_parts(
                                                    l40.cast(),
                                                    len42,
                                                    len42,
                                                );
                                                _rt::string_lift(bytes42)
                                            };
                                            V61::ConstraintViolation(e61)
                                        }
                                        8 => {
                                            let e61 = {
                                                let l43 = *ptr4.add(16).cast::<*mut u8>();
                                                let l44 = *ptr4.add(20).cast::<usize>();
                                                let len45 = l44;
                                                let bytes45 = _rt::Vec::from_raw_parts(
                                                    l43.cast(),
                                                    len45,
                                                    len45,
                                                );
                                                _rt::string_lift(bytes45)
                                            };
                                            V61::InvalidPropertyType(e61)
                                        }
                                        9 => {
                                            let e61 = {
                                                let l46 = *ptr4.add(16).cast::<*mut u8>();
                                                let l47 = *ptr4.add(20).cast::<usize>();
                                                let len48 = l47;
                                                let bytes48 = _rt::Vec::from_raw_parts(
                                                    l46.cast(),
                                                    len48,
                                                    len48,
                                                );
                                                _rt::string_lift(bytes48)
                                            };
                                            V61::InvalidQuery(e61)
                                        }
                                        10 => {
                                            let e61 = {
                                                let l49 = *ptr4.add(16).cast::<*mut u8>();
                                                let l50 = *ptr4.add(20).cast::<usize>();
                                                let len51 = l50;
                                                let bytes51 = _rt::Vec::from_raw_parts(
                                                    l49.cast(),
                                                    len51,
                                                    len51,
                                                );
                                                _rt::string_lift(bytes51)
                                            };
                                            V61::TransactionFailed(e61)
                                        }
                                        11 => V61::TransactionConflict,
                                        12 => V61::TransactionTimeout,
                                        13 => V61::DeadlockDetected,
                                        14 => V61::Timeout,
                                        15 => {
                                            let e61 = {
                                                let l52 = *ptr4.add(16).cast::<*mut u8>();
                                                let l53 = *ptr4.add(20).cast::<usize>();
                                                let len54 = l53;
                                                let bytes54 = _rt::Vec::from_raw_parts(
                                                    l52.cast(),
                                                    len54,
                                                    len54,
                                                );
                                                _rt::string_lift(bytes54)
                                            };
                                            V61::ResourceExhausted(e61)
                                        }
                                        16 => {
                                            let e61 = {
                                                let l55 = *ptr4.add(16).cast::<*mut u8>();
                                                let l56 = *ptr4.add(20).cast::<usize>();
                                                let len57 = l56;
                                                let bytes57 = _rt::Vec::from_raw_parts(
                                                    l55.cast(),
                                                    len57,
                                                    len57,
                                                );
                                                _rt::string_lift(bytes57)
                                            };
                                            V61::InternalError(e61)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 17, "invalid enum discriminant");
                                            let e61 = {
                                                let l58 = *ptr4.add(16).cast::<*mut u8>();
                                                let l59 = *ptr4.add(20).cast::<usize>();
                                                let len60 = l59;
                                                let bytes60 = _rt::Vec::from_raw_parts(
                                                    l58.cast(),
                                                    len60,
                                                    len60,
                                                );
                                                _rt::string_lift(bytes60)
                                            };
                                            V61::ServiceUnavailable(e61)
                                        }
                                    };
                                    v61
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Transaction {
                #[allow(unused_unsafe, clippy::all)]
                /// Find edges by type and optional filters
                pub fn find_edges(
                    &self,
                    edge_types: Option<&[_rt::String]>,
                    filters: Option<&[FilterCondition]>,
                    sort: Option<&[SortSpec]>,
                    limit: Option<u32>,
                    offset: Option<u32>,
                ) -> Result<_rt::Vec<Edge>, GraphError> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 32]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 32],
                        );
                        let (result2_0, result2_1, result2_2) = match edge_types {
                            Some(e) => {
                                let vec1 = e;
                                let len1 = vec1.len();
                                let layout1 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec1.len() * 8,
                                    4,
                                );
                                let result1 = if layout1.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout1).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout1);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec1.into_iter().enumerate() {
                                    let base = result1.add(i * 8);
                                    {
                                        let vec0 = e;
                                        let ptr0 = vec0.as_ptr().cast::<u8>();
                                        let len0 = vec0.len();
                                        *base.add(4).cast::<usize>() = len0;
                                        *base.add(0).cast::<*mut u8>() = ptr0.cast_mut();
                                    }
                                }
                                cleanup_list.extend_from_slice(&[(result1, layout1)]);
                                (1i32, result1, len1)
                            }
                            None => (0i32, ::core::ptr::null_mut(), 0usize),
                        };
                        let (result25_0, result25_1, result25_2) = match filters {
                            Some(e) => {
                                let vec24 = e;
                                let len24 = vec24.len();
                                let layout24 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec24.len() * 56,
                                    8,
                                );
                                let result24 = if layout24.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout24).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout24);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec24.into_iter().enumerate() {
                                    let base = result24.add(i * 56);
                                    {
                                        let super::super::super::golem::graph::types::FilterCondition {
                                            property: property3,
                                            operator: operator3,
                                            value: value3,
                                        } = e;
                                        let vec4 = property3;
                                        let ptr4 = vec4.as_ptr().cast::<u8>();
                                        let len4 = vec4.len();
                                        *base.add(4).cast::<usize>() = len4;
                                        *base.add(0).cast::<*mut u8>() = ptr4.cast_mut();
                                        *base.add(8).cast::<u8>() = (operator3.clone() as i32)
                                            as u8;
                                        use super::super::super::golem::graph::types::PropertyValue as V23;
                                        match value3 {
                                            V23::NullValue => {
                                                *base.add(16).cast::<u8>() = (0i32) as u8;
                                            }
                                            V23::Boolean(e) => {
                                                *base.add(16).cast::<u8>() = (1i32) as u8;
                                                *base.add(24).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                }) as u8;
                                            }
                                            V23::Int8(e) => {
                                                *base.add(16).cast::<u8>() = (2i32) as u8;
                                                *base.add(24).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            V23::Int16(e) => {
                                                *base.add(16).cast::<u8>() = (3i32) as u8;
                                                *base.add(24).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            V23::Int32(e) => {
                                                *base.add(16).cast::<u8>() = (4i32) as u8;
                                                *base.add(24).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            V23::Int64(e) => {
                                                *base.add(16).cast::<u8>() = (5i32) as u8;
                                                *base.add(24).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            V23::Uint8(e) => {
                                                *base.add(16).cast::<u8>() = (6i32) as u8;
                                                *base.add(24).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            V23::Uint16(e) => {
                                                *base.add(16).cast::<u8>() = (7i32) as u8;
                                                *base.add(24).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            V23::Uint32(e) => {
                                                *base.add(16).cast::<u8>() = (8i32) as u8;
                                                *base.add(24).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            V23::Uint64(e) => {
                                                *base.add(16).cast::<u8>() = (9i32) as u8;
                                                *base.add(24).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            V23::Float32Value(e) => {
                                                *base.add(16).cast::<u8>() = (10i32) as u8;
                                                *base.add(24).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            V23::Float64Value(e) => {
                                                *base.add(16).cast::<u8>() = (11i32) as u8;
                                                *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            V23::StringValue(e) => {
                                                *base.add(16).cast::<u8>() = (12i32) as u8;
                                                let vec5 = e;
                                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                                let len5 = vec5.len();
                                                *base.add(28).cast::<usize>() = len5;
                                                *base.add(24).cast::<*mut u8>() = ptr5.cast_mut();
                                            }
                                            V23::Bytes(e) => {
                                                *base.add(16).cast::<u8>() = (13i32) as u8;
                                                let vec6 = e;
                                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                                let len6 = vec6.len();
                                                *base.add(28).cast::<usize>() = len6;
                                                *base.add(24).cast::<*mut u8>() = ptr6.cast_mut();
                                            }
                                            V23::Date(e) => {
                                                *base.add(16).cast::<u8>() = (14i32) as u8;
                                                let super::super::super::golem::graph::types::Date {
                                                    year: year7,
                                                    month: month7,
                                                    day: day7,
                                                } = e;
                                                *base.add(24).cast::<i32>() = _rt::as_i32(year7);
                                                *base.add(28).cast::<u8>() = (_rt::as_i32(month7)) as u8;
                                                *base.add(29).cast::<u8>() = (_rt::as_i32(day7)) as u8;
                                            }
                                            V23::Time(e) => {
                                                *base.add(16).cast::<u8>() = (15i32) as u8;
                                                let super::super::super::golem::graph::types::Time {
                                                    hour: hour8,
                                                    minute: minute8,
                                                    second: second8,
                                                    nanosecond: nanosecond8,
                                                } = e;
                                                *base.add(24).cast::<u8>() = (_rt::as_i32(hour8)) as u8;
                                                *base.add(25).cast::<u8>() = (_rt::as_i32(minute8)) as u8;
                                                *base.add(26).cast::<u8>() = (_rt::as_i32(second8)) as u8;
                                                *base.add(28).cast::<i32>() = _rt::as_i32(nanosecond8);
                                            }
                                            V23::Datetime(e) => {
                                                *base.add(16).cast::<u8>() = (16i32) as u8;
                                                let super::super::super::golem::graph::types::Datetime {
                                                    date: date9,
                                                    time: time9,
                                                    timezone_offset_minutes: timezone_offset_minutes9,
                                                } = e;
                                                let super::super::super::golem::graph::types::Date {
                                                    year: year10,
                                                    month: month10,
                                                    day: day10,
                                                } = date9;
                                                *base.add(24).cast::<i32>() = _rt::as_i32(year10);
                                                *base.add(28).cast::<u8>() = (_rt::as_i32(month10)) as u8;
                                                *base.add(29).cast::<u8>() = (_rt::as_i32(day10)) as u8;
                                                let super::super::super::golem::graph::types::Time {
                                                    hour: hour11,
                                                    minute: minute11,
                                                    second: second11,
                                                    nanosecond: nanosecond11,
                                                } = time9;
                                                *base.add(32).cast::<u8>() = (_rt::as_i32(hour11)) as u8;
                                                *base.add(33).cast::<u8>() = (_rt::as_i32(minute11)) as u8;
                                                *base.add(34).cast::<u8>() = (_rt::as_i32(second11)) as u8;
                                                *base.add(36).cast::<i32>() = _rt::as_i32(nanosecond11);
                                                match timezone_offset_minutes9 {
                                                    Some(e) => {
                                                        *base.add(40).cast::<u8>() = (1i32) as u8;
                                                        *base.add(42).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                                    }
                                                    None => {
                                                        *base.add(40).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            V23::Duration(e) => {
                                                *base.add(16).cast::<u8>() = (17i32) as u8;
                                                let super::super::super::golem::graph::types::Duration {
                                                    seconds: seconds12,
                                                    nanoseconds: nanoseconds12,
                                                } = e;
                                                *base.add(24).cast::<i64>() = _rt::as_i64(seconds12);
                                                *base.add(32).cast::<i32>() = _rt::as_i32(nanoseconds12);
                                            }
                                            V23::Point(e) => {
                                                *base.add(16).cast::<u8>() = (18i32) as u8;
                                                let super::super::super::golem::graph::types::Point {
                                                    longitude: longitude13,
                                                    latitude: latitude13,
                                                    altitude: altitude13,
                                                } = e;
                                                *base.add(24).cast::<f64>() = _rt::as_f64(longitude13);
                                                *base.add(32).cast::<f64>() = _rt::as_f64(latitude13);
                                                match altitude13 {
                                                    Some(e) => {
                                                        *base.add(40).cast::<u8>() = (1i32) as u8;
                                                        *base.add(48).cast::<f64>() = _rt::as_f64(e);
                                                    }
                                                    None => {
                                                        *base.add(40).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            V23::Linestring(e) => {
                                                *base.add(16).cast::<u8>() = (19i32) as u8;
                                                let super::super::super::golem::graph::types::Linestring {
                                                    coordinates: coordinates14,
                                                } = e;
                                                let vec16 = coordinates14;
                                                let len16 = vec16.len();
                                                let layout16 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec16.len() * 32,
                                                    8,
                                                );
                                                let result16 = if layout16.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout16).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout16);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec16.into_iter().enumerate() {
                                                    let base = result16.add(i * 32);
                                                    {
                                                        let super::super::super::golem::graph::types::Point {
                                                            longitude: longitude15,
                                                            latitude: latitude15,
                                                            altitude: altitude15,
                                                        } = e;
                                                        *base.add(0).cast::<f64>() = _rt::as_f64(longitude15);
                                                        *base.add(8).cast::<f64>() = _rt::as_f64(latitude15);
                                                        match altitude15 {
                                                            Some(e) => {
                                                                *base.add(16).cast::<u8>() = (1i32) as u8;
                                                                *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                            }
                                                            None => {
                                                                *base.add(16).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                }
                                                *base.add(28).cast::<usize>() = len16;
                                                *base.add(24).cast::<*mut u8>() = result16;
                                                cleanup_list.extend_from_slice(&[(result16, layout16)]);
                                            }
                                            V23::Polygon(e) => {
                                                *base.add(16).cast::<u8>() = (20i32) as u8;
                                                let super::super::super::golem::graph::types::Polygon {
                                                    exterior: exterior17,
                                                    holes: holes17,
                                                } = e;
                                                let vec19 = exterior17;
                                                let len19 = vec19.len();
                                                let layout19 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec19.len() * 32,
                                                    8,
                                                );
                                                let result19 = if layout19.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout19).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout19);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec19.into_iter().enumerate() {
                                                    let base = result19.add(i * 32);
                                                    {
                                                        let super::super::super::golem::graph::types::Point {
                                                            longitude: longitude18,
                                                            latitude: latitude18,
                                                            altitude: altitude18,
                                                        } = e;
                                                        *base.add(0).cast::<f64>() = _rt::as_f64(longitude18);
                                                        *base.add(8).cast::<f64>() = _rt::as_f64(latitude18);
                                                        match altitude18 {
                                                            Some(e) => {
                                                                *base.add(16).cast::<u8>() = (1i32) as u8;
                                                                *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                            }
                                                            None => {
                                                                *base.add(16).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                }
                                                *base.add(28).cast::<usize>() = len19;
                                                *base.add(24).cast::<*mut u8>() = result19;
                                                match holes17 {
                                                    Some(e) => {
                                                        *base.add(32).cast::<u8>() = (1i32) as u8;
                                                        let vec22 = e;
                                                        let len22 = vec22.len();
                                                        let layout22 = _rt::alloc::Layout::from_size_align_unchecked(
                                                            vec22.len() * 8,
                                                            4,
                                                        );
                                                        let result22 = if layout22.size() != 0 {
                                                            let ptr = _rt::alloc::alloc(layout22).cast::<u8>();
                                                            if ptr.is_null() {
                                                                _rt::alloc::handle_alloc_error(layout22);
                                                            }
                                                            ptr
                                                        } else {
                                                            ::core::ptr::null_mut()
                                                        };
                                                        for (i, e) in vec22.into_iter().enumerate() {
                                                            let base = result22.add(i * 8);
                                                            {
                                                                let vec21 = e;
                                                                let len21 = vec21.len();
                                                                let layout21 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                    vec21.len() * 32,
                                                                    8,
                                                                );
                                                                let result21 = if layout21.size() != 0 {
                                                                    let ptr = _rt::alloc::alloc(layout21).cast::<u8>();
                                                                    if ptr.is_null() {
                                                                        _rt::alloc::handle_alloc_error(layout21);
                                                                    }
                                                                    ptr
                                                                } else {
                                                                    ::core::ptr::null_mut()
                                                                };
                                                                for (i, e) in vec21.into_iter().enumerate() {
                                                                    let base = result21.add(i * 32);
                                                                    {
                                                                        let super::super::super::golem::graph::types::Point {
                                                                            longitude: longitude20,
                                                                            latitude: latitude20,
                                                                            altitude: altitude20,
                                                                        } = e;
                                                                        *base.add(0).cast::<f64>() = _rt::as_f64(longitude20);
                                                                        *base.add(8).cast::<f64>() = _rt::as_f64(latitude20);
                                                                        match altitude20 {
                                                                            Some(e) => {
                                                                                *base.add(16).cast::<u8>() = (1i32) as u8;
                                                                                *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                                            }
                                                                            None => {
                                                                                *base.add(16).cast::<u8>() = (0i32) as u8;
                                                                            }
                                                                        };
                                                                    }
                                                                }
                                                                *base.add(4).cast::<usize>() = len21;
                                                                *base.add(0).cast::<*mut u8>() = result21;
                                                                cleanup_list.extend_from_slice(&[(result21, layout21)]);
                                                            }
                                                        }
                                                        *base.add(40).cast::<usize>() = len22;
                                                        *base.add(36).cast::<*mut u8>() = result22;
                                                        cleanup_list.extend_from_slice(&[(result22, layout22)]);
                                                    }
                                                    None => {
                                                        *base.add(32).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                                cleanup_list.extend_from_slice(&[(result19, layout19)]);
                                            }
                                        }
                                    }
                                }
                                cleanup_list.extend_from_slice(&[(result24, layout24)]);
                                (1i32, result24, len24)
                            }
                            None => (0i32, ::core::ptr::null_mut(), 0usize),
                        };
                        let (result29_0, result29_1, result29_2) = match sort {
                            Some(e) => {
                                let vec28 = e;
                                let len28 = vec28.len();
                                let layout28 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec28.len() * 12,
                                    4,
                                );
                                let result28 = if layout28.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout28).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout28);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec28.into_iter().enumerate() {
                                    let base = result28.add(i * 12);
                                    {
                                        let super::super::super::golem::graph::types::SortSpec {
                                            property: property26,
                                            ascending: ascending26,
                                        } = e;
                                        let vec27 = property26;
                                        let ptr27 = vec27.as_ptr().cast::<u8>();
                                        let len27 = vec27.len();
                                        *base.add(4).cast::<usize>() = len27;
                                        *base.add(0).cast::<*mut u8>() = ptr27.cast_mut();
                                        *base.add(8).cast::<u8>() = (match ascending26 {
                                            true => 1,
                                            false => 0,
                                        }) as u8;
                                    }
                                }
                                cleanup_list.extend_from_slice(&[(result28, layout28)]);
                                (1i32, result28, len28)
                            }
                            None => (0i32, ::core::ptr::null_mut(), 0usize),
                        };
                        let (result30_0, result30_1) = match limit {
                            Some(e) => (1i32, _rt::as_i32(e)),
                            None => (0i32, 0i32),
                        };
                        let (result31_0, result31_1) = match offset {
                            Some(e) => (1i32, _rt::as_i32(e)),
                            None => (0i32, 0i32),
                        };
                        let ptr32 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:graph/transactions@1.0.0")]
                        extern "C" {
                            #[link_name = "[method]transaction.find-edges"]
                            fn wit_import(
                                _: i32,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                                _: i32,
                                _: i32,
                                _: i32,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: i32,
                            _: i32,
                            _: i32,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            result2_0,
                            result2_1,
                            result2_2,
                            result25_0,
                            result25_1,
                            result25_2,
                            result29_0,
                            result29_1,
                            result29_2,
                            result30_0,
                            result30_1,
                            result31_0,
                            result31_1,
                            ptr32,
                        );
                        let l33 = i32::from(*ptr32.add(0).cast::<u8>());
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l33 {
                            0 => {
                                let e = {
                                    let l34 = *ptr32.add(8).cast::<*mut u8>();
                                    let l35 = *ptr32.add(12).cast::<usize>();
                                    let base138 = l34;
                                    let len138 = l35;
                                    let mut result138 = _rt::Vec::with_capacity(len138);
                                    for i in 0..len138 {
                                        let base = base138.add(i * 64);
                                        let e138 = {
                                            let l36 = i32::from(*base.add(0).cast::<u8>());
                                            use super::super::super::golem::graph::types::ElementId as V44;
                                            let v44 = match l36 {
                                                0 => {
                                                    let e44 = {
                                                        let l37 = *base.add(8).cast::<*mut u8>();
                                                        let l38 = *base.add(12).cast::<usize>();
                                                        let len39 = l38;
                                                        let bytes39 = _rt::Vec::from_raw_parts(
                                                            l37.cast(),
                                                            len39,
                                                            len39,
                                                        );
                                                        _rt::string_lift(bytes39)
                                                    };
                                                    V44::StringValue(e44)
                                                }
                                                1 => {
                                                    let e44 = {
                                                        let l40 = *base.add(8).cast::<i64>();
                                                        l40
                                                    };
                                                    V44::Int64(e44)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                    let e44 = {
                                                        let l41 = *base.add(8).cast::<*mut u8>();
                                                        let l42 = *base.add(12).cast::<usize>();
                                                        let len43 = l42;
                                                        let bytes43 = _rt::Vec::from_raw_parts(
                                                            l41.cast(),
                                                            len43,
                                                            len43,
                                                        );
                                                        _rt::string_lift(bytes43)
                                                    };
                                                    V44::Uuid(e44)
                                                }
                                            };
                                            let l45 = *base.add(16).cast::<*mut u8>();
                                            let l46 = *base.add(20).cast::<usize>();
                                            let len47 = l46;
                                            let bytes47 = _rt::Vec::from_raw_parts(
                                                l45.cast(),
                                                len47,
                                                len47,
                                            );
                                            let l48 = i32::from(*base.add(24).cast::<u8>());
                                            use super::super::super::golem::graph::types::ElementId as V56;
                                            let v56 = match l48 {
                                                0 => {
                                                    let e56 = {
                                                        let l49 = *base.add(32).cast::<*mut u8>();
                                                        let l50 = *base.add(36).cast::<usize>();
                                                        let len51 = l50;
                                                        let bytes51 = _rt::Vec::from_raw_parts(
                                                            l49.cast(),
                                                            len51,
                                                            len51,
                                                        );
                                                        _rt::string_lift(bytes51)
                                                    };
                                                    V56::StringValue(e56)
                                                }
                                                1 => {
                                                    let e56 = {
                                                        let l52 = *base.add(32).cast::<i64>();
                                                        l52
                                                    };
                                                    V56::Int64(e56)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                    let e56 = {
                                                        let l53 = *base.add(32).cast::<*mut u8>();
                                                        let l54 = *base.add(36).cast::<usize>();
                                                        let len55 = l54;
                                                        let bytes55 = _rt::Vec::from_raw_parts(
                                                            l53.cast(),
                                                            len55,
                                                            len55,
                                                        );
                                                        _rt::string_lift(bytes55)
                                                    };
                                                    V56::Uuid(e56)
                                                }
                                            };
                                            let l57 = i32::from(*base.add(40).cast::<u8>());
                                            use super::super::super::golem::graph::types::ElementId as V65;
                                            let v65 = match l57 {
                                                0 => {
                                                    let e65 = {
                                                        let l58 = *base.add(48).cast::<*mut u8>();
                                                        let l59 = *base.add(52).cast::<usize>();
                                                        let len60 = l59;
                                                        let bytes60 = _rt::Vec::from_raw_parts(
                                                            l58.cast(),
                                                            len60,
                                                            len60,
                                                        );
                                                        _rt::string_lift(bytes60)
                                                    };
                                                    V65::StringValue(e65)
                                                }
                                                1 => {
                                                    let e65 = {
                                                        let l61 = *base.add(48).cast::<i64>();
                                                        l61
                                                    };
                                                    V65::Int64(e65)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                    let e65 = {
                                                        let l62 = *base.add(48).cast::<*mut u8>();
                                                        let l63 = *base.add(52).cast::<usize>();
                                                        let len64 = l63;
                                                        let bytes64 = _rt::Vec::from_raw_parts(
                                                            l62.cast(),
                                                            len64,
                                                            len64,
                                                        );
                                                        _rt::string_lift(bytes64)
                                                    };
                                                    V65::Uuid(e65)
                                                }
                                            };
                                            let l66 = *base.add(56).cast::<*mut u8>();
                                            let l67 = *base.add(60).cast::<usize>();
                                            let base137 = l66;
                                            let len137 = l67;
                                            let mut result137 = _rt::Vec::with_capacity(len137);
                                            for i in 0..len137 {
                                                let base = base137.add(i * 48);
                                                let e137 = {
                                                    let l68 = *base.add(0).cast::<*mut u8>();
                                                    let l69 = *base.add(4).cast::<usize>();
                                                    let len70 = l69;
                                                    let bytes70 = _rt::Vec::from_raw_parts(
                                                        l68.cast(),
                                                        len70,
                                                        len70,
                                                    );
                                                    let l71 = i32::from(*base.add(8).cast::<u8>());
                                                    use super::super::super::golem::graph::types::PropertyValue as V136;
                                                    let v136 = match l71 {
                                                        0 => V136::NullValue,
                                                        1 => {
                                                            let e136 = {
                                                                let l72 = i32::from(*base.add(16).cast::<u8>());
                                                                _rt::bool_lift(l72 as u8)
                                                            };
                                                            V136::Boolean(e136)
                                                        }
                                                        2 => {
                                                            let e136 = {
                                                                let l73 = i32::from(*base.add(16).cast::<i8>());
                                                                l73 as i8
                                                            };
                                                            V136::Int8(e136)
                                                        }
                                                        3 => {
                                                            let e136 = {
                                                                let l74 = i32::from(*base.add(16).cast::<i16>());
                                                                l74 as i16
                                                            };
                                                            V136::Int16(e136)
                                                        }
                                                        4 => {
                                                            let e136 = {
                                                                let l75 = *base.add(16).cast::<i32>();
                                                                l75
                                                            };
                                                            V136::Int32(e136)
                                                        }
                                                        5 => {
                                                            let e136 = {
                                                                let l76 = *base.add(16).cast::<i64>();
                                                                l76
                                                            };
                                                            V136::Int64(e136)
                                                        }
                                                        6 => {
                                                            let e136 = {
                                                                let l77 = i32::from(*base.add(16).cast::<u8>());
                                                                l77 as u8
                                                            };
                                                            V136::Uint8(e136)
                                                        }
                                                        7 => {
                                                            let e136 = {
                                                                let l78 = i32::from(*base.add(16).cast::<u16>());
                                                                l78 as u16
                                                            };
                                                            V136::Uint16(e136)
                                                        }
                                                        8 => {
                                                            let e136 = {
                                                                let l79 = *base.add(16).cast::<i32>();
                                                                l79 as u32
                                                            };
                                                            V136::Uint32(e136)
                                                        }
                                                        9 => {
                                                            let e136 = {
                                                                let l80 = *base.add(16).cast::<i64>();
                                                                l80 as u64
                                                            };
                                                            V136::Uint64(e136)
                                                        }
                                                        10 => {
                                                            let e136 = {
                                                                let l81 = *base.add(16).cast::<f32>();
                                                                l81
                                                            };
                                                            V136::Float32Value(e136)
                                                        }
                                                        11 => {
                                                            let e136 = {
                                                                let l82 = *base.add(16).cast::<f64>();
                                                                l82
                                                            };
                                                            V136::Float64Value(e136)
                                                        }
                                                        12 => {
                                                            let e136 = {
                                                                let l83 = *base.add(16).cast::<*mut u8>();
                                                                let l84 = *base.add(20).cast::<usize>();
                                                                let len85 = l84;
                                                                let bytes85 = _rt::Vec::from_raw_parts(
                                                                    l83.cast(),
                                                                    len85,
                                                                    len85,
                                                                );
                                                                _rt::string_lift(bytes85)
                                                            };
                                                            V136::StringValue(e136)
                                                        }
                                                        13 => {
                                                            let e136 = {
                                                                let l86 = *base.add(16).cast::<*mut u8>();
                                                                let l87 = *base.add(20).cast::<usize>();
                                                                let len88 = l87;
                                                                _rt::Vec::from_raw_parts(l86.cast(), len88, len88)
                                                            };
                                                            V136::Bytes(e136)
                                                        }
                                                        14 => {
                                                            let e136 = {
                                                                let l89 = *base.add(16).cast::<i32>();
                                                                let l90 = i32::from(*base.add(20).cast::<u8>());
                                                                let l91 = i32::from(*base.add(21).cast::<u8>());
                                                                super::super::super::golem::graph::types::Date {
                                                                    year: l89 as u32,
                                                                    month: l90 as u8,
                                                                    day: l91 as u8,
                                                                }
                                                            };
                                                            V136::Date(e136)
                                                        }
                                                        15 => {
                                                            let e136 = {
                                                                let l92 = i32::from(*base.add(16).cast::<u8>());
                                                                let l93 = i32::from(*base.add(17).cast::<u8>());
                                                                let l94 = i32::from(*base.add(18).cast::<u8>());
                                                                let l95 = *base.add(20).cast::<i32>();
                                                                super::super::super::golem::graph::types::Time {
                                                                    hour: l92 as u8,
                                                                    minute: l93 as u8,
                                                                    second: l94 as u8,
                                                                    nanosecond: l95 as u32,
                                                                }
                                                            };
                                                            V136::Time(e136)
                                                        }
                                                        16 => {
                                                            let e136 = {
                                                                let l96 = *base.add(16).cast::<i32>();
                                                                let l97 = i32::from(*base.add(20).cast::<u8>());
                                                                let l98 = i32::from(*base.add(21).cast::<u8>());
                                                                let l99 = i32::from(*base.add(24).cast::<u8>());
                                                                let l100 = i32::from(*base.add(25).cast::<u8>());
                                                                let l101 = i32::from(*base.add(26).cast::<u8>());
                                                                let l102 = *base.add(28).cast::<i32>();
                                                                let l103 = i32::from(*base.add(32).cast::<u8>());
                                                                super::super::super::golem::graph::types::Datetime {
                                                                    date: super::super::super::golem::graph::types::Date {
                                                                        year: l96 as u32,
                                                                        month: l97 as u8,
                                                                        day: l98 as u8,
                                                                    },
                                                                    time: super::super::super::golem::graph::types::Time {
                                                                        hour: l99 as u8,
                                                                        minute: l100 as u8,
                                                                        second: l101 as u8,
                                                                        nanosecond: l102 as u32,
                                                                    },
                                                                    timezone_offset_minutes: match l103 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l104 = i32::from(*base.add(34).cast::<i16>());
                                                                                l104 as i16
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            V136::Datetime(e136)
                                                        }
                                                        17 => {
                                                            let e136 = {
                                                                let l105 = *base.add(16).cast::<i64>();
                                                                let l106 = *base.add(24).cast::<i32>();
                                                                super::super::super::golem::graph::types::Duration {
                                                                    seconds: l105,
                                                                    nanoseconds: l106 as u32,
                                                                }
                                                            };
                                                            V136::Duration(e136)
                                                        }
                                                        18 => {
                                                            let e136 = {
                                                                let l107 = *base.add(16).cast::<f64>();
                                                                let l108 = *base.add(24).cast::<f64>();
                                                                let l109 = i32::from(*base.add(32).cast::<u8>());
                                                                super::super::super::golem::graph::types::Point {
                                                                    longitude: l107,
                                                                    latitude: l108,
                                                                    altitude: match l109 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l110 = *base.add(40).cast::<f64>();
                                                                                l110
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            V136::Point(e136)
                                                        }
                                                        19 => {
                                                            let e136 = {
                                                                let l111 = *base.add(16).cast::<*mut u8>();
                                                                let l112 = *base.add(20).cast::<usize>();
                                                                let base117 = l111;
                                                                let len117 = l112;
                                                                let mut result117 = _rt::Vec::with_capacity(len117);
                                                                for i in 0..len117 {
                                                                    let base = base117.add(i * 32);
                                                                    let e117 = {
                                                                        let l113 = *base.add(0).cast::<f64>();
                                                                        let l114 = *base.add(8).cast::<f64>();
                                                                        let l115 = i32::from(*base.add(16).cast::<u8>());
                                                                        super::super::super::golem::graph::types::Point {
                                                                            longitude: l113,
                                                                            latitude: l114,
                                                                            altitude: match l115 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l116 = *base.add(24).cast::<f64>();
                                                                                        l116
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            },
                                                                        }
                                                                    };
                                                                    result117.push(e117);
                                                                }
                                                                _rt::cabi_dealloc(base117, len117 * 32, 8);
                                                                super::super::super::golem::graph::types::Linestring {
                                                                    coordinates: result117,
                                                                }
                                                            };
                                                            V136::Linestring(e136)
                                                        }
                                                        n => {
                                                            debug_assert_eq!(n, 20, "invalid enum discriminant");
                                                            let e136 = {
                                                                let l118 = *base.add(16).cast::<*mut u8>();
                                                                let l119 = *base.add(20).cast::<usize>();
                                                                let base124 = l118;
                                                                let len124 = l119;
                                                                let mut result124 = _rt::Vec::with_capacity(len124);
                                                                for i in 0..len124 {
                                                                    let base = base124.add(i * 32);
                                                                    let e124 = {
                                                                        let l120 = *base.add(0).cast::<f64>();
                                                                        let l121 = *base.add(8).cast::<f64>();
                                                                        let l122 = i32::from(*base.add(16).cast::<u8>());
                                                                        super::super::super::golem::graph::types::Point {
                                                                            longitude: l120,
                                                                            latitude: l121,
                                                                            altitude: match l122 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l123 = *base.add(24).cast::<f64>();
                                                                                        l123
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            },
                                                                        }
                                                                    };
                                                                    result124.push(e124);
                                                                }
                                                                _rt::cabi_dealloc(base124, len124 * 32, 8);
                                                                let l125 = i32::from(*base.add(24).cast::<u8>());
                                                                super::super::super::golem::graph::types::Polygon {
                                                                    exterior: result124,
                                                                    holes: match l125 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l126 = *base.add(28).cast::<*mut u8>();
                                                                                let l127 = *base.add(32).cast::<usize>();
                                                                                let base135 = l126;
                                                                                let len135 = l127;
                                                                                let mut result135 = _rt::Vec::with_capacity(len135);
                                                                                for i in 0..len135 {
                                                                                    let base = base135.add(i * 8);
                                                                                    let e135 = {
                                                                                        let l128 = *base.add(0).cast::<*mut u8>();
                                                                                        let l129 = *base.add(4).cast::<usize>();
                                                                                        let base134 = l128;
                                                                                        let len134 = l129;
                                                                                        let mut result134 = _rt::Vec::with_capacity(len134);
                                                                                        for i in 0..len134 {
                                                                                            let base = base134.add(i * 32);
                                                                                            let e134 = {
                                                                                                let l130 = *base.add(0).cast::<f64>();
                                                                                                let l131 = *base.add(8).cast::<f64>();
                                                                                                let l132 = i32::from(*base.add(16).cast::<u8>());
                                                                                                super::super::super::golem::graph::types::Point {
                                                                                                    longitude: l130,
                                                                                                    latitude: l131,
                                                                                                    altitude: match l132 {
                                                                                                        0 => None,
                                                                                                        1 => {
                                                                                                            let e = {
                                                                                                                let l133 = *base.add(24).cast::<f64>();
                                                                                                                l133
                                                                                                            };
                                                                                                            Some(e)
                                                                                                        }
                                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                                    },
                                                                                                }
                                                                                            };
                                                                                            result134.push(e134);
                                                                                        }
                                                                                        _rt::cabi_dealloc(base134, len134 * 32, 8);
                                                                                        result134
                                                                                    };
                                                                                    result135.push(e135);
                                                                                }
                                                                                _rt::cabi_dealloc(base135, len135 * 8, 4);
                                                                                result135
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            V136::Polygon(e136)
                                                        }
                                                    };
                                                    (_rt::string_lift(bytes70), v136)
                                                };
                                                result137.push(e137);
                                            }
                                            _rt::cabi_dealloc(base137, len137 * 48, 8);
                                            super::super::super::golem::graph::types::Edge {
                                                id: v44,
                                                edge_type: _rt::string_lift(bytes47),
                                                from_vertex: v56,
                                                to_vertex: v65,
                                                properties: result137,
                                            }
                                        };
                                        result138.push(e138);
                                    }
                                    _rt::cabi_dealloc(base138, len138 * 64, 8);
                                    result138
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l139 = i32::from(*ptr32.add(8).cast::<u8>());
                                    use super::super::super::golem::graph::errors::GraphError as V194;
                                    let v194 = match l139 {
                                        0 => {
                                            let e194 = {
                                                let l140 = *ptr32.add(16).cast::<*mut u8>();
                                                let l141 = *ptr32.add(20).cast::<usize>();
                                                let len142 = l141;
                                                let bytes142 = _rt::Vec::from_raw_parts(
                                                    l140.cast(),
                                                    len142,
                                                    len142,
                                                );
                                                _rt::string_lift(bytes142)
                                            };
                                            V194::UnsupportedOperation(e194)
                                        }
                                        1 => {
                                            let e194 = {
                                                let l143 = *ptr32.add(16).cast::<*mut u8>();
                                                let l144 = *ptr32.add(20).cast::<usize>();
                                                let len145 = l144;
                                                let bytes145 = _rt::Vec::from_raw_parts(
                                                    l143.cast(),
                                                    len145,
                                                    len145,
                                                );
                                                _rt::string_lift(bytes145)
                                            };
                                            V194::ConnectionFailed(e194)
                                        }
                                        2 => {
                                            let e194 = {
                                                let l146 = *ptr32.add(16).cast::<*mut u8>();
                                                let l147 = *ptr32.add(20).cast::<usize>();
                                                let len148 = l147;
                                                let bytes148 = _rt::Vec::from_raw_parts(
                                                    l146.cast(),
                                                    len148,
                                                    len148,
                                                );
                                                _rt::string_lift(bytes148)
                                            };
                                            V194::AuthenticationFailed(e194)
                                        }
                                        3 => {
                                            let e194 = {
                                                let l149 = *ptr32.add(16).cast::<*mut u8>();
                                                let l150 = *ptr32.add(20).cast::<usize>();
                                                let len151 = l150;
                                                let bytes151 = _rt::Vec::from_raw_parts(
                                                    l149.cast(),
                                                    len151,
                                                    len151,
                                                );
                                                _rt::string_lift(bytes151)
                                            };
                                            V194::AuthorizationFailed(e194)
                                        }
                                        4 => {
                                            let e194 = {
                                                let l152 = i32::from(*ptr32.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V160;
                                                let v160 = match l152 {
                                                    0 => {
                                                        let e160 = {
                                                            let l153 = *ptr32.add(24).cast::<*mut u8>();
                                                            let l154 = *ptr32.add(28).cast::<usize>();
                                                            let len155 = l154;
                                                            let bytes155 = _rt::Vec::from_raw_parts(
                                                                l153.cast(),
                                                                len155,
                                                                len155,
                                                            );
                                                            _rt::string_lift(bytes155)
                                                        };
                                                        V160::StringValue(e160)
                                                    }
                                                    1 => {
                                                        let e160 = {
                                                            let l156 = *ptr32.add(24).cast::<i64>();
                                                            l156
                                                        };
                                                        V160::Int64(e160)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e160 = {
                                                            let l157 = *ptr32.add(24).cast::<*mut u8>();
                                                            let l158 = *ptr32.add(28).cast::<usize>();
                                                            let len159 = l158;
                                                            let bytes159 = _rt::Vec::from_raw_parts(
                                                                l157.cast(),
                                                                len159,
                                                                len159,
                                                            );
                                                            _rt::string_lift(bytes159)
                                                        };
                                                        V160::Uuid(e160)
                                                    }
                                                };
                                                v160
                                            };
                                            V194::ElementNotFound(e194)
                                        }
                                        5 => {
                                            let e194 = {
                                                let l161 = i32::from(*ptr32.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V169;
                                                let v169 = match l161 {
                                                    0 => {
                                                        let e169 = {
                                                            let l162 = *ptr32.add(24).cast::<*mut u8>();
                                                            let l163 = *ptr32.add(28).cast::<usize>();
                                                            let len164 = l163;
                                                            let bytes164 = _rt::Vec::from_raw_parts(
                                                                l162.cast(),
                                                                len164,
                                                                len164,
                                                            );
                                                            _rt::string_lift(bytes164)
                                                        };
                                                        V169::StringValue(e169)
                                                    }
                                                    1 => {
                                                        let e169 = {
                                                            let l165 = *ptr32.add(24).cast::<i64>();
                                                            l165
                                                        };
                                                        V169::Int64(e169)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e169 = {
                                                            let l166 = *ptr32.add(24).cast::<*mut u8>();
                                                            let l167 = *ptr32.add(28).cast::<usize>();
                                                            let len168 = l167;
                                                            let bytes168 = _rt::Vec::from_raw_parts(
                                                                l166.cast(),
                                                                len168,
                                                                len168,
                                                            );
                                                            _rt::string_lift(bytes168)
                                                        };
                                                        V169::Uuid(e169)
                                                    }
                                                };
                                                v169
                                            };
                                            V194::DuplicateElement(e194)
                                        }
                                        6 => {
                                            let e194 = {
                                                let l170 = *ptr32.add(16).cast::<*mut u8>();
                                                let l171 = *ptr32.add(20).cast::<usize>();
                                                let len172 = l171;
                                                let bytes172 = _rt::Vec::from_raw_parts(
                                                    l170.cast(),
                                                    len172,
                                                    len172,
                                                );
                                                _rt::string_lift(bytes172)
                                            };
                                            V194::SchemaViolation(e194)
                                        }
                                        7 => {
                                            let e194 = {
                                                let l173 = *ptr32.add(16).cast::<*mut u8>();
                                                let l174 = *ptr32.add(20).cast::<usize>();
                                                let len175 = l174;
                                                let bytes175 = _rt::Vec::from_raw_parts(
                                                    l173.cast(),
                                                    len175,
                                                    len175,
                                                );
                                                _rt::string_lift(bytes175)
                                            };
                                            V194::ConstraintViolation(e194)
                                        }
                                        8 => {
                                            let e194 = {
                                                let l176 = *ptr32.add(16).cast::<*mut u8>();
                                                let l177 = *ptr32.add(20).cast::<usize>();
                                                let len178 = l177;
                                                let bytes178 = _rt::Vec::from_raw_parts(
                                                    l176.cast(),
                                                    len178,
                                                    len178,
                                                );
                                                _rt::string_lift(bytes178)
                                            };
                                            V194::InvalidPropertyType(e194)
                                        }
                                        9 => {
                                            let e194 = {
                                                let l179 = *ptr32.add(16).cast::<*mut u8>();
                                                let l180 = *ptr32.add(20).cast::<usize>();
                                                let len181 = l180;
                                                let bytes181 = _rt::Vec::from_raw_parts(
                                                    l179.cast(),
                                                    len181,
                                                    len181,
                                                );
                                                _rt::string_lift(bytes181)
                                            };
                                            V194::InvalidQuery(e194)
                                        }
                                        10 => {
                                            let e194 = {
                                                let l182 = *ptr32.add(16).cast::<*mut u8>();
                                                let l183 = *ptr32.add(20).cast::<usize>();
                                                let len184 = l183;
                                                let bytes184 = _rt::Vec::from_raw_parts(
                                                    l182.cast(),
                                                    len184,
                                                    len184,
                                                );
                                                _rt::string_lift(bytes184)
                                            };
                                            V194::TransactionFailed(e194)
                                        }
                                        11 => V194::TransactionConflict,
                                        12 => V194::TransactionTimeout,
                                        13 => V194::DeadlockDetected,
                                        14 => V194::Timeout,
                                        15 => {
                                            let e194 = {
                                                let l185 = *ptr32.add(16).cast::<*mut u8>();
                                                let l186 = *ptr32.add(20).cast::<usize>();
                                                let len187 = l186;
                                                let bytes187 = _rt::Vec::from_raw_parts(
                                                    l185.cast(),
                                                    len187,
                                                    len187,
                                                );
                                                _rt::string_lift(bytes187)
                                            };
                                            V194::ResourceExhausted(e194)
                                        }
                                        16 => {
                                            let e194 = {
                                                let l188 = *ptr32.add(16).cast::<*mut u8>();
                                                let l189 = *ptr32.add(20).cast::<usize>();
                                                let len190 = l189;
                                                let bytes190 = _rt::Vec::from_raw_parts(
                                                    l188.cast(),
                                                    len190,
                                                    len190,
                                                );
                                                _rt::string_lift(bytes190)
                                            };
                                            V194::InternalError(e194)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 17, "invalid enum discriminant");
                                            let e194 = {
                                                let l191 = *ptr32.add(16).cast::<*mut u8>();
                                                let l192 = *ptr32.add(20).cast::<usize>();
                                                let len193 = l192;
                                                let bytes193 = _rt::Vec::from_raw_parts(
                                                    l191.cast(),
                                                    len193,
                                                    len193,
                                                );
                                                _rt::string_lift(bytes193)
                                            };
                                            V194::ServiceUnavailable(e194)
                                        }
                                    };
                                    v194
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Transaction {
                #[allow(unused_unsafe, clippy::all)]
                /// === TRAVERSAL OPERATIONS ===
                /// Get adjacent vertices through specified edge types
                pub fn get_adjacent_vertices(
                    &self,
                    vertex_id: &ElementId,
                    direction: Direction,
                    edge_types: Option<&[_rt::String]>,
                    limit: Option<u32>,
                ) -> Result<_rt::Vec<Vertex>, GraphError> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 32]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 32],
                        );
                        use super::super::super::golem::graph::types::ElementId as V2;
                        let (result3_0, result3_1, result3_2) = match vertex_id {
                            V2::StringValue(e) => {
                                let vec0 = e;
                                let ptr0 = vec0.as_ptr().cast::<u8>();
                                let len0 = vec0.len();
                                (
                                    0i32,
                                    {
                                        let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                        t.as_mut_ptr().cast::<*mut u8>().write(ptr0.cast_mut());
                                        t
                                    },
                                    len0,
                                )
                            }
                            V2::Int64(e) => {
                                (
                                    1i32,
                                    ::core::mem::MaybeUninit::new(_rt::as_i64(e) as u64),
                                    0usize,
                                )
                            }
                            V2::Uuid(e) => {
                                let vec1 = e;
                                let ptr1 = vec1.as_ptr().cast::<u8>();
                                let len1 = vec1.len();
                                (
                                    2i32,
                                    {
                                        let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                        t.as_mut_ptr().cast::<*mut u8>().write(ptr1.cast_mut());
                                        t
                                    },
                                    len1,
                                )
                            }
                        };
                        let (result6_0, result6_1, result6_2) = match edge_types {
                            Some(e) => {
                                let vec5 = e;
                                let len5 = vec5.len();
                                let layout5 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec5.len() * 8,
                                    4,
                                );
                                let result5 = if layout5.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout5).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout5);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec5.into_iter().enumerate() {
                                    let base = result5.add(i * 8);
                                    {
                                        let vec4 = e;
                                        let ptr4 = vec4.as_ptr().cast::<u8>();
                                        let len4 = vec4.len();
                                        *base.add(4).cast::<usize>() = len4;
                                        *base.add(0).cast::<*mut u8>() = ptr4.cast_mut();
                                    }
                                }
                                cleanup_list.extend_from_slice(&[(result5, layout5)]);
                                (1i32, result5, len5)
                            }
                            None => (0i32, ::core::ptr::null_mut(), 0usize),
                        };
                        let (result7_0, result7_1) = match limit {
                            Some(e) => (1i32, _rt::as_i32(e)),
                            None => (0i32, 0i32),
                        };
                        let ptr8 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:graph/transactions@1.0.0")]
                        extern "C" {
                            #[link_name = "[method]transaction.get-adjacent-vertices"]
                            fn wit_import(
                                _: i32,
                                _: i32,
                                _: ::core::mem::MaybeUninit<u64>,
                                _: usize,
                                _: i32,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                                _: i32,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: i32,
                            _: ::core::mem::MaybeUninit<u64>,
                            _: usize,
                            _: i32,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: i32,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            result3_0,
                            result3_1,
                            result3_2,
                            direction.clone() as i32,
                            result6_0,
                            result6_1,
                            result6_2,
                            result7_0,
                            result7_1,
                            ptr8,
                        );
                        let l9 = i32::from(*ptr8.add(0).cast::<u8>());
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l9 {
                            0 => {
                                let e = {
                                    let l10 = *ptr8.add(8).cast::<*mut u8>();
                                    let l11 = *ptr8.add(12).cast::<usize>();
                                    let base102 = l10;
                                    let len102 = l11;
                                    let mut result102 = _rt::Vec::with_capacity(len102);
                                    for i in 0..len102 {
                                        let base = base102.add(i * 40);
                                        let e102 = {
                                            let l12 = i32::from(*base.add(0).cast::<u8>());
                                            use super::super::super::golem::graph::types::ElementId as V20;
                                            let v20 = match l12 {
                                                0 => {
                                                    let e20 = {
                                                        let l13 = *base.add(8).cast::<*mut u8>();
                                                        let l14 = *base.add(12).cast::<usize>();
                                                        let len15 = l14;
                                                        let bytes15 = _rt::Vec::from_raw_parts(
                                                            l13.cast(),
                                                            len15,
                                                            len15,
                                                        );
                                                        _rt::string_lift(bytes15)
                                                    };
                                                    V20::StringValue(e20)
                                                }
                                                1 => {
                                                    let e20 = {
                                                        let l16 = *base.add(8).cast::<i64>();
                                                        l16
                                                    };
                                                    V20::Int64(e20)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                    let e20 = {
                                                        let l17 = *base.add(8).cast::<*mut u8>();
                                                        let l18 = *base.add(12).cast::<usize>();
                                                        let len19 = l18;
                                                        let bytes19 = _rt::Vec::from_raw_parts(
                                                            l17.cast(),
                                                            len19,
                                                            len19,
                                                        );
                                                        _rt::string_lift(bytes19)
                                                    };
                                                    V20::Uuid(e20)
                                                }
                                            };
                                            let l21 = *base.add(16).cast::<*mut u8>();
                                            let l22 = *base.add(20).cast::<usize>();
                                            let len23 = l22;
                                            let bytes23 = _rt::Vec::from_raw_parts(
                                                l21.cast(),
                                                len23,
                                                len23,
                                            );
                                            let l24 = *base.add(24).cast::<*mut u8>();
                                            let l25 = *base.add(28).cast::<usize>();
                                            let base29 = l24;
                                            let len29 = l25;
                                            let mut result29 = _rt::Vec::with_capacity(len29);
                                            for i in 0..len29 {
                                                let base = base29.add(i * 8);
                                                let e29 = {
                                                    let l26 = *base.add(0).cast::<*mut u8>();
                                                    let l27 = *base.add(4).cast::<usize>();
                                                    let len28 = l27;
                                                    let bytes28 = _rt::Vec::from_raw_parts(
                                                        l26.cast(),
                                                        len28,
                                                        len28,
                                                    );
                                                    _rt::string_lift(bytes28)
                                                };
                                                result29.push(e29);
                                            }
                                            _rt::cabi_dealloc(base29, len29 * 8, 4);
                                            let l30 = *base.add(32).cast::<*mut u8>();
                                            let l31 = *base.add(36).cast::<usize>();
                                            let base101 = l30;
                                            let len101 = l31;
                                            let mut result101 = _rt::Vec::with_capacity(len101);
                                            for i in 0..len101 {
                                                let base = base101.add(i * 48);
                                                let e101 = {
                                                    let l32 = *base.add(0).cast::<*mut u8>();
                                                    let l33 = *base.add(4).cast::<usize>();
                                                    let len34 = l33;
                                                    let bytes34 = _rt::Vec::from_raw_parts(
                                                        l32.cast(),
                                                        len34,
                                                        len34,
                                                    );
                                                    let l35 = i32::from(*base.add(8).cast::<u8>());
                                                    use super::super::super::golem::graph::types::PropertyValue as V100;
                                                    let v100 = match l35 {
                                                        0 => V100::NullValue,
                                                        1 => {
                                                            let e100 = {
                                                                let l36 = i32::from(*base.add(16).cast::<u8>());
                                                                _rt::bool_lift(l36 as u8)
                                                            };
                                                            V100::Boolean(e100)
                                                        }
                                                        2 => {
                                                            let e100 = {
                                                                let l37 = i32::from(*base.add(16).cast::<i8>());
                                                                l37 as i8
                                                            };
                                                            V100::Int8(e100)
                                                        }
                                                        3 => {
                                                            let e100 = {
                                                                let l38 = i32::from(*base.add(16).cast::<i16>());
                                                                l38 as i16
                                                            };
                                                            V100::Int16(e100)
                                                        }
                                                        4 => {
                                                            let e100 = {
                                                                let l39 = *base.add(16).cast::<i32>();
                                                                l39
                                                            };
                                                            V100::Int32(e100)
                                                        }
                                                        5 => {
                                                            let e100 = {
                                                                let l40 = *base.add(16).cast::<i64>();
                                                                l40
                                                            };
                                                            V100::Int64(e100)
                                                        }
                                                        6 => {
                                                            let e100 = {
                                                                let l41 = i32::from(*base.add(16).cast::<u8>());
                                                                l41 as u8
                                                            };
                                                            V100::Uint8(e100)
                                                        }
                                                        7 => {
                                                            let e100 = {
                                                                let l42 = i32::from(*base.add(16).cast::<u16>());
                                                                l42 as u16
                                                            };
                                                            V100::Uint16(e100)
                                                        }
                                                        8 => {
                                                            let e100 = {
                                                                let l43 = *base.add(16).cast::<i32>();
                                                                l43 as u32
                                                            };
                                                            V100::Uint32(e100)
                                                        }
                                                        9 => {
                                                            let e100 = {
                                                                let l44 = *base.add(16).cast::<i64>();
                                                                l44 as u64
                                                            };
                                                            V100::Uint64(e100)
                                                        }
                                                        10 => {
                                                            let e100 = {
                                                                let l45 = *base.add(16).cast::<f32>();
                                                                l45
                                                            };
                                                            V100::Float32Value(e100)
                                                        }
                                                        11 => {
                                                            let e100 = {
                                                                let l46 = *base.add(16).cast::<f64>();
                                                                l46
                                                            };
                                                            V100::Float64Value(e100)
                                                        }
                                                        12 => {
                                                            let e100 = {
                                                                let l47 = *base.add(16).cast::<*mut u8>();
                                                                let l48 = *base.add(20).cast::<usize>();
                                                                let len49 = l48;
                                                                let bytes49 = _rt::Vec::from_raw_parts(
                                                                    l47.cast(),
                                                                    len49,
                                                                    len49,
                                                                );
                                                                _rt::string_lift(bytes49)
                                                            };
                                                            V100::StringValue(e100)
                                                        }
                                                        13 => {
                                                            let e100 = {
                                                                let l50 = *base.add(16).cast::<*mut u8>();
                                                                let l51 = *base.add(20).cast::<usize>();
                                                                let len52 = l51;
                                                                _rt::Vec::from_raw_parts(l50.cast(), len52, len52)
                                                            };
                                                            V100::Bytes(e100)
                                                        }
                                                        14 => {
                                                            let e100 = {
                                                                let l53 = *base.add(16).cast::<i32>();
                                                                let l54 = i32::from(*base.add(20).cast::<u8>());
                                                                let l55 = i32::from(*base.add(21).cast::<u8>());
                                                                super::super::super::golem::graph::types::Date {
                                                                    year: l53 as u32,
                                                                    month: l54 as u8,
                                                                    day: l55 as u8,
                                                                }
                                                            };
                                                            V100::Date(e100)
                                                        }
                                                        15 => {
                                                            let e100 = {
                                                                let l56 = i32::from(*base.add(16).cast::<u8>());
                                                                let l57 = i32::from(*base.add(17).cast::<u8>());
                                                                let l58 = i32::from(*base.add(18).cast::<u8>());
                                                                let l59 = *base.add(20).cast::<i32>();
                                                                super::super::super::golem::graph::types::Time {
                                                                    hour: l56 as u8,
                                                                    minute: l57 as u8,
                                                                    second: l58 as u8,
                                                                    nanosecond: l59 as u32,
                                                                }
                                                            };
                                                            V100::Time(e100)
                                                        }
                                                        16 => {
                                                            let e100 = {
                                                                let l60 = *base.add(16).cast::<i32>();
                                                                let l61 = i32::from(*base.add(20).cast::<u8>());
                                                                let l62 = i32::from(*base.add(21).cast::<u8>());
                                                                let l63 = i32::from(*base.add(24).cast::<u8>());
                                                                let l64 = i32::from(*base.add(25).cast::<u8>());
                                                                let l65 = i32::from(*base.add(26).cast::<u8>());
                                                                let l66 = *base.add(28).cast::<i32>();
                                                                let l67 = i32::from(*base.add(32).cast::<u8>());
                                                                super::super::super::golem::graph::types::Datetime {
                                                                    date: super::super::super::golem::graph::types::Date {
                                                                        year: l60 as u32,
                                                                        month: l61 as u8,
                                                                        day: l62 as u8,
                                                                    },
                                                                    time: super::super::super::golem::graph::types::Time {
                                                                        hour: l63 as u8,
                                                                        minute: l64 as u8,
                                                                        second: l65 as u8,
                                                                        nanosecond: l66 as u32,
                                                                    },
                                                                    timezone_offset_minutes: match l67 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l68 = i32::from(*base.add(34).cast::<i16>());
                                                                                l68 as i16
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            V100::Datetime(e100)
                                                        }
                                                        17 => {
                                                            let e100 = {
                                                                let l69 = *base.add(16).cast::<i64>();
                                                                let l70 = *base.add(24).cast::<i32>();
                                                                super::super::super::golem::graph::types::Duration {
                                                                    seconds: l69,
                                                                    nanoseconds: l70 as u32,
                                                                }
                                                            };
                                                            V100::Duration(e100)
                                                        }
                                                        18 => {
                                                            let e100 = {
                                                                let l71 = *base.add(16).cast::<f64>();
                                                                let l72 = *base.add(24).cast::<f64>();
                                                                let l73 = i32::from(*base.add(32).cast::<u8>());
                                                                super::super::super::golem::graph::types::Point {
                                                                    longitude: l71,
                                                                    latitude: l72,
                                                                    altitude: match l73 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l74 = *base.add(40).cast::<f64>();
                                                                                l74
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            V100::Point(e100)
                                                        }
                                                        19 => {
                                                            let e100 = {
                                                                let l75 = *base.add(16).cast::<*mut u8>();
                                                                let l76 = *base.add(20).cast::<usize>();
                                                                let base81 = l75;
                                                                let len81 = l76;
                                                                let mut result81 = _rt::Vec::with_capacity(len81);
                                                                for i in 0..len81 {
                                                                    let base = base81.add(i * 32);
                                                                    let e81 = {
                                                                        let l77 = *base.add(0).cast::<f64>();
                                                                        let l78 = *base.add(8).cast::<f64>();
                                                                        let l79 = i32::from(*base.add(16).cast::<u8>());
                                                                        super::super::super::golem::graph::types::Point {
                                                                            longitude: l77,
                                                                            latitude: l78,
                                                                            altitude: match l79 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l80 = *base.add(24).cast::<f64>();
                                                                                        l80
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            },
                                                                        }
                                                                    };
                                                                    result81.push(e81);
                                                                }
                                                                _rt::cabi_dealloc(base81, len81 * 32, 8);
                                                                super::super::super::golem::graph::types::Linestring {
                                                                    coordinates: result81,
                                                                }
                                                            };
                                                            V100::Linestring(e100)
                                                        }
                                                        n => {
                                                            debug_assert_eq!(n, 20, "invalid enum discriminant");
                                                            let e100 = {
                                                                let l82 = *base.add(16).cast::<*mut u8>();
                                                                let l83 = *base.add(20).cast::<usize>();
                                                                let base88 = l82;
                                                                let len88 = l83;
                                                                let mut result88 = _rt::Vec::with_capacity(len88);
                                                                for i in 0..len88 {
                                                                    let base = base88.add(i * 32);
                                                                    let e88 = {
                                                                        let l84 = *base.add(0).cast::<f64>();
                                                                        let l85 = *base.add(8).cast::<f64>();
                                                                        let l86 = i32::from(*base.add(16).cast::<u8>());
                                                                        super::super::super::golem::graph::types::Point {
                                                                            longitude: l84,
                                                                            latitude: l85,
                                                                            altitude: match l86 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l87 = *base.add(24).cast::<f64>();
                                                                                        l87
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            },
                                                                        }
                                                                    };
                                                                    result88.push(e88);
                                                                }
                                                                _rt::cabi_dealloc(base88, len88 * 32, 8);
                                                                let l89 = i32::from(*base.add(24).cast::<u8>());
                                                                super::super::super::golem::graph::types::Polygon {
                                                                    exterior: result88,
                                                                    holes: match l89 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l90 = *base.add(28).cast::<*mut u8>();
                                                                                let l91 = *base.add(32).cast::<usize>();
                                                                                let base99 = l90;
                                                                                let len99 = l91;
                                                                                let mut result99 = _rt::Vec::with_capacity(len99);
                                                                                for i in 0..len99 {
                                                                                    let base = base99.add(i * 8);
                                                                                    let e99 = {
                                                                                        let l92 = *base.add(0).cast::<*mut u8>();
                                                                                        let l93 = *base.add(4).cast::<usize>();
                                                                                        let base98 = l92;
                                                                                        let len98 = l93;
                                                                                        let mut result98 = _rt::Vec::with_capacity(len98);
                                                                                        for i in 0..len98 {
                                                                                            let base = base98.add(i * 32);
                                                                                            let e98 = {
                                                                                                let l94 = *base.add(0).cast::<f64>();
                                                                                                let l95 = *base.add(8).cast::<f64>();
                                                                                                let l96 = i32::from(*base.add(16).cast::<u8>());
                                                                                                super::super::super::golem::graph::types::Point {
                                                                                                    longitude: l94,
                                                                                                    latitude: l95,
                                                                                                    altitude: match l96 {
                                                                                                        0 => None,
                                                                                                        1 => {
                                                                                                            let e = {
                                                                                                                let l97 = *base.add(24).cast::<f64>();
                                                                                                                l97
                                                                                                            };
                                                                                                            Some(e)
                                                                                                        }
                                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                                    },
                                                                                                }
                                                                                            };
                                                                                            result98.push(e98);
                                                                                        }
                                                                                        _rt::cabi_dealloc(base98, len98 * 32, 8);
                                                                                        result98
                                                                                    };
                                                                                    result99.push(e99);
                                                                                }
                                                                                _rt::cabi_dealloc(base99, len99 * 8, 4);
                                                                                result99
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            V100::Polygon(e100)
                                                        }
                                                    };
                                                    (_rt::string_lift(bytes34), v100)
                                                };
                                                result101.push(e101);
                                            }
                                            _rt::cabi_dealloc(base101, len101 * 48, 8);
                                            super::super::super::golem::graph::types::Vertex {
                                                id: v20,
                                                vertex_type: _rt::string_lift(bytes23),
                                                additional_labels: result29,
                                                properties: result101,
                                            }
                                        };
                                        result102.push(e102);
                                    }
                                    _rt::cabi_dealloc(base102, len102 * 40, 8);
                                    result102
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l103 = i32::from(*ptr8.add(8).cast::<u8>());
                                    use super::super::super::golem::graph::errors::GraphError as V158;
                                    let v158 = match l103 {
                                        0 => {
                                            let e158 = {
                                                let l104 = *ptr8.add(16).cast::<*mut u8>();
                                                let l105 = *ptr8.add(20).cast::<usize>();
                                                let len106 = l105;
                                                let bytes106 = _rt::Vec::from_raw_parts(
                                                    l104.cast(),
                                                    len106,
                                                    len106,
                                                );
                                                _rt::string_lift(bytes106)
                                            };
                                            V158::UnsupportedOperation(e158)
                                        }
                                        1 => {
                                            let e158 = {
                                                let l107 = *ptr8.add(16).cast::<*mut u8>();
                                                let l108 = *ptr8.add(20).cast::<usize>();
                                                let len109 = l108;
                                                let bytes109 = _rt::Vec::from_raw_parts(
                                                    l107.cast(),
                                                    len109,
                                                    len109,
                                                );
                                                _rt::string_lift(bytes109)
                                            };
                                            V158::ConnectionFailed(e158)
                                        }
                                        2 => {
                                            let e158 = {
                                                let l110 = *ptr8.add(16).cast::<*mut u8>();
                                                let l111 = *ptr8.add(20).cast::<usize>();
                                                let len112 = l111;
                                                let bytes112 = _rt::Vec::from_raw_parts(
                                                    l110.cast(),
                                                    len112,
                                                    len112,
                                                );
                                                _rt::string_lift(bytes112)
                                            };
                                            V158::AuthenticationFailed(e158)
                                        }
                                        3 => {
                                            let e158 = {
                                                let l113 = *ptr8.add(16).cast::<*mut u8>();
                                                let l114 = *ptr8.add(20).cast::<usize>();
                                                let len115 = l114;
                                                let bytes115 = _rt::Vec::from_raw_parts(
                                                    l113.cast(),
                                                    len115,
                                                    len115,
                                                );
                                                _rt::string_lift(bytes115)
                                            };
                                            V158::AuthorizationFailed(e158)
                                        }
                                        4 => {
                                            let e158 = {
                                                let l116 = i32::from(*ptr8.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V124;
                                                let v124 = match l116 {
                                                    0 => {
                                                        let e124 = {
                                                            let l117 = *ptr8.add(24).cast::<*mut u8>();
                                                            let l118 = *ptr8.add(28).cast::<usize>();
                                                            let len119 = l118;
                                                            let bytes119 = _rt::Vec::from_raw_parts(
                                                                l117.cast(),
                                                                len119,
                                                                len119,
                                                            );
                                                            _rt::string_lift(bytes119)
                                                        };
                                                        V124::StringValue(e124)
                                                    }
                                                    1 => {
                                                        let e124 = {
                                                            let l120 = *ptr8.add(24).cast::<i64>();
                                                            l120
                                                        };
                                                        V124::Int64(e124)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e124 = {
                                                            let l121 = *ptr8.add(24).cast::<*mut u8>();
                                                            let l122 = *ptr8.add(28).cast::<usize>();
                                                            let len123 = l122;
                                                            let bytes123 = _rt::Vec::from_raw_parts(
                                                                l121.cast(),
                                                                len123,
                                                                len123,
                                                            );
                                                            _rt::string_lift(bytes123)
                                                        };
                                                        V124::Uuid(e124)
                                                    }
                                                };
                                                v124
                                            };
                                            V158::ElementNotFound(e158)
                                        }
                                        5 => {
                                            let e158 = {
                                                let l125 = i32::from(*ptr8.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V133;
                                                let v133 = match l125 {
                                                    0 => {
                                                        let e133 = {
                                                            let l126 = *ptr8.add(24).cast::<*mut u8>();
                                                            let l127 = *ptr8.add(28).cast::<usize>();
                                                            let len128 = l127;
                                                            let bytes128 = _rt::Vec::from_raw_parts(
                                                                l126.cast(),
                                                                len128,
                                                                len128,
                                                            );
                                                            _rt::string_lift(bytes128)
                                                        };
                                                        V133::StringValue(e133)
                                                    }
                                                    1 => {
                                                        let e133 = {
                                                            let l129 = *ptr8.add(24).cast::<i64>();
                                                            l129
                                                        };
                                                        V133::Int64(e133)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e133 = {
                                                            let l130 = *ptr8.add(24).cast::<*mut u8>();
                                                            let l131 = *ptr8.add(28).cast::<usize>();
                                                            let len132 = l131;
                                                            let bytes132 = _rt::Vec::from_raw_parts(
                                                                l130.cast(),
                                                                len132,
                                                                len132,
                                                            );
                                                            _rt::string_lift(bytes132)
                                                        };
                                                        V133::Uuid(e133)
                                                    }
                                                };
                                                v133
                                            };
                                            V158::DuplicateElement(e158)
                                        }
                                        6 => {
                                            let e158 = {
                                                let l134 = *ptr8.add(16).cast::<*mut u8>();
                                                let l135 = *ptr8.add(20).cast::<usize>();
                                                let len136 = l135;
                                                let bytes136 = _rt::Vec::from_raw_parts(
                                                    l134.cast(),
                                                    len136,
                                                    len136,
                                                );
                                                _rt::string_lift(bytes136)
                                            };
                                            V158::SchemaViolation(e158)
                                        }
                                        7 => {
                                            let e158 = {
                                                let l137 = *ptr8.add(16).cast::<*mut u8>();
                                                let l138 = *ptr8.add(20).cast::<usize>();
                                                let len139 = l138;
                                                let bytes139 = _rt::Vec::from_raw_parts(
                                                    l137.cast(),
                                                    len139,
                                                    len139,
                                                );
                                                _rt::string_lift(bytes139)
                                            };
                                            V158::ConstraintViolation(e158)
                                        }
                                        8 => {
                                            let e158 = {
                                                let l140 = *ptr8.add(16).cast::<*mut u8>();
                                                let l141 = *ptr8.add(20).cast::<usize>();
                                                let len142 = l141;
                                                let bytes142 = _rt::Vec::from_raw_parts(
                                                    l140.cast(),
                                                    len142,
                                                    len142,
                                                );
                                                _rt::string_lift(bytes142)
                                            };
                                            V158::InvalidPropertyType(e158)
                                        }
                                        9 => {
                                            let e158 = {
                                                let l143 = *ptr8.add(16).cast::<*mut u8>();
                                                let l144 = *ptr8.add(20).cast::<usize>();
                                                let len145 = l144;
                                                let bytes145 = _rt::Vec::from_raw_parts(
                                                    l143.cast(),
                                                    len145,
                                                    len145,
                                                );
                                                _rt::string_lift(bytes145)
                                            };
                                            V158::InvalidQuery(e158)
                                        }
                                        10 => {
                                            let e158 = {
                                                let l146 = *ptr8.add(16).cast::<*mut u8>();
                                                let l147 = *ptr8.add(20).cast::<usize>();
                                                let len148 = l147;
                                                let bytes148 = _rt::Vec::from_raw_parts(
                                                    l146.cast(),
                                                    len148,
                                                    len148,
                                                );
                                                _rt::string_lift(bytes148)
                                            };
                                            V158::TransactionFailed(e158)
                                        }
                                        11 => V158::TransactionConflict,
                                        12 => V158::TransactionTimeout,
                                        13 => V158::DeadlockDetected,
                                        14 => V158::Timeout,
                                        15 => {
                                            let e158 = {
                                                let l149 = *ptr8.add(16).cast::<*mut u8>();
                                                let l150 = *ptr8.add(20).cast::<usize>();
                                                let len151 = l150;
                                                let bytes151 = _rt::Vec::from_raw_parts(
                                                    l149.cast(),
                                                    len151,
                                                    len151,
                                                );
                                                _rt::string_lift(bytes151)
                                            };
                                            V158::ResourceExhausted(e158)
                                        }
                                        16 => {
                                            let e158 = {
                                                let l152 = *ptr8.add(16).cast::<*mut u8>();
                                                let l153 = *ptr8.add(20).cast::<usize>();
                                                let len154 = l153;
                                                let bytes154 = _rt::Vec::from_raw_parts(
                                                    l152.cast(),
                                                    len154,
                                                    len154,
                                                );
                                                _rt::string_lift(bytes154)
                                            };
                                            V158::InternalError(e158)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 17, "invalid enum discriminant");
                                            let e158 = {
                                                let l155 = *ptr8.add(16).cast::<*mut u8>();
                                                let l156 = *ptr8.add(20).cast::<usize>();
                                                let len157 = l156;
                                                let bytes157 = _rt::Vec::from_raw_parts(
                                                    l155.cast(),
                                                    len157,
                                                    len157,
                                                );
                                                _rt::string_lift(bytes157)
                                            };
                                            V158::ServiceUnavailable(e158)
                                        }
                                    };
                                    v158
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Transaction {
                #[allow(unused_unsafe, clippy::all)]
                /// Get edges connected to a vertex
                pub fn get_connected_edges(
                    &self,
                    vertex_id: &ElementId,
                    direction: Direction,
                    edge_types: Option<&[_rt::String]>,
                    limit: Option<u32>,
                ) -> Result<_rt::Vec<Edge>, GraphError> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 32]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 32],
                        );
                        use super::super::super::golem::graph::types::ElementId as V2;
                        let (result3_0, result3_1, result3_2) = match vertex_id {
                            V2::StringValue(e) => {
                                let vec0 = e;
                                let ptr0 = vec0.as_ptr().cast::<u8>();
                                let len0 = vec0.len();
                                (
                                    0i32,
                                    {
                                        let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                        t.as_mut_ptr().cast::<*mut u8>().write(ptr0.cast_mut());
                                        t
                                    },
                                    len0,
                                )
                            }
                            V2::Int64(e) => {
                                (
                                    1i32,
                                    ::core::mem::MaybeUninit::new(_rt::as_i64(e) as u64),
                                    0usize,
                                )
                            }
                            V2::Uuid(e) => {
                                let vec1 = e;
                                let ptr1 = vec1.as_ptr().cast::<u8>();
                                let len1 = vec1.len();
                                (
                                    2i32,
                                    {
                                        let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                        t.as_mut_ptr().cast::<*mut u8>().write(ptr1.cast_mut());
                                        t
                                    },
                                    len1,
                                )
                            }
                        };
                        let (result6_0, result6_1, result6_2) = match edge_types {
                            Some(e) => {
                                let vec5 = e;
                                let len5 = vec5.len();
                                let layout5 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec5.len() * 8,
                                    4,
                                );
                                let result5 = if layout5.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout5).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout5);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec5.into_iter().enumerate() {
                                    let base = result5.add(i * 8);
                                    {
                                        let vec4 = e;
                                        let ptr4 = vec4.as_ptr().cast::<u8>();
                                        let len4 = vec4.len();
                                        *base.add(4).cast::<usize>() = len4;
                                        *base.add(0).cast::<*mut u8>() = ptr4.cast_mut();
                                    }
                                }
                                cleanup_list.extend_from_slice(&[(result5, layout5)]);
                                (1i32, result5, len5)
                            }
                            None => (0i32, ::core::ptr::null_mut(), 0usize),
                        };
                        let (result7_0, result7_1) = match limit {
                            Some(e) => (1i32, _rt::as_i32(e)),
                            None => (0i32, 0i32),
                        };
                        let ptr8 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:graph/transactions@1.0.0")]
                        extern "C" {
                            #[link_name = "[method]transaction.get-connected-edges"]
                            fn wit_import(
                                _: i32,
                                _: i32,
                                _: ::core::mem::MaybeUninit<u64>,
                                _: usize,
                                _: i32,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                                _: i32,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: i32,
                            _: ::core::mem::MaybeUninit<u64>,
                            _: usize,
                            _: i32,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: i32,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            result3_0,
                            result3_1,
                            result3_2,
                            direction.clone() as i32,
                            result6_0,
                            result6_1,
                            result6_2,
                            result7_0,
                            result7_1,
                            ptr8,
                        );
                        let l9 = i32::from(*ptr8.add(0).cast::<u8>());
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l9 {
                            0 => {
                                let e = {
                                    let l10 = *ptr8.add(8).cast::<*mut u8>();
                                    let l11 = *ptr8.add(12).cast::<usize>();
                                    let base114 = l10;
                                    let len114 = l11;
                                    let mut result114 = _rt::Vec::with_capacity(len114);
                                    for i in 0..len114 {
                                        let base = base114.add(i * 64);
                                        let e114 = {
                                            let l12 = i32::from(*base.add(0).cast::<u8>());
                                            use super::super::super::golem::graph::types::ElementId as V20;
                                            let v20 = match l12 {
                                                0 => {
                                                    let e20 = {
                                                        let l13 = *base.add(8).cast::<*mut u8>();
                                                        let l14 = *base.add(12).cast::<usize>();
                                                        let len15 = l14;
                                                        let bytes15 = _rt::Vec::from_raw_parts(
                                                            l13.cast(),
                                                            len15,
                                                            len15,
                                                        );
                                                        _rt::string_lift(bytes15)
                                                    };
                                                    V20::StringValue(e20)
                                                }
                                                1 => {
                                                    let e20 = {
                                                        let l16 = *base.add(8).cast::<i64>();
                                                        l16
                                                    };
                                                    V20::Int64(e20)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                    let e20 = {
                                                        let l17 = *base.add(8).cast::<*mut u8>();
                                                        let l18 = *base.add(12).cast::<usize>();
                                                        let len19 = l18;
                                                        let bytes19 = _rt::Vec::from_raw_parts(
                                                            l17.cast(),
                                                            len19,
                                                            len19,
                                                        );
                                                        _rt::string_lift(bytes19)
                                                    };
                                                    V20::Uuid(e20)
                                                }
                                            };
                                            let l21 = *base.add(16).cast::<*mut u8>();
                                            let l22 = *base.add(20).cast::<usize>();
                                            let len23 = l22;
                                            let bytes23 = _rt::Vec::from_raw_parts(
                                                l21.cast(),
                                                len23,
                                                len23,
                                            );
                                            let l24 = i32::from(*base.add(24).cast::<u8>());
                                            use super::super::super::golem::graph::types::ElementId as V32;
                                            let v32 = match l24 {
                                                0 => {
                                                    let e32 = {
                                                        let l25 = *base.add(32).cast::<*mut u8>();
                                                        let l26 = *base.add(36).cast::<usize>();
                                                        let len27 = l26;
                                                        let bytes27 = _rt::Vec::from_raw_parts(
                                                            l25.cast(),
                                                            len27,
                                                            len27,
                                                        );
                                                        _rt::string_lift(bytes27)
                                                    };
                                                    V32::StringValue(e32)
                                                }
                                                1 => {
                                                    let e32 = {
                                                        let l28 = *base.add(32).cast::<i64>();
                                                        l28
                                                    };
                                                    V32::Int64(e32)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                    let e32 = {
                                                        let l29 = *base.add(32).cast::<*mut u8>();
                                                        let l30 = *base.add(36).cast::<usize>();
                                                        let len31 = l30;
                                                        let bytes31 = _rt::Vec::from_raw_parts(
                                                            l29.cast(),
                                                            len31,
                                                            len31,
                                                        );
                                                        _rt::string_lift(bytes31)
                                                    };
                                                    V32::Uuid(e32)
                                                }
                                            };
                                            let l33 = i32::from(*base.add(40).cast::<u8>());
                                            use super::super::super::golem::graph::types::ElementId as V41;
                                            let v41 = match l33 {
                                                0 => {
                                                    let e41 = {
                                                        let l34 = *base.add(48).cast::<*mut u8>();
                                                        let l35 = *base.add(52).cast::<usize>();
                                                        let len36 = l35;
                                                        let bytes36 = _rt::Vec::from_raw_parts(
                                                            l34.cast(),
                                                            len36,
                                                            len36,
                                                        );
                                                        _rt::string_lift(bytes36)
                                                    };
                                                    V41::StringValue(e41)
                                                }
                                                1 => {
                                                    let e41 = {
                                                        let l37 = *base.add(48).cast::<i64>();
                                                        l37
                                                    };
                                                    V41::Int64(e41)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                    let e41 = {
                                                        let l38 = *base.add(48).cast::<*mut u8>();
                                                        let l39 = *base.add(52).cast::<usize>();
                                                        let len40 = l39;
                                                        let bytes40 = _rt::Vec::from_raw_parts(
                                                            l38.cast(),
                                                            len40,
                                                            len40,
                                                        );
                                                        _rt::string_lift(bytes40)
                                                    };
                                                    V41::Uuid(e41)
                                                }
                                            };
                                            let l42 = *base.add(56).cast::<*mut u8>();
                                            let l43 = *base.add(60).cast::<usize>();
                                            let base113 = l42;
                                            let len113 = l43;
                                            let mut result113 = _rt::Vec::with_capacity(len113);
                                            for i in 0..len113 {
                                                let base = base113.add(i * 48);
                                                let e113 = {
                                                    let l44 = *base.add(0).cast::<*mut u8>();
                                                    let l45 = *base.add(4).cast::<usize>();
                                                    let len46 = l45;
                                                    let bytes46 = _rt::Vec::from_raw_parts(
                                                        l44.cast(),
                                                        len46,
                                                        len46,
                                                    );
                                                    let l47 = i32::from(*base.add(8).cast::<u8>());
                                                    use super::super::super::golem::graph::types::PropertyValue as V112;
                                                    let v112 = match l47 {
                                                        0 => V112::NullValue,
                                                        1 => {
                                                            let e112 = {
                                                                let l48 = i32::from(*base.add(16).cast::<u8>());
                                                                _rt::bool_lift(l48 as u8)
                                                            };
                                                            V112::Boolean(e112)
                                                        }
                                                        2 => {
                                                            let e112 = {
                                                                let l49 = i32::from(*base.add(16).cast::<i8>());
                                                                l49 as i8
                                                            };
                                                            V112::Int8(e112)
                                                        }
                                                        3 => {
                                                            let e112 = {
                                                                let l50 = i32::from(*base.add(16).cast::<i16>());
                                                                l50 as i16
                                                            };
                                                            V112::Int16(e112)
                                                        }
                                                        4 => {
                                                            let e112 = {
                                                                let l51 = *base.add(16).cast::<i32>();
                                                                l51
                                                            };
                                                            V112::Int32(e112)
                                                        }
                                                        5 => {
                                                            let e112 = {
                                                                let l52 = *base.add(16).cast::<i64>();
                                                                l52
                                                            };
                                                            V112::Int64(e112)
                                                        }
                                                        6 => {
                                                            let e112 = {
                                                                let l53 = i32::from(*base.add(16).cast::<u8>());
                                                                l53 as u8
                                                            };
                                                            V112::Uint8(e112)
                                                        }
                                                        7 => {
                                                            let e112 = {
                                                                let l54 = i32::from(*base.add(16).cast::<u16>());
                                                                l54 as u16
                                                            };
                                                            V112::Uint16(e112)
                                                        }
                                                        8 => {
                                                            let e112 = {
                                                                let l55 = *base.add(16).cast::<i32>();
                                                                l55 as u32
                                                            };
                                                            V112::Uint32(e112)
                                                        }
                                                        9 => {
                                                            let e112 = {
                                                                let l56 = *base.add(16).cast::<i64>();
                                                                l56 as u64
                                                            };
                                                            V112::Uint64(e112)
                                                        }
                                                        10 => {
                                                            let e112 = {
                                                                let l57 = *base.add(16).cast::<f32>();
                                                                l57
                                                            };
                                                            V112::Float32Value(e112)
                                                        }
                                                        11 => {
                                                            let e112 = {
                                                                let l58 = *base.add(16).cast::<f64>();
                                                                l58
                                                            };
                                                            V112::Float64Value(e112)
                                                        }
                                                        12 => {
                                                            let e112 = {
                                                                let l59 = *base.add(16).cast::<*mut u8>();
                                                                let l60 = *base.add(20).cast::<usize>();
                                                                let len61 = l60;
                                                                let bytes61 = _rt::Vec::from_raw_parts(
                                                                    l59.cast(),
                                                                    len61,
                                                                    len61,
                                                                );
                                                                _rt::string_lift(bytes61)
                                                            };
                                                            V112::StringValue(e112)
                                                        }
                                                        13 => {
                                                            let e112 = {
                                                                let l62 = *base.add(16).cast::<*mut u8>();
                                                                let l63 = *base.add(20).cast::<usize>();
                                                                let len64 = l63;
                                                                _rt::Vec::from_raw_parts(l62.cast(), len64, len64)
                                                            };
                                                            V112::Bytes(e112)
                                                        }
                                                        14 => {
                                                            let e112 = {
                                                                let l65 = *base.add(16).cast::<i32>();
                                                                let l66 = i32::from(*base.add(20).cast::<u8>());
                                                                let l67 = i32::from(*base.add(21).cast::<u8>());
                                                                super::super::super::golem::graph::types::Date {
                                                                    year: l65 as u32,
                                                                    month: l66 as u8,
                                                                    day: l67 as u8,
                                                                }
                                                            };
                                                            V112::Date(e112)
                                                        }
                                                        15 => {
                                                            let e112 = {
                                                                let l68 = i32::from(*base.add(16).cast::<u8>());
                                                                let l69 = i32::from(*base.add(17).cast::<u8>());
                                                                let l70 = i32::from(*base.add(18).cast::<u8>());
                                                                let l71 = *base.add(20).cast::<i32>();
                                                                super::super::super::golem::graph::types::Time {
                                                                    hour: l68 as u8,
                                                                    minute: l69 as u8,
                                                                    second: l70 as u8,
                                                                    nanosecond: l71 as u32,
                                                                }
                                                            };
                                                            V112::Time(e112)
                                                        }
                                                        16 => {
                                                            let e112 = {
                                                                let l72 = *base.add(16).cast::<i32>();
                                                                let l73 = i32::from(*base.add(20).cast::<u8>());
                                                                let l74 = i32::from(*base.add(21).cast::<u8>());
                                                                let l75 = i32::from(*base.add(24).cast::<u8>());
                                                                let l76 = i32::from(*base.add(25).cast::<u8>());
                                                                let l77 = i32::from(*base.add(26).cast::<u8>());
                                                                let l78 = *base.add(28).cast::<i32>();
                                                                let l79 = i32::from(*base.add(32).cast::<u8>());
                                                                super::super::super::golem::graph::types::Datetime {
                                                                    date: super::super::super::golem::graph::types::Date {
                                                                        year: l72 as u32,
                                                                        month: l73 as u8,
                                                                        day: l74 as u8,
                                                                    },
                                                                    time: super::super::super::golem::graph::types::Time {
                                                                        hour: l75 as u8,
                                                                        minute: l76 as u8,
                                                                        second: l77 as u8,
                                                                        nanosecond: l78 as u32,
                                                                    },
                                                                    timezone_offset_minutes: match l79 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l80 = i32::from(*base.add(34).cast::<i16>());
                                                                                l80 as i16
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            V112::Datetime(e112)
                                                        }
                                                        17 => {
                                                            let e112 = {
                                                                let l81 = *base.add(16).cast::<i64>();
                                                                let l82 = *base.add(24).cast::<i32>();
                                                                super::super::super::golem::graph::types::Duration {
                                                                    seconds: l81,
                                                                    nanoseconds: l82 as u32,
                                                                }
                                                            };
                                                            V112::Duration(e112)
                                                        }
                                                        18 => {
                                                            let e112 = {
                                                                let l83 = *base.add(16).cast::<f64>();
                                                                let l84 = *base.add(24).cast::<f64>();
                                                                let l85 = i32::from(*base.add(32).cast::<u8>());
                                                                super::super::super::golem::graph::types::Point {
                                                                    longitude: l83,
                                                                    latitude: l84,
                                                                    altitude: match l85 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l86 = *base.add(40).cast::<f64>();
                                                                                l86
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            V112::Point(e112)
                                                        }
                                                        19 => {
                                                            let e112 = {
                                                                let l87 = *base.add(16).cast::<*mut u8>();
                                                                let l88 = *base.add(20).cast::<usize>();
                                                                let base93 = l87;
                                                                let len93 = l88;
                                                                let mut result93 = _rt::Vec::with_capacity(len93);
                                                                for i in 0..len93 {
                                                                    let base = base93.add(i * 32);
                                                                    let e93 = {
                                                                        let l89 = *base.add(0).cast::<f64>();
                                                                        let l90 = *base.add(8).cast::<f64>();
                                                                        let l91 = i32::from(*base.add(16).cast::<u8>());
                                                                        super::super::super::golem::graph::types::Point {
                                                                            longitude: l89,
                                                                            latitude: l90,
                                                                            altitude: match l91 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l92 = *base.add(24).cast::<f64>();
                                                                                        l92
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            },
                                                                        }
                                                                    };
                                                                    result93.push(e93);
                                                                }
                                                                _rt::cabi_dealloc(base93, len93 * 32, 8);
                                                                super::super::super::golem::graph::types::Linestring {
                                                                    coordinates: result93,
                                                                }
                                                            };
                                                            V112::Linestring(e112)
                                                        }
                                                        n => {
                                                            debug_assert_eq!(n, 20, "invalid enum discriminant");
                                                            let e112 = {
                                                                let l94 = *base.add(16).cast::<*mut u8>();
                                                                let l95 = *base.add(20).cast::<usize>();
                                                                let base100 = l94;
                                                                let len100 = l95;
                                                                let mut result100 = _rt::Vec::with_capacity(len100);
                                                                for i in 0..len100 {
                                                                    let base = base100.add(i * 32);
                                                                    let e100 = {
                                                                        let l96 = *base.add(0).cast::<f64>();
                                                                        let l97 = *base.add(8).cast::<f64>();
                                                                        let l98 = i32::from(*base.add(16).cast::<u8>());
                                                                        super::super::super::golem::graph::types::Point {
                                                                            longitude: l96,
                                                                            latitude: l97,
                                                                            altitude: match l98 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l99 = *base.add(24).cast::<f64>();
                                                                                        l99
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            },
                                                                        }
                                                                    };
                                                                    result100.push(e100);
                                                                }
                                                                _rt::cabi_dealloc(base100, len100 * 32, 8);
                                                                let l101 = i32::from(*base.add(24).cast::<u8>());
                                                                super::super::super::golem::graph::types::Polygon {
                                                                    exterior: result100,
                                                                    holes: match l101 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l102 = *base.add(28).cast::<*mut u8>();
                                                                                let l103 = *base.add(32).cast::<usize>();
                                                                                let base111 = l102;
                                                                                let len111 = l103;
                                                                                let mut result111 = _rt::Vec::with_capacity(len111);
                                                                                for i in 0..len111 {
                                                                                    let base = base111.add(i * 8);
                                                                                    let e111 = {
                                                                                        let l104 = *base.add(0).cast::<*mut u8>();
                                                                                        let l105 = *base.add(4).cast::<usize>();
                                                                                        let base110 = l104;
                                                                                        let len110 = l105;
                                                                                        let mut result110 = _rt::Vec::with_capacity(len110);
                                                                                        for i in 0..len110 {
                                                                                            let base = base110.add(i * 32);
                                                                                            let e110 = {
                                                                                                let l106 = *base.add(0).cast::<f64>();
                                                                                                let l107 = *base.add(8).cast::<f64>();
                                                                                                let l108 = i32::from(*base.add(16).cast::<u8>());
                                                                                                super::super::super::golem::graph::types::Point {
                                                                                                    longitude: l106,
                                                                                                    latitude: l107,
                                                                                                    altitude: match l108 {
                                                                                                        0 => None,
                                                                                                        1 => {
                                                                                                            let e = {
                                                                                                                let l109 = *base.add(24).cast::<f64>();
                                                                                                                l109
                                                                                                            };
                                                                                                            Some(e)
                                                                                                        }
                                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                                    },
                                                                                                }
                                                                                            };
                                                                                            result110.push(e110);
                                                                                        }
                                                                                        _rt::cabi_dealloc(base110, len110 * 32, 8);
                                                                                        result110
                                                                                    };
                                                                                    result111.push(e111);
                                                                                }
                                                                                _rt::cabi_dealloc(base111, len111 * 8, 4);
                                                                                result111
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            V112::Polygon(e112)
                                                        }
                                                    };
                                                    (_rt::string_lift(bytes46), v112)
                                                };
                                                result113.push(e113);
                                            }
                                            _rt::cabi_dealloc(base113, len113 * 48, 8);
                                            super::super::super::golem::graph::types::Edge {
                                                id: v20,
                                                edge_type: _rt::string_lift(bytes23),
                                                from_vertex: v32,
                                                to_vertex: v41,
                                                properties: result113,
                                            }
                                        };
                                        result114.push(e114);
                                    }
                                    _rt::cabi_dealloc(base114, len114 * 64, 8);
                                    result114
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l115 = i32::from(*ptr8.add(8).cast::<u8>());
                                    use super::super::super::golem::graph::errors::GraphError as V170;
                                    let v170 = match l115 {
                                        0 => {
                                            let e170 = {
                                                let l116 = *ptr8.add(16).cast::<*mut u8>();
                                                let l117 = *ptr8.add(20).cast::<usize>();
                                                let len118 = l117;
                                                let bytes118 = _rt::Vec::from_raw_parts(
                                                    l116.cast(),
                                                    len118,
                                                    len118,
                                                );
                                                _rt::string_lift(bytes118)
                                            };
                                            V170::UnsupportedOperation(e170)
                                        }
                                        1 => {
                                            let e170 = {
                                                let l119 = *ptr8.add(16).cast::<*mut u8>();
                                                let l120 = *ptr8.add(20).cast::<usize>();
                                                let len121 = l120;
                                                let bytes121 = _rt::Vec::from_raw_parts(
                                                    l119.cast(),
                                                    len121,
                                                    len121,
                                                );
                                                _rt::string_lift(bytes121)
                                            };
                                            V170::ConnectionFailed(e170)
                                        }
                                        2 => {
                                            let e170 = {
                                                let l122 = *ptr8.add(16).cast::<*mut u8>();
                                                let l123 = *ptr8.add(20).cast::<usize>();
                                                let len124 = l123;
                                                let bytes124 = _rt::Vec::from_raw_parts(
                                                    l122.cast(),
                                                    len124,
                                                    len124,
                                                );
                                                _rt::string_lift(bytes124)
                                            };
                                            V170::AuthenticationFailed(e170)
                                        }
                                        3 => {
                                            let e170 = {
                                                let l125 = *ptr8.add(16).cast::<*mut u8>();
                                                let l126 = *ptr8.add(20).cast::<usize>();
                                                let len127 = l126;
                                                let bytes127 = _rt::Vec::from_raw_parts(
                                                    l125.cast(),
                                                    len127,
                                                    len127,
                                                );
                                                _rt::string_lift(bytes127)
                                            };
                                            V170::AuthorizationFailed(e170)
                                        }
                                        4 => {
                                            let e170 = {
                                                let l128 = i32::from(*ptr8.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V136;
                                                let v136 = match l128 {
                                                    0 => {
                                                        let e136 = {
                                                            let l129 = *ptr8.add(24).cast::<*mut u8>();
                                                            let l130 = *ptr8.add(28).cast::<usize>();
                                                            let len131 = l130;
                                                            let bytes131 = _rt::Vec::from_raw_parts(
                                                                l129.cast(),
                                                                len131,
                                                                len131,
                                                            );
                                                            _rt::string_lift(bytes131)
                                                        };
                                                        V136::StringValue(e136)
                                                    }
                                                    1 => {
                                                        let e136 = {
                                                            let l132 = *ptr8.add(24).cast::<i64>();
                                                            l132
                                                        };
                                                        V136::Int64(e136)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e136 = {
                                                            let l133 = *ptr8.add(24).cast::<*mut u8>();
                                                            let l134 = *ptr8.add(28).cast::<usize>();
                                                            let len135 = l134;
                                                            let bytes135 = _rt::Vec::from_raw_parts(
                                                                l133.cast(),
                                                                len135,
                                                                len135,
                                                            );
                                                            _rt::string_lift(bytes135)
                                                        };
                                                        V136::Uuid(e136)
                                                    }
                                                };
                                                v136
                                            };
                                            V170::ElementNotFound(e170)
                                        }
                                        5 => {
                                            let e170 = {
                                                let l137 = i32::from(*ptr8.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V145;
                                                let v145 = match l137 {
                                                    0 => {
                                                        let e145 = {
                                                            let l138 = *ptr8.add(24).cast::<*mut u8>();
                                                            let l139 = *ptr8.add(28).cast::<usize>();
                                                            let len140 = l139;
                                                            let bytes140 = _rt::Vec::from_raw_parts(
                                                                l138.cast(),
                                                                len140,
                                                                len140,
                                                            );
                                                            _rt::string_lift(bytes140)
                                                        };
                                                        V145::StringValue(e145)
                                                    }
                                                    1 => {
                                                        let e145 = {
                                                            let l141 = *ptr8.add(24).cast::<i64>();
                                                            l141
                                                        };
                                                        V145::Int64(e145)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e145 = {
                                                            let l142 = *ptr8.add(24).cast::<*mut u8>();
                                                            let l143 = *ptr8.add(28).cast::<usize>();
                                                            let len144 = l143;
                                                            let bytes144 = _rt::Vec::from_raw_parts(
                                                                l142.cast(),
                                                                len144,
                                                                len144,
                                                            );
                                                            _rt::string_lift(bytes144)
                                                        };
                                                        V145::Uuid(e145)
                                                    }
                                                };
                                                v145
                                            };
                                            V170::DuplicateElement(e170)
                                        }
                                        6 => {
                                            let e170 = {
                                                let l146 = *ptr8.add(16).cast::<*mut u8>();
                                                let l147 = *ptr8.add(20).cast::<usize>();
                                                let len148 = l147;
                                                let bytes148 = _rt::Vec::from_raw_parts(
                                                    l146.cast(),
                                                    len148,
                                                    len148,
                                                );
                                                _rt::string_lift(bytes148)
                                            };
                                            V170::SchemaViolation(e170)
                                        }
                                        7 => {
                                            let e170 = {
                                                let l149 = *ptr8.add(16).cast::<*mut u8>();
                                                let l150 = *ptr8.add(20).cast::<usize>();
                                                let len151 = l150;
                                                let bytes151 = _rt::Vec::from_raw_parts(
                                                    l149.cast(),
                                                    len151,
                                                    len151,
                                                );
                                                _rt::string_lift(bytes151)
                                            };
                                            V170::ConstraintViolation(e170)
                                        }
                                        8 => {
                                            let e170 = {
                                                let l152 = *ptr8.add(16).cast::<*mut u8>();
                                                let l153 = *ptr8.add(20).cast::<usize>();
                                                let len154 = l153;
                                                let bytes154 = _rt::Vec::from_raw_parts(
                                                    l152.cast(),
                                                    len154,
                                                    len154,
                                                );
                                                _rt::string_lift(bytes154)
                                            };
                                            V170::InvalidPropertyType(e170)
                                        }
                                        9 => {
                                            let e170 = {
                                                let l155 = *ptr8.add(16).cast::<*mut u8>();
                                                let l156 = *ptr8.add(20).cast::<usize>();
                                                let len157 = l156;
                                                let bytes157 = _rt::Vec::from_raw_parts(
                                                    l155.cast(),
                                                    len157,
                                                    len157,
                                                );
                                                _rt::string_lift(bytes157)
                                            };
                                            V170::InvalidQuery(e170)
                                        }
                                        10 => {
                                            let e170 = {
                                                let l158 = *ptr8.add(16).cast::<*mut u8>();
                                                let l159 = *ptr8.add(20).cast::<usize>();
                                                let len160 = l159;
                                                let bytes160 = _rt::Vec::from_raw_parts(
                                                    l158.cast(),
                                                    len160,
                                                    len160,
                                                );
                                                _rt::string_lift(bytes160)
                                            };
                                            V170::TransactionFailed(e170)
                                        }
                                        11 => V170::TransactionConflict,
                                        12 => V170::TransactionTimeout,
                                        13 => V170::DeadlockDetected,
                                        14 => V170::Timeout,
                                        15 => {
                                            let e170 = {
                                                let l161 = *ptr8.add(16).cast::<*mut u8>();
                                                let l162 = *ptr8.add(20).cast::<usize>();
                                                let len163 = l162;
                                                let bytes163 = _rt::Vec::from_raw_parts(
                                                    l161.cast(),
                                                    len163,
                                                    len163,
                                                );
                                                _rt::string_lift(bytes163)
                                            };
                                            V170::ResourceExhausted(e170)
                                        }
                                        16 => {
                                            let e170 = {
                                                let l164 = *ptr8.add(16).cast::<*mut u8>();
                                                let l165 = *ptr8.add(20).cast::<usize>();
                                                let len166 = l165;
                                                let bytes166 = _rt::Vec::from_raw_parts(
                                                    l164.cast(),
                                                    len166,
                                                    len166,
                                                );
                                                _rt::string_lift(bytes166)
                                            };
                                            V170::InternalError(e170)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 17, "invalid enum discriminant");
                                            let e170 = {
                                                let l167 = *ptr8.add(16).cast::<*mut u8>();
                                                let l168 = *ptr8.add(20).cast::<usize>();
                                                let len169 = l168;
                                                let bytes169 = _rt::Vec::from_raw_parts(
                                                    l167.cast(),
                                                    len169,
                                                    len169,
                                                );
                                                _rt::string_lift(bytes169)
                                            };
                                            V170::ServiceUnavailable(e170)
                                        }
                                    };
                                    v170
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Transaction {
                #[allow(unused_unsafe, clippy::all)]
                /// === BATCH OPERATIONS ===
                /// Create multiple vertices in a single operation
                pub fn create_vertices(
                    &self,
                    vertices: &[VertexSpec],
                ) -> Result<_rt::Vec<Vertex>, GraphError> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 32]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 32],
                        );
                        let vec26 = vertices;
                        let len26 = vec26.len();
                        let layout26 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec26.len() * 28,
                            4,
                        );
                        let result26 = if layout26.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout26).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout26);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec26.into_iter().enumerate() {
                            let base = result26.add(i * 28);
                            {
                                let VertexSpec {
                                    vertex_type: vertex_type0,
                                    additional_labels: additional_labels0,
                                    properties: properties0,
                                } = e;
                                let vec1 = vertex_type0;
                                let ptr1 = vec1.as_ptr().cast::<u8>();
                                let len1 = vec1.len();
                                *base.add(4).cast::<usize>() = len1;
                                *base.add(0).cast::<*mut u8>() = ptr1.cast_mut();
                                match additional_labels0 {
                                    Some(e) => {
                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                        let vec3 = e;
                                        let len3 = vec3.len();
                                        let layout3 = _rt::alloc::Layout::from_size_align_unchecked(
                                            vec3.len() * 8,
                                            4,
                                        );
                                        let result3 = if layout3.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout3).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout3);
                                            }
                                            ptr
                                        } else {
                                            ::core::ptr::null_mut()
                                        };
                                        for (i, e) in vec3.into_iter().enumerate() {
                                            let base = result3.add(i * 8);
                                            {
                                                let vec2 = e;
                                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                                let len2 = vec2.len();
                                                *base.add(4).cast::<usize>() = len2;
                                                *base.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                                            }
                                        }
                                        *base.add(16).cast::<usize>() = len3;
                                        *base.add(12).cast::<*mut u8>() = result3;
                                        cleanup_list.extend_from_slice(&[(result3, layout3)]);
                                    }
                                    None => {
                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                    }
                                };
                                let vec25 = properties0;
                                let len25 = vec25.len();
                                let layout25 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec25.len() * 48,
                                    8,
                                );
                                let result25 = if layout25.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout25).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout25);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec25.into_iter().enumerate() {
                                    let base = result25.add(i * 48);
                                    {
                                        let (t4_0, t4_1) = e;
                                        let vec5 = t4_0;
                                        let ptr5 = vec5.as_ptr().cast::<u8>();
                                        let len5 = vec5.len();
                                        *base.add(4).cast::<usize>() = len5;
                                        *base.add(0).cast::<*mut u8>() = ptr5.cast_mut();
                                        use super::super::super::golem::graph::types::PropertyValue as V24;
                                        match t4_1 {
                                            V24::NullValue => {
                                                *base.add(8).cast::<u8>() = (0i32) as u8;
                                            }
                                            V24::Boolean(e) => {
                                                *base.add(8).cast::<u8>() = (1i32) as u8;
                                                *base.add(16).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                }) as u8;
                                            }
                                            V24::Int8(e) => {
                                                *base.add(8).cast::<u8>() = (2i32) as u8;
                                                *base.add(16).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            V24::Int16(e) => {
                                                *base.add(8).cast::<u8>() = (3i32) as u8;
                                                *base.add(16).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            V24::Int32(e) => {
                                                *base.add(8).cast::<u8>() = (4i32) as u8;
                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            V24::Int64(e) => {
                                                *base.add(8).cast::<u8>() = (5i32) as u8;
                                                *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            V24::Uint8(e) => {
                                                *base.add(8).cast::<u8>() = (6i32) as u8;
                                                *base.add(16).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            V24::Uint16(e) => {
                                                *base.add(8).cast::<u8>() = (7i32) as u8;
                                                *base.add(16).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            V24::Uint32(e) => {
                                                *base.add(8).cast::<u8>() = (8i32) as u8;
                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            V24::Uint64(e) => {
                                                *base.add(8).cast::<u8>() = (9i32) as u8;
                                                *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            V24::Float32Value(e) => {
                                                *base.add(8).cast::<u8>() = (10i32) as u8;
                                                *base.add(16).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            V24::Float64Value(e) => {
                                                *base.add(8).cast::<u8>() = (11i32) as u8;
                                                *base.add(16).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            V24::StringValue(e) => {
                                                *base.add(8).cast::<u8>() = (12i32) as u8;
                                                let vec6 = e;
                                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                                let len6 = vec6.len();
                                                *base.add(20).cast::<usize>() = len6;
                                                *base.add(16).cast::<*mut u8>() = ptr6.cast_mut();
                                            }
                                            V24::Bytes(e) => {
                                                *base.add(8).cast::<u8>() = (13i32) as u8;
                                                let vec7 = e;
                                                let ptr7 = vec7.as_ptr().cast::<u8>();
                                                let len7 = vec7.len();
                                                *base.add(20).cast::<usize>() = len7;
                                                *base.add(16).cast::<*mut u8>() = ptr7.cast_mut();
                                            }
                                            V24::Date(e) => {
                                                *base.add(8).cast::<u8>() = (14i32) as u8;
                                                let super::super::super::golem::graph::types::Date {
                                                    year: year8,
                                                    month: month8,
                                                    day: day8,
                                                } = e;
                                                *base.add(16).cast::<i32>() = _rt::as_i32(year8);
                                                *base.add(20).cast::<u8>() = (_rt::as_i32(month8)) as u8;
                                                *base.add(21).cast::<u8>() = (_rt::as_i32(day8)) as u8;
                                            }
                                            V24::Time(e) => {
                                                *base.add(8).cast::<u8>() = (15i32) as u8;
                                                let super::super::super::golem::graph::types::Time {
                                                    hour: hour9,
                                                    minute: minute9,
                                                    second: second9,
                                                    nanosecond: nanosecond9,
                                                } = e;
                                                *base.add(16).cast::<u8>() = (_rt::as_i32(hour9)) as u8;
                                                *base.add(17).cast::<u8>() = (_rt::as_i32(minute9)) as u8;
                                                *base.add(18).cast::<u8>() = (_rt::as_i32(second9)) as u8;
                                                *base.add(20).cast::<i32>() = _rt::as_i32(nanosecond9);
                                            }
                                            V24::Datetime(e) => {
                                                *base.add(8).cast::<u8>() = (16i32) as u8;
                                                let super::super::super::golem::graph::types::Datetime {
                                                    date: date10,
                                                    time: time10,
                                                    timezone_offset_minutes: timezone_offset_minutes10,
                                                } = e;
                                                let super::super::super::golem::graph::types::Date {
                                                    year: year11,
                                                    month: month11,
                                                    day: day11,
                                                } = date10;
                                                *base.add(16).cast::<i32>() = _rt::as_i32(year11);
                                                *base.add(20).cast::<u8>() = (_rt::as_i32(month11)) as u8;
                                                *base.add(21).cast::<u8>() = (_rt::as_i32(day11)) as u8;
                                                let super::super::super::golem::graph::types::Time {
                                                    hour: hour12,
                                                    minute: minute12,
                                                    second: second12,
                                                    nanosecond: nanosecond12,
                                                } = time10;
                                                *base.add(24).cast::<u8>() = (_rt::as_i32(hour12)) as u8;
                                                *base.add(25).cast::<u8>() = (_rt::as_i32(minute12)) as u8;
                                                *base.add(26).cast::<u8>() = (_rt::as_i32(second12)) as u8;
                                                *base.add(28).cast::<i32>() = _rt::as_i32(nanosecond12);
                                                match timezone_offset_minutes10 {
                                                    Some(e) => {
                                                        *base.add(32).cast::<u8>() = (1i32) as u8;
                                                        *base.add(34).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                                    }
                                                    None => {
                                                        *base.add(32).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            V24::Duration(e) => {
                                                *base.add(8).cast::<u8>() = (17i32) as u8;
                                                let super::super::super::golem::graph::types::Duration {
                                                    seconds: seconds13,
                                                    nanoseconds: nanoseconds13,
                                                } = e;
                                                *base.add(16).cast::<i64>() = _rt::as_i64(seconds13);
                                                *base.add(24).cast::<i32>() = _rt::as_i32(nanoseconds13);
                                            }
                                            V24::Point(e) => {
                                                *base.add(8).cast::<u8>() = (18i32) as u8;
                                                let super::super::super::golem::graph::types::Point {
                                                    longitude: longitude14,
                                                    latitude: latitude14,
                                                    altitude: altitude14,
                                                } = e;
                                                *base.add(16).cast::<f64>() = _rt::as_f64(longitude14);
                                                *base.add(24).cast::<f64>() = _rt::as_f64(latitude14);
                                                match altitude14 {
                                                    Some(e) => {
                                                        *base.add(32).cast::<u8>() = (1i32) as u8;
                                                        *base.add(40).cast::<f64>() = _rt::as_f64(e);
                                                    }
                                                    None => {
                                                        *base.add(32).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            V24::Linestring(e) => {
                                                *base.add(8).cast::<u8>() = (19i32) as u8;
                                                let super::super::super::golem::graph::types::Linestring {
                                                    coordinates: coordinates15,
                                                } = e;
                                                let vec17 = coordinates15;
                                                let len17 = vec17.len();
                                                let layout17 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec17.len() * 32,
                                                    8,
                                                );
                                                let result17 = if layout17.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout17).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout17);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec17.into_iter().enumerate() {
                                                    let base = result17.add(i * 32);
                                                    {
                                                        let super::super::super::golem::graph::types::Point {
                                                            longitude: longitude16,
                                                            latitude: latitude16,
                                                            altitude: altitude16,
                                                        } = e;
                                                        *base.add(0).cast::<f64>() = _rt::as_f64(longitude16);
                                                        *base.add(8).cast::<f64>() = _rt::as_f64(latitude16);
                                                        match altitude16 {
                                                            Some(e) => {
                                                                *base.add(16).cast::<u8>() = (1i32) as u8;
                                                                *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                            }
                                                            None => {
                                                                *base.add(16).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                }
                                                *base.add(20).cast::<usize>() = len17;
                                                *base.add(16).cast::<*mut u8>() = result17;
                                                cleanup_list.extend_from_slice(&[(result17, layout17)]);
                                            }
                                            V24::Polygon(e) => {
                                                *base.add(8).cast::<u8>() = (20i32) as u8;
                                                let super::super::super::golem::graph::types::Polygon {
                                                    exterior: exterior18,
                                                    holes: holes18,
                                                } = e;
                                                let vec20 = exterior18;
                                                let len20 = vec20.len();
                                                let layout20 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec20.len() * 32,
                                                    8,
                                                );
                                                let result20 = if layout20.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout20).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout20);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec20.into_iter().enumerate() {
                                                    let base = result20.add(i * 32);
                                                    {
                                                        let super::super::super::golem::graph::types::Point {
                                                            longitude: longitude19,
                                                            latitude: latitude19,
                                                            altitude: altitude19,
                                                        } = e;
                                                        *base.add(0).cast::<f64>() = _rt::as_f64(longitude19);
                                                        *base.add(8).cast::<f64>() = _rt::as_f64(latitude19);
                                                        match altitude19 {
                                                            Some(e) => {
                                                                *base.add(16).cast::<u8>() = (1i32) as u8;
                                                                *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                            }
                                                            None => {
                                                                *base.add(16).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                }
                                                *base.add(20).cast::<usize>() = len20;
                                                *base.add(16).cast::<*mut u8>() = result20;
                                                match holes18 {
                                                    Some(e) => {
                                                        *base.add(24).cast::<u8>() = (1i32) as u8;
                                                        let vec23 = e;
                                                        let len23 = vec23.len();
                                                        let layout23 = _rt::alloc::Layout::from_size_align_unchecked(
                                                            vec23.len() * 8,
                                                            4,
                                                        );
                                                        let result23 = if layout23.size() != 0 {
                                                            let ptr = _rt::alloc::alloc(layout23).cast::<u8>();
                                                            if ptr.is_null() {
                                                                _rt::alloc::handle_alloc_error(layout23);
                                                            }
                                                            ptr
                                                        } else {
                                                            ::core::ptr::null_mut()
                                                        };
                                                        for (i, e) in vec23.into_iter().enumerate() {
                                                            let base = result23.add(i * 8);
                                                            {
                                                                let vec22 = e;
                                                                let len22 = vec22.len();
                                                                let layout22 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                    vec22.len() * 32,
                                                                    8,
                                                                );
                                                                let result22 = if layout22.size() != 0 {
                                                                    let ptr = _rt::alloc::alloc(layout22).cast::<u8>();
                                                                    if ptr.is_null() {
                                                                        _rt::alloc::handle_alloc_error(layout22);
                                                                    }
                                                                    ptr
                                                                } else {
                                                                    ::core::ptr::null_mut()
                                                                };
                                                                for (i, e) in vec22.into_iter().enumerate() {
                                                                    let base = result22.add(i * 32);
                                                                    {
                                                                        let super::super::super::golem::graph::types::Point {
                                                                            longitude: longitude21,
                                                                            latitude: latitude21,
                                                                            altitude: altitude21,
                                                                        } = e;
                                                                        *base.add(0).cast::<f64>() = _rt::as_f64(longitude21);
                                                                        *base.add(8).cast::<f64>() = _rt::as_f64(latitude21);
                                                                        match altitude21 {
                                                                            Some(e) => {
                                                                                *base.add(16).cast::<u8>() = (1i32) as u8;
                                                                                *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                                            }
                                                                            None => {
                                                                                *base.add(16).cast::<u8>() = (0i32) as u8;
                                                                            }
                                                                        };
                                                                    }
                                                                }
                                                                *base.add(4).cast::<usize>() = len22;
                                                                *base.add(0).cast::<*mut u8>() = result22;
                                                                cleanup_list.extend_from_slice(&[(result22, layout22)]);
                                                            }
                                                        }
                                                        *base.add(32).cast::<usize>() = len23;
                                                        *base.add(28).cast::<*mut u8>() = result23;
                                                        cleanup_list.extend_from_slice(&[(result23, layout23)]);
                                                    }
                                                    None => {
                                                        *base.add(24).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                                cleanup_list.extend_from_slice(&[(result20, layout20)]);
                                            }
                                        }
                                    }
                                }
                                *base.add(24).cast::<usize>() = len25;
                                *base.add(20).cast::<*mut u8>() = result25;
                                cleanup_list.extend_from_slice(&[(result25, layout25)]);
                            }
                        }
                        let ptr27 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:graph/transactions@1.0.0")]
                        extern "C" {
                            #[link_name = "[method]transaction.create-vertices"]
                            fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, result26, len26, ptr27);
                        let l28 = i32::from(*ptr27.add(0).cast::<u8>());
                        if layout26.size() != 0 {
                            _rt::alloc::dealloc(result26.cast(), layout26);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l28 {
                            0 => {
                                let e = {
                                    let l29 = *ptr27.add(8).cast::<*mut u8>();
                                    let l30 = *ptr27.add(12).cast::<usize>();
                                    let base121 = l29;
                                    let len121 = l30;
                                    let mut result121 = _rt::Vec::with_capacity(len121);
                                    for i in 0..len121 {
                                        let base = base121.add(i * 40);
                                        let e121 = {
                                            let l31 = i32::from(*base.add(0).cast::<u8>());
                                            use super::super::super::golem::graph::types::ElementId as V39;
                                            let v39 = match l31 {
                                                0 => {
                                                    let e39 = {
                                                        let l32 = *base.add(8).cast::<*mut u8>();
                                                        let l33 = *base.add(12).cast::<usize>();
                                                        let len34 = l33;
                                                        let bytes34 = _rt::Vec::from_raw_parts(
                                                            l32.cast(),
                                                            len34,
                                                            len34,
                                                        );
                                                        _rt::string_lift(bytes34)
                                                    };
                                                    V39::StringValue(e39)
                                                }
                                                1 => {
                                                    let e39 = {
                                                        let l35 = *base.add(8).cast::<i64>();
                                                        l35
                                                    };
                                                    V39::Int64(e39)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                    let e39 = {
                                                        let l36 = *base.add(8).cast::<*mut u8>();
                                                        let l37 = *base.add(12).cast::<usize>();
                                                        let len38 = l37;
                                                        let bytes38 = _rt::Vec::from_raw_parts(
                                                            l36.cast(),
                                                            len38,
                                                            len38,
                                                        );
                                                        _rt::string_lift(bytes38)
                                                    };
                                                    V39::Uuid(e39)
                                                }
                                            };
                                            let l40 = *base.add(16).cast::<*mut u8>();
                                            let l41 = *base.add(20).cast::<usize>();
                                            let len42 = l41;
                                            let bytes42 = _rt::Vec::from_raw_parts(
                                                l40.cast(),
                                                len42,
                                                len42,
                                            );
                                            let l43 = *base.add(24).cast::<*mut u8>();
                                            let l44 = *base.add(28).cast::<usize>();
                                            let base48 = l43;
                                            let len48 = l44;
                                            let mut result48 = _rt::Vec::with_capacity(len48);
                                            for i in 0..len48 {
                                                let base = base48.add(i * 8);
                                                let e48 = {
                                                    let l45 = *base.add(0).cast::<*mut u8>();
                                                    let l46 = *base.add(4).cast::<usize>();
                                                    let len47 = l46;
                                                    let bytes47 = _rt::Vec::from_raw_parts(
                                                        l45.cast(),
                                                        len47,
                                                        len47,
                                                    );
                                                    _rt::string_lift(bytes47)
                                                };
                                                result48.push(e48);
                                            }
                                            _rt::cabi_dealloc(base48, len48 * 8, 4);
                                            let l49 = *base.add(32).cast::<*mut u8>();
                                            let l50 = *base.add(36).cast::<usize>();
                                            let base120 = l49;
                                            let len120 = l50;
                                            let mut result120 = _rt::Vec::with_capacity(len120);
                                            for i in 0..len120 {
                                                let base = base120.add(i * 48);
                                                let e120 = {
                                                    let l51 = *base.add(0).cast::<*mut u8>();
                                                    let l52 = *base.add(4).cast::<usize>();
                                                    let len53 = l52;
                                                    let bytes53 = _rt::Vec::from_raw_parts(
                                                        l51.cast(),
                                                        len53,
                                                        len53,
                                                    );
                                                    let l54 = i32::from(*base.add(8).cast::<u8>());
                                                    use super::super::super::golem::graph::types::PropertyValue as V119;
                                                    let v119 = match l54 {
                                                        0 => V119::NullValue,
                                                        1 => {
                                                            let e119 = {
                                                                let l55 = i32::from(*base.add(16).cast::<u8>());
                                                                _rt::bool_lift(l55 as u8)
                                                            };
                                                            V119::Boolean(e119)
                                                        }
                                                        2 => {
                                                            let e119 = {
                                                                let l56 = i32::from(*base.add(16).cast::<i8>());
                                                                l56 as i8
                                                            };
                                                            V119::Int8(e119)
                                                        }
                                                        3 => {
                                                            let e119 = {
                                                                let l57 = i32::from(*base.add(16).cast::<i16>());
                                                                l57 as i16
                                                            };
                                                            V119::Int16(e119)
                                                        }
                                                        4 => {
                                                            let e119 = {
                                                                let l58 = *base.add(16).cast::<i32>();
                                                                l58
                                                            };
                                                            V119::Int32(e119)
                                                        }
                                                        5 => {
                                                            let e119 = {
                                                                let l59 = *base.add(16).cast::<i64>();
                                                                l59
                                                            };
                                                            V119::Int64(e119)
                                                        }
                                                        6 => {
                                                            let e119 = {
                                                                let l60 = i32::from(*base.add(16).cast::<u8>());
                                                                l60 as u8
                                                            };
                                                            V119::Uint8(e119)
                                                        }
                                                        7 => {
                                                            let e119 = {
                                                                let l61 = i32::from(*base.add(16).cast::<u16>());
                                                                l61 as u16
                                                            };
                                                            V119::Uint16(e119)
                                                        }
                                                        8 => {
                                                            let e119 = {
                                                                let l62 = *base.add(16).cast::<i32>();
                                                                l62 as u32
                                                            };
                                                            V119::Uint32(e119)
                                                        }
                                                        9 => {
                                                            let e119 = {
                                                                let l63 = *base.add(16).cast::<i64>();
                                                                l63 as u64
                                                            };
                                                            V119::Uint64(e119)
                                                        }
                                                        10 => {
                                                            let e119 = {
                                                                let l64 = *base.add(16).cast::<f32>();
                                                                l64
                                                            };
                                                            V119::Float32Value(e119)
                                                        }
                                                        11 => {
                                                            let e119 = {
                                                                let l65 = *base.add(16).cast::<f64>();
                                                                l65
                                                            };
                                                            V119::Float64Value(e119)
                                                        }
                                                        12 => {
                                                            let e119 = {
                                                                let l66 = *base.add(16).cast::<*mut u8>();
                                                                let l67 = *base.add(20).cast::<usize>();
                                                                let len68 = l67;
                                                                let bytes68 = _rt::Vec::from_raw_parts(
                                                                    l66.cast(),
                                                                    len68,
                                                                    len68,
                                                                );
                                                                _rt::string_lift(bytes68)
                                                            };
                                                            V119::StringValue(e119)
                                                        }
                                                        13 => {
                                                            let e119 = {
                                                                let l69 = *base.add(16).cast::<*mut u8>();
                                                                let l70 = *base.add(20).cast::<usize>();
                                                                let len71 = l70;
                                                                _rt::Vec::from_raw_parts(l69.cast(), len71, len71)
                                                            };
                                                            V119::Bytes(e119)
                                                        }
                                                        14 => {
                                                            let e119 = {
                                                                let l72 = *base.add(16).cast::<i32>();
                                                                let l73 = i32::from(*base.add(20).cast::<u8>());
                                                                let l74 = i32::from(*base.add(21).cast::<u8>());
                                                                super::super::super::golem::graph::types::Date {
                                                                    year: l72 as u32,
                                                                    month: l73 as u8,
                                                                    day: l74 as u8,
                                                                }
                                                            };
                                                            V119::Date(e119)
                                                        }
                                                        15 => {
                                                            let e119 = {
                                                                let l75 = i32::from(*base.add(16).cast::<u8>());
                                                                let l76 = i32::from(*base.add(17).cast::<u8>());
                                                                let l77 = i32::from(*base.add(18).cast::<u8>());
                                                                let l78 = *base.add(20).cast::<i32>();
                                                                super::super::super::golem::graph::types::Time {
                                                                    hour: l75 as u8,
                                                                    minute: l76 as u8,
                                                                    second: l77 as u8,
                                                                    nanosecond: l78 as u32,
                                                                }
                                                            };
                                                            V119::Time(e119)
                                                        }
                                                        16 => {
                                                            let e119 = {
                                                                let l79 = *base.add(16).cast::<i32>();
                                                                let l80 = i32::from(*base.add(20).cast::<u8>());
                                                                let l81 = i32::from(*base.add(21).cast::<u8>());
                                                                let l82 = i32::from(*base.add(24).cast::<u8>());
                                                                let l83 = i32::from(*base.add(25).cast::<u8>());
                                                                let l84 = i32::from(*base.add(26).cast::<u8>());
                                                                let l85 = *base.add(28).cast::<i32>();
                                                                let l86 = i32::from(*base.add(32).cast::<u8>());
                                                                super::super::super::golem::graph::types::Datetime {
                                                                    date: super::super::super::golem::graph::types::Date {
                                                                        year: l79 as u32,
                                                                        month: l80 as u8,
                                                                        day: l81 as u8,
                                                                    },
                                                                    time: super::super::super::golem::graph::types::Time {
                                                                        hour: l82 as u8,
                                                                        minute: l83 as u8,
                                                                        second: l84 as u8,
                                                                        nanosecond: l85 as u32,
                                                                    },
                                                                    timezone_offset_minutes: match l86 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l87 = i32::from(*base.add(34).cast::<i16>());
                                                                                l87 as i16
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            V119::Datetime(e119)
                                                        }
                                                        17 => {
                                                            let e119 = {
                                                                let l88 = *base.add(16).cast::<i64>();
                                                                let l89 = *base.add(24).cast::<i32>();
                                                                super::super::super::golem::graph::types::Duration {
                                                                    seconds: l88,
                                                                    nanoseconds: l89 as u32,
                                                                }
                                                            };
                                                            V119::Duration(e119)
                                                        }
                                                        18 => {
                                                            let e119 = {
                                                                let l90 = *base.add(16).cast::<f64>();
                                                                let l91 = *base.add(24).cast::<f64>();
                                                                let l92 = i32::from(*base.add(32).cast::<u8>());
                                                                super::super::super::golem::graph::types::Point {
                                                                    longitude: l90,
                                                                    latitude: l91,
                                                                    altitude: match l92 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l93 = *base.add(40).cast::<f64>();
                                                                                l93
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            V119::Point(e119)
                                                        }
                                                        19 => {
                                                            let e119 = {
                                                                let l94 = *base.add(16).cast::<*mut u8>();
                                                                let l95 = *base.add(20).cast::<usize>();
                                                                let base100 = l94;
                                                                let len100 = l95;
                                                                let mut result100 = _rt::Vec::with_capacity(len100);
                                                                for i in 0..len100 {
                                                                    let base = base100.add(i * 32);
                                                                    let e100 = {
                                                                        let l96 = *base.add(0).cast::<f64>();
                                                                        let l97 = *base.add(8).cast::<f64>();
                                                                        let l98 = i32::from(*base.add(16).cast::<u8>());
                                                                        super::super::super::golem::graph::types::Point {
                                                                            longitude: l96,
                                                                            latitude: l97,
                                                                            altitude: match l98 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l99 = *base.add(24).cast::<f64>();
                                                                                        l99
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            },
                                                                        }
                                                                    };
                                                                    result100.push(e100);
                                                                }
                                                                _rt::cabi_dealloc(base100, len100 * 32, 8);
                                                                super::super::super::golem::graph::types::Linestring {
                                                                    coordinates: result100,
                                                                }
                                                            };
                                                            V119::Linestring(e119)
                                                        }
                                                        n => {
                                                            debug_assert_eq!(n, 20, "invalid enum discriminant");
                                                            let e119 = {
                                                                let l101 = *base.add(16).cast::<*mut u8>();
                                                                let l102 = *base.add(20).cast::<usize>();
                                                                let base107 = l101;
                                                                let len107 = l102;
                                                                let mut result107 = _rt::Vec::with_capacity(len107);
                                                                for i in 0..len107 {
                                                                    let base = base107.add(i * 32);
                                                                    let e107 = {
                                                                        let l103 = *base.add(0).cast::<f64>();
                                                                        let l104 = *base.add(8).cast::<f64>();
                                                                        let l105 = i32::from(*base.add(16).cast::<u8>());
                                                                        super::super::super::golem::graph::types::Point {
                                                                            longitude: l103,
                                                                            latitude: l104,
                                                                            altitude: match l105 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l106 = *base.add(24).cast::<f64>();
                                                                                        l106
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            },
                                                                        }
                                                                    };
                                                                    result107.push(e107);
                                                                }
                                                                _rt::cabi_dealloc(base107, len107 * 32, 8);
                                                                let l108 = i32::from(*base.add(24).cast::<u8>());
                                                                super::super::super::golem::graph::types::Polygon {
                                                                    exterior: result107,
                                                                    holes: match l108 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l109 = *base.add(28).cast::<*mut u8>();
                                                                                let l110 = *base.add(32).cast::<usize>();
                                                                                let base118 = l109;
                                                                                let len118 = l110;
                                                                                let mut result118 = _rt::Vec::with_capacity(len118);
                                                                                for i in 0..len118 {
                                                                                    let base = base118.add(i * 8);
                                                                                    let e118 = {
                                                                                        let l111 = *base.add(0).cast::<*mut u8>();
                                                                                        let l112 = *base.add(4).cast::<usize>();
                                                                                        let base117 = l111;
                                                                                        let len117 = l112;
                                                                                        let mut result117 = _rt::Vec::with_capacity(len117);
                                                                                        for i in 0..len117 {
                                                                                            let base = base117.add(i * 32);
                                                                                            let e117 = {
                                                                                                let l113 = *base.add(0).cast::<f64>();
                                                                                                let l114 = *base.add(8).cast::<f64>();
                                                                                                let l115 = i32::from(*base.add(16).cast::<u8>());
                                                                                                super::super::super::golem::graph::types::Point {
                                                                                                    longitude: l113,
                                                                                                    latitude: l114,
                                                                                                    altitude: match l115 {
                                                                                                        0 => None,
                                                                                                        1 => {
                                                                                                            let e = {
                                                                                                                let l116 = *base.add(24).cast::<f64>();
                                                                                                                l116
                                                                                                            };
                                                                                                            Some(e)
                                                                                                        }
                                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                                    },
                                                                                                }
                                                                                            };
                                                                                            result117.push(e117);
                                                                                        }
                                                                                        _rt::cabi_dealloc(base117, len117 * 32, 8);
                                                                                        result117
                                                                                    };
                                                                                    result118.push(e118);
                                                                                }
                                                                                _rt::cabi_dealloc(base118, len118 * 8, 4);
                                                                                result118
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            V119::Polygon(e119)
                                                        }
                                                    };
                                                    (_rt::string_lift(bytes53), v119)
                                                };
                                                result120.push(e120);
                                            }
                                            _rt::cabi_dealloc(base120, len120 * 48, 8);
                                            super::super::super::golem::graph::types::Vertex {
                                                id: v39,
                                                vertex_type: _rt::string_lift(bytes42),
                                                additional_labels: result48,
                                                properties: result120,
                                            }
                                        };
                                        result121.push(e121);
                                    }
                                    _rt::cabi_dealloc(base121, len121 * 40, 8);
                                    result121
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l122 = i32::from(*ptr27.add(8).cast::<u8>());
                                    use super::super::super::golem::graph::errors::GraphError as V177;
                                    let v177 = match l122 {
                                        0 => {
                                            let e177 = {
                                                let l123 = *ptr27.add(16).cast::<*mut u8>();
                                                let l124 = *ptr27.add(20).cast::<usize>();
                                                let len125 = l124;
                                                let bytes125 = _rt::Vec::from_raw_parts(
                                                    l123.cast(),
                                                    len125,
                                                    len125,
                                                );
                                                _rt::string_lift(bytes125)
                                            };
                                            V177::UnsupportedOperation(e177)
                                        }
                                        1 => {
                                            let e177 = {
                                                let l126 = *ptr27.add(16).cast::<*mut u8>();
                                                let l127 = *ptr27.add(20).cast::<usize>();
                                                let len128 = l127;
                                                let bytes128 = _rt::Vec::from_raw_parts(
                                                    l126.cast(),
                                                    len128,
                                                    len128,
                                                );
                                                _rt::string_lift(bytes128)
                                            };
                                            V177::ConnectionFailed(e177)
                                        }
                                        2 => {
                                            let e177 = {
                                                let l129 = *ptr27.add(16).cast::<*mut u8>();
                                                let l130 = *ptr27.add(20).cast::<usize>();
                                                let len131 = l130;
                                                let bytes131 = _rt::Vec::from_raw_parts(
                                                    l129.cast(),
                                                    len131,
                                                    len131,
                                                );
                                                _rt::string_lift(bytes131)
                                            };
                                            V177::AuthenticationFailed(e177)
                                        }
                                        3 => {
                                            let e177 = {
                                                let l132 = *ptr27.add(16).cast::<*mut u8>();
                                                let l133 = *ptr27.add(20).cast::<usize>();
                                                let len134 = l133;
                                                let bytes134 = _rt::Vec::from_raw_parts(
                                                    l132.cast(),
                                                    len134,
                                                    len134,
                                                );
                                                _rt::string_lift(bytes134)
                                            };
                                            V177::AuthorizationFailed(e177)
                                        }
                                        4 => {
                                            let e177 = {
                                                let l135 = i32::from(*ptr27.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V143;
                                                let v143 = match l135 {
                                                    0 => {
                                                        let e143 = {
                                                            let l136 = *ptr27.add(24).cast::<*mut u8>();
                                                            let l137 = *ptr27.add(28).cast::<usize>();
                                                            let len138 = l137;
                                                            let bytes138 = _rt::Vec::from_raw_parts(
                                                                l136.cast(),
                                                                len138,
                                                                len138,
                                                            );
                                                            _rt::string_lift(bytes138)
                                                        };
                                                        V143::StringValue(e143)
                                                    }
                                                    1 => {
                                                        let e143 = {
                                                            let l139 = *ptr27.add(24).cast::<i64>();
                                                            l139
                                                        };
                                                        V143::Int64(e143)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e143 = {
                                                            let l140 = *ptr27.add(24).cast::<*mut u8>();
                                                            let l141 = *ptr27.add(28).cast::<usize>();
                                                            let len142 = l141;
                                                            let bytes142 = _rt::Vec::from_raw_parts(
                                                                l140.cast(),
                                                                len142,
                                                                len142,
                                                            );
                                                            _rt::string_lift(bytes142)
                                                        };
                                                        V143::Uuid(e143)
                                                    }
                                                };
                                                v143
                                            };
                                            V177::ElementNotFound(e177)
                                        }
                                        5 => {
                                            let e177 = {
                                                let l144 = i32::from(*ptr27.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V152;
                                                let v152 = match l144 {
                                                    0 => {
                                                        let e152 = {
                                                            let l145 = *ptr27.add(24).cast::<*mut u8>();
                                                            let l146 = *ptr27.add(28).cast::<usize>();
                                                            let len147 = l146;
                                                            let bytes147 = _rt::Vec::from_raw_parts(
                                                                l145.cast(),
                                                                len147,
                                                                len147,
                                                            );
                                                            _rt::string_lift(bytes147)
                                                        };
                                                        V152::StringValue(e152)
                                                    }
                                                    1 => {
                                                        let e152 = {
                                                            let l148 = *ptr27.add(24).cast::<i64>();
                                                            l148
                                                        };
                                                        V152::Int64(e152)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e152 = {
                                                            let l149 = *ptr27.add(24).cast::<*mut u8>();
                                                            let l150 = *ptr27.add(28).cast::<usize>();
                                                            let len151 = l150;
                                                            let bytes151 = _rt::Vec::from_raw_parts(
                                                                l149.cast(),
                                                                len151,
                                                                len151,
                                                            );
                                                            _rt::string_lift(bytes151)
                                                        };
                                                        V152::Uuid(e152)
                                                    }
                                                };
                                                v152
                                            };
                                            V177::DuplicateElement(e177)
                                        }
                                        6 => {
                                            let e177 = {
                                                let l153 = *ptr27.add(16).cast::<*mut u8>();
                                                let l154 = *ptr27.add(20).cast::<usize>();
                                                let len155 = l154;
                                                let bytes155 = _rt::Vec::from_raw_parts(
                                                    l153.cast(),
                                                    len155,
                                                    len155,
                                                );
                                                _rt::string_lift(bytes155)
                                            };
                                            V177::SchemaViolation(e177)
                                        }
                                        7 => {
                                            let e177 = {
                                                let l156 = *ptr27.add(16).cast::<*mut u8>();
                                                let l157 = *ptr27.add(20).cast::<usize>();
                                                let len158 = l157;
                                                let bytes158 = _rt::Vec::from_raw_parts(
                                                    l156.cast(),
                                                    len158,
                                                    len158,
                                                );
                                                _rt::string_lift(bytes158)
                                            };
                                            V177::ConstraintViolation(e177)
                                        }
                                        8 => {
                                            let e177 = {
                                                let l159 = *ptr27.add(16).cast::<*mut u8>();
                                                let l160 = *ptr27.add(20).cast::<usize>();
                                                let len161 = l160;
                                                let bytes161 = _rt::Vec::from_raw_parts(
                                                    l159.cast(),
                                                    len161,
                                                    len161,
                                                );
                                                _rt::string_lift(bytes161)
                                            };
                                            V177::InvalidPropertyType(e177)
                                        }
                                        9 => {
                                            let e177 = {
                                                let l162 = *ptr27.add(16).cast::<*mut u8>();
                                                let l163 = *ptr27.add(20).cast::<usize>();
                                                let len164 = l163;
                                                let bytes164 = _rt::Vec::from_raw_parts(
                                                    l162.cast(),
                                                    len164,
                                                    len164,
                                                );
                                                _rt::string_lift(bytes164)
                                            };
                                            V177::InvalidQuery(e177)
                                        }
                                        10 => {
                                            let e177 = {
                                                let l165 = *ptr27.add(16).cast::<*mut u8>();
                                                let l166 = *ptr27.add(20).cast::<usize>();
                                                let len167 = l166;
                                                let bytes167 = _rt::Vec::from_raw_parts(
                                                    l165.cast(),
                                                    len167,
                                                    len167,
                                                );
                                                _rt::string_lift(bytes167)
                                            };
                                            V177::TransactionFailed(e177)
                                        }
                                        11 => V177::TransactionConflict,
                                        12 => V177::TransactionTimeout,
                                        13 => V177::DeadlockDetected,
                                        14 => V177::Timeout,
                                        15 => {
                                            let e177 = {
                                                let l168 = *ptr27.add(16).cast::<*mut u8>();
                                                let l169 = *ptr27.add(20).cast::<usize>();
                                                let len170 = l169;
                                                let bytes170 = _rt::Vec::from_raw_parts(
                                                    l168.cast(),
                                                    len170,
                                                    len170,
                                                );
                                                _rt::string_lift(bytes170)
                                            };
                                            V177::ResourceExhausted(e177)
                                        }
                                        16 => {
                                            let e177 = {
                                                let l171 = *ptr27.add(16).cast::<*mut u8>();
                                                let l172 = *ptr27.add(20).cast::<usize>();
                                                let len173 = l172;
                                                let bytes173 = _rt::Vec::from_raw_parts(
                                                    l171.cast(),
                                                    len173,
                                                    len173,
                                                );
                                                _rt::string_lift(bytes173)
                                            };
                                            V177::InternalError(e177)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 17, "invalid enum discriminant");
                                            let e177 = {
                                                let l174 = *ptr27.add(16).cast::<*mut u8>();
                                                let l175 = *ptr27.add(20).cast::<usize>();
                                                let len176 = l175;
                                                let bytes176 = _rt::Vec::from_raw_parts(
                                                    l174.cast(),
                                                    len176,
                                                    len176,
                                                );
                                                _rt::string_lift(bytes176)
                                            };
                                            V177::ServiceUnavailable(e177)
                                        }
                                    };
                                    v177
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Transaction {
                #[allow(unused_unsafe, clippy::all)]
                /// Create multiple edges in a single operation
                pub fn create_edges(
                    &self,
                    edges: &[EdgeSpec],
                ) -> Result<_rt::Vec<Edge>, GraphError> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 32]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 32],
                        );
                        let vec30 = edges;
                        let len30 = vec30.len();
                        let layout30 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec30.len() * 48,
                            8,
                        );
                        let result30 = if layout30.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout30).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout30);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec30.into_iter().enumerate() {
                            let base = result30.add(i * 48);
                            {
                                let EdgeSpec {
                                    edge_type: edge_type0,
                                    from_vertex: from_vertex0,
                                    to_vertex: to_vertex0,
                                    properties: properties0,
                                } = e;
                                let vec1 = edge_type0;
                                let ptr1 = vec1.as_ptr().cast::<u8>();
                                let len1 = vec1.len();
                                *base.add(4).cast::<usize>() = len1;
                                *base.add(0).cast::<*mut u8>() = ptr1.cast_mut();
                                use super::super::super::golem::graph::types::ElementId as V4;
                                match from_vertex0 {
                                    V4::StringValue(e) => {
                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                        let vec2 = e;
                                        let ptr2 = vec2.as_ptr().cast::<u8>();
                                        let len2 = vec2.len();
                                        *base.add(20).cast::<usize>() = len2;
                                        *base.add(16).cast::<*mut u8>() = ptr2.cast_mut();
                                    }
                                    V4::Int64(e) => {
                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                        *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    V4::Uuid(e) => {
                                        *base.add(8).cast::<u8>() = (2i32) as u8;
                                        let vec3 = e;
                                        let ptr3 = vec3.as_ptr().cast::<u8>();
                                        let len3 = vec3.len();
                                        *base.add(20).cast::<usize>() = len3;
                                        *base.add(16).cast::<*mut u8>() = ptr3.cast_mut();
                                    }
                                }
                                use super::super::super::golem::graph::types::ElementId as V7;
                                match to_vertex0 {
                                    V7::StringValue(e) => {
                                        *base.add(24).cast::<u8>() = (0i32) as u8;
                                        let vec5 = e;
                                        let ptr5 = vec5.as_ptr().cast::<u8>();
                                        let len5 = vec5.len();
                                        *base.add(36).cast::<usize>() = len5;
                                        *base.add(32).cast::<*mut u8>() = ptr5.cast_mut();
                                    }
                                    V7::Int64(e) => {
                                        *base.add(24).cast::<u8>() = (1i32) as u8;
                                        *base.add(32).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    V7::Uuid(e) => {
                                        *base.add(24).cast::<u8>() = (2i32) as u8;
                                        let vec6 = e;
                                        let ptr6 = vec6.as_ptr().cast::<u8>();
                                        let len6 = vec6.len();
                                        *base.add(36).cast::<usize>() = len6;
                                        *base.add(32).cast::<*mut u8>() = ptr6.cast_mut();
                                    }
                                }
                                let vec29 = properties0;
                                let len29 = vec29.len();
                                let layout29 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec29.len() * 48,
                                    8,
                                );
                                let result29 = if layout29.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout29).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout29);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec29.into_iter().enumerate() {
                                    let base = result29.add(i * 48);
                                    {
                                        let (t8_0, t8_1) = e;
                                        let vec9 = t8_0;
                                        let ptr9 = vec9.as_ptr().cast::<u8>();
                                        let len9 = vec9.len();
                                        *base.add(4).cast::<usize>() = len9;
                                        *base.add(0).cast::<*mut u8>() = ptr9.cast_mut();
                                        use super::super::super::golem::graph::types::PropertyValue as V28;
                                        match t8_1 {
                                            V28::NullValue => {
                                                *base.add(8).cast::<u8>() = (0i32) as u8;
                                            }
                                            V28::Boolean(e) => {
                                                *base.add(8).cast::<u8>() = (1i32) as u8;
                                                *base.add(16).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                }) as u8;
                                            }
                                            V28::Int8(e) => {
                                                *base.add(8).cast::<u8>() = (2i32) as u8;
                                                *base.add(16).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            V28::Int16(e) => {
                                                *base.add(8).cast::<u8>() = (3i32) as u8;
                                                *base.add(16).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            V28::Int32(e) => {
                                                *base.add(8).cast::<u8>() = (4i32) as u8;
                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            V28::Int64(e) => {
                                                *base.add(8).cast::<u8>() = (5i32) as u8;
                                                *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            V28::Uint8(e) => {
                                                *base.add(8).cast::<u8>() = (6i32) as u8;
                                                *base.add(16).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            V28::Uint16(e) => {
                                                *base.add(8).cast::<u8>() = (7i32) as u8;
                                                *base.add(16).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            V28::Uint32(e) => {
                                                *base.add(8).cast::<u8>() = (8i32) as u8;
                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            V28::Uint64(e) => {
                                                *base.add(8).cast::<u8>() = (9i32) as u8;
                                                *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            V28::Float32Value(e) => {
                                                *base.add(8).cast::<u8>() = (10i32) as u8;
                                                *base.add(16).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            V28::Float64Value(e) => {
                                                *base.add(8).cast::<u8>() = (11i32) as u8;
                                                *base.add(16).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            V28::StringValue(e) => {
                                                *base.add(8).cast::<u8>() = (12i32) as u8;
                                                let vec10 = e;
                                                let ptr10 = vec10.as_ptr().cast::<u8>();
                                                let len10 = vec10.len();
                                                *base.add(20).cast::<usize>() = len10;
                                                *base.add(16).cast::<*mut u8>() = ptr10.cast_mut();
                                            }
                                            V28::Bytes(e) => {
                                                *base.add(8).cast::<u8>() = (13i32) as u8;
                                                let vec11 = e;
                                                let ptr11 = vec11.as_ptr().cast::<u8>();
                                                let len11 = vec11.len();
                                                *base.add(20).cast::<usize>() = len11;
                                                *base.add(16).cast::<*mut u8>() = ptr11.cast_mut();
                                            }
                                            V28::Date(e) => {
                                                *base.add(8).cast::<u8>() = (14i32) as u8;
                                                let super::super::super::golem::graph::types::Date {
                                                    year: year12,
                                                    month: month12,
                                                    day: day12,
                                                } = e;
                                                *base.add(16).cast::<i32>() = _rt::as_i32(year12);
                                                *base.add(20).cast::<u8>() = (_rt::as_i32(month12)) as u8;
                                                *base.add(21).cast::<u8>() = (_rt::as_i32(day12)) as u8;
                                            }
                                            V28::Time(e) => {
                                                *base.add(8).cast::<u8>() = (15i32) as u8;
                                                let super::super::super::golem::graph::types::Time {
                                                    hour: hour13,
                                                    minute: minute13,
                                                    second: second13,
                                                    nanosecond: nanosecond13,
                                                } = e;
                                                *base.add(16).cast::<u8>() = (_rt::as_i32(hour13)) as u8;
                                                *base.add(17).cast::<u8>() = (_rt::as_i32(minute13)) as u8;
                                                *base.add(18).cast::<u8>() = (_rt::as_i32(second13)) as u8;
                                                *base.add(20).cast::<i32>() = _rt::as_i32(nanosecond13);
                                            }
                                            V28::Datetime(e) => {
                                                *base.add(8).cast::<u8>() = (16i32) as u8;
                                                let super::super::super::golem::graph::types::Datetime {
                                                    date: date14,
                                                    time: time14,
                                                    timezone_offset_minutes: timezone_offset_minutes14,
                                                } = e;
                                                let super::super::super::golem::graph::types::Date {
                                                    year: year15,
                                                    month: month15,
                                                    day: day15,
                                                } = date14;
                                                *base.add(16).cast::<i32>() = _rt::as_i32(year15);
                                                *base.add(20).cast::<u8>() = (_rt::as_i32(month15)) as u8;
                                                *base.add(21).cast::<u8>() = (_rt::as_i32(day15)) as u8;
                                                let super::super::super::golem::graph::types::Time {
                                                    hour: hour16,
                                                    minute: minute16,
                                                    second: second16,
                                                    nanosecond: nanosecond16,
                                                } = time14;
                                                *base.add(24).cast::<u8>() = (_rt::as_i32(hour16)) as u8;
                                                *base.add(25).cast::<u8>() = (_rt::as_i32(minute16)) as u8;
                                                *base.add(26).cast::<u8>() = (_rt::as_i32(second16)) as u8;
                                                *base.add(28).cast::<i32>() = _rt::as_i32(nanosecond16);
                                                match timezone_offset_minutes14 {
                                                    Some(e) => {
                                                        *base.add(32).cast::<u8>() = (1i32) as u8;
                                                        *base.add(34).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                                    }
                                                    None => {
                                                        *base.add(32).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            V28::Duration(e) => {
                                                *base.add(8).cast::<u8>() = (17i32) as u8;
                                                let super::super::super::golem::graph::types::Duration {
                                                    seconds: seconds17,
                                                    nanoseconds: nanoseconds17,
                                                } = e;
                                                *base.add(16).cast::<i64>() = _rt::as_i64(seconds17);
                                                *base.add(24).cast::<i32>() = _rt::as_i32(nanoseconds17);
                                            }
                                            V28::Point(e) => {
                                                *base.add(8).cast::<u8>() = (18i32) as u8;
                                                let super::super::super::golem::graph::types::Point {
                                                    longitude: longitude18,
                                                    latitude: latitude18,
                                                    altitude: altitude18,
                                                } = e;
                                                *base.add(16).cast::<f64>() = _rt::as_f64(longitude18);
                                                *base.add(24).cast::<f64>() = _rt::as_f64(latitude18);
                                                match altitude18 {
                                                    Some(e) => {
                                                        *base.add(32).cast::<u8>() = (1i32) as u8;
                                                        *base.add(40).cast::<f64>() = _rt::as_f64(e);
                                                    }
                                                    None => {
                                                        *base.add(32).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            V28::Linestring(e) => {
                                                *base.add(8).cast::<u8>() = (19i32) as u8;
                                                let super::super::super::golem::graph::types::Linestring {
                                                    coordinates: coordinates19,
                                                } = e;
                                                let vec21 = coordinates19;
                                                let len21 = vec21.len();
                                                let layout21 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec21.len() * 32,
                                                    8,
                                                );
                                                let result21 = if layout21.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout21).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout21);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec21.into_iter().enumerate() {
                                                    let base = result21.add(i * 32);
                                                    {
                                                        let super::super::super::golem::graph::types::Point {
                                                            longitude: longitude20,
                                                            latitude: latitude20,
                                                            altitude: altitude20,
                                                        } = e;
                                                        *base.add(0).cast::<f64>() = _rt::as_f64(longitude20);
                                                        *base.add(8).cast::<f64>() = _rt::as_f64(latitude20);
                                                        match altitude20 {
                                                            Some(e) => {
                                                                *base.add(16).cast::<u8>() = (1i32) as u8;
                                                                *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                            }
                                                            None => {
                                                                *base.add(16).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                }
                                                *base.add(20).cast::<usize>() = len21;
                                                *base.add(16).cast::<*mut u8>() = result21;
                                                cleanup_list.extend_from_slice(&[(result21, layout21)]);
                                            }
                                            V28::Polygon(e) => {
                                                *base.add(8).cast::<u8>() = (20i32) as u8;
                                                let super::super::super::golem::graph::types::Polygon {
                                                    exterior: exterior22,
                                                    holes: holes22,
                                                } = e;
                                                let vec24 = exterior22;
                                                let len24 = vec24.len();
                                                let layout24 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec24.len() * 32,
                                                    8,
                                                );
                                                let result24 = if layout24.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout24).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout24);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec24.into_iter().enumerate() {
                                                    let base = result24.add(i * 32);
                                                    {
                                                        let super::super::super::golem::graph::types::Point {
                                                            longitude: longitude23,
                                                            latitude: latitude23,
                                                            altitude: altitude23,
                                                        } = e;
                                                        *base.add(0).cast::<f64>() = _rt::as_f64(longitude23);
                                                        *base.add(8).cast::<f64>() = _rt::as_f64(latitude23);
                                                        match altitude23 {
                                                            Some(e) => {
                                                                *base.add(16).cast::<u8>() = (1i32) as u8;
                                                                *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                            }
                                                            None => {
                                                                *base.add(16).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                }
                                                *base.add(20).cast::<usize>() = len24;
                                                *base.add(16).cast::<*mut u8>() = result24;
                                                match holes22 {
                                                    Some(e) => {
                                                        *base.add(24).cast::<u8>() = (1i32) as u8;
                                                        let vec27 = e;
                                                        let len27 = vec27.len();
                                                        let layout27 = _rt::alloc::Layout::from_size_align_unchecked(
                                                            vec27.len() * 8,
                                                            4,
                                                        );
                                                        let result27 = if layout27.size() != 0 {
                                                            let ptr = _rt::alloc::alloc(layout27).cast::<u8>();
                                                            if ptr.is_null() {
                                                                _rt::alloc::handle_alloc_error(layout27);
                                                            }
                                                            ptr
                                                        } else {
                                                            ::core::ptr::null_mut()
                                                        };
                                                        for (i, e) in vec27.into_iter().enumerate() {
                                                            let base = result27.add(i * 8);
                                                            {
                                                                let vec26 = e;
                                                                let len26 = vec26.len();
                                                                let layout26 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                    vec26.len() * 32,
                                                                    8,
                                                                );
                                                                let result26 = if layout26.size() != 0 {
                                                                    let ptr = _rt::alloc::alloc(layout26).cast::<u8>();
                                                                    if ptr.is_null() {
                                                                        _rt::alloc::handle_alloc_error(layout26);
                                                                    }
                                                                    ptr
                                                                } else {
                                                                    ::core::ptr::null_mut()
                                                                };
                                                                for (i, e) in vec26.into_iter().enumerate() {
                                                                    let base = result26.add(i * 32);
                                                                    {
                                                                        let super::super::super::golem::graph::types::Point {
                                                                            longitude: longitude25,
                                                                            latitude: latitude25,
                                                                            altitude: altitude25,
                                                                        } = e;
                                                                        *base.add(0).cast::<f64>() = _rt::as_f64(longitude25);
                                                                        *base.add(8).cast::<f64>() = _rt::as_f64(latitude25);
                                                                        match altitude25 {
                                                                            Some(e) => {
                                                                                *base.add(16).cast::<u8>() = (1i32) as u8;
                                                                                *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                                            }
                                                                            None => {
                                                                                *base.add(16).cast::<u8>() = (0i32) as u8;
                                                                            }
                                                                        };
                                                                    }
                                                                }
                                                                *base.add(4).cast::<usize>() = len26;
                                                                *base.add(0).cast::<*mut u8>() = result26;
                                                                cleanup_list.extend_from_slice(&[(result26, layout26)]);
                                                            }
                                                        }
                                                        *base.add(32).cast::<usize>() = len27;
                                                        *base.add(28).cast::<*mut u8>() = result27;
                                                        cleanup_list.extend_from_slice(&[(result27, layout27)]);
                                                    }
                                                    None => {
                                                        *base.add(24).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                                cleanup_list.extend_from_slice(&[(result24, layout24)]);
                                            }
                                        }
                                    }
                                }
                                *base.add(44).cast::<usize>() = len29;
                                *base.add(40).cast::<*mut u8>() = result29;
                                cleanup_list.extend_from_slice(&[(result29, layout29)]);
                            }
                        }
                        let ptr31 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:graph/transactions@1.0.0")]
                        extern "C" {
                            #[link_name = "[method]transaction.create-edges"]
                            fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, result30, len30, ptr31);
                        let l32 = i32::from(*ptr31.add(0).cast::<u8>());
                        if layout30.size() != 0 {
                            _rt::alloc::dealloc(result30.cast(), layout30);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l32 {
                            0 => {
                                let e = {
                                    let l33 = *ptr31.add(8).cast::<*mut u8>();
                                    let l34 = *ptr31.add(12).cast::<usize>();
                                    let base137 = l33;
                                    let len137 = l34;
                                    let mut result137 = _rt::Vec::with_capacity(len137);
                                    for i in 0..len137 {
                                        let base = base137.add(i * 64);
                                        let e137 = {
                                            let l35 = i32::from(*base.add(0).cast::<u8>());
                                            use super::super::super::golem::graph::types::ElementId as V43;
                                            let v43 = match l35 {
                                                0 => {
                                                    let e43 = {
                                                        let l36 = *base.add(8).cast::<*mut u8>();
                                                        let l37 = *base.add(12).cast::<usize>();
                                                        let len38 = l37;
                                                        let bytes38 = _rt::Vec::from_raw_parts(
                                                            l36.cast(),
                                                            len38,
                                                            len38,
                                                        );
                                                        _rt::string_lift(bytes38)
                                                    };
                                                    V43::StringValue(e43)
                                                }
                                                1 => {
                                                    let e43 = {
                                                        let l39 = *base.add(8).cast::<i64>();
                                                        l39
                                                    };
                                                    V43::Int64(e43)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                    let e43 = {
                                                        let l40 = *base.add(8).cast::<*mut u8>();
                                                        let l41 = *base.add(12).cast::<usize>();
                                                        let len42 = l41;
                                                        let bytes42 = _rt::Vec::from_raw_parts(
                                                            l40.cast(),
                                                            len42,
                                                            len42,
                                                        );
                                                        _rt::string_lift(bytes42)
                                                    };
                                                    V43::Uuid(e43)
                                                }
                                            };
                                            let l44 = *base.add(16).cast::<*mut u8>();
                                            let l45 = *base.add(20).cast::<usize>();
                                            let len46 = l45;
                                            let bytes46 = _rt::Vec::from_raw_parts(
                                                l44.cast(),
                                                len46,
                                                len46,
                                            );
                                            let l47 = i32::from(*base.add(24).cast::<u8>());
                                            use super::super::super::golem::graph::types::ElementId as V55;
                                            let v55 = match l47 {
                                                0 => {
                                                    let e55 = {
                                                        let l48 = *base.add(32).cast::<*mut u8>();
                                                        let l49 = *base.add(36).cast::<usize>();
                                                        let len50 = l49;
                                                        let bytes50 = _rt::Vec::from_raw_parts(
                                                            l48.cast(),
                                                            len50,
                                                            len50,
                                                        );
                                                        _rt::string_lift(bytes50)
                                                    };
                                                    V55::StringValue(e55)
                                                }
                                                1 => {
                                                    let e55 = {
                                                        let l51 = *base.add(32).cast::<i64>();
                                                        l51
                                                    };
                                                    V55::Int64(e55)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                    let e55 = {
                                                        let l52 = *base.add(32).cast::<*mut u8>();
                                                        let l53 = *base.add(36).cast::<usize>();
                                                        let len54 = l53;
                                                        let bytes54 = _rt::Vec::from_raw_parts(
                                                            l52.cast(),
                                                            len54,
                                                            len54,
                                                        );
                                                        _rt::string_lift(bytes54)
                                                    };
                                                    V55::Uuid(e55)
                                                }
                                            };
                                            let l56 = i32::from(*base.add(40).cast::<u8>());
                                            use super::super::super::golem::graph::types::ElementId as V64;
                                            let v64 = match l56 {
                                                0 => {
                                                    let e64 = {
                                                        let l57 = *base.add(48).cast::<*mut u8>();
                                                        let l58 = *base.add(52).cast::<usize>();
                                                        let len59 = l58;
                                                        let bytes59 = _rt::Vec::from_raw_parts(
                                                            l57.cast(),
                                                            len59,
                                                            len59,
                                                        );
                                                        _rt::string_lift(bytes59)
                                                    };
                                                    V64::StringValue(e64)
                                                }
                                                1 => {
                                                    let e64 = {
                                                        let l60 = *base.add(48).cast::<i64>();
                                                        l60
                                                    };
                                                    V64::Int64(e64)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                    let e64 = {
                                                        let l61 = *base.add(48).cast::<*mut u8>();
                                                        let l62 = *base.add(52).cast::<usize>();
                                                        let len63 = l62;
                                                        let bytes63 = _rt::Vec::from_raw_parts(
                                                            l61.cast(),
                                                            len63,
                                                            len63,
                                                        );
                                                        _rt::string_lift(bytes63)
                                                    };
                                                    V64::Uuid(e64)
                                                }
                                            };
                                            let l65 = *base.add(56).cast::<*mut u8>();
                                            let l66 = *base.add(60).cast::<usize>();
                                            let base136 = l65;
                                            let len136 = l66;
                                            let mut result136 = _rt::Vec::with_capacity(len136);
                                            for i in 0..len136 {
                                                let base = base136.add(i * 48);
                                                let e136 = {
                                                    let l67 = *base.add(0).cast::<*mut u8>();
                                                    let l68 = *base.add(4).cast::<usize>();
                                                    let len69 = l68;
                                                    let bytes69 = _rt::Vec::from_raw_parts(
                                                        l67.cast(),
                                                        len69,
                                                        len69,
                                                    );
                                                    let l70 = i32::from(*base.add(8).cast::<u8>());
                                                    use super::super::super::golem::graph::types::PropertyValue as V135;
                                                    let v135 = match l70 {
                                                        0 => V135::NullValue,
                                                        1 => {
                                                            let e135 = {
                                                                let l71 = i32::from(*base.add(16).cast::<u8>());
                                                                _rt::bool_lift(l71 as u8)
                                                            };
                                                            V135::Boolean(e135)
                                                        }
                                                        2 => {
                                                            let e135 = {
                                                                let l72 = i32::from(*base.add(16).cast::<i8>());
                                                                l72 as i8
                                                            };
                                                            V135::Int8(e135)
                                                        }
                                                        3 => {
                                                            let e135 = {
                                                                let l73 = i32::from(*base.add(16).cast::<i16>());
                                                                l73 as i16
                                                            };
                                                            V135::Int16(e135)
                                                        }
                                                        4 => {
                                                            let e135 = {
                                                                let l74 = *base.add(16).cast::<i32>();
                                                                l74
                                                            };
                                                            V135::Int32(e135)
                                                        }
                                                        5 => {
                                                            let e135 = {
                                                                let l75 = *base.add(16).cast::<i64>();
                                                                l75
                                                            };
                                                            V135::Int64(e135)
                                                        }
                                                        6 => {
                                                            let e135 = {
                                                                let l76 = i32::from(*base.add(16).cast::<u8>());
                                                                l76 as u8
                                                            };
                                                            V135::Uint8(e135)
                                                        }
                                                        7 => {
                                                            let e135 = {
                                                                let l77 = i32::from(*base.add(16).cast::<u16>());
                                                                l77 as u16
                                                            };
                                                            V135::Uint16(e135)
                                                        }
                                                        8 => {
                                                            let e135 = {
                                                                let l78 = *base.add(16).cast::<i32>();
                                                                l78 as u32
                                                            };
                                                            V135::Uint32(e135)
                                                        }
                                                        9 => {
                                                            let e135 = {
                                                                let l79 = *base.add(16).cast::<i64>();
                                                                l79 as u64
                                                            };
                                                            V135::Uint64(e135)
                                                        }
                                                        10 => {
                                                            let e135 = {
                                                                let l80 = *base.add(16).cast::<f32>();
                                                                l80
                                                            };
                                                            V135::Float32Value(e135)
                                                        }
                                                        11 => {
                                                            let e135 = {
                                                                let l81 = *base.add(16).cast::<f64>();
                                                                l81
                                                            };
                                                            V135::Float64Value(e135)
                                                        }
                                                        12 => {
                                                            let e135 = {
                                                                let l82 = *base.add(16).cast::<*mut u8>();
                                                                let l83 = *base.add(20).cast::<usize>();
                                                                let len84 = l83;
                                                                let bytes84 = _rt::Vec::from_raw_parts(
                                                                    l82.cast(),
                                                                    len84,
                                                                    len84,
                                                                );
                                                                _rt::string_lift(bytes84)
                                                            };
                                                            V135::StringValue(e135)
                                                        }
                                                        13 => {
                                                            let e135 = {
                                                                let l85 = *base.add(16).cast::<*mut u8>();
                                                                let l86 = *base.add(20).cast::<usize>();
                                                                let len87 = l86;
                                                                _rt::Vec::from_raw_parts(l85.cast(), len87, len87)
                                                            };
                                                            V135::Bytes(e135)
                                                        }
                                                        14 => {
                                                            let e135 = {
                                                                let l88 = *base.add(16).cast::<i32>();
                                                                let l89 = i32::from(*base.add(20).cast::<u8>());
                                                                let l90 = i32::from(*base.add(21).cast::<u8>());
                                                                super::super::super::golem::graph::types::Date {
                                                                    year: l88 as u32,
                                                                    month: l89 as u8,
                                                                    day: l90 as u8,
                                                                }
                                                            };
                                                            V135::Date(e135)
                                                        }
                                                        15 => {
                                                            let e135 = {
                                                                let l91 = i32::from(*base.add(16).cast::<u8>());
                                                                let l92 = i32::from(*base.add(17).cast::<u8>());
                                                                let l93 = i32::from(*base.add(18).cast::<u8>());
                                                                let l94 = *base.add(20).cast::<i32>();
                                                                super::super::super::golem::graph::types::Time {
                                                                    hour: l91 as u8,
                                                                    minute: l92 as u8,
                                                                    second: l93 as u8,
                                                                    nanosecond: l94 as u32,
                                                                }
                                                            };
                                                            V135::Time(e135)
                                                        }
                                                        16 => {
                                                            let e135 = {
                                                                let l95 = *base.add(16).cast::<i32>();
                                                                let l96 = i32::from(*base.add(20).cast::<u8>());
                                                                let l97 = i32::from(*base.add(21).cast::<u8>());
                                                                let l98 = i32::from(*base.add(24).cast::<u8>());
                                                                let l99 = i32::from(*base.add(25).cast::<u8>());
                                                                let l100 = i32::from(*base.add(26).cast::<u8>());
                                                                let l101 = *base.add(28).cast::<i32>();
                                                                let l102 = i32::from(*base.add(32).cast::<u8>());
                                                                super::super::super::golem::graph::types::Datetime {
                                                                    date: super::super::super::golem::graph::types::Date {
                                                                        year: l95 as u32,
                                                                        month: l96 as u8,
                                                                        day: l97 as u8,
                                                                    },
                                                                    time: super::super::super::golem::graph::types::Time {
                                                                        hour: l98 as u8,
                                                                        minute: l99 as u8,
                                                                        second: l100 as u8,
                                                                        nanosecond: l101 as u32,
                                                                    },
                                                                    timezone_offset_minutes: match l102 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l103 = i32::from(*base.add(34).cast::<i16>());
                                                                                l103 as i16
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            V135::Datetime(e135)
                                                        }
                                                        17 => {
                                                            let e135 = {
                                                                let l104 = *base.add(16).cast::<i64>();
                                                                let l105 = *base.add(24).cast::<i32>();
                                                                super::super::super::golem::graph::types::Duration {
                                                                    seconds: l104,
                                                                    nanoseconds: l105 as u32,
                                                                }
                                                            };
                                                            V135::Duration(e135)
                                                        }
                                                        18 => {
                                                            let e135 = {
                                                                let l106 = *base.add(16).cast::<f64>();
                                                                let l107 = *base.add(24).cast::<f64>();
                                                                let l108 = i32::from(*base.add(32).cast::<u8>());
                                                                super::super::super::golem::graph::types::Point {
                                                                    longitude: l106,
                                                                    latitude: l107,
                                                                    altitude: match l108 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l109 = *base.add(40).cast::<f64>();
                                                                                l109
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            V135::Point(e135)
                                                        }
                                                        19 => {
                                                            let e135 = {
                                                                let l110 = *base.add(16).cast::<*mut u8>();
                                                                let l111 = *base.add(20).cast::<usize>();
                                                                let base116 = l110;
                                                                let len116 = l111;
                                                                let mut result116 = _rt::Vec::with_capacity(len116);
                                                                for i in 0..len116 {
                                                                    let base = base116.add(i * 32);
                                                                    let e116 = {
                                                                        let l112 = *base.add(0).cast::<f64>();
                                                                        let l113 = *base.add(8).cast::<f64>();
                                                                        let l114 = i32::from(*base.add(16).cast::<u8>());
                                                                        super::super::super::golem::graph::types::Point {
                                                                            longitude: l112,
                                                                            latitude: l113,
                                                                            altitude: match l114 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l115 = *base.add(24).cast::<f64>();
                                                                                        l115
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            },
                                                                        }
                                                                    };
                                                                    result116.push(e116);
                                                                }
                                                                _rt::cabi_dealloc(base116, len116 * 32, 8);
                                                                super::super::super::golem::graph::types::Linestring {
                                                                    coordinates: result116,
                                                                }
                                                            };
                                                            V135::Linestring(e135)
                                                        }
                                                        n => {
                                                            debug_assert_eq!(n, 20, "invalid enum discriminant");
                                                            let e135 = {
                                                                let l117 = *base.add(16).cast::<*mut u8>();
                                                                let l118 = *base.add(20).cast::<usize>();
                                                                let base123 = l117;
                                                                let len123 = l118;
                                                                let mut result123 = _rt::Vec::with_capacity(len123);
                                                                for i in 0..len123 {
                                                                    let base = base123.add(i * 32);
                                                                    let e123 = {
                                                                        let l119 = *base.add(0).cast::<f64>();
                                                                        let l120 = *base.add(8).cast::<f64>();
                                                                        let l121 = i32::from(*base.add(16).cast::<u8>());
                                                                        super::super::super::golem::graph::types::Point {
                                                                            longitude: l119,
                                                                            latitude: l120,
                                                                            altitude: match l121 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l122 = *base.add(24).cast::<f64>();
                                                                                        l122
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            },
                                                                        }
                                                                    };
                                                                    result123.push(e123);
                                                                }
                                                                _rt::cabi_dealloc(base123, len123 * 32, 8);
                                                                let l124 = i32::from(*base.add(24).cast::<u8>());
                                                                super::super::super::golem::graph::types::Polygon {
                                                                    exterior: result123,
                                                                    holes: match l124 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l125 = *base.add(28).cast::<*mut u8>();
                                                                                let l126 = *base.add(32).cast::<usize>();
                                                                                let base134 = l125;
                                                                                let len134 = l126;
                                                                                let mut result134 = _rt::Vec::with_capacity(len134);
                                                                                for i in 0..len134 {
                                                                                    let base = base134.add(i * 8);
                                                                                    let e134 = {
                                                                                        let l127 = *base.add(0).cast::<*mut u8>();
                                                                                        let l128 = *base.add(4).cast::<usize>();
                                                                                        let base133 = l127;
                                                                                        let len133 = l128;
                                                                                        let mut result133 = _rt::Vec::with_capacity(len133);
                                                                                        for i in 0..len133 {
                                                                                            let base = base133.add(i * 32);
                                                                                            let e133 = {
                                                                                                let l129 = *base.add(0).cast::<f64>();
                                                                                                let l130 = *base.add(8).cast::<f64>();
                                                                                                let l131 = i32::from(*base.add(16).cast::<u8>());
                                                                                                super::super::super::golem::graph::types::Point {
                                                                                                    longitude: l129,
                                                                                                    latitude: l130,
                                                                                                    altitude: match l131 {
                                                                                                        0 => None,
                                                                                                        1 => {
                                                                                                            let e = {
                                                                                                                let l132 = *base.add(24).cast::<f64>();
                                                                                                                l132
                                                                                                            };
                                                                                                            Some(e)
                                                                                                        }
                                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                                    },
                                                                                                }
                                                                                            };
                                                                                            result133.push(e133);
                                                                                        }
                                                                                        _rt::cabi_dealloc(base133, len133 * 32, 8);
                                                                                        result133
                                                                                    };
                                                                                    result134.push(e134);
                                                                                }
                                                                                _rt::cabi_dealloc(base134, len134 * 8, 4);
                                                                                result134
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            V135::Polygon(e135)
                                                        }
                                                    };
                                                    (_rt::string_lift(bytes69), v135)
                                                };
                                                result136.push(e136);
                                            }
                                            _rt::cabi_dealloc(base136, len136 * 48, 8);
                                            super::super::super::golem::graph::types::Edge {
                                                id: v43,
                                                edge_type: _rt::string_lift(bytes46),
                                                from_vertex: v55,
                                                to_vertex: v64,
                                                properties: result136,
                                            }
                                        };
                                        result137.push(e137);
                                    }
                                    _rt::cabi_dealloc(base137, len137 * 64, 8);
                                    result137
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l138 = i32::from(*ptr31.add(8).cast::<u8>());
                                    use super::super::super::golem::graph::errors::GraphError as V193;
                                    let v193 = match l138 {
                                        0 => {
                                            let e193 = {
                                                let l139 = *ptr31.add(16).cast::<*mut u8>();
                                                let l140 = *ptr31.add(20).cast::<usize>();
                                                let len141 = l140;
                                                let bytes141 = _rt::Vec::from_raw_parts(
                                                    l139.cast(),
                                                    len141,
                                                    len141,
                                                );
                                                _rt::string_lift(bytes141)
                                            };
                                            V193::UnsupportedOperation(e193)
                                        }
                                        1 => {
                                            let e193 = {
                                                let l142 = *ptr31.add(16).cast::<*mut u8>();
                                                let l143 = *ptr31.add(20).cast::<usize>();
                                                let len144 = l143;
                                                let bytes144 = _rt::Vec::from_raw_parts(
                                                    l142.cast(),
                                                    len144,
                                                    len144,
                                                );
                                                _rt::string_lift(bytes144)
                                            };
                                            V193::ConnectionFailed(e193)
                                        }
                                        2 => {
                                            let e193 = {
                                                let l145 = *ptr31.add(16).cast::<*mut u8>();
                                                let l146 = *ptr31.add(20).cast::<usize>();
                                                let len147 = l146;
                                                let bytes147 = _rt::Vec::from_raw_parts(
                                                    l145.cast(),
                                                    len147,
                                                    len147,
                                                );
                                                _rt::string_lift(bytes147)
                                            };
                                            V193::AuthenticationFailed(e193)
                                        }
                                        3 => {
                                            let e193 = {
                                                let l148 = *ptr31.add(16).cast::<*mut u8>();
                                                let l149 = *ptr31.add(20).cast::<usize>();
                                                let len150 = l149;
                                                let bytes150 = _rt::Vec::from_raw_parts(
                                                    l148.cast(),
                                                    len150,
                                                    len150,
                                                );
                                                _rt::string_lift(bytes150)
                                            };
                                            V193::AuthorizationFailed(e193)
                                        }
                                        4 => {
                                            let e193 = {
                                                let l151 = i32::from(*ptr31.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V159;
                                                let v159 = match l151 {
                                                    0 => {
                                                        let e159 = {
                                                            let l152 = *ptr31.add(24).cast::<*mut u8>();
                                                            let l153 = *ptr31.add(28).cast::<usize>();
                                                            let len154 = l153;
                                                            let bytes154 = _rt::Vec::from_raw_parts(
                                                                l152.cast(),
                                                                len154,
                                                                len154,
                                                            );
                                                            _rt::string_lift(bytes154)
                                                        };
                                                        V159::StringValue(e159)
                                                    }
                                                    1 => {
                                                        let e159 = {
                                                            let l155 = *ptr31.add(24).cast::<i64>();
                                                            l155
                                                        };
                                                        V159::Int64(e159)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e159 = {
                                                            let l156 = *ptr31.add(24).cast::<*mut u8>();
                                                            let l157 = *ptr31.add(28).cast::<usize>();
                                                            let len158 = l157;
                                                            let bytes158 = _rt::Vec::from_raw_parts(
                                                                l156.cast(),
                                                                len158,
                                                                len158,
                                                            );
                                                            _rt::string_lift(bytes158)
                                                        };
                                                        V159::Uuid(e159)
                                                    }
                                                };
                                                v159
                                            };
                                            V193::ElementNotFound(e193)
                                        }
                                        5 => {
                                            let e193 = {
                                                let l160 = i32::from(*ptr31.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V168;
                                                let v168 = match l160 {
                                                    0 => {
                                                        let e168 = {
                                                            let l161 = *ptr31.add(24).cast::<*mut u8>();
                                                            let l162 = *ptr31.add(28).cast::<usize>();
                                                            let len163 = l162;
                                                            let bytes163 = _rt::Vec::from_raw_parts(
                                                                l161.cast(),
                                                                len163,
                                                                len163,
                                                            );
                                                            _rt::string_lift(bytes163)
                                                        };
                                                        V168::StringValue(e168)
                                                    }
                                                    1 => {
                                                        let e168 = {
                                                            let l164 = *ptr31.add(24).cast::<i64>();
                                                            l164
                                                        };
                                                        V168::Int64(e168)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e168 = {
                                                            let l165 = *ptr31.add(24).cast::<*mut u8>();
                                                            let l166 = *ptr31.add(28).cast::<usize>();
                                                            let len167 = l166;
                                                            let bytes167 = _rt::Vec::from_raw_parts(
                                                                l165.cast(),
                                                                len167,
                                                                len167,
                                                            );
                                                            _rt::string_lift(bytes167)
                                                        };
                                                        V168::Uuid(e168)
                                                    }
                                                };
                                                v168
                                            };
                                            V193::DuplicateElement(e193)
                                        }
                                        6 => {
                                            let e193 = {
                                                let l169 = *ptr31.add(16).cast::<*mut u8>();
                                                let l170 = *ptr31.add(20).cast::<usize>();
                                                let len171 = l170;
                                                let bytes171 = _rt::Vec::from_raw_parts(
                                                    l169.cast(),
                                                    len171,
                                                    len171,
                                                );
                                                _rt::string_lift(bytes171)
                                            };
                                            V193::SchemaViolation(e193)
                                        }
                                        7 => {
                                            let e193 = {
                                                let l172 = *ptr31.add(16).cast::<*mut u8>();
                                                let l173 = *ptr31.add(20).cast::<usize>();
                                                let len174 = l173;
                                                let bytes174 = _rt::Vec::from_raw_parts(
                                                    l172.cast(),
                                                    len174,
                                                    len174,
                                                );
                                                _rt::string_lift(bytes174)
                                            };
                                            V193::ConstraintViolation(e193)
                                        }
                                        8 => {
                                            let e193 = {
                                                let l175 = *ptr31.add(16).cast::<*mut u8>();
                                                let l176 = *ptr31.add(20).cast::<usize>();
                                                let len177 = l176;
                                                let bytes177 = _rt::Vec::from_raw_parts(
                                                    l175.cast(),
                                                    len177,
                                                    len177,
                                                );
                                                _rt::string_lift(bytes177)
                                            };
                                            V193::InvalidPropertyType(e193)
                                        }
                                        9 => {
                                            let e193 = {
                                                let l178 = *ptr31.add(16).cast::<*mut u8>();
                                                let l179 = *ptr31.add(20).cast::<usize>();
                                                let len180 = l179;
                                                let bytes180 = _rt::Vec::from_raw_parts(
                                                    l178.cast(),
                                                    len180,
                                                    len180,
                                                );
                                                _rt::string_lift(bytes180)
                                            };
                                            V193::InvalidQuery(e193)
                                        }
                                        10 => {
                                            let e193 = {
                                                let l181 = *ptr31.add(16).cast::<*mut u8>();
                                                let l182 = *ptr31.add(20).cast::<usize>();
                                                let len183 = l182;
                                                let bytes183 = _rt::Vec::from_raw_parts(
                                                    l181.cast(),
                                                    len183,
                                                    len183,
                                                );
                                                _rt::string_lift(bytes183)
                                            };
                                            V193::TransactionFailed(e193)
                                        }
                                        11 => V193::TransactionConflict,
                                        12 => V193::TransactionTimeout,
                                        13 => V193::DeadlockDetected,
                                        14 => V193::Timeout,
                                        15 => {
                                            let e193 = {
                                                let l184 = *ptr31.add(16).cast::<*mut u8>();
                                                let l185 = *ptr31.add(20).cast::<usize>();
                                                let len186 = l185;
                                                let bytes186 = _rt::Vec::from_raw_parts(
                                                    l184.cast(),
                                                    len186,
                                                    len186,
                                                );
                                                _rt::string_lift(bytes186)
                                            };
                                            V193::ResourceExhausted(e193)
                                        }
                                        16 => {
                                            let e193 = {
                                                let l187 = *ptr31.add(16).cast::<*mut u8>();
                                                let l188 = *ptr31.add(20).cast::<usize>();
                                                let len189 = l188;
                                                let bytes189 = _rt::Vec::from_raw_parts(
                                                    l187.cast(),
                                                    len189,
                                                    len189,
                                                );
                                                _rt::string_lift(bytes189)
                                            };
                                            V193::InternalError(e193)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 17, "invalid enum discriminant");
                                            let e193 = {
                                                let l190 = *ptr31.add(16).cast::<*mut u8>();
                                                let l191 = *ptr31.add(20).cast::<usize>();
                                                let len192 = l191;
                                                let bytes192 = _rt::Vec::from_raw_parts(
                                                    l190.cast(),
                                                    len192,
                                                    len192,
                                                );
                                                _rt::string_lift(bytes192)
                                            };
                                            V193::ServiceUnavailable(e193)
                                        }
                                    };
                                    v193
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Transaction {
                #[allow(unused_unsafe, clippy::all)]
                /// Upsert vertex (create or update)
                pub fn upsert_vertex(
                    &self,
                    id: Option<&ElementId>,
                    vertex_type: &str,
                    properties: &PropertyMap,
                ) -> Result<Vertex, GraphError> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 48]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 48],
                        );
                        let (result4_0, result4_1, result4_2, result4_3) = match id {
                            Some(e) => {
                                use super::super::super::golem::graph::types::ElementId as V2;
                                let (result3_0, result3_1, result3_2) = match e {
                                    V2::StringValue(e) => {
                                        let vec0 = e;
                                        let ptr0 = vec0.as_ptr().cast::<u8>();
                                        let len0 = vec0.len();
                                        (
                                            0i32,
                                            {
                                                let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                                t.as_mut_ptr().cast::<*mut u8>().write(ptr0.cast_mut());
                                                t
                                            },
                                            len0,
                                        )
                                    }
                                    V2::Int64(e) => {
                                        (
                                            1i32,
                                            ::core::mem::MaybeUninit::new(_rt::as_i64(e) as u64),
                                            0usize,
                                        )
                                    }
                                    V2::Uuid(e) => {
                                        let vec1 = e;
                                        let ptr1 = vec1.as_ptr().cast::<u8>();
                                        let len1 = vec1.len();
                                        (
                                            2i32,
                                            {
                                                let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                                t.as_mut_ptr().cast::<*mut u8>().write(ptr1.cast_mut());
                                                t
                                            },
                                            len1,
                                        )
                                    }
                                };
                                (1i32, result3_0, result3_1, result3_2)
                            }
                            None => {
                                (
                                    0i32,
                                    0i32,
                                    ::core::mem::MaybeUninit::<u64>::zeroed(),
                                    0usize,
                                )
                            }
                        };
                        let vec5 = vertex_type;
                        let ptr5 = vec5.as_ptr().cast::<u8>();
                        let len5 = vec5.len();
                        let vec27 = properties;
                        let len27 = vec27.len();
                        let layout27 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec27.len() * 48,
                            8,
                        );
                        let result27 = if layout27.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout27).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout27);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec27.into_iter().enumerate() {
                            let base = result27.add(i * 48);
                            {
                                let (t6_0, t6_1) = e;
                                let vec7 = t6_0;
                                let ptr7 = vec7.as_ptr().cast::<u8>();
                                let len7 = vec7.len();
                                *base.add(4).cast::<usize>() = len7;
                                *base.add(0).cast::<*mut u8>() = ptr7.cast_mut();
                                use super::super::super::golem::graph::types::PropertyValue as V26;
                                match t6_1 {
                                    V26::NullValue => {
                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                    }
                                    V26::Boolean(e) => {
                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                        *base.add(16).cast::<u8>() = (match e {
                                            true => 1,
                                            false => 0,
                                        }) as u8;
                                    }
                                    V26::Int8(e) => {
                                        *base.add(8).cast::<u8>() = (2i32) as u8;
                                        *base.add(16).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                    }
                                    V26::Int16(e) => {
                                        *base.add(8).cast::<u8>() = (3i32) as u8;
                                        *base.add(16).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                    }
                                    V26::Int32(e) => {
                                        *base.add(8).cast::<u8>() = (4i32) as u8;
                                        *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    V26::Int64(e) => {
                                        *base.add(8).cast::<u8>() = (5i32) as u8;
                                        *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    V26::Uint8(e) => {
                                        *base.add(8).cast::<u8>() = (6i32) as u8;
                                        *base.add(16).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                    }
                                    V26::Uint16(e) => {
                                        *base.add(8).cast::<u8>() = (7i32) as u8;
                                        *base.add(16).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                    }
                                    V26::Uint32(e) => {
                                        *base.add(8).cast::<u8>() = (8i32) as u8;
                                        *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    V26::Uint64(e) => {
                                        *base.add(8).cast::<u8>() = (9i32) as u8;
                                        *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    V26::Float32Value(e) => {
                                        *base.add(8).cast::<u8>() = (10i32) as u8;
                                        *base.add(16).cast::<f32>() = _rt::as_f32(e);
                                    }
                                    V26::Float64Value(e) => {
                                        *base.add(8).cast::<u8>() = (11i32) as u8;
                                        *base.add(16).cast::<f64>() = _rt::as_f64(e);
                                    }
                                    V26::StringValue(e) => {
                                        *base.add(8).cast::<u8>() = (12i32) as u8;
                                        let vec8 = e;
                                        let ptr8 = vec8.as_ptr().cast::<u8>();
                                        let len8 = vec8.len();
                                        *base.add(20).cast::<usize>() = len8;
                                        *base.add(16).cast::<*mut u8>() = ptr8.cast_mut();
                                    }
                                    V26::Bytes(e) => {
                                        *base.add(8).cast::<u8>() = (13i32) as u8;
                                        let vec9 = e;
                                        let ptr9 = vec9.as_ptr().cast::<u8>();
                                        let len9 = vec9.len();
                                        *base.add(20).cast::<usize>() = len9;
                                        *base.add(16).cast::<*mut u8>() = ptr9.cast_mut();
                                    }
                                    V26::Date(e) => {
                                        *base.add(8).cast::<u8>() = (14i32) as u8;
                                        let super::super::super::golem::graph::types::Date {
                                            year: year10,
                                            month: month10,
                                            day: day10,
                                        } = e;
                                        *base.add(16).cast::<i32>() = _rt::as_i32(year10);
                                        *base.add(20).cast::<u8>() = (_rt::as_i32(month10)) as u8;
                                        *base.add(21).cast::<u8>() = (_rt::as_i32(day10)) as u8;
                                    }
                                    V26::Time(e) => {
                                        *base.add(8).cast::<u8>() = (15i32) as u8;
                                        let super::super::super::golem::graph::types::Time {
                                            hour: hour11,
                                            minute: minute11,
                                            second: second11,
                                            nanosecond: nanosecond11,
                                        } = e;
                                        *base.add(16).cast::<u8>() = (_rt::as_i32(hour11)) as u8;
                                        *base.add(17).cast::<u8>() = (_rt::as_i32(minute11)) as u8;
                                        *base.add(18).cast::<u8>() = (_rt::as_i32(second11)) as u8;
                                        *base.add(20).cast::<i32>() = _rt::as_i32(nanosecond11);
                                    }
                                    V26::Datetime(e) => {
                                        *base.add(8).cast::<u8>() = (16i32) as u8;
                                        let super::super::super::golem::graph::types::Datetime {
                                            date: date12,
                                            time: time12,
                                            timezone_offset_minutes: timezone_offset_minutes12,
                                        } = e;
                                        let super::super::super::golem::graph::types::Date {
                                            year: year13,
                                            month: month13,
                                            day: day13,
                                        } = date12;
                                        *base.add(16).cast::<i32>() = _rt::as_i32(year13);
                                        *base.add(20).cast::<u8>() = (_rt::as_i32(month13)) as u8;
                                        *base.add(21).cast::<u8>() = (_rt::as_i32(day13)) as u8;
                                        let super::super::super::golem::graph::types::Time {
                                            hour: hour14,
                                            minute: minute14,
                                            second: second14,
                                            nanosecond: nanosecond14,
                                        } = time12;
                                        *base.add(24).cast::<u8>() = (_rt::as_i32(hour14)) as u8;
                                        *base.add(25).cast::<u8>() = (_rt::as_i32(minute14)) as u8;
                                        *base.add(26).cast::<u8>() = (_rt::as_i32(second14)) as u8;
                                        *base.add(28).cast::<i32>() = _rt::as_i32(nanosecond14);
                                        match timezone_offset_minutes12 {
                                            Some(e) => {
                                                *base.add(32).cast::<u8>() = (1i32) as u8;
                                                *base.add(34).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            None => {
                                                *base.add(32).cast::<u8>() = (0i32) as u8;
                                            }
                                        };
                                    }
                                    V26::Duration(e) => {
                                        *base.add(8).cast::<u8>() = (17i32) as u8;
                                        let super::super::super::golem::graph::types::Duration {
                                            seconds: seconds15,
                                            nanoseconds: nanoseconds15,
                                        } = e;
                                        *base.add(16).cast::<i64>() = _rt::as_i64(seconds15);
                                        *base.add(24).cast::<i32>() = _rt::as_i32(nanoseconds15);
                                    }
                                    V26::Point(e) => {
                                        *base.add(8).cast::<u8>() = (18i32) as u8;
                                        let super::super::super::golem::graph::types::Point {
                                            longitude: longitude16,
                                            latitude: latitude16,
                                            altitude: altitude16,
                                        } = e;
                                        *base.add(16).cast::<f64>() = _rt::as_f64(longitude16);
                                        *base.add(24).cast::<f64>() = _rt::as_f64(latitude16);
                                        match altitude16 {
                                            Some(e) => {
                                                *base.add(32).cast::<u8>() = (1i32) as u8;
                                                *base.add(40).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            None => {
                                                *base.add(32).cast::<u8>() = (0i32) as u8;
                                            }
                                        };
                                    }
                                    V26::Linestring(e) => {
                                        *base.add(8).cast::<u8>() = (19i32) as u8;
                                        let super::super::super::golem::graph::types::Linestring {
                                            coordinates: coordinates17,
                                        } = e;
                                        let vec19 = coordinates17;
                                        let len19 = vec19.len();
                                        let layout19 = _rt::alloc::Layout::from_size_align_unchecked(
                                            vec19.len() * 32,
                                            8,
                                        );
                                        let result19 = if layout19.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout19).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout19);
                                            }
                                            ptr
                                        } else {
                                            ::core::ptr::null_mut()
                                        };
                                        for (i, e) in vec19.into_iter().enumerate() {
                                            let base = result19.add(i * 32);
                                            {
                                                let super::super::super::golem::graph::types::Point {
                                                    longitude: longitude18,
                                                    latitude: latitude18,
                                                    altitude: altitude18,
                                                } = e;
                                                *base.add(0).cast::<f64>() = _rt::as_f64(longitude18);
                                                *base.add(8).cast::<f64>() = _rt::as_f64(latitude18);
                                                match altitude18 {
                                                    Some(e) => {
                                                        *base.add(16).cast::<u8>() = (1i32) as u8;
                                                        *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                    }
                                                    None => {
                                                        *base.add(16).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                        }
                                        *base.add(20).cast::<usize>() = len19;
                                        *base.add(16).cast::<*mut u8>() = result19;
                                        cleanup_list.extend_from_slice(&[(result19, layout19)]);
                                    }
                                    V26::Polygon(e) => {
                                        *base.add(8).cast::<u8>() = (20i32) as u8;
                                        let super::super::super::golem::graph::types::Polygon {
                                            exterior: exterior20,
                                            holes: holes20,
                                        } = e;
                                        let vec22 = exterior20;
                                        let len22 = vec22.len();
                                        let layout22 = _rt::alloc::Layout::from_size_align_unchecked(
                                            vec22.len() * 32,
                                            8,
                                        );
                                        let result22 = if layout22.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout22).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout22);
                                            }
                                            ptr
                                        } else {
                                            ::core::ptr::null_mut()
                                        };
                                        for (i, e) in vec22.into_iter().enumerate() {
                                            let base = result22.add(i * 32);
                                            {
                                                let super::super::super::golem::graph::types::Point {
                                                    longitude: longitude21,
                                                    latitude: latitude21,
                                                    altitude: altitude21,
                                                } = e;
                                                *base.add(0).cast::<f64>() = _rt::as_f64(longitude21);
                                                *base.add(8).cast::<f64>() = _rt::as_f64(latitude21);
                                                match altitude21 {
                                                    Some(e) => {
                                                        *base.add(16).cast::<u8>() = (1i32) as u8;
                                                        *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                    }
                                                    None => {
                                                        *base.add(16).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                        }
                                        *base.add(20).cast::<usize>() = len22;
                                        *base.add(16).cast::<*mut u8>() = result22;
                                        match holes20 {
                                            Some(e) => {
                                                *base.add(24).cast::<u8>() = (1i32) as u8;
                                                let vec25 = e;
                                                let len25 = vec25.len();
                                                let layout25 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec25.len() * 8,
                                                    4,
                                                );
                                                let result25 = if layout25.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout25).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout25);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec25.into_iter().enumerate() {
                                                    let base = result25.add(i * 8);
                                                    {
                                                        let vec24 = e;
                                                        let len24 = vec24.len();
                                                        let layout24 = _rt::alloc::Layout::from_size_align_unchecked(
                                                            vec24.len() * 32,
                                                            8,
                                                        );
                                                        let result24 = if layout24.size() != 0 {
                                                            let ptr = _rt::alloc::alloc(layout24).cast::<u8>();
                                                            if ptr.is_null() {
                                                                _rt::alloc::handle_alloc_error(layout24);
                                                            }
                                                            ptr
                                                        } else {
                                                            ::core::ptr::null_mut()
                                                        };
                                                        for (i, e) in vec24.into_iter().enumerate() {
                                                            let base = result24.add(i * 32);
                                                            {
                                                                let super::super::super::golem::graph::types::Point {
                                                                    longitude: longitude23,
                                                                    latitude: latitude23,
                                                                    altitude: altitude23,
                                                                } = e;
                                                                *base.add(0).cast::<f64>() = _rt::as_f64(longitude23);
                                                                *base.add(8).cast::<f64>() = _rt::as_f64(latitude23);
                                                                match altitude23 {
                                                                    Some(e) => {
                                                                        *base.add(16).cast::<u8>() = (1i32) as u8;
                                                                        *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                                    }
                                                                    None => {
                                                                        *base.add(16).cast::<u8>() = (0i32) as u8;
                                                                    }
                                                                };
                                                            }
                                                        }
                                                        *base.add(4).cast::<usize>() = len24;
                                                        *base.add(0).cast::<*mut u8>() = result24;
                                                        cleanup_list.extend_from_slice(&[(result24, layout24)]);
                                                    }
                                                }
                                                *base.add(32).cast::<usize>() = len25;
                                                *base.add(28).cast::<*mut u8>() = result25;
                                                cleanup_list.extend_from_slice(&[(result25, layout25)]);
                                            }
                                            None => {
                                                *base.add(24).cast::<u8>() = (0i32) as u8;
                                            }
                                        };
                                        cleanup_list.extend_from_slice(&[(result22, layout22)]);
                                    }
                                }
                            }
                        }
                        let ptr28 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:graph/transactions@1.0.0")]
                        extern "C" {
                            #[link_name = "[method]transaction.upsert-vertex"]
                            fn wit_import(
                                _: i32,
                                _: i32,
                                _: i32,
                                _: ::core::mem::MaybeUninit<u64>,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: i32,
                            _: i32,
                            _: ::core::mem::MaybeUninit<u64>,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            result4_0,
                            result4_1,
                            result4_2,
                            result4_3,
                            ptr5.cast_mut(),
                            len5,
                            result27,
                            len27,
                            ptr28,
                        );
                        let l29 = i32::from(*ptr28.add(0).cast::<u8>());
                        if layout27.size() != 0 {
                            _rt::alloc::dealloc(result27.cast(), layout27);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l29 {
                            0 => {
                                let e = {
                                    let l30 = i32::from(*ptr28.add(8).cast::<u8>());
                                    use super::super::super::golem::graph::types::ElementId as V38;
                                    let v38 = match l30 {
                                        0 => {
                                            let e38 = {
                                                let l31 = *ptr28.add(16).cast::<*mut u8>();
                                                let l32 = *ptr28.add(20).cast::<usize>();
                                                let len33 = l32;
                                                let bytes33 = _rt::Vec::from_raw_parts(
                                                    l31.cast(),
                                                    len33,
                                                    len33,
                                                );
                                                _rt::string_lift(bytes33)
                                            };
                                            V38::StringValue(e38)
                                        }
                                        1 => {
                                            let e38 = {
                                                let l34 = *ptr28.add(16).cast::<i64>();
                                                l34
                                            };
                                            V38::Int64(e38)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 2, "invalid enum discriminant");
                                            let e38 = {
                                                let l35 = *ptr28.add(16).cast::<*mut u8>();
                                                let l36 = *ptr28.add(20).cast::<usize>();
                                                let len37 = l36;
                                                let bytes37 = _rt::Vec::from_raw_parts(
                                                    l35.cast(),
                                                    len37,
                                                    len37,
                                                );
                                                _rt::string_lift(bytes37)
                                            };
                                            V38::Uuid(e38)
                                        }
                                    };
                                    let l39 = *ptr28.add(24).cast::<*mut u8>();
                                    let l40 = *ptr28.add(28).cast::<usize>();
                                    let len41 = l40;
                                    let bytes41 = _rt::Vec::from_raw_parts(
                                        l39.cast(),
                                        len41,
                                        len41,
                                    );
                                    let l42 = *ptr28.add(32).cast::<*mut u8>();
                                    let l43 = *ptr28.add(36).cast::<usize>();
                                    let base47 = l42;
                                    let len47 = l43;
                                    let mut result47 = _rt::Vec::with_capacity(len47);
                                    for i in 0..len47 {
                                        let base = base47.add(i * 8);
                                        let e47 = {
                                            let l44 = *base.add(0).cast::<*mut u8>();
                                            let l45 = *base.add(4).cast::<usize>();
                                            let len46 = l45;
                                            let bytes46 = _rt::Vec::from_raw_parts(
                                                l44.cast(),
                                                len46,
                                                len46,
                                            );
                                            _rt::string_lift(bytes46)
                                        };
                                        result47.push(e47);
                                    }
                                    _rt::cabi_dealloc(base47, len47 * 8, 4);
                                    let l48 = *ptr28.add(40).cast::<*mut u8>();
                                    let l49 = *ptr28.add(44).cast::<usize>();
                                    let base119 = l48;
                                    let len119 = l49;
                                    let mut result119 = _rt::Vec::with_capacity(len119);
                                    for i in 0..len119 {
                                        let base = base119.add(i * 48);
                                        let e119 = {
                                            let l50 = *base.add(0).cast::<*mut u8>();
                                            let l51 = *base.add(4).cast::<usize>();
                                            let len52 = l51;
                                            let bytes52 = _rt::Vec::from_raw_parts(
                                                l50.cast(),
                                                len52,
                                                len52,
                                            );
                                            let l53 = i32::from(*base.add(8).cast::<u8>());
                                            use super::super::super::golem::graph::types::PropertyValue as V118;
                                            let v118 = match l53 {
                                                0 => V118::NullValue,
                                                1 => {
                                                    let e118 = {
                                                        let l54 = i32::from(*base.add(16).cast::<u8>());
                                                        _rt::bool_lift(l54 as u8)
                                                    };
                                                    V118::Boolean(e118)
                                                }
                                                2 => {
                                                    let e118 = {
                                                        let l55 = i32::from(*base.add(16).cast::<i8>());
                                                        l55 as i8
                                                    };
                                                    V118::Int8(e118)
                                                }
                                                3 => {
                                                    let e118 = {
                                                        let l56 = i32::from(*base.add(16).cast::<i16>());
                                                        l56 as i16
                                                    };
                                                    V118::Int16(e118)
                                                }
                                                4 => {
                                                    let e118 = {
                                                        let l57 = *base.add(16).cast::<i32>();
                                                        l57
                                                    };
                                                    V118::Int32(e118)
                                                }
                                                5 => {
                                                    let e118 = {
                                                        let l58 = *base.add(16).cast::<i64>();
                                                        l58
                                                    };
                                                    V118::Int64(e118)
                                                }
                                                6 => {
                                                    let e118 = {
                                                        let l59 = i32::from(*base.add(16).cast::<u8>());
                                                        l59 as u8
                                                    };
                                                    V118::Uint8(e118)
                                                }
                                                7 => {
                                                    let e118 = {
                                                        let l60 = i32::from(*base.add(16).cast::<u16>());
                                                        l60 as u16
                                                    };
                                                    V118::Uint16(e118)
                                                }
                                                8 => {
                                                    let e118 = {
                                                        let l61 = *base.add(16).cast::<i32>();
                                                        l61 as u32
                                                    };
                                                    V118::Uint32(e118)
                                                }
                                                9 => {
                                                    let e118 = {
                                                        let l62 = *base.add(16).cast::<i64>();
                                                        l62 as u64
                                                    };
                                                    V118::Uint64(e118)
                                                }
                                                10 => {
                                                    let e118 = {
                                                        let l63 = *base.add(16).cast::<f32>();
                                                        l63
                                                    };
                                                    V118::Float32Value(e118)
                                                }
                                                11 => {
                                                    let e118 = {
                                                        let l64 = *base.add(16).cast::<f64>();
                                                        l64
                                                    };
                                                    V118::Float64Value(e118)
                                                }
                                                12 => {
                                                    let e118 = {
                                                        let l65 = *base.add(16).cast::<*mut u8>();
                                                        let l66 = *base.add(20).cast::<usize>();
                                                        let len67 = l66;
                                                        let bytes67 = _rt::Vec::from_raw_parts(
                                                            l65.cast(),
                                                            len67,
                                                            len67,
                                                        );
                                                        _rt::string_lift(bytes67)
                                                    };
                                                    V118::StringValue(e118)
                                                }
                                                13 => {
                                                    let e118 = {
                                                        let l68 = *base.add(16).cast::<*mut u8>();
                                                        let l69 = *base.add(20).cast::<usize>();
                                                        let len70 = l69;
                                                        _rt::Vec::from_raw_parts(l68.cast(), len70, len70)
                                                    };
                                                    V118::Bytes(e118)
                                                }
                                                14 => {
                                                    let e118 = {
                                                        let l71 = *base.add(16).cast::<i32>();
                                                        let l72 = i32::from(*base.add(20).cast::<u8>());
                                                        let l73 = i32::from(*base.add(21).cast::<u8>());
                                                        super::super::super::golem::graph::types::Date {
                                                            year: l71 as u32,
                                                            month: l72 as u8,
                                                            day: l73 as u8,
                                                        }
                                                    };
                                                    V118::Date(e118)
                                                }
                                                15 => {
                                                    let e118 = {
                                                        let l74 = i32::from(*base.add(16).cast::<u8>());
                                                        let l75 = i32::from(*base.add(17).cast::<u8>());
                                                        let l76 = i32::from(*base.add(18).cast::<u8>());
                                                        let l77 = *base.add(20).cast::<i32>();
                                                        super::super::super::golem::graph::types::Time {
                                                            hour: l74 as u8,
                                                            minute: l75 as u8,
                                                            second: l76 as u8,
                                                            nanosecond: l77 as u32,
                                                        }
                                                    };
                                                    V118::Time(e118)
                                                }
                                                16 => {
                                                    let e118 = {
                                                        let l78 = *base.add(16).cast::<i32>();
                                                        let l79 = i32::from(*base.add(20).cast::<u8>());
                                                        let l80 = i32::from(*base.add(21).cast::<u8>());
                                                        let l81 = i32::from(*base.add(24).cast::<u8>());
                                                        let l82 = i32::from(*base.add(25).cast::<u8>());
                                                        let l83 = i32::from(*base.add(26).cast::<u8>());
                                                        let l84 = *base.add(28).cast::<i32>();
                                                        let l85 = i32::from(*base.add(32).cast::<u8>());
                                                        super::super::super::golem::graph::types::Datetime {
                                                            date: super::super::super::golem::graph::types::Date {
                                                                year: l78 as u32,
                                                                month: l79 as u8,
                                                                day: l80 as u8,
                                                            },
                                                            time: super::super::super::golem::graph::types::Time {
                                                                hour: l81 as u8,
                                                                minute: l82 as u8,
                                                                second: l83 as u8,
                                                                nanosecond: l84 as u32,
                                                            },
                                                            timezone_offset_minutes: match l85 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l86 = i32::from(*base.add(34).cast::<i16>());
                                                                        l86 as i16
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                        }
                                                    };
                                                    V118::Datetime(e118)
                                                }
                                                17 => {
                                                    let e118 = {
                                                        let l87 = *base.add(16).cast::<i64>();
                                                        let l88 = *base.add(24).cast::<i32>();
                                                        super::super::super::golem::graph::types::Duration {
                                                            seconds: l87,
                                                            nanoseconds: l88 as u32,
                                                        }
                                                    };
                                                    V118::Duration(e118)
                                                }
                                                18 => {
                                                    let e118 = {
                                                        let l89 = *base.add(16).cast::<f64>();
                                                        let l90 = *base.add(24).cast::<f64>();
                                                        let l91 = i32::from(*base.add(32).cast::<u8>());
                                                        super::super::super::golem::graph::types::Point {
                                                            longitude: l89,
                                                            latitude: l90,
                                                            altitude: match l91 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l92 = *base.add(40).cast::<f64>();
                                                                        l92
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                        }
                                                    };
                                                    V118::Point(e118)
                                                }
                                                19 => {
                                                    let e118 = {
                                                        let l93 = *base.add(16).cast::<*mut u8>();
                                                        let l94 = *base.add(20).cast::<usize>();
                                                        let base99 = l93;
                                                        let len99 = l94;
                                                        let mut result99 = _rt::Vec::with_capacity(len99);
                                                        for i in 0..len99 {
                                                            let base = base99.add(i * 32);
                                                            let e99 = {
                                                                let l95 = *base.add(0).cast::<f64>();
                                                                let l96 = *base.add(8).cast::<f64>();
                                                                let l97 = i32::from(*base.add(16).cast::<u8>());
                                                                super::super::super::golem::graph::types::Point {
                                                                    longitude: l95,
                                                                    latitude: l96,
                                                                    altitude: match l97 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l98 = *base.add(24).cast::<f64>();
                                                                                l98
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            result99.push(e99);
                                                        }
                                                        _rt::cabi_dealloc(base99, len99 * 32, 8);
                                                        super::super::super::golem::graph::types::Linestring {
                                                            coordinates: result99,
                                                        }
                                                    };
                                                    V118::Linestring(e118)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 20, "invalid enum discriminant");
                                                    let e118 = {
                                                        let l100 = *base.add(16).cast::<*mut u8>();
                                                        let l101 = *base.add(20).cast::<usize>();
                                                        let base106 = l100;
                                                        let len106 = l101;
                                                        let mut result106 = _rt::Vec::with_capacity(len106);
                                                        for i in 0..len106 {
                                                            let base = base106.add(i * 32);
                                                            let e106 = {
                                                                let l102 = *base.add(0).cast::<f64>();
                                                                let l103 = *base.add(8).cast::<f64>();
                                                                let l104 = i32::from(*base.add(16).cast::<u8>());
                                                                super::super::super::golem::graph::types::Point {
                                                                    longitude: l102,
                                                                    latitude: l103,
                                                                    altitude: match l104 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l105 = *base.add(24).cast::<f64>();
                                                                                l105
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            result106.push(e106);
                                                        }
                                                        _rt::cabi_dealloc(base106, len106 * 32, 8);
                                                        let l107 = i32::from(*base.add(24).cast::<u8>());
                                                        super::super::super::golem::graph::types::Polygon {
                                                            exterior: result106,
                                                            holes: match l107 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l108 = *base.add(28).cast::<*mut u8>();
                                                                        let l109 = *base.add(32).cast::<usize>();
                                                                        let base117 = l108;
                                                                        let len117 = l109;
                                                                        let mut result117 = _rt::Vec::with_capacity(len117);
                                                                        for i in 0..len117 {
                                                                            let base = base117.add(i * 8);
                                                                            let e117 = {
                                                                                let l110 = *base.add(0).cast::<*mut u8>();
                                                                                let l111 = *base.add(4).cast::<usize>();
                                                                                let base116 = l110;
                                                                                let len116 = l111;
                                                                                let mut result116 = _rt::Vec::with_capacity(len116);
                                                                                for i in 0..len116 {
                                                                                    let base = base116.add(i * 32);
                                                                                    let e116 = {
                                                                                        let l112 = *base.add(0).cast::<f64>();
                                                                                        let l113 = *base.add(8).cast::<f64>();
                                                                                        let l114 = i32::from(*base.add(16).cast::<u8>());
                                                                                        super::super::super::golem::graph::types::Point {
                                                                                            longitude: l112,
                                                                                            latitude: l113,
                                                                                            altitude: match l114 {
                                                                                                0 => None,
                                                                                                1 => {
                                                                                                    let e = {
                                                                                                        let l115 = *base.add(24).cast::<f64>();
                                                                                                        l115
                                                                                                    };
                                                                                                    Some(e)
                                                                                                }
                                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                                            },
                                                                                        }
                                                                                    };
                                                                                    result116.push(e116);
                                                                                }
                                                                                _rt::cabi_dealloc(base116, len116 * 32, 8);
                                                                                result116
                                                                            };
                                                                            result117.push(e117);
                                                                        }
                                                                        _rt::cabi_dealloc(base117, len117 * 8, 4);
                                                                        result117
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                        }
                                                    };
                                                    V118::Polygon(e118)
                                                }
                                            };
                                            (_rt::string_lift(bytes52), v118)
                                        };
                                        result119.push(e119);
                                    }
                                    _rt::cabi_dealloc(base119, len119 * 48, 8);
                                    super::super::super::golem::graph::types::Vertex {
                                        id: v38,
                                        vertex_type: _rt::string_lift(bytes41),
                                        additional_labels: result47,
                                        properties: result119,
                                    }
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l120 = i32::from(*ptr28.add(8).cast::<u8>());
                                    use super::super::super::golem::graph::errors::GraphError as V175;
                                    let v175 = match l120 {
                                        0 => {
                                            let e175 = {
                                                let l121 = *ptr28.add(16).cast::<*mut u8>();
                                                let l122 = *ptr28.add(20).cast::<usize>();
                                                let len123 = l122;
                                                let bytes123 = _rt::Vec::from_raw_parts(
                                                    l121.cast(),
                                                    len123,
                                                    len123,
                                                );
                                                _rt::string_lift(bytes123)
                                            };
                                            V175::UnsupportedOperation(e175)
                                        }
                                        1 => {
                                            let e175 = {
                                                let l124 = *ptr28.add(16).cast::<*mut u8>();
                                                let l125 = *ptr28.add(20).cast::<usize>();
                                                let len126 = l125;
                                                let bytes126 = _rt::Vec::from_raw_parts(
                                                    l124.cast(),
                                                    len126,
                                                    len126,
                                                );
                                                _rt::string_lift(bytes126)
                                            };
                                            V175::ConnectionFailed(e175)
                                        }
                                        2 => {
                                            let e175 = {
                                                let l127 = *ptr28.add(16).cast::<*mut u8>();
                                                let l128 = *ptr28.add(20).cast::<usize>();
                                                let len129 = l128;
                                                let bytes129 = _rt::Vec::from_raw_parts(
                                                    l127.cast(),
                                                    len129,
                                                    len129,
                                                );
                                                _rt::string_lift(bytes129)
                                            };
                                            V175::AuthenticationFailed(e175)
                                        }
                                        3 => {
                                            let e175 = {
                                                let l130 = *ptr28.add(16).cast::<*mut u8>();
                                                let l131 = *ptr28.add(20).cast::<usize>();
                                                let len132 = l131;
                                                let bytes132 = _rt::Vec::from_raw_parts(
                                                    l130.cast(),
                                                    len132,
                                                    len132,
                                                );
                                                _rt::string_lift(bytes132)
                                            };
                                            V175::AuthorizationFailed(e175)
                                        }
                                        4 => {
                                            let e175 = {
                                                let l133 = i32::from(*ptr28.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V141;
                                                let v141 = match l133 {
                                                    0 => {
                                                        let e141 = {
                                                            let l134 = *ptr28.add(24).cast::<*mut u8>();
                                                            let l135 = *ptr28.add(28).cast::<usize>();
                                                            let len136 = l135;
                                                            let bytes136 = _rt::Vec::from_raw_parts(
                                                                l134.cast(),
                                                                len136,
                                                                len136,
                                                            );
                                                            _rt::string_lift(bytes136)
                                                        };
                                                        V141::StringValue(e141)
                                                    }
                                                    1 => {
                                                        let e141 = {
                                                            let l137 = *ptr28.add(24).cast::<i64>();
                                                            l137
                                                        };
                                                        V141::Int64(e141)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e141 = {
                                                            let l138 = *ptr28.add(24).cast::<*mut u8>();
                                                            let l139 = *ptr28.add(28).cast::<usize>();
                                                            let len140 = l139;
                                                            let bytes140 = _rt::Vec::from_raw_parts(
                                                                l138.cast(),
                                                                len140,
                                                                len140,
                                                            );
                                                            _rt::string_lift(bytes140)
                                                        };
                                                        V141::Uuid(e141)
                                                    }
                                                };
                                                v141
                                            };
                                            V175::ElementNotFound(e175)
                                        }
                                        5 => {
                                            let e175 = {
                                                let l142 = i32::from(*ptr28.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V150;
                                                let v150 = match l142 {
                                                    0 => {
                                                        let e150 = {
                                                            let l143 = *ptr28.add(24).cast::<*mut u8>();
                                                            let l144 = *ptr28.add(28).cast::<usize>();
                                                            let len145 = l144;
                                                            let bytes145 = _rt::Vec::from_raw_parts(
                                                                l143.cast(),
                                                                len145,
                                                                len145,
                                                            );
                                                            _rt::string_lift(bytes145)
                                                        };
                                                        V150::StringValue(e150)
                                                    }
                                                    1 => {
                                                        let e150 = {
                                                            let l146 = *ptr28.add(24).cast::<i64>();
                                                            l146
                                                        };
                                                        V150::Int64(e150)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e150 = {
                                                            let l147 = *ptr28.add(24).cast::<*mut u8>();
                                                            let l148 = *ptr28.add(28).cast::<usize>();
                                                            let len149 = l148;
                                                            let bytes149 = _rt::Vec::from_raw_parts(
                                                                l147.cast(),
                                                                len149,
                                                                len149,
                                                            );
                                                            _rt::string_lift(bytes149)
                                                        };
                                                        V150::Uuid(e150)
                                                    }
                                                };
                                                v150
                                            };
                                            V175::DuplicateElement(e175)
                                        }
                                        6 => {
                                            let e175 = {
                                                let l151 = *ptr28.add(16).cast::<*mut u8>();
                                                let l152 = *ptr28.add(20).cast::<usize>();
                                                let len153 = l152;
                                                let bytes153 = _rt::Vec::from_raw_parts(
                                                    l151.cast(),
                                                    len153,
                                                    len153,
                                                );
                                                _rt::string_lift(bytes153)
                                            };
                                            V175::SchemaViolation(e175)
                                        }
                                        7 => {
                                            let e175 = {
                                                let l154 = *ptr28.add(16).cast::<*mut u8>();
                                                let l155 = *ptr28.add(20).cast::<usize>();
                                                let len156 = l155;
                                                let bytes156 = _rt::Vec::from_raw_parts(
                                                    l154.cast(),
                                                    len156,
                                                    len156,
                                                );
                                                _rt::string_lift(bytes156)
                                            };
                                            V175::ConstraintViolation(e175)
                                        }
                                        8 => {
                                            let e175 = {
                                                let l157 = *ptr28.add(16).cast::<*mut u8>();
                                                let l158 = *ptr28.add(20).cast::<usize>();
                                                let len159 = l158;
                                                let bytes159 = _rt::Vec::from_raw_parts(
                                                    l157.cast(),
                                                    len159,
                                                    len159,
                                                );
                                                _rt::string_lift(bytes159)
                                            };
                                            V175::InvalidPropertyType(e175)
                                        }
                                        9 => {
                                            let e175 = {
                                                let l160 = *ptr28.add(16).cast::<*mut u8>();
                                                let l161 = *ptr28.add(20).cast::<usize>();
                                                let len162 = l161;
                                                let bytes162 = _rt::Vec::from_raw_parts(
                                                    l160.cast(),
                                                    len162,
                                                    len162,
                                                );
                                                _rt::string_lift(bytes162)
                                            };
                                            V175::InvalidQuery(e175)
                                        }
                                        10 => {
                                            let e175 = {
                                                let l163 = *ptr28.add(16).cast::<*mut u8>();
                                                let l164 = *ptr28.add(20).cast::<usize>();
                                                let len165 = l164;
                                                let bytes165 = _rt::Vec::from_raw_parts(
                                                    l163.cast(),
                                                    len165,
                                                    len165,
                                                );
                                                _rt::string_lift(bytes165)
                                            };
                                            V175::TransactionFailed(e175)
                                        }
                                        11 => V175::TransactionConflict,
                                        12 => V175::TransactionTimeout,
                                        13 => V175::DeadlockDetected,
                                        14 => V175::Timeout,
                                        15 => {
                                            let e175 = {
                                                let l166 = *ptr28.add(16).cast::<*mut u8>();
                                                let l167 = *ptr28.add(20).cast::<usize>();
                                                let len168 = l167;
                                                let bytes168 = _rt::Vec::from_raw_parts(
                                                    l166.cast(),
                                                    len168,
                                                    len168,
                                                );
                                                _rt::string_lift(bytes168)
                                            };
                                            V175::ResourceExhausted(e175)
                                        }
                                        16 => {
                                            let e175 = {
                                                let l169 = *ptr28.add(16).cast::<*mut u8>();
                                                let l170 = *ptr28.add(20).cast::<usize>();
                                                let len171 = l170;
                                                let bytes171 = _rt::Vec::from_raw_parts(
                                                    l169.cast(),
                                                    len171,
                                                    len171,
                                                );
                                                _rt::string_lift(bytes171)
                                            };
                                            V175::InternalError(e175)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 17, "invalid enum discriminant");
                                            let e175 = {
                                                let l172 = *ptr28.add(16).cast::<*mut u8>();
                                                let l173 = *ptr28.add(20).cast::<usize>();
                                                let len174 = l173;
                                                let bytes174 = _rt::Vec::from_raw_parts(
                                                    l172.cast(),
                                                    len174,
                                                    len174,
                                                );
                                                _rt::string_lift(bytes174)
                                            };
                                            V175::ServiceUnavailable(e175)
                                        }
                                    };
                                    v175
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Transaction {
                #[allow(unused_unsafe, clippy::all)]
                /// Upsert edge (create or update)
                pub fn upsert_edge(
                    &self,
                    id: Option<&ElementId>,
                    edge_type: &str,
                    from_vertex: &ElementId,
                    to_vertex: &ElementId,
                    properties: &PropertyMap,
                ) -> Result<Edge, GraphError> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 72]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 72],
                        );
                        let (result4_0, result4_1, result4_2, result4_3) = match id {
                            Some(e) => {
                                use super::super::super::golem::graph::types::ElementId as V2;
                                let (result3_0, result3_1, result3_2) = match e {
                                    V2::StringValue(e) => {
                                        let vec0 = e;
                                        let ptr0 = vec0.as_ptr().cast::<u8>();
                                        let len0 = vec0.len();
                                        (
                                            0i32,
                                            {
                                                let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                                t.as_mut_ptr().cast::<*mut u8>().write(ptr0.cast_mut());
                                                t
                                            },
                                            len0,
                                        )
                                    }
                                    V2::Int64(e) => {
                                        (
                                            1i32,
                                            ::core::mem::MaybeUninit::new(_rt::as_i64(e) as u64),
                                            0usize,
                                        )
                                    }
                                    V2::Uuid(e) => {
                                        let vec1 = e;
                                        let ptr1 = vec1.as_ptr().cast::<u8>();
                                        let len1 = vec1.len();
                                        (
                                            2i32,
                                            {
                                                let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                                t.as_mut_ptr().cast::<*mut u8>().write(ptr1.cast_mut());
                                                t
                                            },
                                            len1,
                                        )
                                    }
                                };
                                (1i32, result3_0, result3_1, result3_2)
                            }
                            None => {
                                (
                                    0i32,
                                    0i32,
                                    ::core::mem::MaybeUninit::<u64>::zeroed(),
                                    0usize,
                                )
                            }
                        };
                        let vec5 = edge_type;
                        let ptr5 = vec5.as_ptr().cast::<u8>();
                        let len5 = vec5.len();
                        use super::super::super::golem::graph::types::ElementId as V8;
                        let (result9_0, result9_1, result9_2) = match from_vertex {
                            V8::StringValue(e) => {
                                let vec6 = e;
                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                let len6 = vec6.len();
                                (
                                    0i32,
                                    {
                                        let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                        t.as_mut_ptr().cast::<*mut u8>().write(ptr6.cast_mut());
                                        t
                                    },
                                    len6,
                                )
                            }
                            V8::Int64(e) => {
                                (
                                    1i32,
                                    ::core::mem::MaybeUninit::new(_rt::as_i64(e) as u64),
                                    0usize,
                                )
                            }
                            V8::Uuid(e) => {
                                let vec7 = e;
                                let ptr7 = vec7.as_ptr().cast::<u8>();
                                let len7 = vec7.len();
                                (
                                    2i32,
                                    {
                                        let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                        t.as_mut_ptr().cast::<*mut u8>().write(ptr7.cast_mut());
                                        t
                                    },
                                    len7,
                                )
                            }
                        };
                        use super::super::super::golem::graph::types::ElementId as V12;
                        let (result13_0, result13_1, result13_2) = match to_vertex {
                            V12::StringValue(e) => {
                                let vec10 = e;
                                let ptr10 = vec10.as_ptr().cast::<u8>();
                                let len10 = vec10.len();
                                (
                                    0i32,
                                    {
                                        let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                        t.as_mut_ptr().cast::<*mut u8>().write(ptr10.cast_mut());
                                        t
                                    },
                                    len10,
                                )
                            }
                            V12::Int64(e) => {
                                (
                                    1i32,
                                    ::core::mem::MaybeUninit::new(_rt::as_i64(e) as u64),
                                    0usize,
                                )
                            }
                            V12::Uuid(e) => {
                                let vec11 = e;
                                let ptr11 = vec11.as_ptr().cast::<u8>();
                                let len11 = vec11.len();
                                (
                                    2i32,
                                    {
                                        let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                        t.as_mut_ptr().cast::<*mut u8>().write(ptr11.cast_mut());
                                        t
                                    },
                                    len11,
                                )
                            }
                        };
                        let vec35 = properties;
                        let len35 = vec35.len();
                        let layout35 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec35.len() * 48,
                            8,
                        );
                        let result35 = if layout35.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout35).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout35);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec35.into_iter().enumerate() {
                            let base = result35.add(i * 48);
                            {
                                let (t14_0, t14_1) = e;
                                let vec15 = t14_0;
                                let ptr15 = vec15.as_ptr().cast::<u8>();
                                let len15 = vec15.len();
                                *base.add(4).cast::<usize>() = len15;
                                *base.add(0).cast::<*mut u8>() = ptr15.cast_mut();
                                use super::super::super::golem::graph::types::PropertyValue as V34;
                                match t14_1 {
                                    V34::NullValue => {
                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                    }
                                    V34::Boolean(e) => {
                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                        *base.add(16).cast::<u8>() = (match e {
                                            true => 1,
                                            false => 0,
                                        }) as u8;
                                    }
                                    V34::Int8(e) => {
                                        *base.add(8).cast::<u8>() = (2i32) as u8;
                                        *base.add(16).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                    }
                                    V34::Int16(e) => {
                                        *base.add(8).cast::<u8>() = (3i32) as u8;
                                        *base.add(16).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                    }
                                    V34::Int32(e) => {
                                        *base.add(8).cast::<u8>() = (4i32) as u8;
                                        *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    V34::Int64(e) => {
                                        *base.add(8).cast::<u8>() = (5i32) as u8;
                                        *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    V34::Uint8(e) => {
                                        *base.add(8).cast::<u8>() = (6i32) as u8;
                                        *base.add(16).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                    }
                                    V34::Uint16(e) => {
                                        *base.add(8).cast::<u8>() = (7i32) as u8;
                                        *base.add(16).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                    }
                                    V34::Uint32(e) => {
                                        *base.add(8).cast::<u8>() = (8i32) as u8;
                                        *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                    }
                                    V34::Uint64(e) => {
                                        *base.add(8).cast::<u8>() = (9i32) as u8;
                                        *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                    }
                                    V34::Float32Value(e) => {
                                        *base.add(8).cast::<u8>() = (10i32) as u8;
                                        *base.add(16).cast::<f32>() = _rt::as_f32(e);
                                    }
                                    V34::Float64Value(e) => {
                                        *base.add(8).cast::<u8>() = (11i32) as u8;
                                        *base.add(16).cast::<f64>() = _rt::as_f64(e);
                                    }
                                    V34::StringValue(e) => {
                                        *base.add(8).cast::<u8>() = (12i32) as u8;
                                        let vec16 = e;
                                        let ptr16 = vec16.as_ptr().cast::<u8>();
                                        let len16 = vec16.len();
                                        *base.add(20).cast::<usize>() = len16;
                                        *base.add(16).cast::<*mut u8>() = ptr16.cast_mut();
                                    }
                                    V34::Bytes(e) => {
                                        *base.add(8).cast::<u8>() = (13i32) as u8;
                                        let vec17 = e;
                                        let ptr17 = vec17.as_ptr().cast::<u8>();
                                        let len17 = vec17.len();
                                        *base.add(20).cast::<usize>() = len17;
                                        *base.add(16).cast::<*mut u8>() = ptr17.cast_mut();
                                    }
                                    V34::Date(e) => {
                                        *base.add(8).cast::<u8>() = (14i32) as u8;
                                        let super::super::super::golem::graph::types::Date {
                                            year: year18,
                                            month: month18,
                                            day: day18,
                                        } = e;
                                        *base.add(16).cast::<i32>() = _rt::as_i32(year18);
                                        *base.add(20).cast::<u8>() = (_rt::as_i32(month18)) as u8;
                                        *base.add(21).cast::<u8>() = (_rt::as_i32(day18)) as u8;
                                    }
                                    V34::Time(e) => {
                                        *base.add(8).cast::<u8>() = (15i32) as u8;
                                        let super::super::super::golem::graph::types::Time {
                                            hour: hour19,
                                            minute: minute19,
                                            second: second19,
                                            nanosecond: nanosecond19,
                                        } = e;
                                        *base.add(16).cast::<u8>() = (_rt::as_i32(hour19)) as u8;
                                        *base.add(17).cast::<u8>() = (_rt::as_i32(minute19)) as u8;
                                        *base.add(18).cast::<u8>() = (_rt::as_i32(second19)) as u8;
                                        *base.add(20).cast::<i32>() = _rt::as_i32(nanosecond19);
                                    }
                                    V34::Datetime(e) => {
                                        *base.add(8).cast::<u8>() = (16i32) as u8;
                                        let super::super::super::golem::graph::types::Datetime {
                                            date: date20,
                                            time: time20,
                                            timezone_offset_minutes: timezone_offset_minutes20,
                                        } = e;
                                        let super::super::super::golem::graph::types::Date {
                                            year: year21,
                                            month: month21,
                                            day: day21,
                                        } = date20;
                                        *base.add(16).cast::<i32>() = _rt::as_i32(year21);
                                        *base.add(20).cast::<u8>() = (_rt::as_i32(month21)) as u8;
                                        *base.add(21).cast::<u8>() = (_rt::as_i32(day21)) as u8;
                                        let super::super::super::golem::graph::types::Time {
                                            hour: hour22,
                                            minute: minute22,
                                            second: second22,
                                            nanosecond: nanosecond22,
                                        } = time20;
                                        *base.add(24).cast::<u8>() = (_rt::as_i32(hour22)) as u8;
                                        *base.add(25).cast::<u8>() = (_rt::as_i32(minute22)) as u8;
                                        *base.add(26).cast::<u8>() = (_rt::as_i32(second22)) as u8;
                                        *base.add(28).cast::<i32>() = _rt::as_i32(nanosecond22);
                                        match timezone_offset_minutes20 {
                                            Some(e) => {
                                                *base.add(32).cast::<u8>() = (1i32) as u8;
                                                *base.add(34).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            None => {
                                                *base.add(32).cast::<u8>() = (0i32) as u8;
                                            }
                                        };
                                    }
                                    V34::Duration(e) => {
                                        *base.add(8).cast::<u8>() = (17i32) as u8;
                                        let super::super::super::golem::graph::types::Duration {
                                            seconds: seconds23,
                                            nanoseconds: nanoseconds23,
                                        } = e;
                                        *base.add(16).cast::<i64>() = _rt::as_i64(seconds23);
                                        *base.add(24).cast::<i32>() = _rt::as_i32(nanoseconds23);
                                    }
                                    V34::Point(e) => {
                                        *base.add(8).cast::<u8>() = (18i32) as u8;
                                        let super::super::super::golem::graph::types::Point {
                                            longitude: longitude24,
                                            latitude: latitude24,
                                            altitude: altitude24,
                                        } = e;
                                        *base.add(16).cast::<f64>() = _rt::as_f64(longitude24);
                                        *base.add(24).cast::<f64>() = _rt::as_f64(latitude24);
                                        match altitude24 {
                                            Some(e) => {
                                                *base.add(32).cast::<u8>() = (1i32) as u8;
                                                *base.add(40).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            None => {
                                                *base.add(32).cast::<u8>() = (0i32) as u8;
                                            }
                                        };
                                    }
                                    V34::Linestring(e) => {
                                        *base.add(8).cast::<u8>() = (19i32) as u8;
                                        let super::super::super::golem::graph::types::Linestring {
                                            coordinates: coordinates25,
                                        } = e;
                                        let vec27 = coordinates25;
                                        let len27 = vec27.len();
                                        let layout27 = _rt::alloc::Layout::from_size_align_unchecked(
                                            vec27.len() * 32,
                                            8,
                                        );
                                        let result27 = if layout27.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout27).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout27);
                                            }
                                            ptr
                                        } else {
                                            ::core::ptr::null_mut()
                                        };
                                        for (i, e) in vec27.into_iter().enumerate() {
                                            let base = result27.add(i * 32);
                                            {
                                                let super::super::super::golem::graph::types::Point {
                                                    longitude: longitude26,
                                                    latitude: latitude26,
                                                    altitude: altitude26,
                                                } = e;
                                                *base.add(0).cast::<f64>() = _rt::as_f64(longitude26);
                                                *base.add(8).cast::<f64>() = _rt::as_f64(latitude26);
                                                match altitude26 {
                                                    Some(e) => {
                                                        *base.add(16).cast::<u8>() = (1i32) as u8;
                                                        *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                    }
                                                    None => {
                                                        *base.add(16).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                        }
                                        *base.add(20).cast::<usize>() = len27;
                                        *base.add(16).cast::<*mut u8>() = result27;
                                        cleanup_list.extend_from_slice(&[(result27, layout27)]);
                                    }
                                    V34::Polygon(e) => {
                                        *base.add(8).cast::<u8>() = (20i32) as u8;
                                        let super::super::super::golem::graph::types::Polygon {
                                            exterior: exterior28,
                                            holes: holes28,
                                        } = e;
                                        let vec30 = exterior28;
                                        let len30 = vec30.len();
                                        let layout30 = _rt::alloc::Layout::from_size_align_unchecked(
                                            vec30.len() * 32,
                                            8,
                                        );
                                        let result30 = if layout30.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout30).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout30);
                                            }
                                            ptr
                                        } else {
                                            ::core::ptr::null_mut()
                                        };
                                        for (i, e) in vec30.into_iter().enumerate() {
                                            let base = result30.add(i * 32);
                                            {
                                                let super::super::super::golem::graph::types::Point {
                                                    longitude: longitude29,
                                                    latitude: latitude29,
                                                    altitude: altitude29,
                                                } = e;
                                                *base.add(0).cast::<f64>() = _rt::as_f64(longitude29);
                                                *base.add(8).cast::<f64>() = _rt::as_f64(latitude29);
                                                match altitude29 {
                                                    Some(e) => {
                                                        *base.add(16).cast::<u8>() = (1i32) as u8;
                                                        *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                    }
                                                    None => {
                                                        *base.add(16).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                        }
                                        *base.add(20).cast::<usize>() = len30;
                                        *base.add(16).cast::<*mut u8>() = result30;
                                        match holes28 {
                                            Some(e) => {
                                                *base.add(24).cast::<u8>() = (1i32) as u8;
                                                let vec33 = e;
                                                let len33 = vec33.len();
                                                let layout33 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec33.len() * 8,
                                                    4,
                                                );
                                                let result33 = if layout33.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout33).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout33);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec33.into_iter().enumerate() {
                                                    let base = result33.add(i * 8);
                                                    {
                                                        let vec32 = e;
                                                        let len32 = vec32.len();
                                                        let layout32 = _rt::alloc::Layout::from_size_align_unchecked(
                                                            vec32.len() * 32,
                                                            8,
                                                        );
                                                        let result32 = if layout32.size() != 0 {
                                                            let ptr = _rt::alloc::alloc(layout32).cast::<u8>();
                                                            if ptr.is_null() {
                                                                _rt::alloc::handle_alloc_error(layout32);
                                                            }
                                                            ptr
                                                        } else {
                                                            ::core::ptr::null_mut()
                                                        };
                                                        for (i, e) in vec32.into_iter().enumerate() {
                                                            let base = result32.add(i * 32);
                                                            {
                                                                let super::super::super::golem::graph::types::Point {
                                                                    longitude: longitude31,
                                                                    latitude: latitude31,
                                                                    altitude: altitude31,
                                                                } = e;
                                                                *base.add(0).cast::<f64>() = _rt::as_f64(longitude31);
                                                                *base.add(8).cast::<f64>() = _rt::as_f64(latitude31);
                                                                match altitude31 {
                                                                    Some(e) => {
                                                                        *base.add(16).cast::<u8>() = (1i32) as u8;
                                                                        *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                                    }
                                                                    None => {
                                                                        *base.add(16).cast::<u8>() = (0i32) as u8;
                                                                    }
                                                                };
                                                            }
                                                        }
                                                        *base.add(4).cast::<usize>() = len32;
                                                        *base.add(0).cast::<*mut u8>() = result32;
                                                        cleanup_list.extend_from_slice(&[(result32, layout32)]);
                                                    }
                                                }
                                                *base.add(32).cast::<usize>() = len33;
                                                *base.add(28).cast::<*mut u8>() = result33;
                                                cleanup_list.extend_from_slice(&[(result33, layout33)]);
                                            }
                                            None => {
                                                *base.add(24).cast::<u8>() = (0i32) as u8;
                                            }
                                        };
                                        cleanup_list.extend_from_slice(&[(result30, layout30)]);
                                    }
                                }
                            }
                        }
                        let ptr36 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:graph/transactions@1.0.0")]
                        extern "C" {
                            #[link_name = "[method]transaction.upsert-edge"]
                            fn wit_import(
                                _: i32,
                                _: i32,
                                _: i32,
                                _: ::core::mem::MaybeUninit<u64>,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                                _: ::core::mem::MaybeUninit<u64>,
                                _: usize,
                                _: i32,
                                _: ::core::mem::MaybeUninit<u64>,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: i32,
                            _: i32,
                            _: ::core::mem::MaybeUninit<u64>,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: ::core::mem::MaybeUninit<u64>,
                            _: usize,
                            _: i32,
                            _: ::core::mem::MaybeUninit<u64>,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            result4_0,
                            result4_1,
                            result4_2,
                            result4_3,
                            ptr5.cast_mut(),
                            len5,
                            result9_0,
                            result9_1,
                            result9_2,
                            result13_0,
                            result13_1,
                            result13_2,
                            result35,
                            len35,
                            ptr36,
                        );
                        let l37 = i32::from(*ptr36.add(0).cast::<u8>());
                        if layout35.size() != 0 {
                            _rt::alloc::dealloc(result35.cast(), layout35);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l37 {
                            0 => {
                                let e = {
                                    let l38 = i32::from(*ptr36.add(8).cast::<u8>());
                                    use super::super::super::golem::graph::types::ElementId as V46;
                                    let v46 = match l38 {
                                        0 => {
                                            let e46 = {
                                                let l39 = *ptr36.add(16).cast::<*mut u8>();
                                                let l40 = *ptr36.add(20).cast::<usize>();
                                                let len41 = l40;
                                                let bytes41 = _rt::Vec::from_raw_parts(
                                                    l39.cast(),
                                                    len41,
                                                    len41,
                                                );
                                                _rt::string_lift(bytes41)
                                            };
                                            V46::StringValue(e46)
                                        }
                                        1 => {
                                            let e46 = {
                                                let l42 = *ptr36.add(16).cast::<i64>();
                                                l42
                                            };
                                            V46::Int64(e46)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 2, "invalid enum discriminant");
                                            let e46 = {
                                                let l43 = *ptr36.add(16).cast::<*mut u8>();
                                                let l44 = *ptr36.add(20).cast::<usize>();
                                                let len45 = l44;
                                                let bytes45 = _rt::Vec::from_raw_parts(
                                                    l43.cast(),
                                                    len45,
                                                    len45,
                                                );
                                                _rt::string_lift(bytes45)
                                            };
                                            V46::Uuid(e46)
                                        }
                                    };
                                    let l47 = *ptr36.add(24).cast::<*mut u8>();
                                    let l48 = *ptr36.add(28).cast::<usize>();
                                    let len49 = l48;
                                    let bytes49 = _rt::Vec::from_raw_parts(
                                        l47.cast(),
                                        len49,
                                        len49,
                                    );
                                    let l50 = i32::from(*ptr36.add(32).cast::<u8>());
                                    use super::super::super::golem::graph::types::ElementId as V58;
                                    let v58 = match l50 {
                                        0 => {
                                            let e58 = {
                                                let l51 = *ptr36.add(40).cast::<*mut u8>();
                                                let l52 = *ptr36.add(44).cast::<usize>();
                                                let len53 = l52;
                                                let bytes53 = _rt::Vec::from_raw_parts(
                                                    l51.cast(),
                                                    len53,
                                                    len53,
                                                );
                                                _rt::string_lift(bytes53)
                                            };
                                            V58::StringValue(e58)
                                        }
                                        1 => {
                                            let e58 = {
                                                let l54 = *ptr36.add(40).cast::<i64>();
                                                l54
                                            };
                                            V58::Int64(e58)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 2, "invalid enum discriminant");
                                            let e58 = {
                                                let l55 = *ptr36.add(40).cast::<*mut u8>();
                                                let l56 = *ptr36.add(44).cast::<usize>();
                                                let len57 = l56;
                                                let bytes57 = _rt::Vec::from_raw_parts(
                                                    l55.cast(),
                                                    len57,
                                                    len57,
                                                );
                                                _rt::string_lift(bytes57)
                                            };
                                            V58::Uuid(e58)
                                        }
                                    };
                                    let l59 = i32::from(*ptr36.add(48).cast::<u8>());
                                    use super::super::super::golem::graph::types::ElementId as V67;
                                    let v67 = match l59 {
                                        0 => {
                                            let e67 = {
                                                let l60 = *ptr36.add(56).cast::<*mut u8>();
                                                let l61 = *ptr36.add(60).cast::<usize>();
                                                let len62 = l61;
                                                let bytes62 = _rt::Vec::from_raw_parts(
                                                    l60.cast(),
                                                    len62,
                                                    len62,
                                                );
                                                _rt::string_lift(bytes62)
                                            };
                                            V67::StringValue(e67)
                                        }
                                        1 => {
                                            let e67 = {
                                                let l63 = *ptr36.add(56).cast::<i64>();
                                                l63
                                            };
                                            V67::Int64(e67)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 2, "invalid enum discriminant");
                                            let e67 = {
                                                let l64 = *ptr36.add(56).cast::<*mut u8>();
                                                let l65 = *ptr36.add(60).cast::<usize>();
                                                let len66 = l65;
                                                let bytes66 = _rt::Vec::from_raw_parts(
                                                    l64.cast(),
                                                    len66,
                                                    len66,
                                                );
                                                _rt::string_lift(bytes66)
                                            };
                                            V67::Uuid(e67)
                                        }
                                    };
                                    let l68 = *ptr36.add(64).cast::<*mut u8>();
                                    let l69 = *ptr36.add(68).cast::<usize>();
                                    let base139 = l68;
                                    let len139 = l69;
                                    let mut result139 = _rt::Vec::with_capacity(len139);
                                    for i in 0..len139 {
                                        let base = base139.add(i * 48);
                                        let e139 = {
                                            let l70 = *base.add(0).cast::<*mut u8>();
                                            let l71 = *base.add(4).cast::<usize>();
                                            let len72 = l71;
                                            let bytes72 = _rt::Vec::from_raw_parts(
                                                l70.cast(),
                                                len72,
                                                len72,
                                            );
                                            let l73 = i32::from(*base.add(8).cast::<u8>());
                                            use super::super::super::golem::graph::types::PropertyValue as V138;
                                            let v138 = match l73 {
                                                0 => V138::NullValue,
                                                1 => {
                                                    let e138 = {
                                                        let l74 = i32::from(*base.add(16).cast::<u8>());
                                                        _rt::bool_lift(l74 as u8)
                                                    };
                                                    V138::Boolean(e138)
                                                }
                                                2 => {
                                                    let e138 = {
                                                        let l75 = i32::from(*base.add(16).cast::<i8>());
                                                        l75 as i8
                                                    };
                                                    V138::Int8(e138)
                                                }
                                                3 => {
                                                    let e138 = {
                                                        let l76 = i32::from(*base.add(16).cast::<i16>());
                                                        l76 as i16
                                                    };
                                                    V138::Int16(e138)
                                                }
                                                4 => {
                                                    let e138 = {
                                                        let l77 = *base.add(16).cast::<i32>();
                                                        l77
                                                    };
                                                    V138::Int32(e138)
                                                }
                                                5 => {
                                                    let e138 = {
                                                        let l78 = *base.add(16).cast::<i64>();
                                                        l78
                                                    };
                                                    V138::Int64(e138)
                                                }
                                                6 => {
                                                    let e138 = {
                                                        let l79 = i32::from(*base.add(16).cast::<u8>());
                                                        l79 as u8
                                                    };
                                                    V138::Uint8(e138)
                                                }
                                                7 => {
                                                    let e138 = {
                                                        let l80 = i32::from(*base.add(16).cast::<u16>());
                                                        l80 as u16
                                                    };
                                                    V138::Uint16(e138)
                                                }
                                                8 => {
                                                    let e138 = {
                                                        let l81 = *base.add(16).cast::<i32>();
                                                        l81 as u32
                                                    };
                                                    V138::Uint32(e138)
                                                }
                                                9 => {
                                                    let e138 = {
                                                        let l82 = *base.add(16).cast::<i64>();
                                                        l82 as u64
                                                    };
                                                    V138::Uint64(e138)
                                                }
                                                10 => {
                                                    let e138 = {
                                                        let l83 = *base.add(16).cast::<f32>();
                                                        l83
                                                    };
                                                    V138::Float32Value(e138)
                                                }
                                                11 => {
                                                    let e138 = {
                                                        let l84 = *base.add(16).cast::<f64>();
                                                        l84
                                                    };
                                                    V138::Float64Value(e138)
                                                }
                                                12 => {
                                                    let e138 = {
                                                        let l85 = *base.add(16).cast::<*mut u8>();
                                                        let l86 = *base.add(20).cast::<usize>();
                                                        let len87 = l86;
                                                        let bytes87 = _rt::Vec::from_raw_parts(
                                                            l85.cast(),
                                                            len87,
                                                            len87,
                                                        );
                                                        _rt::string_lift(bytes87)
                                                    };
                                                    V138::StringValue(e138)
                                                }
                                                13 => {
                                                    let e138 = {
                                                        let l88 = *base.add(16).cast::<*mut u8>();
                                                        let l89 = *base.add(20).cast::<usize>();
                                                        let len90 = l89;
                                                        _rt::Vec::from_raw_parts(l88.cast(), len90, len90)
                                                    };
                                                    V138::Bytes(e138)
                                                }
                                                14 => {
                                                    let e138 = {
                                                        let l91 = *base.add(16).cast::<i32>();
                                                        let l92 = i32::from(*base.add(20).cast::<u8>());
                                                        let l93 = i32::from(*base.add(21).cast::<u8>());
                                                        super::super::super::golem::graph::types::Date {
                                                            year: l91 as u32,
                                                            month: l92 as u8,
                                                            day: l93 as u8,
                                                        }
                                                    };
                                                    V138::Date(e138)
                                                }
                                                15 => {
                                                    let e138 = {
                                                        let l94 = i32::from(*base.add(16).cast::<u8>());
                                                        let l95 = i32::from(*base.add(17).cast::<u8>());
                                                        let l96 = i32::from(*base.add(18).cast::<u8>());
                                                        let l97 = *base.add(20).cast::<i32>();
                                                        super::super::super::golem::graph::types::Time {
                                                            hour: l94 as u8,
                                                            minute: l95 as u8,
                                                            second: l96 as u8,
                                                            nanosecond: l97 as u32,
                                                        }
                                                    };
                                                    V138::Time(e138)
                                                }
                                                16 => {
                                                    let e138 = {
                                                        let l98 = *base.add(16).cast::<i32>();
                                                        let l99 = i32::from(*base.add(20).cast::<u8>());
                                                        let l100 = i32::from(*base.add(21).cast::<u8>());
                                                        let l101 = i32::from(*base.add(24).cast::<u8>());
                                                        let l102 = i32::from(*base.add(25).cast::<u8>());
                                                        let l103 = i32::from(*base.add(26).cast::<u8>());
                                                        let l104 = *base.add(28).cast::<i32>();
                                                        let l105 = i32::from(*base.add(32).cast::<u8>());
                                                        super::super::super::golem::graph::types::Datetime {
                                                            date: super::super::super::golem::graph::types::Date {
                                                                year: l98 as u32,
                                                                month: l99 as u8,
                                                                day: l100 as u8,
                                                            },
                                                            time: super::super::super::golem::graph::types::Time {
                                                                hour: l101 as u8,
                                                                minute: l102 as u8,
                                                                second: l103 as u8,
                                                                nanosecond: l104 as u32,
                                                            },
                                                            timezone_offset_minutes: match l105 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l106 = i32::from(*base.add(34).cast::<i16>());
                                                                        l106 as i16
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                        }
                                                    };
                                                    V138::Datetime(e138)
                                                }
                                                17 => {
                                                    let e138 = {
                                                        let l107 = *base.add(16).cast::<i64>();
                                                        let l108 = *base.add(24).cast::<i32>();
                                                        super::super::super::golem::graph::types::Duration {
                                                            seconds: l107,
                                                            nanoseconds: l108 as u32,
                                                        }
                                                    };
                                                    V138::Duration(e138)
                                                }
                                                18 => {
                                                    let e138 = {
                                                        let l109 = *base.add(16).cast::<f64>();
                                                        let l110 = *base.add(24).cast::<f64>();
                                                        let l111 = i32::from(*base.add(32).cast::<u8>());
                                                        super::super::super::golem::graph::types::Point {
                                                            longitude: l109,
                                                            latitude: l110,
                                                            altitude: match l111 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l112 = *base.add(40).cast::<f64>();
                                                                        l112
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                        }
                                                    };
                                                    V138::Point(e138)
                                                }
                                                19 => {
                                                    let e138 = {
                                                        let l113 = *base.add(16).cast::<*mut u8>();
                                                        let l114 = *base.add(20).cast::<usize>();
                                                        let base119 = l113;
                                                        let len119 = l114;
                                                        let mut result119 = _rt::Vec::with_capacity(len119);
                                                        for i in 0..len119 {
                                                            let base = base119.add(i * 32);
                                                            let e119 = {
                                                                let l115 = *base.add(0).cast::<f64>();
                                                                let l116 = *base.add(8).cast::<f64>();
                                                                let l117 = i32::from(*base.add(16).cast::<u8>());
                                                                super::super::super::golem::graph::types::Point {
                                                                    longitude: l115,
                                                                    latitude: l116,
                                                                    altitude: match l117 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l118 = *base.add(24).cast::<f64>();
                                                                                l118
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            result119.push(e119);
                                                        }
                                                        _rt::cabi_dealloc(base119, len119 * 32, 8);
                                                        super::super::super::golem::graph::types::Linestring {
                                                            coordinates: result119,
                                                        }
                                                    };
                                                    V138::Linestring(e138)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 20, "invalid enum discriminant");
                                                    let e138 = {
                                                        let l120 = *base.add(16).cast::<*mut u8>();
                                                        let l121 = *base.add(20).cast::<usize>();
                                                        let base126 = l120;
                                                        let len126 = l121;
                                                        let mut result126 = _rt::Vec::with_capacity(len126);
                                                        for i in 0..len126 {
                                                            let base = base126.add(i * 32);
                                                            let e126 = {
                                                                let l122 = *base.add(0).cast::<f64>();
                                                                let l123 = *base.add(8).cast::<f64>();
                                                                let l124 = i32::from(*base.add(16).cast::<u8>());
                                                                super::super::super::golem::graph::types::Point {
                                                                    longitude: l122,
                                                                    latitude: l123,
                                                                    altitude: match l124 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l125 = *base.add(24).cast::<f64>();
                                                                                l125
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            result126.push(e126);
                                                        }
                                                        _rt::cabi_dealloc(base126, len126 * 32, 8);
                                                        let l127 = i32::from(*base.add(24).cast::<u8>());
                                                        super::super::super::golem::graph::types::Polygon {
                                                            exterior: result126,
                                                            holes: match l127 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l128 = *base.add(28).cast::<*mut u8>();
                                                                        let l129 = *base.add(32).cast::<usize>();
                                                                        let base137 = l128;
                                                                        let len137 = l129;
                                                                        let mut result137 = _rt::Vec::with_capacity(len137);
                                                                        for i in 0..len137 {
                                                                            let base = base137.add(i * 8);
                                                                            let e137 = {
                                                                                let l130 = *base.add(0).cast::<*mut u8>();
                                                                                let l131 = *base.add(4).cast::<usize>();
                                                                                let base136 = l130;
                                                                                let len136 = l131;
                                                                                let mut result136 = _rt::Vec::with_capacity(len136);
                                                                                for i in 0..len136 {
                                                                                    let base = base136.add(i * 32);
                                                                                    let e136 = {
                                                                                        let l132 = *base.add(0).cast::<f64>();
                                                                                        let l133 = *base.add(8).cast::<f64>();
                                                                                        let l134 = i32::from(*base.add(16).cast::<u8>());
                                                                                        super::super::super::golem::graph::types::Point {
                                                                                            longitude: l132,
                                                                                            latitude: l133,
                                                                                            altitude: match l134 {
                                                                                                0 => None,
                                                                                                1 => {
                                                                                                    let e = {
                                                                                                        let l135 = *base.add(24).cast::<f64>();
                                                                                                        l135
                                                                                                    };
                                                                                                    Some(e)
                                                                                                }
                                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                                            },
                                                                                        }
                                                                                    };
                                                                                    result136.push(e136);
                                                                                }
                                                                                _rt::cabi_dealloc(base136, len136 * 32, 8);
                                                                                result136
                                                                            };
                                                                            result137.push(e137);
                                                                        }
                                                                        _rt::cabi_dealloc(base137, len137 * 8, 4);
                                                                        result137
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                        }
                                                    };
                                                    V138::Polygon(e138)
                                                }
                                            };
                                            (_rt::string_lift(bytes72), v138)
                                        };
                                        result139.push(e139);
                                    }
                                    _rt::cabi_dealloc(base139, len139 * 48, 8);
                                    super::super::super::golem::graph::types::Edge {
                                        id: v46,
                                        edge_type: _rt::string_lift(bytes49),
                                        from_vertex: v58,
                                        to_vertex: v67,
                                        properties: result139,
                                    }
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l140 = i32::from(*ptr36.add(8).cast::<u8>());
                                    use super::super::super::golem::graph::errors::GraphError as V195;
                                    let v195 = match l140 {
                                        0 => {
                                            let e195 = {
                                                let l141 = *ptr36.add(16).cast::<*mut u8>();
                                                let l142 = *ptr36.add(20).cast::<usize>();
                                                let len143 = l142;
                                                let bytes143 = _rt::Vec::from_raw_parts(
                                                    l141.cast(),
                                                    len143,
                                                    len143,
                                                );
                                                _rt::string_lift(bytes143)
                                            };
                                            V195::UnsupportedOperation(e195)
                                        }
                                        1 => {
                                            let e195 = {
                                                let l144 = *ptr36.add(16).cast::<*mut u8>();
                                                let l145 = *ptr36.add(20).cast::<usize>();
                                                let len146 = l145;
                                                let bytes146 = _rt::Vec::from_raw_parts(
                                                    l144.cast(),
                                                    len146,
                                                    len146,
                                                );
                                                _rt::string_lift(bytes146)
                                            };
                                            V195::ConnectionFailed(e195)
                                        }
                                        2 => {
                                            let e195 = {
                                                let l147 = *ptr36.add(16).cast::<*mut u8>();
                                                let l148 = *ptr36.add(20).cast::<usize>();
                                                let len149 = l148;
                                                let bytes149 = _rt::Vec::from_raw_parts(
                                                    l147.cast(),
                                                    len149,
                                                    len149,
                                                );
                                                _rt::string_lift(bytes149)
                                            };
                                            V195::AuthenticationFailed(e195)
                                        }
                                        3 => {
                                            let e195 = {
                                                let l150 = *ptr36.add(16).cast::<*mut u8>();
                                                let l151 = *ptr36.add(20).cast::<usize>();
                                                let len152 = l151;
                                                let bytes152 = _rt::Vec::from_raw_parts(
                                                    l150.cast(),
                                                    len152,
                                                    len152,
                                                );
                                                _rt::string_lift(bytes152)
                                            };
                                            V195::AuthorizationFailed(e195)
                                        }
                                        4 => {
                                            let e195 = {
                                                let l153 = i32::from(*ptr36.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V161;
                                                let v161 = match l153 {
                                                    0 => {
                                                        let e161 = {
                                                            let l154 = *ptr36.add(24).cast::<*mut u8>();
                                                            let l155 = *ptr36.add(28).cast::<usize>();
                                                            let len156 = l155;
                                                            let bytes156 = _rt::Vec::from_raw_parts(
                                                                l154.cast(),
                                                                len156,
                                                                len156,
                                                            );
                                                            _rt::string_lift(bytes156)
                                                        };
                                                        V161::StringValue(e161)
                                                    }
                                                    1 => {
                                                        let e161 = {
                                                            let l157 = *ptr36.add(24).cast::<i64>();
                                                            l157
                                                        };
                                                        V161::Int64(e161)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e161 = {
                                                            let l158 = *ptr36.add(24).cast::<*mut u8>();
                                                            let l159 = *ptr36.add(28).cast::<usize>();
                                                            let len160 = l159;
                                                            let bytes160 = _rt::Vec::from_raw_parts(
                                                                l158.cast(),
                                                                len160,
                                                                len160,
                                                            );
                                                            _rt::string_lift(bytes160)
                                                        };
                                                        V161::Uuid(e161)
                                                    }
                                                };
                                                v161
                                            };
                                            V195::ElementNotFound(e195)
                                        }
                                        5 => {
                                            let e195 = {
                                                let l162 = i32::from(*ptr36.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V170;
                                                let v170 = match l162 {
                                                    0 => {
                                                        let e170 = {
                                                            let l163 = *ptr36.add(24).cast::<*mut u8>();
                                                            let l164 = *ptr36.add(28).cast::<usize>();
                                                            let len165 = l164;
                                                            let bytes165 = _rt::Vec::from_raw_parts(
                                                                l163.cast(),
                                                                len165,
                                                                len165,
                                                            );
                                                            _rt::string_lift(bytes165)
                                                        };
                                                        V170::StringValue(e170)
                                                    }
                                                    1 => {
                                                        let e170 = {
                                                            let l166 = *ptr36.add(24).cast::<i64>();
                                                            l166
                                                        };
                                                        V170::Int64(e170)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e170 = {
                                                            let l167 = *ptr36.add(24).cast::<*mut u8>();
                                                            let l168 = *ptr36.add(28).cast::<usize>();
                                                            let len169 = l168;
                                                            let bytes169 = _rt::Vec::from_raw_parts(
                                                                l167.cast(),
                                                                len169,
                                                                len169,
                                                            );
                                                            _rt::string_lift(bytes169)
                                                        };
                                                        V170::Uuid(e170)
                                                    }
                                                };
                                                v170
                                            };
                                            V195::DuplicateElement(e195)
                                        }
                                        6 => {
                                            let e195 = {
                                                let l171 = *ptr36.add(16).cast::<*mut u8>();
                                                let l172 = *ptr36.add(20).cast::<usize>();
                                                let len173 = l172;
                                                let bytes173 = _rt::Vec::from_raw_parts(
                                                    l171.cast(),
                                                    len173,
                                                    len173,
                                                );
                                                _rt::string_lift(bytes173)
                                            };
                                            V195::SchemaViolation(e195)
                                        }
                                        7 => {
                                            let e195 = {
                                                let l174 = *ptr36.add(16).cast::<*mut u8>();
                                                let l175 = *ptr36.add(20).cast::<usize>();
                                                let len176 = l175;
                                                let bytes176 = _rt::Vec::from_raw_parts(
                                                    l174.cast(),
                                                    len176,
                                                    len176,
                                                );
                                                _rt::string_lift(bytes176)
                                            };
                                            V195::ConstraintViolation(e195)
                                        }
                                        8 => {
                                            let e195 = {
                                                let l177 = *ptr36.add(16).cast::<*mut u8>();
                                                let l178 = *ptr36.add(20).cast::<usize>();
                                                let len179 = l178;
                                                let bytes179 = _rt::Vec::from_raw_parts(
                                                    l177.cast(),
                                                    len179,
                                                    len179,
                                                );
                                                _rt::string_lift(bytes179)
                                            };
                                            V195::InvalidPropertyType(e195)
                                        }
                                        9 => {
                                            let e195 = {
                                                let l180 = *ptr36.add(16).cast::<*mut u8>();
                                                let l181 = *ptr36.add(20).cast::<usize>();
                                                let len182 = l181;
                                                let bytes182 = _rt::Vec::from_raw_parts(
                                                    l180.cast(),
                                                    len182,
                                                    len182,
                                                );
                                                _rt::string_lift(bytes182)
                                            };
                                            V195::InvalidQuery(e195)
                                        }
                                        10 => {
                                            let e195 = {
                                                let l183 = *ptr36.add(16).cast::<*mut u8>();
                                                let l184 = *ptr36.add(20).cast::<usize>();
                                                let len185 = l184;
                                                let bytes185 = _rt::Vec::from_raw_parts(
                                                    l183.cast(),
                                                    len185,
                                                    len185,
                                                );
                                                _rt::string_lift(bytes185)
                                            };
                                            V195::TransactionFailed(e195)
                                        }
                                        11 => V195::TransactionConflict,
                                        12 => V195::TransactionTimeout,
                                        13 => V195::DeadlockDetected,
                                        14 => V195::Timeout,
                                        15 => {
                                            let e195 = {
                                                let l186 = *ptr36.add(16).cast::<*mut u8>();
                                                let l187 = *ptr36.add(20).cast::<usize>();
                                                let len188 = l187;
                                                let bytes188 = _rt::Vec::from_raw_parts(
                                                    l186.cast(),
                                                    len188,
                                                    len188,
                                                );
                                                _rt::string_lift(bytes188)
                                            };
                                            V195::ResourceExhausted(e195)
                                        }
                                        16 => {
                                            let e195 = {
                                                let l189 = *ptr36.add(16).cast::<*mut u8>();
                                                let l190 = *ptr36.add(20).cast::<usize>();
                                                let len191 = l190;
                                                let bytes191 = _rt::Vec::from_raw_parts(
                                                    l189.cast(),
                                                    len191,
                                                    len191,
                                                );
                                                _rt::string_lift(bytes191)
                                            };
                                            V195::InternalError(e195)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 17, "invalid enum discriminant");
                                            let e195 = {
                                                let l192 = *ptr36.add(16).cast::<*mut u8>();
                                                let l193 = *ptr36.add(20).cast::<usize>();
                                                let len194 = l193;
                                                let bytes194 = _rt::Vec::from_raw_parts(
                                                    l192.cast(),
                                                    len194,
                                                    len194,
                                                );
                                                _rt::string_lift(bytes194)
                                            };
                                            V195::ServiceUnavailable(e195)
                                        }
                                    };
                                    v195
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Transaction {
                #[allow(unused_unsafe, clippy::all)]
                /// === TRANSACTION CONTROL ===
                /// Commit the transaction
                pub fn commit(&self) -> Result<(), GraphError> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 32]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 32],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:graph/transactions@1.0.0")]
                        extern "C" {
                            #[link_name = "[method]transaction.commit"]
                            fn wit_import(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(8).cast::<u8>());
                                    use super::super::super::golem::graph::errors::GraphError as V57;
                                    let v57 = match l2 {
                                        0 => {
                                            let e57 = {
                                                let l3 = *ptr0.add(16).cast::<*mut u8>();
                                                let l4 = *ptr0.add(20).cast::<usize>();
                                                let len5 = l4;
                                                let bytes5 = _rt::Vec::from_raw_parts(
                                                    l3.cast(),
                                                    len5,
                                                    len5,
                                                );
                                                _rt::string_lift(bytes5)
                                            };
                                            V57::UnsupportedOperation(e57)
                                        }
                                        1 => {
                                            let e57 = {
                                                let l6 = *ptr0.add(16).cast::<*mut u8>();
                                                let l7 = *ptr0.add(20).cast::<usize>();
                                                let len8 = l7;
                                                let bytes8 = _rt::Vec::from_raw_parts(
                                                    l6.cast(),
                                                    len8,
                                                    len8,
                                                );
                                                _rt::string_lift(bytes8)
                                            };
                                            V57::ConnectionFailed(e57)
                                        }
                                        2 => {
                                            let e57 = {
                                                let l9 = *ptr0.add(16).cast::<*mut u8>();
                                                let l10 = *ptr0.add(20).cast::<usize>();
                                                let len11 = l10;
                                                let bytes11 = _rt::Vec::from_raw_parts(
                                                    l9.cast(),
                                                    len11,
                                                    len11,
                                                );
                                                _rt::string_lift(bytes11)
                                            };
                                            V57::AuthenticationFailed(e57)
                                        }
                                        3 => {
                                            let e57 = {
                                                let l12 = *ptr0.add(16).cast::<*mut u8>();
                                                let l13 = *ptr0.add(20).cast::<usize>();
                                                let len14 = l13;
                                                let bytes14 = _rt::Vec::from_raw_parts(
                                                    l12.cast(),
                                                    len14,
                                                    len14,
                                                );
                                                _rt::string_lift(bytes14)
                                            };
                                            V57::AuthorizationFailed(e57)
                                        }
                                        4 => {
                                            let e57 = {
                                                let l15 = i32::from(*ptr0.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V23;
                                                let v23 = match l15 {
                                                    0 => {
                                                        let e23 = {
                                                            let l16 = *ptr0.add(24).cast::<*mut u8>();
                                                            let l17 = *ptr0.add(28).cast::<usize>();
                                                            let len18 = l17;
                                                            let bytes18 = _rt::Vec::from_raw_parts(
                                                                l16.cast(),
                                                                len18,
                                                                len18,
                                                            );
                                                            _rt::string_lift(bytes18)
                                                        };
                                                        V23::StringValue(e23)
                                                    }
                                                    1 => {
                                                        let e23 = {
                                                            let l19 = *ptr0.add(24).cast::<i64>();
                                                            l19
                                                        };
                                                        V23::Int64(e23)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e23 = {
                                                            let l20 = *ptr0.add(24).cast::<*mut u8>();
                                                            let l21 = *ptr0.add(28).cast::<usize>();
                                                            let len22 = l21;
                                                            let bytes22 = _rt::Vec::from_raw_parts(
                                                                l20.cast(),
                                                                len22,
                                                                len22,
                                                            );
                                                            _rt::string_lift(bytes22)
                                                        };
                                                        V23::Uuid(e23)
                                                    }
                                                };
                                                v23
                                            };
                                            V57::ElementNotFound(e57)
                                        }
                                        5 => {
                                            let e57 = {
                                                let l24 = i32::from(*ptr0.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V32;
                                                let v32 = match l24 {
                                                    0 => {
                                                        let e32 = {
                                                            let l25 = *ptr0.add(24).cast::<*mut u8>();
                                                            let l26 = *ptr0.add(28).cast::<usize>();
                                                            let len27 = l26;
                                                            let bytes27 = _rt::Vec::from_raw_parts(
                                                                l25.cast(),
                                                                len27,
                                                                len27,
                                                            );
                                                            _rt::string_lift(bytes27)
                                                        };
                                                        V32::StringValue(e32)
                                                    }
                                                    1 => {
                                                        let e32 = {
                                                            let l28 = *ptr0.add(24).cast::<i64>();
                                                            l28
                                                        };
                                                        V32::Int64(e32)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e32 = {
                                                            let l29 = *ptr0.add(24).cast::<*mut u8>();
                                                            let l30 = *ptr0.add(28).cast::<usize>();
                                                            let len31 = l30;
                                                            let bytes31 = _rt::Vec::from_raw_parts(
                                                                l29.cast(),
                                                                len31,
                                                                len31,
                                                            );
                                                            _rt::string_lift(bytes31)
                                                        };
                                                        V32::Uuid(e32)
                                                    }
                                                };
                                                v32
                                            };
                                            V57::DuplicateElement(e57)
                                        }
                                        6 => {
                                            let e57 = {
                                                let l33 = *ptr0.add(16).cast::<*mut u8>();
                                                let l34 = *ptr0.add(20).cast::<usize>();
                                                let len35 = l34;
                                                let bytes35 = _rt::Vec::from_raw_parts(
                                                    l33.cast(),
                                                    len35,
                                                    len35,
                                                );
                                                _rt::string_lift(bytes35)
                                            };
                                            V57::SchemaViolation(e57)
                                        }
                                        7 => {
                                            let e57 = {
                                                let l36 = *ptr0.add(16).cast::<*mut u8>();
                                                let l37 = *ptr0.add(20).cast::<usize>();
                                                let len38 = l37;
                                                let bytes38 = _rt::Vec::from_raw_parts(
                                                    l36.cast(),
                                                    len38,
                                                    len38,
                                                );
                                                _rt::string_lift(bytes38)
                                            };
                                            V57::ConstraintViolation(e57)
                                        }
                                        8 => {
                                            let e57 = {
                                                let l39 = *ptr0.add(16).cast::<*mut u8>();
                                                let l40 = *ptr0.add(20).cast::<usize>();
                                                let len41 = l40;
                                                let bytes41 = _rt::Vec::from_raw_parts(
                                                    l39.cast(),
                                                    len41,
                                                    len41,
                                                );
                                                _rt::string_lift(bytes41)
                                            };
                                            V57::InvalidPropertyType(e57)
                                        }
                                        9 => {
                                            let e57 = {
                                                let l42 = *ptr0.add(16).cast::<*mut u8>();
                                                let l43 = *ptr0.add(20).cast::<usize>();
                                                let len44 = l43;
                                                let bytes44 = _rt::Vec::from_raw_parts(
                                                    l42.cast(),
                                                    len44,
                                                    len44,
                                                );
                                                _rt::string_lift(bytes44)
                                            };
                                            V57::InvalidQuery(e57)
                                        }
                                        10 => {
                                            let e57 = {
                                                let l45 = *ptr0.add(16).cast::<*mut u8>();
                                                let l46 = *ptr0.add(20).cast::<usize>();
                                                let len47 = l46;
                                                let bytes47 = _rt::Vec::from_raw_parts(
                                                    l45.cast(),
                                                    len47,
                                                    len47,
                                                );
                                                _rt::string_lift(bytes47)
                                            };
                                            V57::TransactionFailed(e57)
                                        }
                                        11 => V57::TransactionConflict,
                                        12 => V57::TransactionTimeout,
                                        13 => V57::DeadlockDetected,
                                        14 => V57::Timeout,
                                        15 => {
                                            let e57 = {
                                                let l48 = *ptr0.add(16).cast::<*mut u8>();
                                                let l49 = *ptr0.add(20).cast::<usize>();
                                                let len50 = l49;
                                                let bytes50 = _rt::Vec::from_raw_parts(
                                                    l48.cast(),
                                                    len50,
                                                    len50,
                                                );
                                                _rt::string_lift(bytes50)
                                            };
                                            V57::ResourceExhausted(e57)
                                        }
                                        16 => {
                                            let e57 = {
                                                let l51 = *ptr0.add(16).cast::<*mut u8>();
                                                let l52 = *ptr0.add(20).cast::<usize>();
                                                let len53 = l52;
                                                let bytes53 = _rt::Vec::from_raw_parts(
                                                    l51.cast(),
                                                    len53,
                                                    len53,
                                                );
                                                _rt::string_lift(bytes53)
                                            };
                                            V57::InternalError(e57)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 17, "invalid enum discriminant");
                                            let e57 = {
                                                let l54 = *ptr0.add(16).cast::<*mut u8>();
                                                let l55 = *ptr0.add(20).cast::<usize>();
                                                let len56 = l55;
                                                let bytes56 = _rt::Vec::from_raw_parts(
                                                    l54.cast(),
                                                    len56,
                                                    len56,
                                                );
                                                _rt::string_lift(bytes56)
                                            };
                                            V57::ServiceUnavailable(e57)
                                        }
                                    };
                                    v57
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Transaction {
                #[allow(unused_unsafe, clippy::all)]
                /// Rollback the transaction
                pub fn rollback(&self) -> Result<(), GraphError> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 32]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 32],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:graph/transactions@1.0.0")]
                        extern "C" {
                            #[link_name = "[method]transaction.rollback"]
                            fn wit_import(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(8).cast::<u8>());
                                    use super::super::super::golem::graph::errors::GraphError as V57;
                                    let v57 = match l2 {
                                        0 => {
                                            let e57 = {
                                                let l3 = *ptr0.add(16).cast::<*mut u8>();
                                                let l4 = *ptr0.add(20).cast::<usize>();
                                                let len5 = l4;
                                                let bytes5 = _rt::Vec::from_raw_parts(
                                                    l3.cast(),
                                                    len5,
                                                    len5,
                                                );
                                                _rt::string_lift(bytes5)
                                            };
                                            V57::UnsupportedOperation(e57)
                                        }
                                        1 => {
                                            let e57 = {
                                                let l6 = *ptr0.add(16).cast::<*mut u8>();
                                                let l7 = *ptr0.add(20).cast::<usize>();
                                                let len8 = l7;
                                                let bytes8 = _rt::Vec::from_raw_parts(
                                                    l6.cast(),
                                                    len8,
                                                    len8,
                                                );
                                                _rt::string_lift(bytes8)
                                            };
                                            V57::ConnectionFailed(e57)
                                        }
                                        2 => {
                                            let e57 = {
                                                let l9 = *ptr0.add(16).cast::<*mut u8>();
                                                let l10 = *ptr0.add(20).cast::<usize>();
                                                let len11 = l10;
                                                let bytes11 = _rt::Vec::from_raw_parts(
                                                    l9.cast(),
                                                    len11,
                                                    len11,
                                                );
                                                _rt::string_lift(bytes11)
                                            };
                                            V57::AuthenticationFailed(e57)
                                        }
                                        3 => {
                                            let e57 = {
                                                let l12 = *ptr0.add(16).cast::<*mut u8>();
                                                let l13 = *ptr0.add(20).cast::<usize>();
                                                let len14 = l13;
                                                let bytes14 = _rt::Vec::from_raw_parts(
                                                    l12.cast(),
                                                    len14,
                                                    len14,
                                                );
                                                _rt::string_lift(bytes14)
                                            };
                                            V57::AuthorizationFailed(e57)
                                        }
                                        4 => {
                                            let e57 = {
                                                let l15 = i32::from(*ptr0.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V23;
                                                let v23 = match l15 {
                                                    0 => {
                                                        let e23 = {
                                                            let l16 = *ptr0.add(24).cast::<*mut u8>();
                                                            let l17 = *ptr0.add(28).cast::<usize>();
                                                            let len18 = l17;
                                                            let bytes18 = _rt::Vec::from_raw_parts(
                                                                l16.cast(),
                                                                len18,
                                                                len18,
                                                            );
                                                            _rt::string_lift(bytes18)
                                                        };
                                                        V23::StringValue(e23)
                                                    }
                                                    1 => {
                                                        let e23 = {
                                                            let l19 = *ptr0.add(24).cast::<i64>();
                                                            l19
                                                        };
                                                        V23::Int64(e23)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e23 = {
                                                            let l20 = *ptr0.add(24).cast::<*mut u8>();
                                                            let l21 = *ptr0.add(28).cast::<usize>();
                                                            let len22 = l21;
                                                            let bytes22 = _rt::Vec::from_raw_parts(
                                                                l20.cast(),
                                                                len22,
                                                                len22,
                                                            );
                                                            _rt::string_lift(bytes22)
                                                        };
                                                        V23::Uuid(e23)
                                                    }
                                                };
                                                v23
                                            };
                                            V57::ElementNotFound(e57)
                                        }
                                        5 => {
                                            let e57 = {
                                                let l24 = i32::from(*ptr0.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V32;
                                                let v32 = match l24 {
                                                    0 => {
                                                        let e32 = {
                                                            let l25 = *ptr0.add(24).cast::<*mut u8>();
                                                            let l26 = *ptr0.add(28).cast::<usize>();
                                                            let len27 = l26;
                                                            let bytes27 = _rt::Vec::from_raw_parts(
                                                                l25.cast(),
                                                                len27,
                                                                len27,
                                                            );
                                                            _rt::string_lift(bytes27)
                                                        };
                                                        V32::StringValue(e32)
                                                    }
                                                    1 => {
                                                        let e32 = {
                                                            let l28 = *ptr0.add(24).cast::<i64>();
                                                            l28
                                                        };
                                                        V32::Int64(e32)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e32 = {
                                                            let l29 = *ptr0.add(24).cast::<*mut u8>();
                                                            let l30 = *ptr0.add(28).cast::<usize>();
                                                            let len31 = l30;
                                                            let bytes31 = _rt::Vec::from_raw_parts(
                                                                l29.cast(),
                                                                len31,
                                                                len31,
                                                            );
                                                            _rt::string_lift(bytes31)
                                                        };
                                                        V32::Uuid(e32)
                                                    }
                                                };
                                                v32
                                            };
                                            V57::DuplicateElement(e57)
                                        }
                                        6 => {
                                            let e57 = {
                                                let l33 = *ptr0.add(16).cast::<*mut u8>();
                                                let l34 = *ptr0.add(20).cast::<usize>();
                                                let len35 = l34;
                                                let bytes35 = _rt::Vec::from_raw_parts(
                                                    l33.cast(),
                                                    len35,
                                                    len35,
                                                );
                                                _rt::string_lift(bytes35)
                                            };
                                            V57::SchemaViolation(e57)
                                        }
                                        7 => {
                                            let e57 = {
                                                let l36 = *ptr0.add(16).cast::<*mut u8>();
                                                let l37 = *ptr0.add(20).cast::<usize>();
                                                let len38 = l37;
                                                let bytes38 = _rt::Vec::from_raw_parts(
                                                    l36.cast(),
                                                    len38,
                                                    len38,
                                                );
                                                _rt::string_lift(bytes38)
                                            };
                                            V57::ConstraintViolation(e57)
                                        }
                                        8 => {
                                            let e57 = {
                                                let l39 = *ptr0.add(16).cast::<*mut u8>();
                                                let l40 = *ptr0.add(20).cast::<usize>();
                                                let len41 = l40;
                                                let bytes41 = _rt::Vec::from_raw_parts(
                                                    l39.cast(),
                                                    len41,
                                                    len41,
                                                );
                                                _rt::string_lift(bytes41)
                                            };
                                            V57::InvalidPropertyType(e57)
                                        }
                                        9 => {
                                            let e57 = {
                                                let l42 = *ptr0.add(16).cast::<*mut u8>();
                                                let l43 = *ptr0.add(20).cast::<usize>();
                                                let len44 = l43;
                                                let bytes44 = _rt::Vec::from_raw_parts(
                                                    l42.cast(),
                                                    len44,
                                                    len44,
                                                );
                                                _rt::string_lift(bytes44)
                                            };
                                            V57::InvalidQuery(e57)
                                        }
                                        10 => {
                                            let e57 = {
                                                let l45 = *ptr0.add(16).cast::<*mut u8>();
                                                let l46 = *ptr0.add(20).cast::<usize>();
                                                let len47 = l46;
                                                let bytes47 = _rt::Vec::from_raw_parts(
                                                    l45.cast(),
                                                    len47,
                                                    len47,
                                                );
                                                _rt::string_lift(bytes47)
                                            };
                                            V57::TransactionFailed(e57)
                                        }
                                        11 => V57::TransactionConflict,
                                        12 => V57::TransactionTimeout,
                                        13 => V57::DeadlockDetected,
                                        14 => V57::Timeout,
                                        15 => {
                                            let e57 = {
                                                let l48 = *ptr0.add(16).cast::<*mut u8>();
                                                let l49 = *ptr0.add(20).cast::<usize>();
                                                let len50 = l49;
                                                let bytes50 = _rt::Vec::from_raw_parts(
                                                    l48.cast(),
                                                    len50,
                                                    len50,
                                                );
                                                _rt::string_lift(bytes50)
                                            };
                                            V57::ResourceExhausted(e57)
                                        }
                                        16 => {
                                            let e57 = {
                                                let l51 = *ptr0.add(16).cast::<*mut u8>();
                                                let l52 = *ptr0.add(20).cast::<usize>();
                                                let len53 = l52;
                                                let bytes53 = _rt::Vec::from_raw_parts(
                                                    l51.cast(),
                                                    len53,
                                                    len53,
                                                );
                                                _rt::string_lift(bytes53)
                                            };
                                            V57::InternalError(e57)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 17, "invalid enum discriminant");
                                            let e57 = {
                                                let l54 = *ptr0.add(16).cast::<*mut u8>();
                                                let l55 = *ptr0.add(20).cast::<usize>();
                                                let len56 = l55;
                                                let bytes56 = _rt::Vec::from_raw_parts(
                                                    l54.cast(),
                                                    len56,
                                                    len56,
                                                );
                                                _rt::string_lift(bytes56)
                                            };
                                            V57::ServiceUnavailable(e57)
                                        }
                                    };
                                    v57
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Transaction {
                #[allow(unused_unsafe, clippy::all)]
                /// Check if transaction is still active
                pub fn is_active(&self) -> bool {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:graph/transactions@1.0.0")]
                        extern "C" {
                            #[link_name = "[method]transaction.is-active"]
                            fn wit_import(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        _rt::bool_lift(ret as u8)
                    }
                }
            }
        }
        /// Connection management and graph instance creation
        #[allow(dead_code, clippy::all)]
        pub mod connection {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type GraphError = super::super::super::golem::graph::errors::GraphError;
            pub type Transaction = super::super::super::golem::graph::transactions::Transaction;
            /// Configuration for connecting to graph databases
            #[derive(Clone)]
            pub struct ConnectionConfig {
                /// Connection parameters
                pub hosts: _rt::Vec<_rt::String>,
                pub port: Option<u16>,
                pub database_name: Option<_rt::String>,
                /// Authentication
                pub username: Option<_rt::String>,
                pub password: Option<_rt::String>,
                /// Connection behavior
                pub timeout_seconds: Option<u32>,
                pub max_connections: Option<u32>,
                /// Provider-specific configuration as key-value pairs
                pub provider_config: _rt::Vec<(_rt::String, _rt::String)>,
            }
            impl ::core::fmt::Debug for ConnectionConfig {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ConnectionConfig")
                        .field("hosts", &self.hosts)
                        .field("port", &self.port)
                        .field("database-name", &self.database_name)
                        .field("username", &self.username)
                        .field("password", &self.password)
                        .field("timeout-seconds", &self.timeout_seconds)
                        .field("max-connections", &self.max_connections)
                        .field("provider-config", &self.provider_config)
                        .finish()
                }
            }
            /// Main graph database resource
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Graph {
                handle: _rt::Resource<Graph>,
            }
            impl Graph {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for Graph {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:graph/connection@1.0.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]graph"]
                            fn drop(_: u32);
                        }
                        drop(_handle);
                    }
                }
            }
            /// Basic graph statistics
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct GraphStatistics {
                pub vertex_count: Option<u64>,
                pub edge_count: Option<u64>,
                pub label_count: Option<u32>,
                pub property_count: Option<u64>,
            }
            impl ::core::fmt::Debug for GraphStatistics {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("GraphStatistics")
                        .field("vertex-count", &self.vertex_count)
                        .field("edge-count", &self.edge_count)
                        .field("label-count", &self.label_count)
                        .field("property-count", &self.property_count)
                        .finish()
                }
            }
            impl Graph {
                #[allow(unused_unsafe, clippy::all)]
                /// Create a new transaction for performing operations
                pub fn begin_transaction(&self) -> Result<Transaction, GraphError> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 32]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 32],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:graph/connection@1.0.0")]
                        extern "C" {
                            #[link_name = "[method]graph.begin-transaction"]
                            fn wit_import(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(8).cast::<i32>();
                                    super::super::super::golem::graph::transactions::Transaction::from_handle(
                                        l2 as u32,
                                    )
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = i32::from(*ptr0.add(8).cast::<u8>());
                                    use super::super::super::golem::graph::errors::GraphError as V58;
                                    let v58 = match l3 {
                                        0 => {
                                            let e58 = {
                                                let l4 = *ptr0.add(16).cast::<*mut u8>();
                                                let l5 = *ptr0.add(20).cast::<usize>();
                                                let len6 = l5;
                                                let bytes6 = _rt::Vec::from_raw_parts(
                                                    l4.cast(),
                                                    len6,
                                                    len6,
                                                );
                                                _rt::string_lift(bytes6)
                                            };
                                            V58::UnsupportedOperation(e58)
                                        }
                                        1 => {
                                            let e58 = {
                                                let l7 = *ptr0.add(16).cast::<*mut u8>();
                                                let l8 = *ptr0.add(20).cast::<usize>();
                                                let len9 = l8;
                                                let bytes9 = _rt::Vec::from_raw_parts(
                                                    l7.cast(),
                                                    len9,
                                                    len9,
                                                );
                                                _rt::string_lift(bytes9)
                                            };
                                            V58::ConnectionFailed(e58)
                                        }
                                        2 => {
                                            let e58 = {
                                                let l10 = *ptr0.add(16).cast::<*mut u8>();
                                                let l11 = *ptr0.add(20).cast::<usize>();
                                                let len12 = l11;
                                                let bytes12 = _rt::Vec::from_raw_parts(
                                                    l10.cast(),
                                                    len12,
                                                    len12,
                                                );
                                                _rt::string_lift(bytes12)
                                            };
                                            V58::AuthenticationFailed(e58)
                                        }
                                        3 => {
                                            let e58 = {
                                                let l13 = *ptr0.add(16).cast::<*mut u8>();
                                                let l14 = *ptr0.add(20).cast::<usize>();
                                                let len15 = l14;
                                                let bytes15 = _rt::Vec::from_raw_parts(
                                                    l13.cast(),
                                                    len15,
                                                    len15,
                                                );
                                                _rt::string_lift(bytes15)
                                            };
                                            V58::AuthorizationFailed(e58)
                                        }
                                        4 => {
                                            let e58 = {
                                                let l16 = i32::from(*ptr0.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V24;
                                                let v24 = match l16 {
                                                    0 => {
                                                        let e24 = {
                                                            let l17 = *ptr0.add(24).cast::<*mut u8>();
                                                            let l18 = *ptr0.add(28).cast::<usize>();
                                                            let len19 = l18;
                                                            let bytes19 = _rt::Vec::from_raw_parts(
                                                                l17.cast(),
                                                                len19,
                                                                len19,
                                                            );
                                                            _rt::string_lift(bytes19)
                                                        };
                                                        V24::StringValue(e24)
                                                    }
                                                    1 => {
                                                        let e24 = {
                                                            let l20 = *ptr0.add(24).cast::<i64>();
                                                            l20
                                                        };
                                                        V24::Int64(e24)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e24 = {
                                                            let l21 = *ptr0.add(24).cast::<*mut u8>();
                                                            let l22 = *ptr0.add(28).cast::<usize>();
                                                            let len23 = l22;
                                                            let bytes23 = _rt::Vec::from_raw_parts(
                                                                l21.cast(),
                                                                len23,
                                                                len23,
                                                            );
                                                            _rt::string_lift(bytes23)
                                                        };
                                                        V24::Uuid(e24)
                                                    }
                                                };
                                                v24
                                            };
                                            V58::ElementNotFound(e58)
                                        }
                                        5 => {
                                            let e58 = {
                                                let l25 = i32::from(*ptr0.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V33;
                                                let v33 = match l25 {
                                                    0 => {
                                                        let e33 = {
                                                            let l26 = *ptr0.add(24).cast::<*mut u8>();
                                                            let l27 = *ptr0.add(28).cast::<usize>();
                                                            let len28 = l27;
                                                            let bytes28 = _rt::Vec::from_raw_parts(
                                                                l26.cast(),
                                                                len28,
                                                                len28,
                                                            );
                                                            _rt::string_lift(bytes28)
                                                        };
                                                        V33::StringValue(e33)
                                                    }
                                                    1 => {
                                                        let e33 = {
                                                            let l29 = *ptr0.add(24).cast::<i64>();
                                                            l29
                                                        };
                                                        V33::Int64(e33)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e33 = {
                                                            let l30 = *ptr0.add(24).cast::<*mut u8>();
                                                            let l31 = *ptr0.add(28).cast::<usize>();
                                                            let len32 = l31;
                                                            let bytes32 = _rt::Vec::from_raw_parts(
                                                                l30.cast(),
                                                                len32,
                                                                len32,
                                                            );
                                                            _rt::string_lift(bytes32)
                                                        };
                                                        V33::Uuid(e33)
                                                    }
                                                };
                                                v33
                                            };
                                            V58::DuplicateElement(e58)
                                        }
                                        6 => {
                                            let e58 = {
                                                let l34 = *ptr0.add(16).cast::<*mut u8>();
                                                let l35 = *ptr0.add(20).cast::<usize>();
                                                let len36 = l35;
                                                let bytes36 = _rt::Vec::from_raw_parts(
                                                    l34.cast(),
                                                    len36,
                                                    len36,
                                                );
                                                _rt::string_lift(bytes36)
                                            };
                                            V58::SchemaViolation(e58)
                                        }
                                        7 => {
                                            let e58 = {
                                                let l37 = *ptr0.add(16).cast::<*mut u8>();
                                                let l38 = *ptr0.add(20).cast::<usize>();
                                                let len39 = l38;
                                                let bytes39 = _rt::Vec::from_raw_parts(
                                                    l37.cast(),
                                                    len39,
                                                    len39,
                                                );
                                                _rt::string_lift(bytes39)
                                            };
                                            V58::ConstraintViolation(e58)
                                        }
                                        8 => {
                                            let e58 = {
                                                let l40 = *ptr0.add(16).cast::<*mut u8>();
                                                let l41 = *ptr0.add(20).cast::<usize>();
                                                let len42 = l41;
                                                let bytes42 = _rt::Vec::from_raw_parts(
                                                    l40.cast(),
                                                    len42,
                                                    len42,
                                                );
                                                _rt::string_lift(bytes42)
                                            };
                                            V58::InvalidPropertyType(e58)
                                        }
                                        9 => {
                                            let e58 = {
                                                let l43 = *ptr0.add(16).cast::<*mut u8>();
                                                let l44 = *ptr0.add(20).cast::<usize>();
                                                let len45 = l44;
                                                let bytes45 = _rt::Vec::from_raw_parts(
                                                    l43.cast(),
                                                    len45,
                                                    len45,
                                                );
                                                _rt::string_lift(bytes45)
                                            };
                                            V58::InvalidQuery(e58)
                                        }
                                        10 => {
                                            let e58 = {
                                                let l46 = *ptr0.add(16).cast::<*mut u8>();
                                                let l47 = *ptr0.add(20).cast::<usize>();
                                                let len48 = l47;
                                                let bytes48 = _rt::Vec::from_raw_parts(
                                                    l46.cast(),
                                                    len48,
                                                    len48,
                                                );
                                                _rt::string_lift(bytes48)
                                            };
                                            V58::TransactionFailed(e58)
                                        }
                                        11 => V58::TransactionConflict,
                                        12 => V58::TransactionTimeout,
                                        13 => V58::DeadlockDetected,
                                        14 => V58::Timeout,
                                        15 => {
                                            let e58 = {
                                                let l49 = *ptr0.add(16).cast::<*mut u8>();
                                                let l50 = *ptr0.add(20).cast::<usize>();
                                                let len51 = l50;
                                                let bytes51 = _rt::Vec::from_raw_parts(
                                                    l49.cast(),
                                                    len51,
                                                    len51,
                                                );
                                                _rt::string_lift(bytes51)
                                            };
                                            V58::ResourceExhausted(e58)
                                        }
                                        16 => {
                                            let e58 = {
                                                let l52 = *ptr0.add(16).cast::<*mut u8>();
                                                let l53 = *ptr0.add(20).cast::<usize>();
                                                let len54 = l53;
                                                let bytes54 = _rt::Vec::from_raw_parts(
                                                    l52.cast(),
                                                    len54,
                                                    len54,
                                                );
                                                _rt::string_lift(bytes54)
                                            };
                                            V58::InternalError(e58)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 17, "invalid enum discriminant");
                                            let e58 = {
                                                let l55 = *ptr0.add(16).cast::<*mut u8>();
                                                let l56 = *ptr0.add(20).cast::<usize>();
                                                let len57 = l56;
                                                let bytes57 = _rt::Vec::from_raw_parts(
                                                    l55.cast(),
                                                    len57,
                                                    len57,
                                                );
                                                _rt::string_lift(bytes57)
                                            };
                                            V58::ServiceUnavailable(e58)
                                        }
                                    };
                                    v58
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Graph {
                #[allow(unused_unsafe, clippy::all)]
                /// Create a read-only transaction (may be optimized by provider)
                pub fn begin_read_transaction(&self) -> Result<Transaction, GraphError> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 32]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 32],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:graph/connection@1.0.0")]
                        extern "C" {
                            #[link_name = "[method]graph.begin-read-transaction"]
                            fn wit_import(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(8).cast::<i32>();
                                    super::super::super::golem::graph::transactions::Transaction::from_handle(
                                        l2 as u32,
                                    )
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = i32::from(*ptr0.add(8).cast::<u8>());
                                    use super::super::super::golem::graph::errors::GraphError as V58;
                                    let v58 = match l3 {
                                        0 => {
                                            let e58 = {
                                                let l4 = *ptr0.add(16).cast::<*mut u8>();
                                                let l5 = *ptr0.add(20).cast::<usize>();
                                                let len6 = l5;
                                                let bytes6 = _rt::Vec::from_raw_parts(
                                                    l4.cast(),
                                                    len6,
                                                    len6,
                                                );
                                                _rt::string_lift(bytes6)
                                            };
                                            V58::UnsupportedOperation(e58)
                                        }
                                        1 => {
                                            let e58 = {
                                                let l7 = *ptr0.add(16).cast::<*mut u8>();
                                                let l8 = *ptr0.add(20).cast::<usize>();
                                                let len9 = l8;
                                                let bytes9 = _rt::Vec::from_raw_parts(
                                                    l7.cast(),
                                                    len9,
                                                    len9,
                                                );
                                                _rt::string_lift(bytes9)
                                            };
                                            V58::ConnectionFailed(e58)
                                        }
                                        2 => {
                                            let e58 = {
                                                let l10 = *ptr0.add(16).cast::<*mut u8>();
                                                let l11 = *ptr0.add(20).cast::<usize>();
                                                let len12 = l11;
                                                let bytes12 = _rt::Vec::from_raw_parts(
                                                    l10.cast(),
                                                    len12,
                                                    len12,
                                                );
                                                _rt::string_lift(bytes12)
                                            };
                                            V58::AuthenticationFailed(e58)
                                        }
                                        3 => {
                                            let e58 = {
                                                let l13 = *ptr0.add(16).cast::<*mut u8>();
                                                let l14 = *ptr0.add(20).cast::<usize>();
                                                let len15 = l14;
                                                let bytes15 = _rt::Vec::from_raw_parts(
                                                    l13.cast(),
                                                    len15,
                                                    len15,
                                                );
                                                _rt::string_lift(bytes15)
                                            };
                                            V58::AuthorizationFailed(e58)
                                        }
                                        4 => {
                                            let e58 = {
                                                let l16 = i32::from(*ptr0.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V24;
                                                let v24 = match l16 {
                                                    0 => {
                                                        let e24 = {
                                                            let l17 = *ptr0.add(24).cast::<*mut u8>();
                                                            let l18 = *ptr0.add(28).cast::<usize>();
                                                            let len19 = l18;
                                                            let bytes19 = _rt::Vec::from_raw_parts(
                                                                l17.cast(),
                                                                len19,
                                                                len19,
                                                            );
                                                            _rt::string_lift(bytes19)
                                                        };
                                                        V24::StringValue(e24)
                                                    }
                                                    1 => {
                                                        let e24 = {
                                                            let l20 = *ptr0.add(24).cast::<i64>();
                                                            l20
                                                        };
                                                        V24::Int64(e24)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e24 = {
                                                            let l21 = *ptr0.add(24).cast::<*mut u8>();
                                                            let l22 = *ptr0.add(28).cast::<usize>();
                                                            let len23 = l22;
                                                            let bytes23 = _rt::Vec::from_raw_parts(
                                                                l21.cast(),
                                                                len23,
                                                                len23,
                                                            );
                                                            _rt::string_lift(bytes23)
                                                        };
                                                        V24::Uuid(e24)
                                                    }
                                                };
                                                v24
                                            };
                                            V58::ElementNotFound(e58)
                                        }
                                        5 => {
                                            let e58 = {
                                                let l25 = i32::from(*ptr0.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V33;
                                                let v33 = match l25 {
                                                    0 => {
                                                        let e33 = {
                                                            let l26 = *ptr0.add(24).cast::<*mut u8>();
                                                            let l27 = *ptr0.add(28).cast::<usize>();
                                                            let len28 = l27;
                                                            let bytes28 = _rt::Vec::from_raw_parts(
                                                                l26.cast(),
                                                                len28,
                                                                len28,
                                                            );
                                                            _rt::string_lift(bytes28)
                                                        };
                                                        V33::StringValue(e33)
                                                    }
                                                    1 => {
                                                        let e33 = {
                                                            let l29 = *ptr0.add(24).cast::<i64>();
                                                            l29
                                                        };
                                                        V33::Int64(e33)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e33 = {
                                                            let l30 = *ptr0.add(24).cast::<*mut u8>();
                                                            let l31 = *ptr0.add(28).cast::<usize>();
                                                            let len32 = l31;
                                                            let bytes32 = _rt::Vec::from_raw_parts(
                                                                l30.cast(),
                                                                len32,
                                                                len32,
                                                            );
                                                            _rt::string_lift(bytes32)
                                                        };
                                                        V33::Uuid(e33)
                                                    }
                                                };
                                                v33
                                            };
                                            V58::DuplicateElement(e58)
                                        }
                                        6 => {
                                            let e58 = {
                                                let l34 = *ptr0.add(16).cast::<*mut u8>();
                                                let l35 = *ptr0.add(20).cast::<usize>();
                                                let len36 = l35;
                                                let bytes36 = _rt::Vec::from_raw_parts(
                                                    l34.cast(),
                                                    len36,
                                                    len36,
                                                );
                                                _rt::string_lift(bytes36)
                                            };
                                            V58::SchemaViolation(e58)
                                        }
                                        7 => {
                                            let e58 = {
                                                let l37 = *ptr0.add(16).cast::<*mut u8>();
                                                let l38 = *ptr0.add(20).cast::<usize>();
                                                let len39 = l38;
                                                let bytes39 = _rt::Vec::from_raw_parts(
                                                    l37.cast(),
                                                    len39,
                                                    len39,
                                                );
                                                _rt::string_lift(bytes39)
                                            };
                                            V58::ConstraintViolation(e58)
                                        }
                                        8 => {
                                            let e58 = {
                                                let l40 = *ptr0.add(16).cast::<*mut u8>();
                                                let l41 = *ptr0.add(20).cast::<usize>();
                                                let len42 = l41;
                                                let bytes42 = _rt::Vec::from_raw_parts(
                                                    l40.cast(),
                                                    len42,
                                                    len42,
                                                );
                                                _rt::string_lift(bytes42)
                                            };
                                            V58::InvalidPropertyType(e58)
                                        }
                                        9 => {
                                            let e58 = {
                                                let l43 = *ptr0.add(16).cast::<*mut u8>();
                                                let l44 = *ptr0.add(20).cast::<usize>();
                                                let len45 = l44;
                                                let bytes45 = _rt::Vec::from_raw_parts(
                                                    l43.cast(),
                                                    len45,
                                                    len45,
                                                );
                                                _rt::string_lift(bytes45)
                                            };
                                            V58::InvalidQuery(e58)
                                        }
                                        10 => {
                                            let e58 = {
                                                let l46 = *ptr0.add(16).cast::<*mut u8>();
                                                let l47 = *ptr0.add(20).cast::<usize>();
                                                let len48 = l47;
                                                let bytes48 = _rt::Vec::from_raw_parts(
                                                    l46.cast(),
                                                    len48,
                                                    len48,
                                                );
                                                _rt::string_lift(bytes48)
                                            };
                                            V58::TransactionFailed(e58)
                                        }
                                        11 => V58::TransactionConflict,
                                        12 => V58::TransactionTimeout,
                                        13 => V58::DeadlockDetected,
                                        14 => V58::Timeout,
                                        15 => {
                                            let e58 = {
                                                let l49 = *ptr0.add(16).cast::<*mut u8>();
                                                let l50 = *ptr0.add(20).cast::<usize>();
                                                let len51 = l50;
                                                let bytes51 = _rt::Vec::from_raw_parts(
                                                    l49.cast(),
                                                    len51,
                                                    len51,
                                                );
                                                _rt::string_lift(bytes51)
                                            };
                                            V58::ResourceExhausted(e58)
                                        }
                                        16 => {
                                            let e58 = {
                                                let l52 = *ptr0.add(16).cast::<*mut u8>();
                                                let l53 = *ptr0.add(20).cast::<usize>();
                                                let len54 = l53;
                                                let bytes54 = _rt::Vec::from_raw_parts(
                                                    l52.cast(),
                                                    len54,
                                                    len54,
                                                );
                                                _rt::string_lift(bytes54)
                                            };
                                            V58::InternalError(e58)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 17, "invalid enum discriminant");
                                            let e58 = {
                                                let l55 = *ptr0.add(16).cast::<*mut u8>();
                                                let l56 = *ptr0.add(20).cast::<usize>();
                                                let len57 = l56;
                                                let bytes57 = _rt::Vec::from_raw_parts(
                                                    l55.cast(),
                                                    len57,
                                                    len57,
                                                );
                                                _rt::string_lift(bytes57)
                                            };
                                            V58::ServiceUnavailable(e58)
                                        }
                                    };
                                    v58
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Graph {
                #[allow(unused_unsafe, clippy::all)]
                /// Test connection health
                pub fn ping(&self) -> Result<(), GraphError> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 32]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 32],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:graph/connection@1.0.0")]
                        extern "C" {
                            #[link_name = "[method]graph.ping"]
                            fn wit_import(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(8).cast::<u8>());
                                    use super::super::super::golem::graph::errors::GraphError as V57;
                                    let v57 = match l2 {
                                        0 => {
                                            let e57 = {
                                                let l3 = *ptr0.add(16).cast::<*mut u8>();
                                                let l4 = *ptr0.add(20).cast::<usize>();
                                                let len5 = l4;
                                                let bytes5 = _rt::Vec::from_raw_parts(
                                                    l3.cast(),
                                                    len5,
                                                    len5,
                                                );
                                                _rt::string_lift(bytes5)
                                            };
                                            V57::UnsupportedOperation(e57)
                                        }
                                        1 => {
                                            let e57 = {
                                                let l6 = *ptr0.add(16).cast::<*mut u8>();
                                                let l7 = *ptr0.add(20).cast::<usize>();
                                                let len8 = l7;
                                                let bytes8 = _rt::Vec::from_raw_parts(
                                                    l6.cast(),
                                                    len8,
                                                    len8,
                                                );
                                                _rt::string_lift(bytes8)
                                            };
                                            V57::ConnectionFailed(e57)
                                        }
                                        2 => {
                                            let e57 = {
                                                let l9 = *ptr0.add(16).cast::<*mut u8>();
                                                let l10 = *ptr0.add(20).cast::<usize>();
                                                let len11 = l10;
                                                let bytes11 = _rt::Vec::from_raw_parts(
                                                    l9.cast(),
                                                    len11,
                                                    len11,
                                                );
                                                _rt::string_lift(bytes11)
                                            };
                                            V57::AuthenticationFailed(e57)
                                        }
                                        3 => {
                                            let e57 = {
                                                let l12 = *ptr0.add(16).cast::<*mut u8>();
                                                let l13 = *ptr0.add(20).cast::<usize>();
                                                let len14 = l13;
                                                let bytes14 = _rt::Vec::from_raw_parts(
                                                    l12.cast(),
                                                    len14,
                                                    len14,
                                                );
                                                _rt::string_lift(bytes14)
                                            };
                                            V57::AuthorizationFailed(e57)
                                        }
                                        4 => {
                                            let e57 = {
                                                let l15 = i32::from(*ptr0.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V23;
                                                let v23 = match l15 {
                                                    0 => {
                                                        let e23 = {
                                                            let l16 = *ptr0.add(24).cast::<*mut u8>();
                                                            let l17 = *ptr0.add(28).cast::<usize>();
                                                            let len18 = l17;
                                                            let bytes18 = _rt::Vec::from_raw_parts(
                                                                l16.cast(),
                                                                len18,
                                                                len18,
                                                            );
                                                            _rt::string_lift(bytes18)
                                                        };
                                                        V23::StringValue(e23)
                                                    }
                                                    1 => {
                                                        let e23 = {
                                                            let l19 = *ptr0.add(24).cast::<i64>();
                                                            l19
                                                        };
                                                        V23::Int64(e23)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e23 = {
                                                            let l20 = *ptr0.add(24).cast::<*mut u8>();
                                                            let l21 = *ptr0.add(28).cast::<usize>();
                                                            let len22 = l21;
                                                            let bytes22 = _rt::Vec::from_raw_parts(
                                                                l20.cast(),
                                                                len22,
                                                                len22,
                                                            );
                                                            _rt::string_lift(bytes22)
                                                        };
                                                        V23::Uuid(e23)
                                                    }
                                                };
                                                v23
                                            };
                                            V57::ElementNotFound(e57)
                                        }
                                        5 => {
                                            let e57 = {
                                                let l24 = i32::from(*ptr0.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V32;
                                                let v32 = match l24 {
                                                    0 => {
                                                        let e32 = {
                                                            let l25 = *ptr0.add(24).cast::<*mut u8>();
                                                            let l26 = *ptr0.add(28).cast::<usize>();
                                                            let len27 = l26;
                                                            let bytes27 = _rt::Vec::from_raw_parts(
                                                                l25.cast(),
                                                                len27,
                                                                len27,
                                                            );
                                                            _rt::string_lift(bytes27)
                                                        };
                                                        V32::StringValue(e32)
                                                    }
                                                    1 => {
                                                        let e32 = {
                                                            let l28 = *ptr0.add(24).cast::<i64>();
                                                            l28
                                                        };
                                                        V32::Int64(e32)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e32 = {
                                                            let l29 = *ptr0.add(24).cast::<*mut u8>();
                                                            let l30 = *ptr0.add(28).cast::<usize>();
                                                            let len31 = l30;
                                                            let bytes31 = _rt::Vec::from_raw_parts(
                                                                l29.cast(),
                                                                len31,
                                                                len31,
                                                            );
                                                            _rt::string_lift(bytes31)
                                                        };
                                                        V32::Uuid(e32)
                                                    }
                                                };
                                                v32
                                            };
                                            V57::DuplicateElement(e57)
                                        }
                                        6 => {
                                            let e57 = {
                                                let l33 = *ptr0.add(16).cast::<*mut u8>();
                                                let l34 = *ptr0.add(20).cast::<usize>();
                                                let len35 = l34;
                                                let bytes35 = _rt::Vec::from_raw_parts(
                                                    l33.cast(),
                                                    len35,
                                                    len35,
                                                );
                                                _rt::string_lift(bytes35)
                                            };
                                            V57::SchemaViolation(e57)
                                        }
                                        7 => {
                                            let e57 = {
                                                let l36 = *ptr0.add(16).cast::<*mut u8>();
                                                let l37 = *ptr0.add(20).cast::<usize>();
                                                let len38 = l37;
                                                let bytes38 = _rt::Vec::from_raw_parts(
                                                    l36.cast(),
                                                    len38,
                                                    len38,
                                                );
                                                _rt::string_lift(bytes38)
                                            };
                                            V57::ConstraintViolation(e57)
                                        }
                                        8 => {
                                            let e57 = {
                                                let l39 = *ptr0.add(16).cast::<*mut u8>();
                                                let l40 = *ptr0.add(20).cast::<usize>();
                                                let len41 = l40;
                                                let bytes41 = _rt::Vec::from_raw_parts(
                                                    l39.cast(),
                                                    len41,
                                                    len41,
                                                );
                                                _rt::string_lift(bytes41)
                                            };
                                            V57::InvalidPropertyType(e57)
                                        }
                                        9 => {
                                            let e57 = {
                                                let l42 = *ptr0.add(16).cast::<*mut u8>();
                                                let l43 = *ptr0.add(20).cast::<usize>();
                                                let len44 = l43;
                                                let bytes44 = _rt::Vec::from_raw_parts(
                                                    l42.cast(),
                                                    len44,
                                                    len44,
                                                );
                                                _rt::string_lift(bytes44)
                                            };
                                            V57::InvalidQuery(e57)
                                        }
                                        10 => {
                                            let e57 = {
                                                let l45 = *ptr0.add(16).cast::<*mut u8>();
                                                let l46 = *ptr0.add(20).cast::<usize>();
                                                let len47 = l46;
                                                let bytes47 = _rt::Vec::from_raw_parts(
                                                    l45.cast(),
                                                    len47,
                                                    len47,
                                                );
                                                _rt::string_lift(bytes47)
                                            };
                                            V57::TransactionFailed(e57)
                                        }
                                        11 => V57::TransactionConflict,
                                        12 => V57::TransactionTimeout,
                                        13 => V57::DeadlockDetected,
                                        14 => V57::Timeout,
                                        15 => {
                                            let e57 = {
                                                let l48 = *ptr0.add(16).cast::<*mut u8>();
                                                let l49 = *ptr0.add(20).cast::<usize>();
                                                let len50 = l49;
                                                let bytes50 = _rt::Vec::from_raw_parts(
                                                    l48.cast(),
                                                    len50,
                                                    len50,
                                                );
                                                _rt::string_lift(bytes50)
                                            };
                                            V57::ResourceExhausted(e57)
                                        }
                                        16 => {
                                            let e57 = {
                                                let l51 = *ptr0.add(16).cast::<*mut u8>();
                                                let l52 = *ptr0.add(20).cast::<usize>();
                                                let len53 = l52;
                                                let bytes53 = _rt::Vec::from_raw_parts(
                                                    l51.cast(),
                                                    len53,
                                                    len53,
                                                );
                                                _rt::string_lift(bytes53)
                                            };
                                            V57::InternalError(e57)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 17, "invalid enum discriminant");
                                            let e57 = {
                                                let l54 = *ptr0.add(16).cast::<*mut u8>();
                                                let l55 = *ptr0.add(20).cast::<usize>();
                                                let len56 = l55;
                                                let bytes56 = _rt::Vec::from_raw_parts(
                                                    l54.cast(),
                                                    len56,
                                                    len56,
                                                );
                                                _rt::string_lift(bytes56)
                                            };
                                            V57::ServiceUnavailable(e57)
                                        }
                                    };
                                    v57
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Graph {
                #[allow(unused_unsafe, clippy::all)]
                /// Close the graph connection
                pub fn close(&self) -> Result<(), GraphError> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 32]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 32],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:graph/connection@1.0.0")]
                        extern "C" {
                            #[link_name = "[method]graph.close"]
                            fn wit_import(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(8).cast::<u8>());
                                    use super::super::super::golem::graph::errors::GraphError as V57;
                                    let v57 = match l2 {
                                        0 => {
                                            let e57 = {
                                                let l3 = *ptr0.add(16).cast::<*mut u8>();
                                                let l4 = *ptr0.add(20).cast::<usize>();
                                                let len5 = l4;
                                                let bytes5 = _rt::Vec::from_raw_parts(
                                                    l3.cast(),
                                                    len5,
                                                    len5,
                                                );
                                                _rt::string_lift(bytes5)
                                            };
                                            V57::UnsupportedOperation(e57)
                                        }
                                        1 => {
                                            let e57 = {
                                                let l6 = *ptr0.add(16).cast::<*mut u8>();
                                                let l7 = *ptr0.add(20).cast::<usize>();
                                                let len8 = l7;
                                                let bytes8 = _rt::Vec::from_raw_parts(
                                                    l6.cast(),
                                                    len8,
                                                    len8,
                                                );
                                                _rt::string_lift(bytes8)
                                            };
                                            V57::ConnectionFailed(e57)
                                        }
                                        2 => {
                                            let e57 = {
                                                let l9 = *ptr0.add(16).cast::<*mut u8>();
                                                let l10 = *ptr0.add(20).cast::<usize>();
                                                let len11 = l10;
                                                let bytes11 = _rt::Vec::from_raw_parts(
                                                    l9.cast(),
                                                    len11,
                                                    len11,
                                                );
                                                _rt::string_lift(bytes11)
                                            };
                                            V57::AuthenticationFailed(e57)
                                        }
                                        3 => {
                                            let e57 = {
                                                let l12 = *ptr0.add(16).cast::<*mut u8>();
                                                let l13 = *ptr0.add(20).cast::<usize>();
                                                let len14 = l13;
                                                let bytes14 = _rt::Vec::from_raw_parts(
                                                    l12.cast(),
                                                    len14,
                                                    len14,
                                                );
                                                _rt::string_lift(bytes14)
                                            };
                                            V57::AuthorizationFailed(e57)
                                        }
                                        4 => {
                                            let e57 = {
                                                let l15 = i32::from(*ptr0.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V23;
                                                let v23 = match l15 {
                                                    0 => {
                                                        let e23 = {
                                                            let l16 = *ptr0.add(24).cast::<*mut u8>();
                                                            let l17 = *ptr0.add(28).cast::<usize>();
                                                            let len18 = l17;
                                                            let bytes18 = _rt::Vec::from_raw_parts(
                                                                l16.cast(),
                                                                len18,
                                                                len18,
                                                            );
                                                            _rt::string_lift(bytes18)
                                                        };
                                                        V23::StringValue(e23)
                                                    }
                                                    1 => {
                                                        let e23 = {
                                                            let l19 = *ptr0.add(24).cast::<i64>();
                                                            l19
                                                        };
                                                        V23::Int64(e23)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e23 = {
                                                            let l20 = *ptr0.add(24).cast::<*mut u8>();
                                                            let l21 = *ptr0.add(28).cast::<usize>();
                                                            let len22 = l21;
                                                            let bytes22 = _rt::Vec::from_raw_parts(
                                                                l20.cast(),
                                                                len22,
                                                                len22,
                                                            );
                                                            _rt::string_lift(bytes22)
                                                        };
                                                        V23::Uuid(e23)
                                                    }
                                                };
                                                v23
                                            };
                                            V57::ElementNotFound(e57)
                                        }
                                        5 => {
                                            let e57 = {
                                                let l24 = i32::from(*ptr0.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V32;
                                                let v32 = match l24 {
                                                    0 => {
                                                        let e32 = {
                                                            let l25 = *ptr0.add(24).cast::<*mut u8>();
                                                            let l26 = *ptr0.add(28).cast::<usize>();
                                                            let len27 = l26;
                                                            let bytes27 = _rt::Vec::from_raw_parts(
                                                                l25.cast(),
                                                                len27,
                                                                len27,
                                                            );
                                                            _rt::string_lift(bytes27)
                                                        };
                                                        V32::StringValue(e32)
                                                    }
                                                    1 => {
                                                        let e32 = {
                                                            let l28 = *ptr0.add(24).cast::<i64>();
                                                            l28
                                                        };
                                                        V32::Int64(e32)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e32 = {
                                                            let l29 = *ptr0.add(24).cast::<*mut u8>();
                                                            let l30 = *ptr0.add(28).cast::<usize>();
                                                            let len31 = l30;
                                                            let bytes31 = _rt::Vec::from_raw_parts(
                                                                l29.cast(),
                                                                len31,
                                                                len31,
                                                            );
                                                            _rt::string_lift(bytes31)
                                                        };
                                                        V32::Uuid(e32)
                                                    }
                                                };
                                                v32
                                            };
                                            V57::DuplicateElement(e57)
                                        }
                                        6 => {
                                            let e57 = {
                                                let l33 = *ptr0.add(16).cast::<*mut u8>();
                                                let l34 = *ptr0.add(20).cast::<usize>();
                                                let len35 = l34;
                                                let bytes35 = _rt::Vec::from_raw_parts(
                                                    l33.cast(),
                                                    len35,
                                                    len35,
                                                );
                                                _rt::string_lift(bytes35)
                                            };
                                            V57::SchemaViolation(e57)
                                        }
                                        7 => {
                                            let e57 = {
                                                let l36 = *ptr0.add(16).cast::<*mut u8>();
                                                let l37 = *ptr0.add(20).cast::<usize>();
                                                let len38 = l37;
                                                let bytes38 = _rt::Vec::from_raw_parts(
                                                    l36.cast(),
                                                    len38,
                                                    len38,
                                                );
                                                _rt::string_lift(bytes38)
                                            };
                                            V57::ConstraintViolation(e57)
                                        }
                                        8 => {
                                            let e57 = {
                                                let l39 = *ptr0.add(16).cast::<*mut u8>();
                                                let l40 = *ptr0.add(20).cast::<usize>();
                                                let len41 = l40;
                                                let bytes41 = _rt::Vec::from_raw_parts(
                                                    l39.cast(),
                                                    len41,
                                                    len41,
                                                );
                                                _rt::string_lift(bytes41)
                                            };
                                            V57::InvalidPropertyType(e57)
                                        }
                                        9 => {
                                            let e57 = {
                                                let l42 = *ptr0.add(16).cast::<*mut u8>();
                                                let l43 = *ptr0.add(20).cast::<usize>();
                                                let len44 = l43;
                                                let bytes44 = _rt::Vec::from_raw_parts(
                                                    l42.cast(),
                                                    len44,
                                                    len44,
                                                );
                                                _rt::string_lift(bytes44)
                                            };
                                            V57::InvalidQuery(e57)
                                        }
                                        10 => {
                                            let e57 = {
                                                let l45 = *ptr0.add(16).cast::<*mut u8>();
                                                let l46 = *ptr0.add(20).cast::<usize>();
                                                let len47 = l46;
                                                let bytes47 = _rt::Vec::from_raw_parts(
                                                    l45.cast(),
                                                    len47,
                                                    len47,
                                                );
                                                _rt::string_lift(bytes47)
                                            };
                                            V57::TransactionFailed(e57)
                                        }
                                        11 => V57::TransactionConflict,
                                        12 => V57::TransactionTimeout,
                                        13 => V57::DeadlockDetected,
                                        14 => V57::Timeout,
                                        15 => {
                                            let e57 = {
                                                let l48 = *ptr0.add(16).cast::<*mut u8>();
                                                let l49 = *ptr0.add(20).cast::<usize>();
                                                let len50 = l49;
                                                let bytes50 = _rt::Vec::from_raw_parts(
                                                    l48.cast(),
                                                    len50,
                                                    len50,
                                                );
                                                _rt::string_lift(bytes50)
                                            };
                                            V57::ResourceExhausted(e57)
                                        }
                                        16 => {
                                            let e57 = {
                                                let l51 = *ptr0.add(16).cast::<*mut u8>();
                                                let l52 = *ptr0.add(20).cast::<usize>();
                                                let len53 = l52;
                                                let bytes53 = _rt::Vec::from_raw_parts(
                                                    l51.cast(),
                                                    len53,
                                                    len53,
                                                );
                                                _rt::string_lift(bytes53)
                                            };
                                            V57::InternalError(e57)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 17, "invalid enum discriminant");
                                            let e57 = {
                                                let l54 = *ptr0.add(16).cast::<*mut u8>();
                                                let l55 = *ptr0.add(20).cast::<usize>();
                                                let len56 = l55;
                                                let bytes56 = _rt::Vec::from_raw_parts(
                                                    l54.cast(),
                                                    len56,
                                                    len56,
                                                );
                                                _rt::string_lift(bytes56)
                                            };
                                            V57::ServiceUnavailable(e57)
                                        }
                                    };
                                    v57
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl Graph {
                #[allow(unused_unsafe, clippy::all)]
                /// Get basic graph statistics if supported
                pub fn get_statistics(&self) -> Result<GraphStatistics, GraphError> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 64]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 64],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:graph/connection@1.0.0")]
                        extern "C" {
                            #[link_name = "[method]graph.get-statistics"]
                            fn wit_import(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = i32::from(*ptr0.add(8).cast::<u8>());
                                    let l4 = i32::from(*ptr0.add(24).cast::<u8>());
                                    let l6 = i32::from(*ptr0.add(40).cast::<u8>());
                                    let l8 = i32::from(*ptr0.add(48).cast::<u8>());
                                    GraphStatistics {
                                        vertex_count: match l2 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l3 = *ptr0.add(16).cast::<i64>();
                                                    l3 as u64
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        edge_count: match l4 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l5 = *ptr0.add(32).cast::<i64>();
                                                    l5 as u64
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        label_count: match l6 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l7 = *ptr0.add(44).cast::<i32>();
                                                    l7 as u32
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        property_count: match l8 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l9 = *ptr0.add(56).cast::<i64>();
                                                    l9 as u64
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                    }
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l10 = i32::from(*ptr0.add(8).cast::<u8>());
                                    use super::super::super::golem::graph::errors::GraphError as V65;
                                    let v65 = match l10 {
                                        0 => {
                                            let e65 = {
                                                let l11 = *ptr0.add(16).cast::<*mut u8>();
                                                let l12 = *ptr0.add(20).cast::<usize>();
                                                let len13 = l12;
                                                let bytes13 = _rt::Vec::from_raw_parts(
                                                    l11.cast(),
                                                    len13,
                                                    len13,
                                                );
                                                _rt::string_lift(bytes13)
                                            };
                                            V65::UnsupportedOperation(e65)
                                        }
                                        1 => {
                                            let e65 = {
                                                let l14 = *ptr0.add(16).cast::<*mut u8>();
                                                let l15 = *ptr0.add(20).cast::<usize>();
                                                let len16 = l15;
                                                let bytes16 = _rt::Vec::from_raw_parts(
                                                    l14.cast(),
                                                    len16,
                                                    len16,
                                                );
                                                _rt::string_lift(bytes16)
                                            };
                                            V65::ConnectionFailed(e65)
                                        }
                                        2 => {
                                            let e65 = {
                                                let l17 = *ptr0.add(16).cast::<*mut u8>();
                                                let l18 = *ptr0.add(20).cast::<usize>();
                                                let len19 = l18;
                                                let bytes19 = _rt::Vec::from_raw_parts(
                                                    l17.cast(),
                                                    len19,
                                                    len19,
                                                );
                                                _rt::string_lift(bytes19)
                                            };
                                            V65::AuthenticationFailed(e65)
                                        }
                                        3 => {
                                            let e65 = {
                                                let l20 = *ptr0.add(16).cast::<*mut u8>();
                                                let l21 = *ptr0.add(20).cast::<usize>();
                                                let len22 = l21;
                                                let bytes22 = _rt::Vec::from_raw_parts(
                                                    l20.cast(),
                                                    len22,
                                                    len22,
                                                );
                                                _rt::string_lift(bytes22)
                                            };
                                            V65::AuthorizationFailed(e65)
                                        }
                                        4 => {
                                            let e65 = {
                                                let l23 = i32::from(*ptr0.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V31;
                                                let v31 = match l23 {
                                                    0 => {
                                                        let e31 = {
                                                            let l24 = *ptr0.add(24).cast::<*mut u8>();
                                                            let l25 = *ptr0.add(28).cast::<usize>();
                                                            let len26 = l25;
                                                            let bytes26 = _rt::Vec::from_raw_parts(
                                                                l24.cast(),
                                                                len26,
                                                                len26,
                                                            );
                                                            _rt::string_lift(bytes26)
                                                        };
                                                        V31::StringValue(e31)
                                                    }
                                                    1 => {
                                                        let e31 = {
                                                            let l27 = *ptr0.add(24).cast::<i64>();
                                                            l27
                                                        };
                                                        V31::Int64(e31)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e31 = {
                                                            let l28 = *ptr0.add(24).cast::<*mut u8>();
                                                            let l29 = *ptr0.add(28).cast::<usize>();
                                                            let len30 = l29;
                                                            let bytes30 = _rt::Vec::from_raw_parts(
                                                                l28.cast(),
                                                                len30,
                                                                len30,
                                                            );
                                                            _rt::string_lift(bytes30)
                                                        };
                                                        V31::Uuid(e31)
                                                    }
                                                };
                                                v31
                                            };
                                            V65::ElementNotFound(e65)
                                        }
                                        5 => {
                                            let e65 = {
                                                let l32 = i32::from(*ptr0.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V40;
                                                let v40 = match l32 {
                                                    0 => {
                                                        let e40 = {
                                                            let l33 = *ptr0.add(24).cast::<*mut u8>();
                                                            let l34 = *ptr0.add(28).cast::<usize>();
                                                            let len35 = l34;
                                                            let bytes35 = _rt::Vec::from_raw_parts(
                                                                l33.cast(),
                                                                len35,
                                                                len35,
                                                            );
                                                            _rt::string_lift(bytes35)
                                                        };
                                                        V40::StringValue(e40)
                                                    }
                                                    1 => {
                                                        let e40 = {
                                                            let l36 = *ptr0.add(24).cast::<i64>();
                                                            l36
                                                        };
                                                        V40::Int64(e40)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e40 = {
                                                            let l37 = *ptr0.add(24).cast::<*mut u8>();
                                                            let l38 = *ptr0.add(28).cast::<usize>();
                                                            let len39 = l38;
                                                            let bytes39 = _rt::Vec::from_raw_parts(
                                                                l37.cast(),
                                                                len39,
                                                                len39,
                                                            );
                                                            _rt::string_lift(bytes39)
                                                        };
                                                        V40::Uuid(e40)
                                                    }
                                                };
                                                v40
                                            };
                                            V65::DuplicateElement(e65)
                                        }
                                        6 => {
                                            let e65 = {
                                                let l41 = *ptr0.add(16).cast::<*mut u8>();
                                                let l42 = *ptr0.add(20).cast::<usize>();
                                                let len43 = l42;
                                                let bytes43 = _rt::Vec::from_raw_parts(
                                                    l41.cast(),
                                                    len43,
                                                    len43,
                                                );
                                                _rt::string_lift(bytes43)
                                            };
                                            V65::SchemaViolation(e65)
                                        }
                                        7 => {
                                            let e65 = {
                                                let l44 = *ptr0.add(16).cast::<*mut u8>();
                                                let l45 = *ptr0.add(20).cast::<usize>();
                                                let len46 = l45;
                                                let bytes46 = _rt::Vec::from_raw_parts(
                                                    l44.cast(),
                                                    len46,
                                                    len46,
                                                );
                                                _rt::string_lift(bytes46)
                                            };
                                            V65::ConstraintViolation(e65)
                                        }
                                        8 => {
                                            let e65 = {
                                                let l47 = *ptr0.add(16).cast::<*mut u8>();
                                                let l48 = *ptr0.add(20).cast::<usize>();
                                                let len49 = l48;
                                                let bytes49 = _rt::Vec::from_raw_parts(
                                                    l47.cast(),
                                                    len49,
                                                    len49,
                                                );
                                                _rt::string_lift(bytes49)
                                            };
                                            V65::InvalidPropertyType(e65)
                                        }
                                        9 => {
                                            let e65 = {
                                                let l50 = *ptr0.add(16).cast::<*mut u8>();
                                                let l51 = *ptr0.add(20).cast::<usize>();
                                                let len52 = l51;
                                                let bytes52 = _rt::Vec::from_raw_parts(
                                                    l50.cast(),
                                                    len52,
                                                    len52,
                                                );
                                                _rt::string_lift(bytes52)
                                            };
                                            V65::InvalidQuery(e65)
                                        }
                                        10 => {
                                            let e65 = {
                                                let l53 = *ptr0.add(16).cast::<*mut u8>();
                                                let l54 = *ptr0.add(20).cast::<usize>();
                                                let len55 = l54;
                                                let bytes55 = _rt::Vec::from_raw_parts(
                                                    l53.cast(),
                                                    len55,
                                                    len55,
                                                );
                                                _rt::string_lift(bytes55)
                                            };
                                            V65::TransactionFailed(e65)
                                        }
                                        11 => V65::TransactionConflict,
                                        12 => V65::TransactionTimeout,
                                        13 => V65::DeadlockDetected,
                                        14 => V65::Timeout,
                                        15 => {
                                            let e65 = {
                                                let l56 = *ptr0.add(16).cast::<*mut u8>();
                                                let l57 = *ptr0.add(20).cast::<usize>();
                                                let len58 = l57;
                                                let bytes58 = _rt::Vec::from_raw_parts(
                                                    l56.cast(),
                                                    len58,
                                                    len58,
                                                );
                                                _rt::string_lift(bytes58)
                                            };
                                            V65::ResourceExhausted(e65)
                                        }
                                        16 => {
                                            let e65 = {
                                                let l59 = *ptr0.add(16).cast::<*mut u8>();
                                                let l60 = *ptr0.add(20).cast::<usize>();
                                                let len61 = l60;
                                                let bytes61 = _rt::Vec::from_raw_parts(
                                                    l59.cast(),
                                                    len61,
                                                    len61,
                                                );
                                                _rt::string_lift(bytes61)
                                            };
                                            V65::InternalError(e65)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 17, "invalid enum discriminant");
                                            let e65 = {
                                                let l62 = *ptr0.add(16).cast::<*mut u8>();
                                                let l63 = *ptr0.add(20).cast::<usize>();
                                                let len64 = l63;
                                                let bytes64 = _rt::Vec::from_raw_parts(
                                                    l62.cast(),
                                                    len64,
                                                    len64,
                                                );
                                                _rt::string_lift(bytes64)
                                            };
                                            V65::ServiceUnavailable(e65)
                                        }
                                    };
                                    v65
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Connect to a graph database with the specified configuration
            pub fn connect(config: &ConnectionConfig) -> Result<Graph, GraphError> {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 72]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 72]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    let ConnectionConfig {
                        hosts: hosts1,
                        port: port1,
                        database_name: database_name1,
                        username: username1,
                        password: password1,
                        timeout_seconds: timeout_seconds1,
                        max_connections: max_connections1,
                        provider_config: provider_config1,
                    } = config;
                    let vec3 = hosts1;
                    let len3 = vec3.len();
                    let layout3 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec3.len() * 8,
                        4,
                    );
                    let result3 = if layout3.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout3).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout3);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec3.into_iter().enumerate() {
                        let base = result3.add(i * 8);
                        {
                            let vec2 = e;
                            let ptr2 = vec2.as_ptr().cast::<u8>();
                            let len2 = vec2.len();
                            *base.add(4).cast::<usize>() = len2;
                            *base.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                        }
                    }
                    *ptr0.add(4).cast::<usize>() = len3;
                    *ptr0.add(0).cast::<*mut u8>() = result3;
                    match port1 {
                        Some(e) => {
                            *ptr0.add(8).cast::<u8>() = (1i32) as u8;
                            *ptr0.add(10).cast::<u16>() = (_rt::as_i32(e)) as u16;
                        }
                        None => {
                            *ptr0.add(8).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match database_name1 {
                        Some(e) => {
                            *ptr0.add(12).cast::<u8>() = (1i32) as u8;
                            let vec4 = e;
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            *ptr0.add(20).cast::<usize>() = len4;
                            *ptr0.add(16).cast::<*mut u8>() = ptr4.cast_mut();
                        }
                        None => {
                            *ptr0.add(12).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match username1 {
                        Some(e) => {
                            *ptr0.add(24).cast::<u8>() = (1i32) as u8;
                            let vec5 = e;
                            let ptr5 = vec5.as_ptr().cast::<u8>();
                            let len5 = vec5.len();
                            *ptr0.add(32).cast::<usize>() = len5;
                            *ptr0.add(28).cast::<*mut u8>() = ptr5.cast_mut();
                        }
                        None => {
                            *ptr0.add(24).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match password1 {
                        Some(e) => {
                            *ptr0.add(36).cast::<u8>() = (1i32) as u8;
                            let vec6 = e;
                            let ptr6 = vec6.as_ptr().cast::<u8>();
                            let len6 = vec6.len();
                            *ptr0.add(44).cast::<usize>() = len6;
                            *ptr0.add(40).cast::<*mut u8>() = ptr6.cast_mut();
                        }
                        None => {
                            *ptr0.add(36).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match timeout_seconds1 {
                        Some(e) => {
                            *ptr0.add(48).cast::<u8>() = (1i32) as u8;
                            *ptr0.add(52).cast::<i32>() = _rt::as_i32(e);
                        }
                        None => {
                            *ptr0.add(48).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match max_connections1 {
                        Some(e) => {
                            *ptr0.add(56).cast::<u8>() = (1i32) as u8;
                            *ptr0.add(60).cast::<i32>() = _rt::as_i32(e);
                        }
                        None => {
                            *ptr0.add(56).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    let vec10 = provider_config1;
                    let len10 = vec10.len();
                    let layout10 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec10.len() * 16,
                        4,
                    );
                    let result10 = if layout10.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout10).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout10);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec10.into_iter().enumerate() {
                        let base = result10.add(i * 16);
                        {
                            let (t7_0, t7_1) = e;
                            let vec8 = t7_0;
                            let ptr8 = vec8.as_ptr().cast::<u8>();
                            let len8 = vec8.len();
                            *base.add(4).cast::<usize>() = len8;
                            *base.add(0).cast::<*mut u8>() = ptr8.cast_mut();
                            let vec9 = t7_1;
                            let ptr9 = vec9.as_ptr().cast::<u8>();
                            let len9 = vec9.len();
                            *base.add(12).cast::<usize>() = len9;
                            *base.add(8).cast::<*mut u8>() = ptr9.cast_mut();
                        }
                    }
                    *ptr0.add(68).cast::<usize>() = len10;
                    *ptr0.add(64).cast::<*mut u8>() = result10;
                    let ptr11 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:graph/connection@1.0.0")]
                    extern "C" {
                        #[link_name = "connect"]
                        fn wit_import(_: *mut u8, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0, ptr11);
                    let l12 = i32::from(*ptr11.add(0).cast::<u8>());
                    if layout3.size() != 0 {
                        _rt::alloc::dealloc(result3.cast(), layout3);
                    }
                    if layout10.size() != 0 {
                        _rt::alloc::dealloc(result10.cast(), layout10);
                    }
                    match l12 {
                        0 => {
                            let e = {
                                let l13 = *ptr11.add(8).cast::<i32>();
                                Graph::from_handle(l13 as u32)
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l14 = i32::from(*ptr11.add(8).cast::<u8>());
                                use super::super::super::golem::graph::errors::GraphError as V69;
                                let v69 = match l14 {
                                    0 => {
                                        let e69 = {
                                            let l15 = *ptr11.add(16).cast::<*mut u8>();
                                            let l16 = *ptr11.add(20).cast::<usize>();
                                            let len17 = l16;
                                            let bytes17 = _rt::Vec::from_raw_parts(
                                                l15.cast(),
                                                len17,
                                                len17,
                                            );
                                            _rt::string_lift(bytes17)
                                        };
                                        V69::UnsupportedOperation(e69)
                                    }
                                    1 => {
                                        let e69 = {
                                            let l18 = *ptr11.add(16).cast::<*mut u8>();
                                            let l19 = *ptr11.add(20).cast::<usize>();
                                            let len20 = l19;
                                            let bytes20 = _rt::Vec::from_raw_parts(
                                                l18.cast(),
                                                len20,
                                                len20,
                                            );
                                            _rt::string_lift(bytes20)
                                        };
                                        V69::ConnectionFailed(e69)
                                    }
                                    2 => {
                                        let e69 = {
                                            let l21 = *ptr11.add(16).cast::<*mut u8>();
                                            let l22 = *ptr11.add(20).cast::<usize>();
                                            let len23 = l22;
                                            let bytes23 = _rt::Vec::from_raw_parts(
                                                l21.cast(),
                                                len23,
                                                len23,
                                            );
                                            _rt::string_lift(bytes23)
                                        };
                                        V69::AuthenticationFailed(e69)
                                    }
                                    3 => {
                                        let e69 = {
                                            let l24 = *ptr11.add(16).cast::<*mut u8>();
                                            let l25 = *ptr11.add(20).cast::<usize>();
                                            let len26 = l25;
                                            let bytes26 = _rt::Vec::from_raw_parts(
                                                l24.cast(),
                                                len26,
                                                len26,
                                            );
                                            _rt::string_lift(bytes26)
                                        };
                                        V69::AuthorizationFailed(e69)
                                    }
                                    4 => {
                                        let e69 = {
                                            let l27 = i32::from(*ptr11.add(16).cast::<u8>());
                                            use super::super::super::golem::graph::types::ElementId as V35;
                                            let v35 = match l27 {
                                                0 => {
                                                    let e35 = {
                                                        let l28 = *ptr11.add(24).cast::<*mut u8>();
                                                        let l29 = *ptr11.add(28).cast::<usize>();
                                                        let len30 = l29;
                                                        let bytes30 = _rt::Vec::from_raw_parts(
                                                            l28.cast(),
                                                            len30,
                                                            len30,
                                                        );
                                                        _rt::string_lift(bytes30)
                                                    };
                                                    V35::StringValue(e35)
                                                }
                                                1 => {
                                                    let e35 = {
                                                        let l31 = *ptr11.add(24).cast::<i64>();
                                                        l31
                                                    };
                                                    V35::Int64(e35)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                    let e35 = {
                                                        let l32 = *ptr11.add(24).cast::<*mut u8>();
                                                        let l33 = *ptr11.add(28).cast::<usize>();
                                                        let len34 = l33;
                                                        let bytes34 = _rt::Vec::from_raw_parts(
                                                            l32.cast(),
                                                            len34,
                                                            len34,
                                                        );
                                                        _rt::string_lift(bytes34)
                                                    };
                                                    V35::Uuid(e35)
                                                }
                                            };
                                            v35
                                        };
                                        V69::ElementNotFound(e69)
                                    }
                                    5 => {
                                        let e69 = {
                                            let l36 = i32::from(*ptr11.add(16).cast::<u8>());
                                            use super::super::super::golem::graph::types::ElementId as V44;
                                            let v44 = match l36 {
                                                0 => {
                                                    let e44 = {
                                                        let l37 = *ptr11.add(24).cast::<*mut u8>();
                                                        let l38 = *ptr11.add(28).cast::<usize>();
                                                        let len39 = l38;
                                                        let bytes39 = _rt::Vec::from_raw_parts(
                                                            l37.cast(),
                                                            len39,
                                                            len39,
                                                        );
                                                        _rt::string_lift(bytes39)
                                                    };
                                                    V44::StringValue(e44)
                                                }
                                                1 => {
                                                    let e44 = {
                                                        let l40 = *ptr11.add(24).cast::<i64>();
                                                        l40
                                                    };
                                                    V44::Int64(e44)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                    let e44 = {
                                                        let l41 = *ptr11.add(24).cast::<*mut u8>();
                                                        let l42 = *ptr11.add(28).cast::<usize>();
                                                        let len43 = l42;
                                                        let bytes43 = _rt::Vec::from_raw_parts(
                                                            l41.cast(),
                                                            len43,
                                                            len43,
                                                        );
                                                        _rt::string_lift(bytes43)
                                                    };
                                                    V44::Uuid(e44)
                                                }
                                            };
                                            v44
                                        };
                                        V69::DuplicateElement(e69)
                                    }
                                    6 => {
                                        let e69 = {
                                            let l45 = *ptr11.add(16).cast::<*mut u8>();
                                            let l46 = *ptr11.add(20).cast::<usize>();
                                            let len47 = l46;
                                            let bytes47 = _rt::Vec::from_raw_parts(
                                                l45.cast(),
                                                len47,
                                                len47,
                                            );
                                            _rt::string_lift(bytes47)
                                        };
                                        V69::SchemaViolation(e69)
                                    }
                                    7 => {
                                        let e69 = {
                                            let l48 = *ptr11.add(16).cast::<*mut u8>();
                                            let l49 = *ptr11.add(20).cast::<usize>();
                                            let len50 = l49;
                                            let bytes50 = _rt::Vec::from_raw_parts(
                                                l48.cast(),
                                                len50,
                                                len50,
                                            );
                                            _rt::string_lift(bytes50)
                                        };
                                        V69::ConstraintViolation(e69)
                                    }
                                    8 => {
                                        let e69 = {
                                            let l51 = *ptr11.add(16).cast::<*mut u8>();
                                            let l52 = *ptr11.add(20).cast::<usize>();
                                            let len53 = l52;
                                            let bytes53 = _rt::Vec::from_raw_parts(
                                                l51.cast(),
                                                len53,
                                                len53,
                                            );
                                            _rt::string_lift(bytes53)
                                        };
                                        V69::InvalidPropertyType(e69)
                                    }
                                    9 => {
                                        let e69 = {
                                            let l54 = *ptr11.add(16).cast::<*mut u8>();
                                            let l55 = *ptr11.add(20).cast::<usize>();
                                            let len56 = l55;
                                            let bytes56 = _rt::Vec::from_raw_parts(
                                                l54.cast(),
                                                len56,
                                                len56,
                                            );
                                            _rt::string_lift(bytes56)
                                        };
                                        V69::InvalidQuery(e69)
                                    }
                                    10 => {
                                        let e69 = {
                                            let l57 = *ptr11.add(16).cast::<*mut u8>();
                                            let l58 = *ptr11.add(20).cast::<usize>();
                                            let len59 = l58;
                                            let bytes59 = _rt::Vec::from_raw_parts(
                                                l57.cast(),
                                                len59,
                                                len59,
                                            );
                                            _rt::string_lift(bytes59)
                                        };
                                        V69::TransactionFailed(e69)
                                    }
                                    11 => V69::TransactionConflict,
                                    12 => V69::TransactionTimeout,
                                    13 => V69::DeadlockDetected,
                                    14 => V69::Timeout,
                                    15 => {
                                        let e69 = {
                                            let l60 = *ptr11.add(16).cast::<*mut u8>();
                                            let l61 = *ptr11.add(20).cast::<usize>();
                                            let len62 = l61;
                                            let bytes62 = _rt::Vec::from_raw_parts(
                                                l60.cast(),
                                                len62,
                                                len62,
                                            );
                                            _rt::string_lift(bytes62)
                                        };
                                        V69::ResourceExhausted(e69)
                                    }
                                    16 => {
                                        let e69 = {
                                            let l63 = *ptr11.add(16).cast::<*mut u8>();
                                            let l64 = *ptr11.add(20).cast::<usize>();
                                            let len65 = l64;
                                            let bytes65 = _rt::Vec::from_raw_parts(
                                                l63.cast(),
                                                len65,
                                                len65,
                                            );
                                            _rt::string_lift(bytes65)
                                        };
                                        V69::InternalError(e69)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 17, "invalid enum discriminant");
                                        let e69 = {
                                            let l66 = *ptr11.add(16).cast::<*mut u8>();
                                            let l67 = *ptr11.add(20).cast::<usize>();
                                            let len68 = l67;
                                            let bytes68 = _rt::Vec::from_raw_parts(
                                                l66.cast(),
                                                len68,
                                                len68,
                                            );
                                            _rt::string_lift(bytes68)
                                        };
                                        V69::ServiceUnavailable(e69)
                                    }
                                };
                                v69
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
        }
        /// Generic query interface for database-specific query languages
        #[allow(dead_code, clippy::all)]
        pub mod query {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Vertex = super::super::super::golem::graph::types::Vertex;
            pub type Edge = super::super::super::golem::graph::types::Edge;
            pub type Path = super::super::super::golem::graph::types::Path;
            pub type PropertyValue = super::super::super::golem::graph::types::PropertyValue;
            pub type GraphError = super::super::super::golem::graph::errors::GraphError;
            pub type Transaction = super::super::super::golem::graph::transactions::Transaction;
            /// Query result that maintains symmetry with data insertion formats
            #[derive(Clone)]
            pub enum QueryResult {
                Vertices(_rt::Vec<Vertex>),
                Edges(_rt::Vec<Edge>),
                Paths(_rt::Vec<Path>),
                Values(_rt::Vec<PropertyValue>),
                Maps(_rt::Vec<_rt::Vec<(_rt::String, PropertyValue)>>),
            }
            impl ::core::fmt::Debug for QueryResult {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        QueryResult::Vertices(e) => {
                            f.debug_tuple("QueryResult::Vertices").field(e).finish()
                        }
                        QueryResult::Edges(e) => {
                            f.debug_tuple("QueryResult::Edges").field(e).finish()
                        }
                        QueryResult::Paths(e) => {
                            f.debug_tuple("QueryResult::Paths").field(e).finish()
                        }
                        QueryResult::Values(e) => {
                            f.debug_tuple("QueryResult::Values").field(e).finish()
                        }
                        QueryResult::Maps(e) => {
                            f.debug_tuple("QueryResult::Maps").field(e).finish()
                        }
                    }
                }
            }
            /// Query parameters for parameterized queries
            pub type QueryParameters = _rt::Vec<(_rt::String, PropertyValue)>;
            /// Query execution options
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct QueryOptions {
                pub timeout_seconds: Option<u32>,
                pub max_results: Option<u32>,
                pub explain: bool,
                /// Return execution plan instead of results
                pub profile: bool,
            }
            impl ::core::fmt::Debug for QueryOptions {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("QueryOptions")
                        .field("timeout-seconds", &self.timeout_seconds)
                        .field("max-results", &self.max_results)
                        .field("explain", &self.explain)
                        .field("profile", &self.profile)
                        .finish()
                }
            }
            /// Query execution result with metadata
            #[derive(Clone)]
            pub struct QueryExecutionResult {
                pub query_result_value: QueryResult,
                pub execution_time_ms: Option<u32>,
                pub rows_affected: Option<u32>,
                pub explanation: Option<_rt::String>,
                /// Execution plan if requested
                pub profile_data: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for QueryExecutionResult {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("QueryExecutionResult")
                        .field("query-result-value", &self.query_result_value)
                        .field("execution-time-ms", &self.execution_time_ms)
                        .field("rows-affected", &self.rows_affected)
                        .field("explanation", &self.explanation)
                        .field("profile-data", &self.profile_data)
                        .finish()
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Execute a database-specific query string
            pub fn execute_query(
                transaction: &Transaction,
                query: &str,
                parameters: Option<&QueryParameters>,
                options: Option<QueryOptions>,
            ) -> Result<QueryExecutionResult, GraphError> {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 64]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 64]);
                    let vec0 = query;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let (result23_0, result23_1, result23_2) = match parameters {
                        Some(e) => {
                            let vec22 = e;
                            let len22 = vec22.len();
                            let layout22 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec22.len() * 48,
                                8,
                            );
                            let result22 = if layout22.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout22).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout22);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec22.into_iter().enumerate() {
                                let base = result22.add(i * 48);
                                {
                                    let (t1_0, t1_1) = e;
                                    let vec2 = t1_0;
                                    let ptr2 = vec2.as_ptr().cast::<u8>();
                                    let len2 = vec2.len();
                                    *base.add(4).cast::<usize>() = len2;
                                    *base.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                                    use super::super::super::golem::graph::types::PropertyValue as V21;
                                    match t1_1 {
                                        V21::NullValue => {
                                            *base.add(8).cast::<u8>() = (0i32) as u8;
                                        }
                                        V21::Boolean(e) => {
                                            *base.add(8).cast::<u8>() = (1i32) as u8;
                                            *base.add(16).cast::<u8>() = (match e {
                                                true => 1,
                                                false => 0,
                                            }) as u8;
                                        }
                                        V21::Int8(e) => {
                                            *base.add(8).cast::<u8>() = (2i32) as u8;
                                            *base.add(16).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                        }
                                        V21::Int16(e) => {
                                            *base.add(8).cast::<u8>() = (3i32) as u8;
                                            *base.add(16).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                        }
                                        V21::Int32(e) => {
                                            *base.add(8).cast::<u8>() = (4i32) as u8;
                                            *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                        }
                                        V21::Int64(e) => {
                                            *base.add(8).cast::<u8>() = (5i32) as u8;
                                            *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                        }
                                        V21::Uint8(e) => {
                                            *base.add(8).cast::<u8>() = (6i32) as u8;
                                            *base.add(16).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                        }
                                        V21::Uint16(e) => {
                                            *base.add(8).cast::<u8>() = (7i32) as u8;
                                            *base.add(16).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                        }
                                        V21::Uint32(e) => {
                                            *base.add(8).cast::<u8>() = (8i32) as u8;
                                            *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                        }
                                        V21::Uint64(e) => {
                                            *base.add(8).cast::<u8>() = (9i32) as u8;
                                            *base.add(16).cast::<i64>() = _rt::as_i64(e);
                                        }
                                        V21::Float32Value(e) => {
                                            *base.add(8).cast::<u8>() = (10i32) as u8;
                                            *base.add(16).cast::<f32>() = _rt::as_f32(e);
                                        }
                                        V21::Float64Value(e) => {
                                            *base.add(8).cast::<u8>() = (11i32) as u8;
                                            *base.add(16).cast::<f64>() = _rt::as_f64(e);
                                        }
                                        V21::StringValue(e) => {
                                            *base.add(8).cast::<u8>() = (12i32) as u8;
                                            let vec3 = e;
                                            let ptr3 = vec3.as_ptr().cast::<u8>();
                                            let len3 = vec3.len();
                                            *base.add(20).cast::<usize>() = len3;
                                            *base.add(16).cast::<*mut u8>() = ptr3.cast_mut();
                                        }
                                        V21::Bytes(e) => {
                                            *base.add(8).cast::<u8>() = (13i32) as u8;
                                            let vec4 = e;
                                            let ptr4 = vec4.as_ptr().cast::<u8>();
                                            let len4 = vec4.len();
                                            *base.add(20).cast::<usize>() = len4;
                                            *base.add(16).cast::<*mut u8>() = ptr4.cast_mut();
                                        }
                                        V21::Date(e) => {
                                            *base.add(8).cast::<u8>() = (14i32) as u8;
                                            let super::super::super::golem::graph::types::Date {
                                                year: year5,
                                                month: month5,
                                                day: day5,
                                            } = e;
                                            *base.add(16).cast::<i32>() = _rt::as_i32(year5);
                                            *base.add(20).cast::<u8>() = (_rt::as_i32(month5)) as u8;
                                            *base.add(21).cast::<u8>() = (_rt::as_i32(day5)) as u8;
                                        }
                                        V21::Time(e) => {
                                            *base.add(8).cast::<u8>() = (15i32) as u8;
                                            let super::super::super::golem::graph::types::Time {
                                                hour: hour6,
                                                minute: minute6,
                                                second: second6,
                                                nanosecond: nanosecond6,
                                            } = e;
                                            *base.add(16).cast::<u8>() = (_rt::as_i32(hour6)) as u8;
                                            *base.add(17).cast::<u8>() = (_rt::as_i32(minute6)) as u8;
                                            *base.add(18).cast::<u8>() = (_rt::as_i32(second6)) as u8;
                                            *base.add(20).cast::<i32>() = _rt::as_i32(nanosecond6);
                                        }
                                        V21::Datetime(e) => {
                                            *base.add(8).cast::<u8>() = (16i32) as u8;
                                            let super::super::super::golem::graph::types::Datetime {
                                                date: date7,
                                                time: time7,
                                                timezone_offset_minutes: timezone_offset_minutes7,
                                            } = e;
                                            let super::super::super::golem::graph::types::Date {
                                                year: year8,
                                                month: month8,
                                                day: day8,
                                            } = date7;
                                            *base.add(16).cast::<i32>() = _rt::as_i32(year8);
                                            *base.add(20).cast::<u8>() = (_rt::as_i32(month8)) as u8;
                                            *base.add(21).cast::<u8>() = (_rt::as_i32(day8)) as u8;
                                            let super::super::super::golem::graph::types::Time {
                                                hour: hour9,
                                                minute: minute9,
                                                second: second9,
                                                nanosecond: nanosecond9,
                                            } = time7;
                                            *base.add(24).cast::<u8>() = (_rt::as_i32(hour9)) as u8;
                                            *base.add(25).cast::<u8>() = (_rt::as_i32(minute9)) as u8;
                                            *base.add(26).cast::<u8>() = (_rt::as_i32(second9)) as u8;
                                            *base.add(28).cast::<i32>() = _rt::as_i32(nanosecond9);
                                            match timezone_offset_minutes7 {
                                                Some(e) => {
                                                    *base.add(32).cast::<u8>() = (1i32) as u8;
                                                    *base.add(34).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                                }
                                                None => {
                                                    *base.add(32).cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                        V21::Duration(e) => {
                                            *base.add(8).cast::<u8>() = (17i32) as u8;
                                            let super::super::super::golem::graph::types::Duration {
                                                seconds: seconds10,
                                                nanoseconds: nanoseconds10,
                                            } = e;
                                            *base.add(16).cast::<i64>() = _rt::as_i64(seconds10);
                                            *base.add(24).cast::<i32>() = _rt::as_i32(nanoseconds10);
                                        }
                                        V21::Point(e) => {
                                            *base.add(8).cast::<u8>() = (18i32) as u8;
                                            let super::super::super::golem::graph::types::Point {
                                                longitude: longitude11,
                                                latitude: latitude11,
                                                altitude: altitude11,
                                            } = e;
                                            *base.add(16).cast::<f64>() = _rt::as_f64(longitude11);
                                            *base.add(24).cast::<f64>() = _rt::as_f64(latitude11);
                                            match altitude11 {
                                                Some(e) => {
                                                    *base.add(32).cast::<u8>() = (1i32) as u8;
                                                    *base.add(40).cast::<f64>() = _rt::as_f64(e);
                                                }
                                                None => {
                                                    *base.add(32).cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                        V21::Linestring(e) => {
                                            *base.add(8).cast::<u8>() = (19i32) as u8;
                                            let super::super::super::golem::graph::types::Linestring {
                                                coordinates: coordinates12,
                                            } = e;
                                            let vec14 = coordinates12;
                                            let len14 = vec14.len();
                                            let layout14 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec14.len() * 32,
                                                8,
                                            );
                                            let result14 = if layout14.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout14).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout14);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec14.into_iter().enumerate() {
                                                let base = result14.add(i * 32);
                                                {
                                                    let super::super::super::golem::graph::types::Point {
                                                        longitude: longitude13,
                                                        latitude: latitude13,
                                                        altitude: altitude13,
                                                    } = e;
                                                    *base.add(0).cast::<f64>() = _rt::as_f64(longitude13);
                                                    *base.add(8).cast::<f64>() = _rt::as_f64(latitude13);
                                                    match altitude13 {
                                                        Some(e) => {
                                                            *base.add(16).cast::<u8>() = (1i32) as u8;
                                                            *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                        }
                                                        None => {
                                                            *base.add(16).cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                            }
                                            *base.add(20).cast::<usize>() = len14;
                                            *base.add(16).cast::<*mut u8>() = result14;
                                            cleanup_list.extend_from_slice(&[(result14, layout14)]);
                                        }
                                        V21::Polygon(e) => {
                                            *base.add(8).cast::<u8>() = (20i32) as u8;
                                            let super::super::super::golem::graph::types::Polygon {
                                                exterior: exterior15,
                                                holes: holes15,
                                            } = e;
                                            let vec17 = exterior15;
                                            let len17 = vec17.len();
                                            let layout17 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec17.len() * 32,
                                                8,
                                            );
                                            let result17 = if layout17.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout17).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout17);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec17.into_iter().enumerate() {
                                                let base = result17.add(i * 32);
                                                {
                                                    let super::super::super::golem::graph::types::Point {
                                                        longitude: longitude16,
                                                        latitude: latitude16,
                                                        altitude: altitude16,
                                                    } = e;
                                                    *base.add(0).cast::<f64>() = _rt::as_f64(longitude16);
                                                    *base.add(8).cast::<f64>() = _rt::as_f64(latitude16);
                                                    match altitude16 {
                                                        Some(e) => {
                                                            *base.add(16).cast::<u8>() = (1i32) as u8;
                                                            *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                        }
                                                        None => {
                                                            *base.add(16).cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                            }
                                            *base.add(20).cast::<usize>() = len17;
                                            *base.add(16).cast::<*mut u8>() = result17;
                                            match holes15 {
                                                Some(e) => {
                                                    *base.add(24).cast::<u8>() = (1i32) as u8;
                                                    let vec20 = e;
                                                    let len20 = vec20.len();
                                                    let layout20 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec20.len() * 8,
                                                        4,
                                                    );
                                                    let result20 = if layout20.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout20).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout20);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec20.into_iter().enumerate() {
                                                        let base = result20.add(i * 8);
                                                        {
                                                            let vec19 = e;
                                                            let len19 = vec19.len();
                                                            let layout19 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec19.len() * 32,
                                                                8,
                                                            );
                                                            let result19 = if layout19.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout19).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout19);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec19.into_iter().enumerate() {
                                                                let base = result19.add(i * 32);
                                                                {
                                                                    let super::super::super::golem::graph::types::Point {
                                                                        longitude: longitude18,
                                                                        latitude: latitude18,
                                                                        altitude: altitude18,
                                                                    } = e;
                                                                    *base.add(0).cast::<f64>() = _rt::as_f64(longitude18);
                                                                    *base.add(8).cast::<f64>() = _rt::as_f64(latitude18);
                                                                    match altitude18 {
                                                                        Some(e) => {
                                                                            *base.add(16).cast::<u8>() = (1i32) as u8;
                                                                            *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                                        }
                                                                        None => {
                                                                            *base.add(16).cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                }
                                                            }
                                                            *base.add(4).cast::<usize>() = len19;
                                                            *base.add(0).cast::<*mut u8>() = result19;
                                                            cleanup_list.extend_from_slice(&[(result19, layout19)]);
                                                        }
                                                    }
                                                    *base.add(32).cast::<usize>() = len20;
                                                    *base.add(28).cast::<*mut u8>() = result20;
                                                    cleanup_list.extend_from_slice(&[(result20, layout20)]);
                                                }
                                                None => {
                                                    *base.add(24).cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            cleanup_list.extend_from_slice(&[(result17, layout17)]);
                                        }
                                    }
                                }
                            }
                            cleanup_list.extend_from_slice(&[(result22, layout22)]);
                            (1i32, result22, len22)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let (
                        result27_0,
                        result27_1,
                        result27_2,
                        result27_3,
                        result27_4,
                        result27_5,
                        result27_6,
                    ) = match options {
                        Some(e) => {
                            let QueryOptions {
                                timeout_seconds: timeout_seconds24,
                                max_results: max_results24,
                                explain: explain24,
                                profile: profile24,
                            } = e;
                            let (result25_0, result25_1) = match timeout_seconds24 {
                                Some(e) => (1i32, _rt::as_i32(e)),
                                None => (0i32, 0i32),
                            };
                            let (result26_0, result26_1) = match max_results24 {
                                Some(e) => (1i32, _rt::as_i32(e)),
                                None => (0i32, 0i32),
                            };
                            (
                                1i32,
                                result25_0,
                                result25_1,
                                result26_0,
                                result26_1,
                                match explain24 {
                                    true => 1,
                                    false => 0,
                                },
                                match profile24 {
                                    true => 1,
                                    false => 0,
                                },
                            )
                        }
                        None => (0i32, 0i32, 0i32, 0i32, 0i32, 0i32, 0i32),
                    };
                    let ptr28 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:graph/query@1.0.0")]
                    extern "C" {
                        #[link_name = "execute-query"]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: i32,
                            _: i32,
                            _: i32,
                            _: i32,
                            _: i32,
                            _: i32,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: i32,
                        _: i32,
                        _: i32,
                        _: i32,
                        _: i32,
                        _: i32,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    wit_import(
                        (transaction).handle() as i32,
                        ptr0.cast_mut(),
                        len0,
                        result23_0,
                        result23_1,
                        result23_2,
                        result27_0,
                        result27_1,
                        result27_2,
                        result27_3,
                        result27_4,
                        result27_5,
                        result27_6,
                        ptr28,
                    );
                    let l29 = i32::from(*ptr28.add(0).cast::<u8>());
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                    match l29 {
                        0 => {
                            let e = {
                                let l30 = i32::from(*ptr28.add(8).cast::<u8>());
                                let v575 = match l30 {
                                    0 => {
                                        let e575 = {
                                            let l31 = *ptr28.add(12).cast::<*mut u8>();
                                            let l32 = *ptr28.add(16).cast::<usize>();
                                            let base123 = l31;
                                            let len123 = l32;
                                            let mut result123 = _rt::Vec::with_capacity(len123);
                                            for i in 0..len123 {
                                                let base = base123.add(i * 40);
                                                let e123 = {
                                                    let l33 = i32::from(*base.add(0).cast::<u8>());
                                                    use super::super::super::golem::graph::types::ElementId as V41;
                                                    let v41 = match l33 {
                                                        0 => {
                                                            let e41 = {
                                                                let l34 = *base.add(8).cast::<*mut u8>();
                                                                let l35 = *base.add(12).cast::<usize>();
                                                                let len36 = l35;
                                                                let bytes36 = _rt::Vec::from_raw_parts(
                                                                    l34.cast(),
                                                                    len36,
                                                                    len36,
                                                                );
                                                                _rt::string_lift(bytes36)
                                                            };
                                                            V41::StringValue(e41)
                                                        }
                                                        1 => {
                                                            let e41 = {
                                                                let l37 = *base.add(8).cast::<i64>();
                                                                l37
                                                            };
                                                            V41::Int64(e41)
                                                        }
                                                        n => {
                                                            debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                            let e41 = {
                                                                let l38 = *base.add(8).cast::<*mut u8>();
                                                                let l39 = *base.add(12).cast::<usize>();
                                                                let len40 = l39;
                                                                let bytes40 = _rt::Vec::from_raw_parts(
                                                                    l38.cast(),
                                                                    len40,
                                                                    len40,
                                                                );
                                                                _rt::string_lift(bytes40)
                                                            };
                                                            V41::Uuid(e41)
                                                        }
                                                    };
                                                    let l42 = *base.add(16).cast::<*mut u8>();
                                                    let l43 = *base.add(20).cast::<usize>();
                                                    let len44 = l43;
                                                    let bytes44 = _rt::Vec::from_raw_parts(
                                                        l42.cast(),
                                                        len44,
                                                        len44,
                                                    );
                                                    let l45 = *base.add(24).cast::<*mut u8>();
                                                    let l46 = *base.add(28).cast::<usize>();
                                                    let base50 = l45;
                                                    let len50 = l46;
                                                    let mut result50 = _rt::Vec::with_capacity(len50);
                                                    for i in 0..len50 {
                                                        let base = base50.add(i * 8);
                                                        let e50 = {
                                                            let l47 = *base.add(0).cast::<*mut u8>();
                                                            let l48 = *base.add(4).cast::<usize>();
                                                            let len49 = l48;
                                                            let bytes49 = _rt::Vec::from_raw_parts(
                                                                l47.cast(),
                                                                len49,
                                                                len49,
                                                            );
                                                            _rt::string_lift(bytes49)
                                                        };
                                                        result50.push(e50);
                                                    }
                                                    _rt::cabi_dealloc(base50, len50 * 8, 4);
                                                    let l51 = *base.add(32).cast::<*mut u8>();
                                                    let l52 = *base.add(36).cast::<usize>();
                                                    let base122 = l51;
                                                    let len122 = l52;
                                                    let mut result122 = _rt::Vec::with_capacity(len122);
                                                    for i in 0..len122 {
                                                        let base = base122.add(i * 48);
                                                        let e122 = {
                                                            let l53 = *base.add(0).cast::<*mut u8>();
                                                            let l54 = *base.add(4).cast::<usize>();
                                                            let len55 = l54;
                                                            let bytes55 = _rt::Vec::from_raw_parts(
                                                                l53.cast(),
                                                                len55,
                                                                len55,
                                                            );
                                                            let l56 = i32::from(*base.add(8).cast::<u8>());
                                                            use super::super::super::golem::graph::types::PropertyValue as V121;
                                                            let v121 = match l56 {
                                                                0 => V121::NullValue,
                                                                1 => {
                                                                    let e121 = {
                                                                        let l57 = i32::from(*base.add(16).cast::<u8>());
                                                                        _rt::bool_lift(l57 as u8)
                                                                    };
                                                                    V121::Boolean(e121)
                                                                }
                                                                2 => {
                                                                    let e121 = {
                                                                        let l58 = i32::from(*base.add(16).cast::<i8>());
                                                                        l58 as i8
                                                                    };
                                                                    V121::Int8(e121)
                                                                }
                                                                3 => {
                                                                    let e121 = {
                                                                        let l59 = i32::from(*base.add(16).cast::<i16>());
                                                                        l59 as i16
                                                                    };
                                                                    V121::Int16(e121)
                                                                }
                                                                4 => {
                                                                    let e121 = {
                                                                        let l60 = *base.add(16).cast::<i32>();
                                                                        l60
                                                                    };
                                                                    V121::Int32(e121)
                                                                }
                                                                5 => {
                                                                    let e121 = {
                                                                        let l61 = *base.add(16).cast::<i64>();
                                                                        l61
                                                                    };
                                                                    V121::Int64(e121)
                                                                }
                                                                6 => {
                                                                    let e121 = {
                                                                        let l62 = i32::from(*base.add(16).cast::<u8>());
                                                                        l62 as u8
                                                                    };
                                                                    V121::Uint8(e121)
                                                                }
                                                                7 => {
                                                                    let e121 = {
                                                                        let l63 = i32::from(*base.add(16).cast::<u16>());
                                                                        l63 as u16
                                                                    };
                                                                    V121::Uint16(e121)
                                                                }
                                                                8 => {
                                                                    let e121 = {
                                                                        let l64 = *base.add(16).cast::<i32>();
                                                                        l64 as u32
                                                                    };
                                                                    V121::Uint32(e121)
                                                                }
                                                                9 => {
                                                                    let e121 = {
                                                                        let l65 = *base.add(16).cast::<i64>();
                                                                        l65 as u64
                                                                    };
                                                                    V121::Uint64(e121)
                                                                }
                                                                10 => {
                                                                    let e121 = {
                                                                        let l66 = *base.add(16).cast::<f32>();
                                                                        l66
                                                                    };
                                                                    V121::Float32Value(e121)
                                                                }
                                                                11 => {
                                                                    let e121 = {
                                                                        let l67 = *base.add(16).cast::<f64>();
                                                                        l67
                                                                    };
                                                                    V121::Float64Value(e121)
                                                                }
                                                                12 => {
                                                                    let e121 = {
                                                                        let l68 = *base.add(16).cast::<*mut u8>();
                                                                        let l69 = *base.add(20).cast::<usize>();
                                                                        let len70 = l69;
                                                                        let bytes70 = _rt::Vec::from_raw_parts(
                                                                            l68.cast(),
                                                                            len70,
                                                                            len70,
                                                                        );
                                                                        _rt::string_lift(bytes70)
                                                                    };
                                                                    V121::StringValue(e121)
                                                                }
                                                                13 => {
                                                                    let e121 = {
                                                                        let l71 = *base.add(16).cast::<*mut u8>();
                                                                        let l72 = *base.add(20).cast::<usize>();
                                                                        let len73 = l72;
                                                                        _rt::Vec::from_raw_parts(l71.cast(), len73, len73)
                                                                    };
                                                                    V121::Bytes(e121)
                                                                }
                                                                14 => {
                                                                    let e121 = {
                                                                        let l74 = *base.add(16).cast::<i32>();
                                                                        let l75 = i32::from(*base.add(20).cast::<u8>());
                                                                        let l76 = i32::from(*base.add(21).cast::<u8>());
                                                                        super::super::super::golem::graph::types::Date {
                                                                            year: l74 as u32,
                                                                            month: l75 as u8,
                                                                            day: l76 as u8,
                                                                        }
                                                                    };
                                                                    V121::Date(e121)
                                                                }
                                                                15 => {
                                                                    let e121 = {
                                                                        let l77 = i32::from(*base.add(16).cast::<u8>());
                                                                        let l78 = i32::from(*base.add(17).cast::<u8>());
                                                                        let l79 = i32::from(*base.add(18).cast::<u8>());
                                                                        let l80 = *base.add(20).cast::<i32>();
                                                                        super::super::super::golem::graph::types::Time {
                                                                            hour: l77 as u8,
                                                                            minute: l78 as u8,
                                                                            second: l79 as u8,
                                                                            nanosecond: l80 as u32,
                                                                        }
                                                                    };
                                                                    V121::Time(e121)
                                                                }
                                                                16 => {
                                                                    let e121 = {
                                                                        let l81 = *base.add(16).cast::<i32>();
                                                                        let l82 = i32::from(*base.add(20).cast::<u8>());
                                                                        let l83 = i32::from(*base.add(21).cast::<u8>());
                                                                        let l84 = i32::from(*base.add(24).cast::<u8>());
                                                                        let l85 = i32::from(*base.add(25).cast::<u8>());
                                                                        let l86 = i32::from(*base.add(26).cast::<u8>());
                                                                        let l87 = *base.add(28).cast::<i32>();
                                                                        let l88 = i32::from(*base.add(32).cast::<u8>());
                                                                        super::super::super::golem::graph::types::Datetime {
                                                                            date: super::super::super::golem::graph::types::Date {
                                                                                year: l81 as u32,
                                                                                month: l82 as u8,
                                                                                day: l83 as u8,
                                                                            },
                                                                            time: super::super::super::golem::graph::types::Time {
                                                                                hour: l84 as u8,
                                                                                minute: l85 as u8,
                                                                                second: l86 as u8,
                                                                                nanosecond: l87 as u32,
                                                                            },
                                                                            timezone_offset_minutes: match l88 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l89 = i32::from(*base.add(34).cast::<i16>());
                                                                                        l89 as i16
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            },
                                                                        }
                                                                    };
                                                                    V121::Datetime(e121)
                                                                }
                                                                17 => {
                                                                    let e121 = {
                                                                        let l90 = *base.add(16).cast::<i64>();
                                                                        let l91 = *base.add(24).cast::<i32>();
                                                                        super::super::super::golem::graph::types::Duration {
                                                                            seconds: l90,
                                                                            nanoseconds: l91 as u32,
                                                                        }
                                                                    };
                                                                    V121::Duration(e121)
                                                                }
                                                                18 => {
                                                                    let e121 = {
                                                                        let l92 = *base.add(16).cast::<f64>();
                                                                        let l93 = *base.add(24).cast::<f64>();
                                                                        let l94 = i32::from(*base.add(32).cast::<u8>());
                                                                        super::super::super::golem::graph::types::Point {
                                                                            longitude: l92,
                                                                            latitude: l93,
                                                                            altitude: match l94 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l95 = *base.add(40).cast::<f64>();
                                                                                        l95
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            },
                                                                        }
                                                                    };
                                                                    V121::Point(e121)
                                                                }
                                                                19 => {
                                                                    let e121 = {
                                                                        let l96 = *base.add(16).cast::<*mut u8>();
                                                                        let l97 = *base.add(20).cast::<usize>();
                                                                        let base102 = l96;
                                                                        let len102 = l97;
                                                                        let mut result102 = _rt::Vec::with_capacity(len102);
                                                                        for i in 0..len102 {
                                                                            let base = base102.add(i * 32);
                                                                            let e102 = {
                                                                                let l98 = *base.add(0).cast::<f64>();
                                                                                let l99 = *base.add(8).cast::<f64>();
                                                                                let l100 = i32::from(*base.add(16).cast::<u8>());
                                                                                super::super::super::golem::graph::types::Point {
                                                                                    longitude: l98,
                                                                                    latitude: l99,
                                                                                    altitude: match l100 {
                                                                                        0 => None,
                                                                                        1 => {
                                                                                            let e = {
                                                                                                let l101 = *base.add(24).cast::<f64>();
                                                                                                l101
                                                                                            };
                                                                                            Some(e)
                                                                                        }
                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                    },
                                                                                }
                                                                            };
                                                                            result102.push(e102);
                                                                        }
                                                                        _rt::cabi_dealloc(base102, len102 * 32, 8);
                                                                        super::super::super::golem::graph::types::Linestring {
                                                                            coordinates: result102,
                                                                        }
                                                                    };
                                                                    V121::Linestring(e121)
                                                                }
                                                                n => {
                                                                    debug_assert_eq!(n, 20, "invalid enum discriminant");
                                                                    let e121 = {
                                                                        let l103 = *base.add(16).cast::<*mut u8>();
                                                                        let l104 = *base.add(20).cast::<usize>();
                                                                        let base109 = l103;
                                                                        let len109 = l104;
                                                                        let mut result109 = _rt::Vec::with_capacity(len109);
                                                                        for i in 0..len109 {
                                                                            let base = base109.add(i * 32);
                                                                            let e109 = {
                                                                                let l105 = *base.add(0).cast::<f64>();
                                                                                let l106 = *base.add(8).cast::<f64>();
                                                                                let l107 = i32::from(*base.add(16).cast::<u8>());
                                                                                super::super::super::golem::graph::types::Point {
                                                                                    longitude: l105,
                                                                                    latitude: l106,
                                                                                    altitude: match l107 {
                                                                                        0 => None,
                                                                                        1 => {
                                                                                            let e = {
                                                                                                let l108 = *base.add(24).cast::<f64>();
                                                                                                l108
                                                                                            };
                                                                                            Some(e)
                                                                                        }
                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                    },
                                                                                }
                                                                            };
                                                                            result109.push(e109);
                                                                        }
                                                                        _rt::cabi_dealloc(base109, len109 * 32, 8);
                                                                        let l110 = i32::from(*base.add(24).cast::<u8>());
                                                                        super::super::super::golem::graph::types::Polygon {
                                                                            exterior: result109,
                                                                            holes: match l110 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l111 = *base.add(28).cast::<*mut u8>();
                                                                                        let l112 = *base.add(32).cast::<usize>();
                                                                                        let base120 = l111;
                                                                                        let len120 = l112;
                                                                                        let mut result120 = _rt::Vec::with_capacity(len120);
                                                                                        for i in 0..len120 {
                                                                                            let base = base120.add(i * 8);
                                                                                            let e120 = {
                                                                                                let l113 = *base.add(0).cast::<*mut u8>();
                                                                                                let l114 = *base.add(4).cast::<usize>();
                                                                                                let base119 = l113;
                                                                                                let len119 = l114;
                                                                                                let mut result119 = _rt::Vec::with_capacity(len119);
                                                                                                for i in 0..len119 {
                                                                                                    let base = base119.add(i * 32);
                                                                                                    let e119 = {
                                                                                                        let l115 = *base.add(0).cast::<f64>();
                                                                                                        let l116 = *base.add(8).cast::<f64>();
                                                                                                        let l117 = i32::from(*base.add(16).cast::<u8>());
                                                                                                        super::super::super::golem::graph::types::Point {
                                                                                                            longitude: l115,
                                                                                                            latitude: l116,
                                                                                                            altitude: match l117 {
                                                                                                                0 => None,
                                                                                                                1 => {
                                                                                                                    let e = {
                                                                                                                        let l118 = *base.add(24).cast::<f64>();
                                                                                                                        l118
                                                                                                                    };
                                                                                                                    Some(e)
                                                                                                                }
                                                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                                                            },
                                                                                                        }
                                                                                                    };
                                                                                                    result119.push(e119);
                                                                                                }
                                                                                                _rt::cabi_dealloc(base119, len119 * 32, 8);
                                                                                                result119
                                                                                            };
                                                                                            result120.push(e120);
                                                                                        }
                                                                                        _rt::cabi_dealloc(base120, len120 * 8, 4);
                                                                                        result120
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            },
                                                                        }
                                                                    };
                                                                    V121::Polygon(e121)
                                                                }
                                                            };
                                                            (_rt::string_lift(bytes55), v121)
                                                        };
                                                        result122.push(e122);
                                                    }
                                                    _rt::cabi_dealloc(base122, len122 * 48, 8);
                                                    super::super::super::golem::graph::types::Vertex {
                                                        id: v41,
                                                        vertex_type: _rt::string_lift(bytes44),
                                                        additional_labels: result50,
                                                        properties: result122,
                                                    }
                                                };
                                                result123.push(e123);
                                            }
                                            _rt::cabi_dealloc(base123, len123 * 40, 8);
                                            result123
                                        };
                                        QueryResult::Vertices(e575)
                                    }
                                    1 => {
                                        let e575 = {
                                            let l124 = *ptr28.add(12).cast::<*mut u8>();
                                            let l125 = *ptr28.add(16).cast::<usize>();
                                            let base228 = l124;
                                            let len228 = l125;
                                            let mut result228 = _rt::Vec::with_capacity(len228);
                                            for i in 0..len228 {
                                                let base = base228.add(i * 64);
                                                let e228 = {
                                                    let l126 = i32::from(*base.add(0).cast::<u8>());
                                                    use super::super::super::golem::graph::types::ElementId as V134;
                                                    let v134 = match l126 {
                                                        0 => {
                                                            let e134 = {
                                                                let l127 = *base.add(8).cast::<*mut u8>();
                                                                let l128 = *base.add(12).cast::<usize>();
                                                                let len129 = l128;
                                                                let bytes129 = _rt::Vec::from_raw_parts(
                                                                    l127.cast(),
                                                                    len129,
                                                                    len129,
                                                                );
                                                                _rt::string_lift(bytes129)
                                                            };
                                                            V134::StringValue(e134)
                                                        }
                                                        1 => {
                                                            let e134 = {
                                                                let l130 = *base.add(8).cast::<i64>();
                                                                l130
                                                            };
                                                            V134::Int64(e134)
                                                        }
                                                        n => {
                                                            debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                            let e134 = {
                                                                let l131 = *base.add(8).cast::<*mut u8>();
                                                                let l132 = *base.add(12).cast::<usize>();
                                                                let len133 = l132;
                                                                let bytes133 = _rt::Vec::from_raw_parts(
                                                                    l131.cast(),
                                                                    len133,
                                                                    len133,
                                                                );
                                                                _rt::string_lift(bytes133)
                                                            };
                                                            V134::Uuid(e134)
                                                        }
                                                    };
                                                    let l135 = *base.add(16).cast::<*mut u8>();
                                                    let l136 = *base.add(20).cast::<usize>();
                                                    let len137 = l136;
                                                    let bytes137 = _rt::Vec::from_raw_parts(
                                                        l135.cast(),
                                                        len137,
                                                        len137,
                                                    );
                                                    let l138 = i32::from(*base.add(24).cast::<u8>());
                                                    use super::super::super::golem::graph::types::ElementId as V146;
                                                    let v146 = match l138 {
                                                        0 => {
                                                            let e146 = {
                                                                let l139 = *base.add(32).cast::<*mut u8>();
                                                                let l140 = *base.add(36).cast::<usize>();
                                                                let len141 = l140;
                                                                let bytes141 = _rt::Vec::from_raw_parts(
                                                                    l139.cast(),
                                                                    len141,
                                                                    len141,
                                                                );
                                                                _rt::string_lift(bytes141)
                                                            };
                                                            V146::StringValue(e146)
                                                        }
                                                        1 => {
                                                            let e146 = {
                                                                let l142 = *base.add(32).cast::<i64>();
                                                                l142
                                                            };
                                                            V146::Int64(e146)
                                                        }
                                                        n => {
                                                            debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                            let e146 = {
                                                                let l143 = *base.add(32).cast::<*mut u8>();
                                                                let l144 = *base.add(36).cast::<usize>();
                                                                let len145 = l144;
                                                                let bytes145 = _rt::Vec::from_raw_parts(
                                                                    l143.cast(),
                                                                    len145,
                                                                    len145,
                                                                );
                                                                _rt::string_lift(bytes145)
                                                            };
                                                            V146::Uuid(e146)
                                                        }
                                                    };
                                                    let l147 = i32::from(*base.add(40).cast::<u8>());
                                                    use super::super::super::golem::graph::types::ElementId as V155;
                                                    let v155 = match l147 {
                                                        0 => {
                                                            let e155 = {
                                                                let l148 = *base.add(48).cast::<*mut u8>();
                                                                let l149 = *base.add(52).cast::<usize>();
                                                                let len150 = l149;
                                                                let bytes150 = _rt::Vec::from_raw_parts(
                                                                    l148.cast(),
                                                                    len150,
                                                                    len150,
                                                                );
                                                                _rt::string_lift(bytes150)
                                                            };
                                                            V155::StringValue(e155)
                                                        }
                                                        1 => {
                                                            let e155 = {
                                                                let l151 = *base.add(48).cast::<i64>();
                                                                l151
                                                            };
                                                            V155::Int64(e155)
                                                        }
                                                        n => {
                                                            debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                            let e155 = {
                                                                let l152 = *base.add(48).cast::<*mut u8>();
                                                                let l153 = *base.add(52).cast::<usize>();
                                                                let len154 = l153;
                                                                let bytes154 = _rt::Vec::from_raw_parts(
                                                                    l152.cast(),
                                                                    len154,
                                                                    len154,
                                                                );
                                                                _rt::string_lift(bytes154)
                                                            };
                                                            V155::Uuid(e155)
                                                        }
                                                    };
                                                    let l156 = *base.add(56).cast::<*mut u8>();
                                                    let l157 = *base.add(60).cast::<usize>();
                                                    let base227 = l156;
                                                    let len227 = l157;
                                                    let mut result227 = _rt::Vec::with_capacity(len227);
                                                    for i in 0..len227 {
                                                        let base = base227.add(i * 48);
                                                        let e227 = {
                                                            let l158 = *base.add(0).cast::<*mut u8>();
                                                            let l159 = *base.add(4).cast::<usize>();
                                                            let len160 = l159;
                                                            let bytes160 = _rt::Vec::from_raw_parts(
                                                                l158.cast(),
                                                                len160,
                                                                len160,
                                                            );
                                                            let l161 = i32::from(*base.add(8).cast::<u8>());
                                                            use super::super::super::golem::graph::types::PropertyValue as V226;
                                                            let v226 = match l161 {
                                                                0 => V226::NullValue,
                                                                1 => {
                                                                    let e226 = {
                                                                        let l162 = i32::from(*base.add(16).cast::<u8>());
                                                                        _rt::bool_lift(l162 as u8)
                                                                    };
                                                                    V226::Boolean(e226)
                                                                }
                                                                2 => {
                                                                    let e226 = {
                                                                        let l163 = i32::from(*base.add(16).cast::<i8>());
                                                                        l163 as i8
                                                                    };
                                                                    V226::Int8(e226)
                                                                }
                                                                3 => {
                                                                    let e226 = {
                                                                        let l164 = i32::from(*base.add(16).cast::<i16>());
                                                                        l164 as i16
                                                                    };
                                                                    V226::Int16(e226)
                                                                }
                                                                4 => {
                                                                    let e226 = {
                                                                        let l165 = *base.add(16).cast::<i32>();
                                                                        l165
                                                                    };
                                                                    V226::Int32(e226)
                                                                }
                                                                5 => {
                                                                    let e226 = {
                                                                        let l166 = *base.add(16).cast::<i64>();
                                                                        l166
                                                                    };
                                                                    V226::Int64(e226)
                                                                }
                                                                6 => {
                                                                    let e226 = {
                                                                        let l167 = i32::from(*base.add(16).cast::<u8>());
                                                                        l167 as u8
                                                                    };
                                                                    V226::Uint8(e226)
                                                                }
                                                                7 => {
                                                                    let e226 = {
                                                                        let l168 = i32::from(*base.add(16).cast::<u16>());
                                                                        l168 as u16
                                                                    };
                                                                    V226::Uint16(e226)
                                                                }
                                                                8 => {
                                                                    let e226 = {
                                                                        let l169 = *base.add(16).cast::<i32>();
                                                                        l169 as u32
                                                                    };
                                                                    V226::Uint32(e226)
                                                                }
                                                                9 => {
                                                                    let e226 = {
                                                                        let l170 = *base.add(16).cast::<i64>();
                                                                        l170 as u64
                                                                    };
                                                                    V226::Uint64(e226)
                                                                }
                                                                10 => {
                                                                    let e226 = {
                                                                        let l171 = *base.add(16).cast::<f32>();
                                                                        l171
                                                                    };
                                                                    V226::Float32Value(e226)
                                                                }
                                                                11 => {
                                                                    let e226 = {
                                                                        let l172 = *base.add(16).cast::<f64>();
                                                                        l172
                                                                    };
                                                                    V226::Float64Value(e226)
                                                                }
                                                                12 => {
                                                                    let e226 = {
                                                                        let l173 = *base.add(16).cast::<*mut u8>();
                                                                        let l174 = *base.add(20).cast::<usize>();
                                                                        let len175 = l174;
                                                                        let bytes175 = _rt::Vec::from_raw_parts(
                                                                            l173.cast(),
                                                                            len175,
                                                                            len175,
                                                                        );
                                                                        _rt::string_lift(bytes175)
                                                                    };
                                                                    V226::StringValue(e226)
                                                                }
                                                                13 => {
                                                                    let e226 = {
                                                                        let l176 = *base.add(16).cast::<*mut u8>();
                                                                        let l177 = *base.add(20).cast::<usize>();
                                                                        let len178 = l177;
                                                                        _rt::Vec::from_raw_parts(l176.cast(), len178, len178)
                                                                    };
                                                                    V226::Bytes(e226)
                                                                }
                                                                14 => {
                                                                    let e226 = {
                                                                        let l179 = *base.add(16).cast::<i32>();
                                                                        let l180 = i32::from(*base.add(20).cast::<u8>());
                                                                        let l181 = i32::from(*base.add(21).cast::<u8>());
                                                                        super::super::super::golem::graph::types::Date {
                                                                            year: l179 as u32,
                                                                            month: l180 as u8,
                                                                            day: l181 as u8,
                                                                        }
                                                                    };
                                                                    V226::Date(e226)
                                                                }
                                                                15 => {
                                                                    let e226 = {
                                                                        let l182 = i32::from(*base.add(16).cast::<u8>());
                                                                        let l183 = i32::from(*base.add(17).cast::<u8>());
                                                                        let l184 = i32::from(*base.add(18).cast::<u8>());
                                                                        let l185 = *base.add(20).cast::<i32>();
                                                                        super::super::super::golem::graph::types::Time {
                                                                            hour: l182 as u8,
                                                                            minute: l183 as u8,
                                                                            second: l184 as u8,
                                                                            nanosecond: l185 as u32,
                                                                        }
                                                                    };
                                                                    V226::Time(e226)
                                                                }
                                                                16 => {
                                                                    let e226 = {
                                                                        let l186 = *base.add(16).cast::<i32>();
                                                                        let l187 = i32::from(*base.add(20).cast::<u8>());
                                                                        let l188 = i32::from(*base.add(21).cast::<u8>());
                                                                        let l189 = i32::from(*base.add(24).cast::<u8>());
                                                                        let l190 = i32::from(*base.add(25).cast::<u8>());
                                                                        let l191 = i32::from(*base.add(26).cast::<u8>());
                                                                        let l192 = *base.add(28).cast::<i32>();
                                                                        let l193 = i32::from(*base.add(32).cast::<u8>());
                                                                        super::super::super::golem::graph::types::Datetime {
                                                                            date: super::super::super::golem::graph::types::Date {
                                                                                year: l186 as u32,
                                                                                month: l187 as u8,
                                                                                day: l188 as u8,
                                                                            },
                                                                            time: super::super::super::golem::graph::types::Time {
                                                                                hour: l189 as u8,
                                                                                minute: l190 as u8,
                                                                                second: l191 as u8,
                                                                                nanosecond: l192 as u32,
                                                                            },
                                                                            timezone_offset_minutes: match l193 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l194 = i32::from(*base.add(34).cast::<i16>());
                                                                                        l194 as i16
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            },
                                                                        }
                                                                    };
                                                                    V226::Datetime(e226)
                                                                }
                                                                17 => {
                                                                    let e226 = {
                                                                        let l195 = *base.add(16).cast::<i64>();
                                                                        let l196 = *base.add(24).cast::<i32>();
                                                                        super::super::super::golem::graph::types::Duration {
                                                                            seconds: l195,
                                                                            nanoseconds: l196 as u32,
                                                                        }
                                                                    };
                                                                    V226::Duration(e226)
                                                                }
                                                                18 => {
                                                                    let e226 = {
                                                                        let l197 = *base.add(16).cast::<f64>();
                                                                        let l198 = *base.add(24).cast::<f64>();
                                                                        let l199 = i32::from(*base.add(32).cast::<u8>());
                                                                        super::super::super::golem::graph::types::Point {
                                                                            longitude: l197,
                                                                            latitude: l198,
                                                                            altitude: match l199 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l200 = *base.add(40).cast::<f64>();
                                                                                        l200
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            },
                                                                        }
                                                                    };
                                                                    V226::Point(e226)
                                                                }
                                                                19 => {
                                                                    let e226 = {
                                                                        let l201 = *base.add(16).cast::<*mut u8>();
                                                                        let l202 = *base.add(20).cast::<usize>();
                                                                        let base207 = l201;
                                                                        let len207 = l202;
                                                                        let mut result207 = _rt::Vec::with_capacity(len207);
                                                                        for i in 0..len207 {
                                                                            let base = base207.add(i * 32);
                                                                            let e207 = {
                                                                                let l203 = *base.add(0).cast::<f64>();
                                                                                let l204 = *base.add(8).cast::<f64>();
                                                                                let l205 = i32::from(*base.add(16).cast::<u8>());
                                                                                super::super::super::golem::graph::types::Point {
                                                                                    longitude: l203,
                                                                                    latitude: l204,
                                                                                    altitude: match l205 {
                                                                                        0 => None,
                                                                                        1 => {
                                                                                            let e = {
                                                                                                let l206 = *base.add(24).cast::<f64>();
                                                                                                l206
                                                                                            };
                                                                                            Some(e)
                                                                                        }
                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                    },
                                                                                }
                                                                            };
                                                                            result207.push(e207);
                                                                        }
                                                                        _rt::cabi_dealloc(base207, len207 * 32, 8);
                                                                        super::super::super::golem::graph::types::Linestring {
                                                                            coordinates: result207,
                                                                        }
                                                                    };
                                                                    V226::Linestring(e226)
                                                                }
                                                                n => {
                                                                    debug_assert_eq!(n, 20, "invalid enum discriminant");
                                                                    let e226 = {
                                                                        let l208 = *base.add(16).cast::<*mut u8>();
                                                                        let l209 = *base.add(20).cast::<usize>();
                                                                        let base214 = l208;
                                                                        let len214 = l209;
                                                                        let mut result214 = _rt::Vec::with_capacity(len214);
                                                                        for i in 0..len214 {
                                                                            let base = base214.add(i * 32);
                                                                            let e214 = {
                                                                                let l210 = *base.add(0).cast::<f64>();
                                                                                let l211 = *base.add(8).cast::<f64>();
                                                                                let l212 = i32::from(*base.add(16).cast::<u8>());
                                                                                super::super::super::golem::graph::types::Point {
                                                                                    longitude: l210,
                                                                                    latitude: l211,
                                                                                    altitude: match l212 {
                                                                                        0 => None,
                                                                                        1 => {
                                                                                            let e = {
                                                                                                let l213 = *base.add(24).cast::<f64>();
                                                                                                l213
                                                                                            };
                                                                                            Some(e)
                                                                                        }
                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                    },
                                                                                }
                                                                            };
                                                                            result214.push(e214);
                                                                        }
                                                                        _rt::cabi_dealloc(base214, len214 * 32, 8);
                                                                        let l215 = i32::from(*base.add(24).cast::<u8>());
                                                                        super::super::super::golem::graph::types::Polygon {
                                                                            exterior: result214,
                                                                            holes: match l215 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l216 = *base.add(28).cast::<*mut u8>();
                                                                                        let l217 = *base.add(32).cast::<usize>();
                                                                                        let base225 = l216;
                                                                                        let len225 = l217;
                                                                                        let mut result225 = _rt::Vec::with_capacity(len225);
                                                                                        for i in 0..len225 {
                                                                                            let base = base225.add(i * 8);
                                                                                            let e225 = {
                                                                                                let l218 = *base.add(0).cast::<*mut u8>();
                                                                                                let l219 = *base.add(4).cast::<usize>();
                                                                                                let base224 = l218;
                                                                                                let len224 = l219;
                                                                                                let mut result224 = _rt::Vec::with_capacity(len224);
                                                                                                for i in 0..len224 {
                                                                                                    let base = base224.add(i * 32);
                                                                                                    let e224 = {
                                                                                                        let l220 = *base.add(0).cast::<f64>();
                                                                                                        let l221 = *base.add(8).cast::<f64>();
                                                                                                        let l222 = i32::from(*base.add(16).cast::<u8>());
                                                                                                        super::super::super::golem::graph::types::Point {
                                                                                                            longitude: l220,
                                                                                                            latitude: l221,
                                                                                                            altitude: match l222 {
                                                                                                                0 => None,
                                                                                                                1 => {
                                                                                                                    let e = {
                                                                                                                        let l223 = *base.add(24).cast::<f64>();
                                                                                                                        l223
                                                                                                                    };
                                                                                                                    Some(e)
                                                                                                                }
                                                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                                                            },
                                                                                                        }
                                                                                                    };
                                                                                                    result224.push(e224);
                                                                                                }
                                                                                                _rt::cabi_dealloc(base224, len224 * 32, 8);
                                                                                                result224
                                                                                            };
                                                                                            result225.push(e225);
                                                                                        }
                                                                                        _rt::cabi_dealloc(base225, len225 * 8, 4);
                                                                                        result225
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            },
                                                                        }
                                                                    };
                                                                    V226::Polygon(e226)
                                                                }
                                                            };
                                                            (_rt::string_lift(bytes160), v226)
                                                        };
                                                        result227.push(e227);
                                                    }
                                                    _rt::cabi_dealloc(base227, len227 * 48, 8);
                                                    super::super::super::golem::graph::types::Edge {
                                                        id: v134,
                                                        edge_type: _rt::string_lift(bytes137),
                                                        from_vertex: v146,
                                                        to_vertex: v155,
                                                        properties: result227,
                                                    }
                                                };
                                                result228.push(e228);
                                            }
                                            _rt::cabi_dealloc(base228, len228 * 64, 8);
                                            result228
                                        };
                                        QueryResult::Edges(e575)
                                    }
                                    2 => {
                                        let e575 = {
                                            let l229 = *ptr28.add(12).cast::<*mut u8>();
                                            let l230 = *ptr28.add(16).cast::<usize>();
                                            let base430 = l229;
                                            let len430 = l230;
                                            let mut result430 = _rt::Vec::with_capacity(len430);
                                            for i in 0..len430 {
                                                let base = base430.add(i * 20);
                                                let e430 = {
                                                    let l231 = *base.add(0).cast::<*mut u8>();
                                                    let l232 = *base.add(4).cast::<usize>();
                                                    let base323 = l231;
                                                    let len323 = l232;
                                                    let mut result323 = _rt::Vec::with_capacity(len323);
                                                    for i in 0..len323 {
                                                        let base = base323.add(i * 40);
                                                        let e323 = {
                                                            let l233 = i32::from(*base.add(0).cast::<u8>());
                                                            use super::super::super::golem::graph::types::ElementId as V241;
                                                            let v241 = match l233 {
                                                                0 => {
                                                                    let e241 = {
                                                                        let l234 = *base.add(8).cast::<*mut u8>();
                                                                        let l235 = *base.add(12).cast::<usize>();
                                                                        let len236 = l235;
                                                                        let bytes236 = _rt::Vec::from_raw_parts(
                                                                            l234.cast(),
                                                                            len236,
                                                                            len236,
                                                                        );
                                                                        _rt::string_lift(bytes236)
                                                                    };
                                                                    V241::StringValue(e241)
                                                                }
                                                                1 => {
                                                                    let e241 = {
                                                                        let l237 = *base.add(8).cast::<i64>();
                                                                        l237
                                                                    };
                                                                    V241::Int64(e241)
                                                                }
                                                                n => {
                                                                    debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                    let e241 = {
                                                                        let l238 = *base.add(8).cast::<*mut u8>();
                                                                        let l239 = *base.add(12).cast::<usize>();
                                                                        let len240 = l239;
                                                                        let bytes240 = _rt::Vec::from_raw_parts(
                                                                            l238.cast(),
                                                                            len240,
                                                                            len240,
                                                                        );
                                                                        _rt::string_lift(bytes240)
                                                                    };
                                                                    V241::Uuid(e241)
                                                                }
                                                            };
                                                            let l242 = *base.add(16).cast::<*mut u8>();
                                                            let l243 = *base.add(20).cast::<usize>();
                                                            let len244 = l243;
                                                            let bytes244 = _rt::Vec::from_raw_parts(
                                                                l242.cast(),
                                                                len244,
                                                                len244,
                                                            );
                                                            let l245 = *base.add(24).cast::<*mut u8>();
                                                            let l246 = *base.add(28).cast::<usize>();
                                                            let base250 = l245;
                                                            let len250 = l246;
                                                            let mut result250 = _rt::Vec::with_capacity(len250);
                                                            for i in 0..len250 {
                                                                let base = base250.add(i * 8);
                                                                let e250 = {
                                                                    let l247 = *base.add(0).cast::<*mut u8>();
                                                                    let l248 = *base.add(4).cast::<usize>();
                                                                    let len249 = l248;
                                                                    let bytes249 = _rt::Vec::from_raw_parts(
                                                                        l247.cast(),
                                                                        len249,
                                                                        len249,
                                                                    );
                                                                    _rt::string_lift(bytes249)
                                                                };
                                                                result250.push(e250);
                                                            }
                                                            _rt::cabi_dealloc(base250, len250 * 8, 4);
                                                            let l251 = *base.add(32).cast::<*mut u8>();
                                                            let l252 = *base.add(36).cast::<usize>();
                                                            let base322 = l251;
                                                            let len322 = l252;
                                                            let mut result322 = _rt::Vec::with_capacity(len322);
                                                            for i in 0..len322 {
                                                                let base = base322.add(i * 48);
                                                                let e322 = {
                                                                    let l253 = *base.add(0).cast::<*mut u8>();
                                                                    let l254 = *base.add(4).cast::<usize>();
                                                                    let len255 = l254;
                                                                    let bytes255 = _rt::Vec::from_raw_parts(
                                                                        l253.cast(),
                                                                        len255,
                                                                        len255,
                                                                    );
                                                                    let l256 = i32::from(*base.add(8).cast::<u8>());
                                                                    use super::super::super::golem::graph::types::PropertyValue as V321;
                                                                    let v321 = match l256 {
                                                                        0 => V321::NullValue,
                                                                        1 => {
                                                                            let e321 = {
                                                                                let l257 = i32::from(*base.add(16).cast::<u8>());
                                                                                _rt::bool_lift(l257 as u8)
                                                                            };
                                                                            V321::Boolean(e321)
                                                                        }
                                                                        2 => {
                                                                            let e321 = {
                                                                                let l258 = i32::from(*base.add(16).cast::<i8>());
                                                                                l258 as i8
                                                                            };
                                                                            V321::Int8(e321)
                                                                        }
                                                                        3 => {
                                                                            let e321 = {
                                                                                let l259 = i32::from(*base.add(16).cast::<i16>());
                                                                                l259 as i16
                                                                            };
                                                                            V321::Int16(e321)
                                                                        }
                                                                        4 => {
                                                                            let e321 = {
                                                                                let l260 = *base.add(16).cast::<i32>();
                                                                                l260
                                                                            };
                                                                            V321::Int32(e321)
                                                                        }
                                                                        5 => {
                                                                            let e321 = {
                                                                                let l261 = *base.add(16).cast::<i64>();
                                                                                l261
                                                                            };
                                                                            V321::Int64(e321)
                                                                        }
                                                                        6 => {
                                                                            let e321 = {
                                                                                let l262 = i32::from(*base.add(16).cast::<u8>());
                                                                                l262 as u8
                                                                            };
                                                                            V321::Uint8(e321)
                                                                        }
                                                                        7 => {
                                                                            let e321 = {
                                                                                let l263 = i32::from(*base.add(16).cast::<u16>());
                                                                                l263 as u16
                                                                            };
                                                                            V321::Uint16(e321)
                                                                        }
                                                                        8 => {
                                                                            let e321 = {
                                                                                let l264 = *base.add(16).cast::<i32>();
                                                                                l264 as u32
                                                                            };
                                                                            V321::Uint32(e321)
                                                                        }
                                                                        9 => {
                                                                            let e321 = {
                                                                                let l265 = *base.add(16).cast::<i64>();
                                                                                l265 as u64
                                                                            };
                                                                            V321::Uint64(e321)
                                                                        }
                                                                        10 => {
                                                                            let e321 = {
                                                                                let l266 = *base.add(16).cast::<f32>();
                                                                                l266
                                                                            };
                                                                            V321::Float32Value(e321)
                                                                        }
                                                                        11 => {
                                                                            let e321 = {
                                                                                let l267 = *base.add(16).cast::<f64>();
                                                                                l267
                                                                            };
                                                                            V321::Float64Value(e321)
                                                                        }
                                                                        12 => {
                                                                            let e321 = {
                                                                                let l268 = *base.add(16).cast::<*mut u8>();
                                                                                let l269 = *base.add(20).cast::<usize>();
                                                                                let len270 = l269;
                                                                                let bytes270 = _rt::Vec::from_raw_parts(
                                                                                    l268.cast(),
                                                                                    len270,
                                                                                    len270,
                                                                                );
                                                                                _rt::string_lift(bytes270)
                                                                            };
                                                                            V321::StringValue(e321)
                                                                        }
                                                                        13 => {
                                                                            let e321 = {
                                                                                let l271 = *base.add(16).cast::<*mut u8>();
                                                                                let l272 = *base.add(20).cast::<usize>();
                                                                                let len273 = l272;
                                                                                _rt::Vec::from_raw_parts(l271.cast(), len273, len273)
                                                                            };
                                                                            V321::Bytes(e321)
                                                                        }
                                                                        14 => {
                                                                            let e321 = {
                                                                                let l274 = *base.add(16).cast::<i32>();
                                                                                let l275 = i32::from(*base.add(20).cast::<u8>());
                                                                                let l276 = i32::from(*base.add(21).cast::<u8>());
                                                                                super::super::super::golem::graph::types::Date {
                                                                                    year: l274 as u32,
                                                                                    month: l275 as u8,
                                                                                    day: l276 as u8,
                                                                                }
                                                                            };
                                                                            V321::Date(e321)
                                                                        }
                                                                        15 => {
                                                                            let e321 = {
                                                                                let l277 = i32::from(*base.add(16).cast::<u8>());
                                                                                let l278 = i32::from(*base.add(17).cast::<u8>());
                                                                                let l279 = i32::from(*base.add(18).cast::<u8>());
                                                                                let l280 = *base.add(20).cast::<i32>();
                                                                                super::super::super::golem::graph::types::Time {
                                                                                    hour: l277 as u8,
                                                                                    minute: l278 as u8,
                                                                                    second: l279 as u8,
                                                                                    nanosecond: l280 as u32,
                                                                                }
                                                                            };
                                                                            V321::Time(e321)
                                                                        }
                                                                        16 => {
                                                                            let e321 = {
                                                                                let l281 = *base.add(16).cast::<i32>();
                                                                                let l282 = i32::from(*base.add(20).cast::<u8>());
                                                                                let l283 = i32::from(*base.add(21).cast::<u8>());
                                                                                let l284 = i32::from(*base.add(24).cast::<u8>());
                                                                                let l285 = i32::from(*base.add(25).cast::<u8>());
                                                                                let l286 = i32::from(*base.add(26).cast::<u8>());
                                                                                let l287 = *base.add(28).cast::<i32>();
                                                                                let l288 = i32::from(*base.add(32).cast::<u8>());
                                                                                super::super::super::golem::graph::types::Datetime {
                                                                                    date: super::super::super::golem::graph::types::Date {
                                                                                        year: l281 as u32,
                                                                                        month: l282 as u8,
                                                                                        day: l283 as u8,
                                                                                    },
                                                                                    time: super::super::super::golem::graph::types::Time {
                                                                                        hour: l284 as u8,
                                                                                        minute: l285 as u8,
                                                                                        second: l286 as u8,
                                                                                        nanosecond: l287 as u32,
                                                                                    },
                                                                                    timezone_offset_minutes: match l288 {
                                                                                        0 => None,
                                                                                        1 => {
                                                                                            let e = {
                                                                                                let l289 = i32::from(*base.add(34).cast::<i16>());
                                                                                                l289 as i16
                                                                                            };
                                                                                            Some(e)
                                                                                        }
                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                    },
                                                                                }
                                                                            };
                                                                            V321::Datetime(e321)
                                                                        }
                                                                        17 => {
                                                                            let e321 = {
                                                                                let l290 = *base.add(16).cast::<i64>();
                                                                                let l291 = *base.add(24).cast::<i32>();
                                                                                super::super::super::golem::graph::types::Duration {
                                                                                    seconds: l290,
                                                                                    nanoseconds: l291 as u32,
                                                                                }
                                                                            };
                                                                            V321::Duration(e321)
                                                                        }
                                                                        18 => {
                                                                            let e321 = {
                                                                                let l292 = *base.add(16).cast::<f64>();
                                                                                let l293 = *base.add(24).cast::<f64>();
                                                                                let l294 = i32::from(*base.add(32).cast::<u8>());
                                                                                super::super::super::golem::graph::types::Point {
                                                                                    longitude: l292,
                                                                                    latitude: l293,
                                                                                    altitude: match l294 {
                                                                                        0 => None,
                                                                                        1 => {
                                                                                            let e = {
                                                                                                let l295 = *base.add(40).cast::<f64>();
                                                                                                l295
                                                                                            };
                                                                                            Some(e)
                                                                                        }
                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                    },
                                                                                }
                                                                            };
                                                                            V321::Point(e321)
                                                                        }
                                                                        19 => {
                                                                            let e321 = {
                                                                                let l296 = *base.add(16).cast::<*mut u8>();
                                                                                let l297 = *base.add(20).cast::<usize>();
                                                                                let base302 = l296;
                                                                                let len302 = l297;
                                                                                let mut result302 = _rt::Vec::with_capacity(len302);
                                                                                for i in 0..len302 {
                                                                                    let base = base302.add(i * 32);
                                                                                    let e302 = {
                                                                                        let l298 = *base.add(0).cast::<f64>();
                                                                                        let l299 = *base.add(8).cast::<f64>();
                                                                                        let l300 = i32::from(*base.add(16).cast::<u8>());
                                                                                        super::super::super::golem::graph::types::Point {
                                                                                            longitude: l298,
                                                                                            latitude: l299,
                                                                                            altitude: match l300 {
                                                                                                0 => None,
                                                                                                1 => {
                                                                                                    let e = {
                                                                                                        let l301 = *base.add(24).cast::<f64>();
                                                                                                        l301
                                                                                                    };
                                                                                                    Some(e)
                                                                                                }
                                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                                            },
                                                                                        }
                                                                                    };
                                                                                    result302.push(e302);
                                                                                }
                                                                                _rt::cabi_dealloc(base302, len302 * 32, 8);
                                                                                super::super::super::golem::graph::types::Linestring {
                                                                                    coordinates: result302,
                                                                                }
                                                                            };
                                                                            V321::Linestring(e321)
                                                                        }
                                                                        n => {
                                                                            debug_assert_eq!(n, 20, "invalid enum discriminant");
                                                                            let e321 = {
                                                                                let l303 = *base.add(16).cast::<*mut u8>();
                                                                                let l304 = *base.add(20).cast::<usize>();
                                                                                let base309 = l303;
                                                                                let len309 = l304;
                                                                                let mut result309 = _rt::Vec::with_capacity(len309);
                                                                                for i in 0..len309 {
                                                                                    let base = base309.add(i * 32);
                                                                                    let e309 = {
                                                                                        let l305 = *base.add(0).cast::<f64>();
                                                                                        let l306 = *base.add(8).cast::<f64>();
                                                                                        let l307 = i32::from(*base.add(16).cast::<u8>());
                                                                                        super::super::super::golem::graph::types::Point {
                                                                                            longitude: l305,
                                                                                            latitude: l306,
                                                                                            altitude: match l307 {
                                                                                                0 => None,
                                                                                                1 => {
                                                                                                    let e = {
                                                                                                        let l308 = *base.add(24).cast::<f64>();
                                                                                                        l308
                                                                                                    };
                                                                                                    Some(e)
                                                                                                }
                                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                                            },
                                                                                        }
                                                                                    };
                                                                                    result309.push(e309);
                                                                                }
                                                                                _rt::cabi_dealloc(base309, len309 * 32, 8);
                                                                                let l310 = i32::from(*base.add(24).cast::<u8>());
                                                                                super::super::super::golem::graph::types::Polygon {
                                                                                    exterior: result309,
                                                                                    holes: match l310 {
                                                                                        0 => None,
                                                                                        1 => {
                                                                                            let e = {
                                                                                                let l311 = *base.add(28).cast::<*mut u8>();
                                                                                                let l312 = *base.add(32).cast::<usize>();
                                                                                                let base320 = l311;
                                                                                                let len320 = l312;
                                                                                                let mut result320 = _rt::Vec::with_capacity(len320);
                                                                                                for i in 0..len320 {
                                                                                                    let base = base320.add(i * 8);
                                                                                                    let e320 = {
                                                                                                        let l313 = *base.add(0).cast::<*mut u8>();
                                                                                                        let l314 = *base.add(4).cast::<usize>();
                                                                                                        let base319 = l313;
                                                                                                        let len319 = l314;
                                                                                                        let mut result319 = _rt::Vec::with_capacity(len319);
                                                                                                        for i in 0..len319 {
                                                                                                            let base = base319.add(i * 32);
                                                                                                            let e319 = {
                                                                                                                let l315 = *base.add(0).cast::<f64>();
                                                                                                                let l316 = *base.add(8).cast::<f64>();
                                                                                                                let l317 = i32::from(*base.add(16).cast::<u8>());
                                                                                                                super::super::super::golem::graph::types::Point {
                                                                                                                    longitude: l315,
                                                                                                                    latitude: l316,
                                                                                                                    altitude: match l317 {
                                                                                                                        0 => None,
                                                                                                                        1 => {
                                                                                                                            let e = {
                                                                                                                                let l318 = *base.add(24).cast::<f64>();
                                                                                                                                l318
                                                                                                                            };
                                                                                                                            Some(e)
                                                                                                                        }
                                                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                                                    },
                                                                                                                }
                                                                                                            };
                                                                                                            result319.push(e319);
                                                                                                        }
                                                                                                        _rt::cabi_dealloc(base319, len319 * 32, 8);
                                                                                                        result319
                                                                                                    };
                                                                                                    result320.push(e320);
                                                                                                }
                                                                                                _rt::cabi_dealloc(base320, len320 * 8, 4);
                                                                                                result320
                                                                                            };
                                                                                            Some(e)
                                                                                        }
                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                    },
                                                                                }
                                                                            };
                                                                            V321::Polygon(e321)
                                                                        }
                                                                    };
                                                                    (_rt::string_lift(bytes255), v321)
                                                                };
                                                                result322.push(e322);
                                                            }
                                                            _rt::cabi_dealloc(base322, len322 * 48, 8);
                                                            super::super::super::golem::graph::types::Vertex {
                                                                id: v241,
                                                                vertex_type: _rt::string_lift(bytes244),
                                                                additional_labels: result250,
                                                                properties: result322,
                                                            }
                                                        };
                                                        result323.push(e323);
                                                    }
                                                    _rt::cabi_dealloc(base323, len323 * 40, 8);
                                                    let l324 = *base.add(8).cast::<*mut u8>();
                                                    let l325 = *base.add(12).cast::<usize>();
                                                    let base428 = l324;
                                                    let len428 = l325;
                                                    let mut result428 = _rt::Vec::with_capacity(len428);
                                                    for i in 0..len428 {
                                                        let base = base428.add(i * 64);
                                                        let e428 = {
                                                            let l326 = i32::from(*base.add(0).cast::<u8>());
                                                            use super::super::super::golem::graph::types::ElementId as V334;
                                                            let v334 = match l326 {
                                                                0 => {
                                                                    let e334 = {
                                                                        let l327 = *base.add(8).cast::<*mut u8>();
                                                                        let l328 = *base.add(12).cast::<usize>();
                                                                        let len329 = l328;
                                                                        let bytes329 = _rt::Vec::from_raw_parts(
                                                                            l327.cast(),
                                                                            len329,
                                                                            len329,
                                                                        );
                                                                        _rt::string_lift(bytes329)
                                                                    };
                                                                    V334::StringValue(e334)
                                                                }
                                                                1 => {
                                                                    let e334 = {
                                                                        let l330 = *base.add(8).cast::<i64>();
                                                                        l330
                                                                    };
                                                                    V334::Int64(e334)
                                                                }
                                                                n => {
                                                                    debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                    let e334 = {
                                                                        let l331 = *base.add(8).cast::<*mut u8>();
                                                                        let l332 = *base.add(12).cast::<usize>();
                                                                        let len333 = l332;
                                                                        let bytes333 = _rt::Vec::from_raw_parts(
                                                                            l331.cast(),
                                                                            len333,
                                                                            len333,
                                                                        );
                                                                        _rt::string_lift(bytes333)
                                                                    };
                                                                    V334::Uuid(e334)
                                                                }
                                                            };
                                                            let l335 = *base.add(16).cast::<*mut u8>();
                                                            let l336 = *base.add(20).cast::<usize>();
                                                            let len337 = l336;
                                                            let bytes337 = _rt::Vec::from_raw_parts(
                                                                l335.cast(),
                                                                len337,
                                                                len337,
                                                            );
                                                            let l338 = i32::from(*base.add(24).cast::<u8>());
                                                            use super::super::super::golem::graph::types::ElementId as V346;
                                                            let v346 = match l338 {
                                                                0 => {
                                                                    let e346 = {
                                                                        let l339 = *base.add(32).cast::<*mut u8>();
                                                                        let l340 = *base.add(36).cast::<usize>();
                                                                        let len341 = l340;
                                                                        let bytes341 = _rt::Vec::from_raw_parts(
                                                                            l339.cast(),
                                                                            len341,
                                                                            len341,
                                                                        );
                                                                        _rt::string_lift(bytes341)
                                                                    };
                                                                    V346::StringValue(e346)
                                                                }
                                                                1 => {
                                                                    let e346 = {
                                                                        let l342 = *base.add(32).cast::<i64>();
                                                                        l342
                                                                    };
                                                                    V346::Int64(e346)
                                                                }
                                                                n => {
                                                                    debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                    let e346 = {
                                                                        let l343 = *base.add(32).cast::<*mut u8>();
                                                                        let l344 = *base.add(36).cast::<usize>();
                                                                        let len345 = l344;
                                                                        let bytes345 = _rt::Vec::from_raw_parts(
                                                                            l343.cast(),
                                                                            len345,
                                                                            len345,
                                                                        );
                                                                        _rt::string_lift(bytes345)
                                                                    };
                                                                    V346::Uuid(e346)
                                                                }
                                                            };
                                                            let l347 = i32::from(*base.add(40).cast::<u8>());
                                                            use super::super::super::golem::graph::types::ElementId as V355;
                                                            let v355 = match l347 {
                                                                0 => {
                                                                    let e355 = {
                                                                        let l348 = *base.add(48).cast::<*mut u8>();
                                                                        let l349 = *base.add(52).cast::<usize>();
                                                                        let len350 = l349;
                                                                        let bytes350 = _rt::Vec::from_raw_parts(
                                                                            l348.cast(),
                                                                            len350,
                                                                            len350,
                                                                        );
                                                                        _rt::string_lift(bytes350)
                                                                    };
                                                                    V355::StringValue(e355)
                                                                }
                                                                1 => {
                                                                    let e355 = {
                                                                        let l351 = *base.add(48).cast::<i64>();
                                                                        l351
                                                                    };
                                                                    V355::Int64(e355)
                                                                }
                                                                n => {
                                                                    debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                                    let e355 = {
                                                                        let l352 = *base.add(48).cast::<*mut u8>();
                                                                        let l353 = *base.add(52).cast::<usize>();
                                                                        let len354 = l353;
                                                                        let bytes354 = _rt::Vec::from_raw_parts(
                                                                            l352.cast(),
                                                                            len354,
                                                                            len354,
                                                                        );
                                                                        _rt::string_lift(bytes354)
                                                                    };
                                                                    V355::Uuid(e355)
                                                                }
                                                            };
                                                            let l356 = *base.add(56).cast::<*mut u8>();
                                                            let l357 = *base.add(60).cast::<usize>();
                                                            let base427 = l356;
                                                            let len427 = l357;
                                                            let mut result427 = _rt::Vec::with_capacity(len427);
                                                            for i in 0..len427 {
                                                                let base = base427.add(i * 48);
                                                                let e427 = {
                                                                    let l358 = *base.add(0).cast::<*mut u8>();
                                                                    let l359 = *base.add(4).cast::<usize>();
                                                                    let len360 = l359;
                                                                    let bytes360 = _rt::Vec::from_raw_parts(
                                                                        l358.cast(),
                                                                        len360,
                                                                        len360,
                                                                    );
                                                                    let l361 = i32::from(*base.add(8).cast::<u8>());
                                                                    use super::super::super::golem::graph::types::PropertyValue as V426;
                                                                    let v426 = match l361 {
                                                                        0 => V426::NullValue,
                                                                        1 => {
                                                                            let e426 = {
                                                                                let l362 = i32::from(*base.add(16).cast::<u8>());
                                                                                _rt::bool_lift(l362 as u8)
                                                                            };
                                                                            V426::Boolean(e426)
                                                                        }
                                                                        2 => {
                                                                            let e426 = {
                                                                                let l363 = i32::from(*base.add(16).cast::<i8>());
                                                                                l363 as i8
                                                                            };
                                                                            V426::Int8(e426)
                                                                        }
                                                                        3 => {
                                                                            let e426 = {
                                                                                let l364 = i32::from(*base.add(16).cast::<i16>());
                                                                                l364 as i16
                                                                            };
                                                                            V426::Int16(e426)
                                                                        }
                                                                        4 => {
                                                                            let e426 = {
                                                                                let l365 = *base.add(16).cast::<i32>();
                                                                                l365
                                                                            };
                                                                            V426::Int32(e426)
                                                                        }
                                                                        5 => {
                                                                            let e426 = {
                                                                                let l366 = *base.add(16).cast::<i64>();
                                                                                l366
                                                                            };
                                                                            V426::Int64(e426)
                                                                        }
                                                                        6 => {
                                                                            let e426 = {
                                                                                let l367 = i32::from(*base.add(16).cast::<u8>());
                                                                                l367 as u8
                                                                            };
                                                                            V426::Uint8(e426)
                                                                        }
                                                                        7 => {
                                                                            let e426 = {
                                                                                let l368 = i32::from(*base.add(16).cast::<u16>());
                                                                                l368 as u16
                                                                            };
                                                                            V426::Uint16(e426)
                                                                        }
                                                                        8 => {
                                                                            let e426 = {
                                                                                let l369 = *base.add(16).cast::<i32>();
                                                                                l369 as u32
                                                                            };
                                                                            V426::Uint32(e426)
                                                                        }
                                                                        9 => {
                                                                            let e426 = {
                                                                                let l370 = *base.add(16).cast::<i64>();
                                                                                l370 as u64
                                                                            };
                                                                            V426::Uint64(e426)
                                                                        }
                                                                        10 => {
                                                                            let e426 = {
                                                                                let l371 = *base.add(16).cast::<f32>();
                                                                                l371
                                                                            };
                                                                            V426::Float32Value(e426)
                                                                        }
                                                                        11 => {
                                                                            let e426 = {
                                                                                let l372 = *base.add(16).cast::<f64>();
                                                                                l372
                                                                            };
                                                                            V426::Float64Value(e426)
                                                                        }
                                                                        12 => {
                                                                            let e426 = {
                                                                                let l373 = *base.add(16).cast::<*mut u8>();
                                                                                let l374 = *base.add(20).cast::<usize>();
                                                                                let len375 = l374;
                                                                                let bytes375 = _rt::Vec::from_raw_parts(
                                                                                    l373.cast(),
                                                                                    len375,
                                                                                    len375,
                                                                                );
                                                                                _rt::string_lift(bytes375)
                                                                            };
                                                                            V426::StringValue(e426)
                                                                        }
                                                                        13 => {
                                                                            let e426 = {
                                                                                let l376 = *base.add(16).cast::<*mut u8>();
                                                                                let l377 = *base.add(20).cast::<usize>();
                                                                                let len378 = l377;
                                                                                _rt::Vec::from_raw_parts(l376.cast(), len378, len378)
                                                                            };
                                                                            V426::Bytes(e426)
                                                                        }
                                                                        14 => {
                                                                            let e426 = {
                                                                                let l379 = *base.add(16).cast::<i32>();
                                                                                let l380 = i32::from(*base.add(20).cast::<u8>());
                                                                                let l381 = i32::from(*base.add(21).cast::<u8>());
                                                                                super::super::super::golem::graph::types::Date {
                                                                                    year: l379 as u32,
                                                                                    month: l380 as u8,
                                                                                    day: l381 as u8,
                                                                                }
                                                                            };
                                                                            V426::Date(e426)
                                                                        }
                                                                        15 => {
                                                                            let e426 = {
                                                                                let l382 = i32::from(*base.add(16).cast::<u8>());
                                                                                let l383 = i32::from(*base.add(17).cast::<u8>());
                                                                                let l384 = i32::from(*base.add(18).cast::<u8>());
                                                                                let l385 = *base.add(20).cast::<i32>();
                                                                                super::super::super::golem::graph::types::Time {
                                                                                    hour: l382 as u8,
                                                                                    minute: l383 as u8,
                                                                                    second: l384 as u8,
                                                                                    nanosecond: l385 as u32,
                                                                                }
                                                                            };
                                                                            V426::Time(e426)
                                                                        }
                                                                        16 => {
                                                                            let e426 = {
                                                                                let l386 = *base.add(16).cast::<i32>();
                                                                                let l387 = i32::from(*base.add(20).cast::<u8>());
                                                                                let l388 = i32::from(*base.add(21).cast::<u8>());
                                                                                let l389 = i32::from(*base.add(24).cast::<u8>());
                                                                                let l390 = i32::from(*base.add(25).cast::<u8>());
                                                                                let l391 = i32::from(*base.add(26).cast::<u8>());
                                                                                let l392 = *base.add(28).cast::<i32>();
                                                                                let l393 = i32::from(*base.add(32).cast::<u8>());
                                                                                super::super::super::golem::graph::types::Datetime {
                                                                                    date: super::super::super::golem::graph::types::Date {
                                                                                        year: l386 as u32,
                                                                                        month: l387 as u8,
                                                                                        day: l388 as u8,
                                                                                    },
                                                                                    time: super::super::super::golem::graph::types::Time {
                                                                                        hour: l389 as u8,
                                                                                        minute: l390 as u8,
                                                                                        second: l391 as u8,
                                                                                        nanosecond: l392 as u32,
                                                                                    },
                                                                                    timezone_offset_minutes: match l393 {
                                                                                        0 => None,
                                                                                        1 => {
                                                                                            let e = {
                                                                                                let l394 = i32::from(*base.add(34).cast::<i16>());
                                                                                                l394 as i16
                                                                                            };
                                                                                            Some(e)
                                                                                        }
                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                    },
                                                                                }
                                                                            };
                                                                            V426::Datetime(e426)
                                                                        }
                                                                        17 => {
                                                                            let e426 = {
                                                                                let l395 = *base.add(16).cast::<i64>();
                                                                                let l396 = *base.add(24).cast::<i32>();
                                                                                super::super::super::golem::graph::types::Duration {
                                                                                    seconds: l395,
                                                                                    nanoseconds: l396 as u32,
                                                                                }
                                                                            };
                                                                            V426::Duration(e426)
                                                                        }
                                                                        18 => {
                                                                            let e426 = {
                                                                                let l397 = *base.add(16).cast::<f64>();
                                                                                let l398 = *base.add(24).cast::<f64>();
                                                                                let l399 = i32::from(*base.add(32).cast::<u8>());
                                                                                super::super::super::golem::graph::types::Point {
                                                                                    longitude: l397,
                                                                                    latitude: l398,
                                                                                    altitude: match l399 {
                                                                                        0 => None,
                                                                                        1 => {
                                                                                            let e = {
                                                                                                let l400 = *base.add(40).cast::<f64>();
                                                                                                l400
                                                                                            };
                                                                                            Some(e)
                                                                                        }
                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                    },
                                                                                }
                                                                            };
                                                                            V426::Point(e426)
                                                                        }
                                                                        19 => {
                                                                            let e426 = {
                                                                                let l401 = *base.add(16).cast::<*mut u8>();
                                                                                let l402 = *base.add(20).cast::<usize>();
                                                                                let base407 = l401;
                                                                                let len407 = l402;
                                                                                let mut result407 = _rt::Vec::with_capacity(len407);
                                                                                for i in 0..len407 {
                                                                                    let base = base407.add(i * 32);
                                                                                    let e407 = {
                                                                                        let l403 = *base.add(0).cast::<f64>();
                                                                                        let l404 = *base.add(8).cast::<f64>();
                                                                                        let l405 = i32::from(*base.add(16).cast::<u8>());
                                                                                        super::super::super::golem::graph::types::Point {
                                                                                            longitude: l403,
                                                                                            latitude: l404,
                                                                                            altitude: match l405 {
                                                                                                0 => None,
                                                                                                1 => {
                                                                                                    let e = {
                                                                                                        let l406 = *base.add(24).cast::<f64>();
                                                                                                        l406
                                                                                                    };
                                                                                                    Some(e)
                                                                                                }
                                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                                            },
                                                                                        }
                                                                                    };
                                                                                    result407.push(e407);
                                                                                }
                                                                                _rt::cabi_dealloc(base407, len407 * 32, 8);
                                                                                super::super::super::golem::graph::types::Linestring {
                                                                                    coordinates: result407,
                                                                                }
                                                                            };
                                                                            V426::Linestring(e426)
                                                                        }
                                                                        n => {
                                                                            debug_assert_eq!(n, 20, "invalid enum discriminant");
                                                                            let e426 = {
                                                                                let l408 = *base.add(16).cast::<*mut u8>();
                                                                                let l409 = *base.add(20).cast::<usize>();
                                                                                let base414 = l408;
                                                                                let len414 = l409;
                                                                                let mut result414 = _rt::Vec::with_capacity(len414);
                                                                                for i in 0..len414 {
                                                                                    let base = base414.add(i * 32);
                                                                                    let e414 = {
                                                                                        let l410 = *base.add(0).cast::<f64>();
                                                                                        let l411 = *base.add(8).cast::<f64>();
                                                                                        let l412 = i32::from(*base.add(16).cast::<u8>());
                                                                                        super::super::super::golem::graph::types::Point {
                                                                                            longitude: l410,
                                                                                            latitude: l411,
                                                                                            altitude: match l412 {
                                                                                                0 => None,
                                                                                                1 => {
                                                                                                    let e = {
                                                                                                        let l413 = *base.add(24).cast::<f64>();
                                                                                                        l413
                                                                                                    };
                                                                                                    Some(e)
                                                                                                }
                                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                                            },
                                                                                        }
                                                                                    };
                                                                                    result414.push(e414);
                                                                                }
                                                                                _rt::cabi_dealloc(base414, len414 * 32, 8);
                                                                                let l415 = i32::from(*base.add(24).cast::<u8>());
                                                                                super::super::super::golem::graph::types::Polygon {
                                                                                    exterior: result414,
                                                                                    holes: match l415 {
                                                                                        0 => None,
                                                                                        1 => {
                                                                                            let e = {
                                                                                                let l416 = *base.add(28).cast::<*mut u8>();
                                                                                                let l417 = *base.add(32).cast::<usize>();
                                                                                                let base425 = l416;
                                                                                                let len425 = l417;
                                                                                                let mut result425 = _rt::Vec::with_capacity(len425);
                                                                                                for i in 0..len425 {
                                                                                                    let base = base425.add(i * 8);
                                                                                                    let e425 = {
                                                                                                        let l418 = *base.add(0).cast::<*mut u8>();
                                                                                                        let l419 = *base.add(4).cast::<usize>();
                                                                                                        let base424 = l418;
                                                                                                        let len424 = l419;
                                                                                                        let mut result424 = _rt::Vec::with_capacity(len424);
                                                                                                        for i in 0..len424 {
                                                                                                            let base = base424.add(i * 32);
                                                                                                            let e424 = {
                                                                                                                let l420 = *base.add(0).cast::<f64>();
                                                                                                                let l421 = *base.add(8).cast::<f64>();
                                                                                                                let l422 = i32::from(*base.add(16).cast::<u8>());
                                                                                                                super::super::super::golem::graph::types::Point {
                                                                                                                    longitude: l420,
                                                                                                                    latitude: l421,
                                                                                                                    altitude: match l422 {
                                                                                                                        0 => None,
                                                                                                                        1 => {
                                                                                                                            let e = {
                                                                                                                                let l423 = *base.add(24).cast::<f64>();
                                                                                                                                l423
                                                                                                                            };
                                                                                                                            Some(e)
                                                                                                                        }
                                                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                                                    },
                                                                                                                }
                                                                                                            };
                                                                                                            result424.push(e424);
                                                                                                        }
                                                                                                        _rt::cabi_dealloc(base424, len424 * 32, 8);
                                                                                                        result424
                                                                                                    };
                                                                                                    result425.push(e425);
                                                                                                }
                                                                                                _rt::cabi_dealloc(base425, len425 * 8, 4);
                                                                                                result425
                                                                                            };
                                                                                            Some(e)
                                                                                        }
                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                    },
                                                                                }
                                                                            };
                                                                            V426::Polygon(e426)
                                                                        }
                                                                    };
                                                                    (_rt::string_lift(bytes360), v426)
                                                                };
                                                                result427.push(e427);
                                                            }
                                                            _rt::cabi_dealloc(base427, len427 * 48, 8);
                                                            super::super::super::golem::graph::types::Edge {
                                                                id: v334,
                                                                edge_type: _rt::string_lift(bytes337),
                                                                from_vertex: v346,
                                                                to_vertex: v355,
                                                                properties: result427,
                                                            }
                                                        };
                                                        result428.push(e428);
                                                    }
                                                    _rt::cabi_dealloc(base428, len428 * 64, 8);
                                                    let l429 = *base.add(16).cast::<i32>();
                                                    super::super::super::golem::graph::types::Path {
                                                        vertices: result323,
                                                        edges: result428,
                                                        length: l429 as u32,
                                                    }
                                                };
                                                result430.push(e430);
                                            }
                                            _rt::cabi_dealloc(base430, len430 * 20, 4);
                                            result430
                                        };
                                        QueryResult::Paths(e575)
                                    }
                                    3 => {
                                        let e575 = {
                                            let l431 = *ptr28.add(12).cast::<*mut u8>();
                                            let l432 = *ptr28.add(16).cast::<usize>();
                                            let base499 = l431;
                                            let len499 = l432;
                                            let mut result499 = _rt::Vec::with_capacity(len499);
                                            for i in 0..len499 {
                                                let base = base499.add(i * 40);
                                                let e499 = {
                                                    let l433 = i32::from(*base.add(0).cast::<u8>());
                                                    use super::super::super::golem::graph::types::PropertyValue as V498;
                                                    let v498 = match l433 {
                                                        0 => V498::NullValue,
                                                        1 => {
                                                            let e498 = {
                                                                let l434 = i32::from(*base.add(8).cast::<u8>());
                                                                _rt::bool_lift(l434 as u8)
                                                            };
                                                            V498::Boolean(e498)
                                                        }
                                                        2 => {
                                                            let e498 = {
                                                                let l435 = i32::from(*base.add(8).cast::<i8>());
                                                                l435 as i8
                                                            };
                                                            V498::Int8(e498)
                                                        }
                                                        3 => {
                                                            let e498 = {
                                                                let l436 = i32::from(*base.add(8).cast::<i16>());
                                                                l436 as i16
                                                            };
                                                            V498::Int16(e498)
                                                        }
                                                        4 => {
                                                            let e498 = {
                                                                let l437 = *base.add(8).cast::<i32>();
                                                                l437
                                                            };
                                                            V498::Int32(e498)
                                                        }
                                                        5 => {
                                                            let e498 = {
                                                                let l438 = *base.add(8).cast::<i64>();
                                                                l438
                                                            };
                                                            V498::Int64(e498)
                                                        }
                                                        6 => {
                                                            let e498 = {
                                                                let l439 = i32::from(*base.add(8).cast::<u8>());
                                                                l439 as u8
                                                            };
                                                            V498::Uint8(e498)
                                                        }
                                                        7 => {
                                                            let e498 = {
                                                                let l440 = i32::from(*base.add(8).cast::<u16>());
                                                                l440 as u16
                                                            };
                                                            V498::Uint16(e498)
                                                        }
                                                        8 => {
                                                            let e498 = {
                                                                let l441 = *base.add(8).cast::<i32>();
                                                                l441 as u32
                                                            };
                                                            V498::Uint32(e498)
                                                        }
                                                        9 => {
                                                            let e498 = {
                                                                let l442 = *base.add(8).cast::<i64>();
                                                                l442 as u64
                                                            };
                                                            V498::Uint64(e498)
                                                        }
                                                        10 => {
                                                            let e498 = {
                                                                let l443 = *base.add(8).cast::<f32>();
                                                                l443
                                                            };
                                                            V498::Float32Value(e498)
                                                        }
                                                        11 => {
                                                            let e498 = {
                                                                let l444 = *base.add(8).cast::<f64>();
                                                                l444
                                                            };
                                                            V498::Float64Value(e498)
                                                        }
                                                        12 => {
                                                            let e498 = {
                                                                let l445 = *base.add(8).cast::<*mut u8>();
                                                                let l446 = *base.add(12).cast::<usize>();
                                                                let len447 = l446;
                                                                let bytes447 = _rt::Vec::from_raw_parts(
                                                                    l445.cast(),
                                                                    len447,
                                                                    len447,
                                                                );
                                                                _rt::string_lift(bytes447)
                                                            };
                                                            V498::StringValue(e498)
                                                        }
                                                        13 => {
                                                            let e498 = {
                                                                let l448 = *base.add(8).cast::<*mut u8>();
                                                                let l449 = *base.add(12).cast::<usize>();
                                                                let len450 = l449;
                                                                _rt::Vec::from_raw_parts(l448.cast(), len450, len450)
                                                            };
                                                            V498::Bytes(e498)
                                                        }
                                                        14 => {
                                                            let e498 = {
                                                                let l451 = *base.add(8).cast::<i32>();
                                                                let l452 = i32::from(*base.add(12).cast::<u8>());
                                                                let l453 = i32::from(*base.add(13).cast::<u8>());
                                                                super::super::super::golem::graph::types::Date {
                                                                    year: l451 as u32,
                                                                    month: l452 as u8,
                                                                    day: l453 as u8,
                                                                }
                                                            };
                                                            V498::Date(e498)
                                                        }
                                                        15 => {
                                                            let e498 = {
                                                                let l454 = i32::from(*base.add(8).cast::<u8>());
                                                                let l455 = i32::from(*base.add(9).cast::<u8>());
                                                                let l456 = i32::from(*base.add(10).cast::<u8>());
                                                                let l457 = *base.add(12).cast::<i32>();
                                                                super::super::super::golem::graph::types::Time {
                                                                    hour: l454 as u8,
                                                                    minute: l455 as u8,
                                                                    second: l456 as u8,
                                                                    nanosecond: l457 as u32,
                                                                }
                                                            };
                                                            V498::Time(e498)
                                                        }
                                                        16 => {
                                                            let e498 = {
                                                                let l458 = *base.add(8).cast::<i32>();
                                                                let l459 = i32::from(*base.add(12).cast::<u8>());
                                                                let l460 = i32::from(*base.add(13).cast::<u8>());
                                                                let l461 = i32::from(*base.add(16).cast::<u8>());
                                                                let l462 = i32::from(*base.add(17).cast::<u8>());
                                                                let l463 = i32::from(*base.add(18).cast::<u8>());
                                                                let l464 = *base.add(20).cast::<i32>();
                                                                let l465 = i32::from(*base.add(24).cast::<u8>());
                                                                super::super::super::golem::graph::types::Datetime {
                                                                    date: super::super::super::golem::graph::types::Date {
                                                                        year: l458 as u32,
                                                                        month: l459 as u8,
                                                                        day: l460 as u8,
                                                                    },
                                                                    time: super::super::super::golem::graph::types::Time {
                                                                        hour: l461 as u8,
                                                                        minute: l462 as u8,
                                                                        second: l463 as u8,
                                                                        nanosecond: l464 as u32,
                                                                    },
                                                                    timezone_offset_minutes: match l465 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l466 = i32::from(*base.add(26).cast::<i16>());
                                                                                l466 as i16
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            V498::Datetime(e498)
                                                        }
                                                        17 => {
                                                            let e498 = {
                                                                let l467 = *base.add(8).cast::<i64>();
                                                                let l468 = *base.add(16).cast::<i32>();
                                                                super::super::super::golem::graph::types::Duration {
                                                                    seconds: l467,
                                                                    nanoseconds: l468 as u32,
                                                                }
                                                            };
                                                            V498::Duration(e498)
                                                        }
                                                        18 => {
                                                            let e498 = {
                                                                let l469 = *base.add(8).cast::<f64>();
                                                                let l470 = *base.add(16).cast::<f64>();
                                                                let l471 = i32::from(*base.add(24).cast::<u8>());
                                                                super::super::super::golem::graph::types::Point {
                                                                    longitude: l469,
                                                                    latitude: l470,
                                                                    altitude: match l471 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l472 = *base.add(32).cast::<f64>();
                                                                                l472
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            V498::Point(e498)
                                                        }
                                                        19 => {
                                                            let e498 = {
                                                                let l473 = *base.add(8).cast::<*mut u8>();
                                                                let l474 = *base.add(12).cast::<usize>();
                                                                let base479 = l473;
                                                                let len479 = l474;
                                                                let mut result479 = _rt::Vec::with_capacity(len479);
                                                                for i in 0..len479 {
                                                                    let base = base479.add(i * 32);
                                                                    let e479 = {
                                                                        let l475 = *base.add(0).cast::<f64>();
                                                                        let l476 = *base.add(8).cast::<f64>();
                                                                        let l477 = i32::from(*base.add(16).cast::<u8>());
                                                                        super::super::super::golem::graph::types::Point {
                                                                            longitude: l475,
                                                                            latitude: l476,
                                                                            altitude: match l477 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l478 = *base.add(24).cast::<f64>();
                                                                                        l478
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            },
                                                                        }
                                                                    };
                                                                    result479.push(e479);
                                                                }
                                                                _rt::cabi_dealloc(base479, len479 * 32, 8);
                                                                super::super::super::golem::graph::types::Linestring {
                                                                    coordinates: result479,
                                                                }
                                                            };
                                                            V498::Linestring(e498)
                                                        }
                                                        n => {
                                                            debug_assert_eq!(n, 20, "invalid enum discriminant");
                                                            let e498 = {
                                                                let l480 = *base.add(8).cast::<*mut u8>();
                                                                let l481 = *base.add(12).cast::<usize>();
                                                                let base486 = l480;
                                                                let len486 = l481;
                                                                let mut result486 = _rt::Vec::with_capacity(len486);
                                                                for i in 0..len486 {
                                                                    let base = base486.add(i * 32);
                                                                    let e486 = {
                                                                        let l482 = *base.add(0).cast::<f64>();
                                                                        let l483 = *base.add(8).cast::<f64>();
                                                                        let l484 = i32::from(*base.add(16).cast::<u8>());
                                                                        super::super::super::golem::graph::types::Point {
                                                                            longitude: l482,
                                                                            latitude: l483,
                                                                            altitude: match l484 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l485 = *base.add(24).cast::<f64>();
                                                                                        l485
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            },
                                                                        }
                                                                    };
                                                                    result486.push(e486);
                                                                }
                                                                _rt::cabi_dealloc(base486, len486 * 32, 8);
                                                                let l487 = i32::from(*base.add(16).cast::<u8>());
                                                                super::super::super::golem::graph::types::Polygon {
                                                                    exterior: result486,
                                                                    holes: match l487 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l488 = *base.add(20).cast::<*mut u8>();
                                                                                let l489 = *base.add(24).cast::<usize>();
                                                                                let base497 = l488;
                                                                                let len497 = l489;
                                                                                let mut result497 = _rt::Vec::with_capacity(len497);
                                                                                for i in 0..len497 {
                                                                                    let base = base497.add(i * 8);
                                                                                    let e497 = {
                                                                                        let l490 = *base.add(0).cast::<*mut u8>();
                                                                                        let l491 = *base.add(4).cast::<usize>();
                                                                                        let base496 = l490;
                                                                                        let len496 = l491;
                                                                                        let mut result496 = _rt::Vec::with_capacity(len496);
                                                                                        for i in 0..len496 {
                                                                                            let base = base496.add(i * 32);
                                                                                            let e496 = {
                                                                                                let l492 = *base.add(0).cast::<f64>();
                                                                                                let l493 = *base.add(8).cast::<f64>();
                                                                                                let l494 = i32::from(*base.add(16).cast::<u8>());
                                                                                                super::super::super::golem::graph::types::Point {
                                                                                                    longitude: l492,
                                                                                                    latitude: l493,
                                                                                                    altitude: match l494 {
                                                                                                        0 => None,
                                                                                                        1 => {
                                                                                                            let e = {
                                                                                                                let l495 = *base.add(24).cast::<f64>();
                                                                                                                l495
                                                                                                            };
                                                                                                            Some(e)
                                                                                                        }
                                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                                    },
                                                                                                }
                                                                                            };
                                                                                            result496.push(e496);
                                                                                        }
                                                                                        _rt::cabi_dealloc(base496, len496 * 32, 8);
                                                                                        result496
                                                                                    };
                                                                                    result497.push(e497);
                                                                                }
                                                                                _rt::cabi_dealloc(base497, len497 * 8, 4);
                                                                                result497
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            V498::Polygon(e498)
                                                        }
                                                    };
                                                    v498
                                                };
                                                result499.push(e499);
                                            }
                                            _rt::cabi_dealloc(base499, len499 * 40, 8);
                                            result499
                                        };
                                        QueryResult::Values(e575)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 4, "invalid enum discriminant");
                                        let e575 = {
                                            let l500 = *ptr28.add(12).cast::<*mut u8>();
                                            let l501 = *ptr28.add(16).cast::<usize>();
                                            let base574 = l500;
                                            let len574 = l501;
                                            let mut result574 = _rt::Vec::with_capacity(len574);
                                            for i in 0..len574 {
                                                let base = base574.add(i * 8);
                                                let e574 = {
                                                    let l502 = *base.add(0).cast::<*mut u8>();
                                                    let l503 = *base.add(4).cast::<usize>();
                                                    let base573 = l502;
                                                    let len573 = l503;
                                                    let mut result573 = _rt::Vec::with_capacity(len573);
                                                    for i in 0..len573 {
                                                        let base = base573.add(i * 48);
                                                        let e573 = {
                                                            let l504 = *base.add(0).cast::<*mut u8>();
                                                            let l505 = *base.add(4).cast::<usize>();
                                                            let len506 = l505;
                                                            let bytes506 = _rt::Vec::from_raw_parts(
                                                                l504.cast(),
                                                                len506,
                                                                len506,
                                                            );
                                                            let l507 = i32::from(*base.add(8).cast::<u8>());
                                                            use super::super::super::golem::graph::types::PropertyValue as V572;
                                                            let v572 = match l507 {
                                                                0 => V572::NullValue,
                                                                1 => {
                                                                    let e572 = {
                                                                        let l508 = i32::from(*base.add(16).cast::<u8>());
                                                                        _rt::bool_lift(l508 as u8)
                                                                    };
                                                                    V572::Boolean(e572)
                                                                }
                                                                2 => {
                                                                    let e572 = {
                                                                        let l509 = i32::from(*base.add(16).cast::<i8>());
                                                                        l509 as i8
                                                                    };
                                                                    V572::Int8(e572)
                                                                }
                                                                3 => {
                                                                    let e572 = {
                                                                        let l510 = i32::from(*base.add(16).cast::<i16>());
                                                                        l510 as i16
                                                                    };
                                                                    V572::Int16(e572)
                                                                }
                                                                4 => {
                                                                    let e572 = {
                                                                        let l511 = *base.add(16).cast::<i32>();
                                                                        l511
                                                                    };
                                                                    V572::Int32(e572)
                                                                }
                                                                5 => {
                                                                    let e572 = {
                                                                        let l512 = *base.add(16).cast::<i64>();
                                                                        l512
                                                                    };
                                                                    V572::Int64(e572)
                                                                }
                                                                6 => {
                                                                    let e572 = {
                                                                        let l513 = i32::from(*base.add(16).cast::<u8>());
                                                                        l513 as u8
                                                                    };
                                                                    V572::Uint8(e572)
                                                                }
                                                                7 => {
                                                                    let e572 = {
                                                                        let l514 = i32::from(*base.add(16).cast::<u16>());
                                                                        l514 as u16
                                                                    };
                                                                    V572::Uint16(e572)
                                                                }
                                                                8 => {
                                                                    let e572 = {
                                                                        let l515 = *base.add(16).cast::<i32>();
                                                                        l515 as u32
                                                                    };
                                                                    V572::Uint32(e572)
                                                                }
                                                                9 => {
                                                                    let e572 = {
                                                                        let l516 = *base.add(16).cast::<i64>();
                                                                        l516 as u64
                                                                    };
                                                                    V572::Uint64(e572)
                                                                }
                                                                10 => {
                                                                    let e572 = {
                                                                        let l517 = *base.add(16).cast::<f32>();
                                                                        l517
                                                                    };
                                                                    V572::Float32Value(e572)
                                                                }
                                                                11 => {
                                                                    let e572 = {
                                                                        let l518 = *base.add(16).cast::<f64>();
                                                                        l518
                                                                    };
                                                                    V572::Float64Value(e572)
                                                                }
                                                                12 => {
                                                                    let e572 = {
                                                                        let l519 = *base.add(16).cast::<*mut u8>();
                                                                        let l520 = *base.add(20).cast::<usize>();
                                                                        let len521 = l520;
                                                                        let bytes521 = _rt::Vec::from_raw_parts(
                                                                            l519.cast(),
                                                                            len521,
                                                                            len521,
                                                                        );
                                                                        _rt::string_lift(bytes521)
                                                                    };
                                                                    V572::StringValue(e572)
                                                                }
                                                                13 => {
                                                                    let e572 = {
                                                                        let l522 = *base.add(16).cast::<*mut u8>();
                                                                        let l523 = *base.add(20).cast::<usize>();
                                                                        let len524 = l523;
                                                                        _rt::Vec::from_raw_parts(l522.cast(), len524, len524)
                                                                    };
                                                                    V572::Bytes(e572)
                                                                }
                                                                14 => {
                                                                    let e572 = {
                                                                        let l525 = *base.add(16).cast::<i32>();
                                                                        let l526 = i32::from(*base.add(20).cast::<u8>());
                                                                        let l527 = i32::from(*base.add(21).cast::<u8>());
                                                                        super::super::super::golem::graph::types::Date {
                                                                            year: l525 as u32,
                                                                            month: l526 as u8,
                                                                            day: l527 as u8,
                                                                        }
                                                                    };
                                                                    V572::Date(e572)
                                                                }
                                                                15 => {
                                                                    let e572 = {
                                                                        let l528 = i32::from(*base.add(16).cast::<u8>());
                                                                        let l529 = i32::from(*base.add(17).cast::<u8>());
                                                                        let l530 = i32::from(*base.add(18).cast::<u8>());
                                                                        let l531 = *base.add(20).cast::<i32>();
                                                                        super::super::super::golem::graph::types::Time {
                                                                            hour: l528 as u8,
                                                                            minute: l529 as u8,
                                                                            second: l530 as u8,
                                                                            nanosecond: l531 as u32,
                                                                        }
                                                                    };
                                                                    V572::Time(e572)
                                                                }
                                                                16 => {
                                                                    let e572 = {
                                                                        let l532 = *base.add(16).cast::<i32>();
                                                                        let l533 = i32::from(*base.add(20).cast::<u8>());
                                                                        let l534 = i32::from(*base.add(21).cast::<u8>());
                                                                        let l535 = i32::from(*base.add(24).cast::<u8>());
                                                                        let l536 = i32::from(*base.add(25).cast::<u8>());
                                                                        let l537 = i32::from(*base.add(26).cast::<u8>());
                                                                        let l538 = *base.add(28).cast::<i32>();
                                                                        let l539 = i32::from(*base.add(32).cast::<u8>());
                                                                        super::super::super::golem::graph::types::Datetime {
                                                                            date: super::super::super::golem::graph::types::Date {
                                                                                year: l532 as u32,
                                                                                month: l533 as u8,
                                                                                day: l534 as u8,
                                                                            },
                                                                            time: super::super::super::golem::graph::types::Time {
                                                                                hour: l535 as u8,
                                                                                minute: l536 as u8,
                                                                                second: l537 as u8,
                                                                                nanosecond: l538 as u32,
                                                                            },
                                                                            timezone_offset_minutes: match l539 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l540 = i32::from(*base.add(34).cast::<i16>());
                                                                                        l540 as i16
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            },
                                                                        }
                                                                    };
                                                                    V572::Datetime(e572)
                                                                }
                                                                17 => {
                                                                    let e572 = {
                                                                        let l541 = *base.add(16).cast::<i64>();
                                                                        let l542 = *base.add(24).cast::<i32>();
                                                                        super::super::super::golem::graph::types::Duration {
                                                                            seconds: l541,
                                                                            nanoseconds: l542 as u32,
                                                                        }
                                                                    };
                                                                    V572::Duration(e572)
                                                                }
                                                                18 => {
                                                                    let e572 = {
                                                                        let l543 = *base.add(16).cast::<f64>();
                                                                        let l544 = *base.add(24).cast::<f64>();
                                                                        let l545 = i32::from(*base.add(32).cast::<u8>());
                                                                        super::super::super::golem::graph::types::Point {
                                                                            longitude: l543,
                                                                            latitude: l544,
                                                                            altitude: match l545 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l546 = *base.add(40).cast::<f64>();
                                                                                        l546
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            },
                                                                        }
                                                                    };
                                                                    V572::Point(e572)
                                                                }
                                                                19 => {
                                                                    let e572 = {
                                                                        let l547 = *base.add(16).cast::<*mut u8>();
                                                                        let l548 = *base.add(20).cast::<usize>();
                                                                        let base553 = l547;
                                                                        let len553 = l548;
                                                                        let mut result553 = _rt::Vec::with_capacity(len553);
                                                                        for i in 0..len553 {
                                                                            let base = base553.add(i * 32);
                                                                            let e553 = {
                                                                                let l549 = *base.add(0).cast::<f64>();
                                                                                let l550 = *base.add(8).cast::<f64>();
                                                                                let l551 = i32::from(*base.add(16).cast::<u8>());
                                                                                super::super::super::golem::graph::types::Point {
                                                                                    longitude: l549,
                                                                                    latitude: l550,
                                                                                    altitude: match l551 {
                                                                                        0 => None,
                                                                                        1 => {
                                                                                            let e = {
                                                                                                let l552 = *base.add(24).cast::<f64>();
                                                                                                l552
                                                                                            };
                                                                                            Some(e)
                                                                                        }
                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                    },
                                                                                }
                                                                            };
                                                                            result553.push(e553);
                                                                        }
                                                                        _rt::cabi_dealloc(base553, len553 * 32, 8);
                                                                        super::super::super::golem::graph::types::Linestring {
                                                                            coordinates: result553,
                                                                        }
                                                                    };
                                                                    V572::Linestring(e572)
                                                                }
                                                                n => {
                                                                    debug_assert_eq!(n, 20, "invalid enum discriminant");
                                                                    let e572 = {
                                                                        let l554 = *base.add(16).cast::<*mut u8>();
                                                                        let l555 = *base.add(20).cast::<usize>();
                                                                        let base560 = l554;
                                                                        let len560 = l555;
                                                                        let mut result560 = _rt::Vec::with_capacity(len560);
                                                                        for i in 0..len560 {
                                                                            let base = base560.add(i * 32);
                                                                            let e560 = {
                                                                                let l556 = *base.add(0).cast::<f64>();
                                                                                let l557 = *base.add(8).cast::<f64>();
                                                                                let l558 = i32::from(*base.add(16).cast::<u8>());
                                                                                super::super::super::golem::graph::types::Point {
                                                                                    longitude: l556,
                                                                                    latitude: l557,
                                                                                    altitude: match l558 {
                                                                                        0 => None,
                                                                                        1 => {
                                                                                            let e = {
                                                                                                let l559 = *base.add(24).cast::<f64>();
                                                                                                l559
                                                                                            };
                                                                                            Some(e)
                                                                                        }
                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                    },
                                                                                }
                                                                            };
                                                                            result560.push(e560);
                                                                        }
                                                                        _rt::cabi_dealloc(base560, len560 * 32, 8);
                                                                        let l561 = i32::from(*base.add(24).cast::<u8>());
                                                                        super::super::super::golem::graph::types::Polygon {
                                                                            exterior: result560,
                                                                            holes: match l561 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l562 = *base.add(28).cast::<*mut u8>();
                                                                                        let l563 = *base.add(32).cast::<usize>();
                                                                                        let base571 = l562;
                                                                                        let len571 = l563;
                                                                                        let mut result571 = _rt::Vec::with_capacity(len571);
                                                                                        for i in 0..len571 {
                                                                                            let base = base571.add(i * 8);
                                                                                            let e571 = {
                                                                                                let l564 = *base.add(0).cast::<*mut u8>();
                                                                                                let l565 = *base.add(4).cast::<usize>();
                                                                                                let base570 = l564;
                                                                                                let len570 = l565;
                                                                                                let mut result570 = _rt::Vec::with_capacity(len570);
                                                                                                for i in 0..len570 {
                                                                                                    let base = base570.add(i * 32);
                                                                                                    let e570 = {
                                                                                                        let l566 = *base.add(0).cast::<f64>();
                                                                                                        let l567 = *base.add(8).cast::<f64>();
                                                                                                        let l568 = i32::from(*base.add(16).cast::<u8>());
                                                                                                        super::super::super::golem::graph::types::Point {
                                                                                                            longitude: l566,
                                                                                                            latitude: l567,
                                                                                                            altitude: match l568 {
                                                                                                                0 => None,
                                                                                                                1 => {
                                                                                                                    let e = {
                                                                                                                        let l569 = *base.add(24).cast::<f64>();
                                                                                                                        l569
                                                                                                                    };
                                                                                                                    Some(e)
                                                                                                                }
                                                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                                                            },
                                                                                                        }
                                                                                                    };
                                                                                                    result570.push(e570);
                                                                                                }
                                                                                                _rt::cabi_dealloc(base570, len570 * 32, 8);
                                                                                                result570
                                                                                            };
                                                                                            result571.push(e571);
                                                                                        }
                                                                                        _rt::cabi_dealloc(base571, len571 * 8, 4);
                                                                                        result571
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            },
                                                                        }
                                                                    };
                                                                    V572::Polygon(e572)
                                                                }
                                                            };
                                                            (_rt::string_lift(bytes506), v572)
                                                        };
                                                        result573.push(e573);
                                                    }
                                                    _rt::cabi_dealloc(base573, len573 * 48, 8);
                                                    result573
                                                };
                                                result574.push(e574);
                                            }
                                            _rt::cabi_dealloc(base574, len574 * 8, 4);
                                            result574
                                        };
                                        QueryResult::Maps(e575)
                                    }
                                };
                                let l576 = i32::from(*ptr28.add(20).cast::<u8>());
                                let l578 = i32::from(*ptr28.add(28).cast::<u8>());
                                let l580 = i32::from(*ptr28.add(36).cast::<u8>());
                                let l584 = i32::from(*ptr28.add(48).cast::<u8>());
                                QueryExecutionResult {
                                    query_result_value: v575,
                                    execution_time_ms: match l576 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l577 = *ptr28.add(24).cast::<i32>();
                                                l577 as u32
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                    rows_affected: match l578 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l579 = *ptr28.add(32).cast::<i32>();
                                                l579 as u32
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                    explanation: match l580 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l581 = *ptr28.add(40).cast::<*mut u8>();
                                                let l582 = *ptr28.add(44).cast::<usize>();
                                                let len583 = l582;
                                                let bytes583 = _rt::Vec::from_raw_parts(
                                                    l581.cast(),
                                                    len583,
                                                    len583,
                                                );
                                                _rt::string_lift(bytes583)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                    profile_data: match l584 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l585 = *ptr28.add(52).cast::<*mut u8>();
                                                let l586 = *ptr28.add(56).cast::<usize>();
                                                let len587 = l586;
                                                let bytes587 = _rt::Vec::from_raw_parts(
                                                    l585.cast(),
                                                    len587,
                                                    len587,
                                                );
                                                _rt::string_lift(bytes587)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l588 = i32::from(*ptr28.add(8).cast::<u8>());
                                use super::super::super::golem::graph::errors::GraphError as V643;
                                let v643 = match l588 {
                                    0 => {
                                        let e643 = {
                                            let l589 = *ptr28.add(16).cast::<*mut u8>();
                                            let l590 = *ptr28.add(20).cast::<usize>();
                                            let len591 = l590;
                                            let bytes591 = _rt::Vec::from_raw_parts(
                                                l589.cast(),
                                                len591,
                                                len591,
                                            );
                                            _rt::string_lift(bytes591)
                                        };
                                        V643::UnsupportedOperation(e643)
                                    }
                                    1 => {
                                        let e643 = {
                                            let l592 = *ptr28.add(16).cast::<*mut u8>();
                                            let l593 = *ptr28.add(20).cast::<usize>();
                                            let len594 = l593;
                                            let bytes594 = _rt::Vec::from_raw_parts(
                                                l592.cast(),
                                                len594,
                                                len594,
                                            );
                                            _rt::string_lift(bytes594)
                                        };
                                        V643::ConnectionFailed(e643)
                                    }
                                    2 => {
                                        let e643 = {
                                            let l595 = *ptr28.add(16).cast::<*mut u8>();
                                            let l596 = *ptr28.add(20).cast::<usize>();
                                            let len597 = l596;
                                            let bytes597 = _rt::Vec::from_raw_parts(
                                                l595.cast(),
                                                len597,
                                                len597,
                                            );
                                            _rt::string_lift(bytes597)
                                        };
                                        V643::AuthenticationFailed(e643)
                                    }
                                    3 => {
                                        let e643 = {
                                            let l598 = *ptr28.add(16).cast::<*mut u8>();
                                            let l599 = *ptr28.add(20).cast::<usize>();
                                            let len600 = l599;
                                            let bytes600 = _rt::Vec::from_raw_parts(
                                                l598.cast(),
                                                len600,
                                                len600,
                                            );
                                            _rt::string_lift(bytes600)
                                        };
                                        V643::AuthorizationFailed(e643)
                                    }
                                    4 => {
                                        let e643 = {
                                            let l601 = i32::from(*ptr28.add(16).cast::<u8>());
                                            use super::super::super::golem::graph::types::ElementId as V609;
                                            let v609 = match l601 {
                                                0 => {
                                                    let e609 = {
                                                        let l602 = *ptr28.add(24).cast::<*mut u8>();
                                                        let l603 = *ptr28.add(28).cast::<usize>();
                                                        let len604 = l603;
                                                        let bytes604 = _rt::Vec::from_raw_parts(
                                                            l602.cast(),
                                                            len604,
                                                            len604,
                                                        );
                                                        _rt::string_lift(bytes604)
                                                    };
                                                    V609::StringValue(e609)
                                                }
                                                1 => {
                                                    let e609 = {
                                                        let l605 = *ptr28.add(24).cast::<i64>();
                                                        l605
                                                    };
                                                    V609::Int64(e609)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                    let e609 = {
                                                        let l606 = *ptr28.add(24).cast::<*mut u8>();
                                                        let l607 = *ptr28.add(28).cast::<usize>();
                                                        let len608 = l607;
                                                        let bytes608 = _rt::Vec::from_raw_parts(
                                                            l606.cast(),
                                                            len608,
                                                            len608,
                                                        );
                                                        _rt::string_lift(bytes608)
                                                    };
                                                    V609::Uuid(e609)
                                                }
                                            };
                                            v609
                                        };
                                        V643::ElementNotFound(e643)
                                    }
                                    5 => {
                                        let e643 = {
                                            let l610 = i32::from(*ptr28.add(16).cast::<u8>());
                                            use super::super::super::golem::graph::types::ElementId as V618;
                                            let v618 = match l610 {
                                                0 => {
                                                    let e618 = {
                                                        let l611 = *ptr28.add(24).cast::<*mut u8>();
                                                        let l612 = *ptr28.add(28).cast::<usize>();
                                                        let len613 = l612;
                                                        let bytes613 = _rt::Vec::from_raw_parts(
                                                            l611.cast(),
                                                            len613,
                                                            len613,
                                                        );
                                                        _rt::string_lift(bytes613)
                                                    };
                                                    V618::StringValue(e618)
                                                }
                                                1 => {
                                                    let e618 = {
                                                        let l614 = *ptr28.add(24).cast::<i64>();
                                                        l614
                                                    };
                                                    V618::Int64(e618)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                    let e618 = {
                                                        let l615 = *ptr28.add(24).cast::<*mut u8>();
                                                        let l616 = *ptr28.add(28).cast::<usize>();
                                                        let len617 = l616;
                                                        let bytes617 = _rt::Vec::from_raw_parts(
                                                            l615.cast(),
                                                            len617,
                                                            len617,
                                                        );
                                                        _rt::string_lift(bytes617)
                                                    };
                                                    V618::Uuid(e618)
                                                }
                                            };
                                            v618
                                        };
                                        V643::DuplicateElement(e643)
                                    }
                                    6 => {
                                        let e643 = {
                                            let l619 = *ptr28.add(16).cast::<*mut u8>();
                                            let l620 = *ptr28.add(20).cast::<usize>();
                                            let len621 = l620;
                                            let bytes621 = _rt::Vec::from_raw_parts(
                                                l619.cast(),
                                                len621,
                                                len621,
                                            );
                                            _rt::string_lift(bytes621)
                                        };
                                        V643::SchemaViolation(e643)
                                    }
                                    7 => {
                                        let e643 = {
                                            let l622 = *ptr28.add(16).cast::<*mut u8>();
                                            let l623 = *ptr28.add(20).cast::<usize>();
                                            let len624 = l623;
                                            let bytes624 = _rt::Vec::from_raw_parts(
                                                l622.cast(),
                                                len624,
                                                len624,
                                            );
                                            _rt::string_lift(bytes624)
                                        };
                                        V643::ConstraintViolation(e643)
                                    }
                                    8 => {
                                        let e643 = {
                                            let l625 = *ptr28.add(16).cast::<*mut u8>();
                                            let l626 = *ptr28.add(20).cast::<usize>();
                                            let len627 = l626;
                                            let bytes627 = _rt::Vec::from_raw_parts(
                                                l625.cast(),
                                                len627,
                                                len627,
                                            );
                                            _rt::string_lift(bytes627)
                                        };
                                        V643::InvalidPropertyType(e643)
                                    }
                                    9 => {
                                        let e643 = {
                                            let l628 = *ptr28.add(16).cast::<*mut u8>();
                                            let l629 = *ptr28.add(20).cast::<usize>();
                                            let len630 = l629;
                                            let bytes630 = _rt::Vec::from_raw_parts(
                                                l628.cast(),
                                                len630,
                                                len630,
                                            );
                                            _rt::string_lift(bytes630)
                                        };
                                        V643::InvalidQuery(e643)
                                    }
                                    10 => {
                                        let e643 = {
                                            let l631 = *ptr28.add(16).cast::<*mut u8>();
                                            let l632 = *ptr28.add(20).cast::<usize>();
                                            let len633 = l632;
                                            let bytes633 = _rt::Vec::from_raw_parts(
                                                l631.cast(),
                                                len633,
                                                len633,
                                            );
                                            _rt::string_lift(bytes633)
                                        };
                                        V643::TransactionFailed(e643)
                                    }
                                    11 => V643::TransactionConflict,
                                    12 => V643::TransactionTimeout,
                                    13 => V643::DeadlockDetected,
                                    14 => V643::Timeout,
                                    15 => {
                                        let e643 = {
                                            let l634 = *ptr28.add(16).cast::<*mut u8>();
                                            let l635 = *ptr28.add(20).cast::<usize>();
                                            let len636 = l635;
                                            let bytes636 = _rt::Vec::from_raw_parts(
                                                l634.cast(),
                                                len636,
                                                len636,
                                            );
                                            _rt::string_lift(bytes636)
                                        };
                                        V643::ResourceExhausted(e643)
                                    }
                                    16 => {
                                        let e643 = {
                                            let l637 = *ptr28.add(16).cast::<*mut u8>();
                                            let l638 = *ptr28.add(20).cast::<usize>();
                                            let len639 = l638;
                                            let bytes639 = _rt::Vec::from_raw_parts(
                                                l637.cast(),
                                                len639,
                                                len639,
                                            );
                                            _rt::string_lift(bytes639)
                                        };
                                        V643::InternalError(e643)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 17, "invalid enum discriminant");
                                        let e643 = {
                                            let l640 = *ptr28.add(16).cast::<*mut u8>();
                                            let l641 = *ptr28.add(20).cast::<usize>();
                                            let len642 = l641;
                                            let bytes642 = _rt::Vec::from_raw_parts(
                                                l640.cast(),
                                                len642,
                                                len642,
                                            );
                                            _rt::string_lift(bytes642)
                                        };
                                        V643::ServiceUnavailable(e643)
                                    }
                                };
                                v643
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
        }
        /// Schema management operations (optional/emulated for schema-free databases)
        #[allow(dead_code, clippy::all)]
        pub mod schema {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type PropertyValue = super::super::super::golem::graph::types::PropertyValue;
            pub type GraphError = super::super::super::golem::graph::errors::GraphError;
            /// Property type definitions for schema
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum PropertyType {
                Boolean,
                Int32,
                Int64,
                Float32Type,
                Float64Type,
                StringType,
                Bytes,
                Date,
                Datetime,
                Point,
                ListType,
                MapType,
            }
            impl ::core::fmt::Debug for PropertyType {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        PropertyType::Boolean => {
                            f.debug_tuple("PropertyType::Boolean").finish()
                        }
                        PropertyType::Int32 => {
                            f.debug_tuple("PropertyType::Int32").finish()
                        }
                        PropertyType::Int64 => {
                            f.debug_tuple("PropertyType::Int64").finish()
                        }
                        PropertyType::Float32Type => {
                            f.debug_tuple("PropertyType::Float32Type").finish()
                        }
                        PropertyType::Float64Type => {
                            f.debug_tuple("PropertyType::Float64Type").finish()
                        }
                        PropertyType::StringType => {
                            f.debug_tuple("PropertyType::StringType").finish()
                        }
                        PropertyType::Bytes => {
                            f.debug_tuple("PropertyType::Bytes").finish()
                        }
                        PropertyType::Date => {
                            f.debug_tuple("PropertyType::Date").finish()
                        }
                        PropertyType::Datetime => {
                            f.debug_tuple("PropertyType::Datetime").finish()
                        }
                        PropertyType::Point => {
                            f.debug_tuple("PropertyType::Point").finish()
                        }
                        PropertyType::ListType => {
                            f.debug_tuple("PropertyType::ListType").finish()
                        }
                        PropertyType::MapType => {
                            f.debug_tuple("PropertyType::MapType").finish()
                        }
                    }
                }
            }
            impl PropertyType {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> PropertyType {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => PropertyType::Boolean,
                        1 => PropertyType::Int32,
                        2 => PropertyType::Int64,
                        3 => PropertyType::Float32Type,
                        4 => PropertyType::Float64Type,
                        5 => PropertyType::StringType,
                        6 => PropertyType::Bytes,
                        7 => PropertyType::Date,
                        8 => PropertyType::Datetime,
                        9 => PropertyType::Point,
                        10 => PropertyType::ListType,
                        11 => PropertyType::MapType,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            /// Index types
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum IndexType {
                Exact,
                /// Exact match index
                Range,
                /// Range queries (>, <, etc.)
                Text,
                /// Text search
                Geospatial,
            }
            impl ::core::fmt::Debug for IndexType {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        IndexType::Exact => f.debug_tuple("IndexType::Exact").finish(),
                        IndexType::Range => f.debug_tuple("IndexType::Range").finish(),
                        IndexType::Text => f.debug_tuple("IndexType::Text").finish(),
                        IndexType::Geospatial => {
                            f.debug_tuple("IndexType::Geospatial").finish()
                        }
                    }
                }
            }
            impl IndexType {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> IndexType {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => IndexType::Exact,
                        1 => IndexType::Range,
                        2 => IndexType::Text,
                        3 => IndexType::Geospatial,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            /// Property definition for schema
            #[derive(Clone)]
            pub struct PropertyDefinition {
                pub name: _rt::String,
                pub property_type: PropertyType,
                pub required: bool,
                pub unique: bool,
                pub default_value: Option<PropertyValue>,
            }
            impl ::core::fmt::Debug for PropertyDefinition {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("PropertyDefinition")
                        .field("name", &self.name)
                        .field("property-type", &self.property_type)
                        .field("required", &self.required)
                        .field("unique", &self.unique)
                        .field("default-value", &self.default_value)
                        .finish()
                }
            }
            /// Vertex label schema
            #[derive(Clone)]
            pub struct VertexLabelSchema {
                pub label: _rt::String,
                pub properties: _rt::Vec<PropertyDefinition>,
                /// Container/collection this label maps to (for container-based systems)
                pub container: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for VertexLabelSchema {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("VertexLabelSchema")
                        .field("label", &self.label)
                        .field("properties", &self.properties)
                        .field("container", &self.container)
                        .finish()
                }
            }
            /// Edge label schema
            #[derive(Clone)]
            pub struct EdgeLabelSchema {
                pub label: _rt::String,
                pub properties: _rt::Vec<PropertyDefinition>,
                pub from_labels: Option<_rt::Vec<_rt::String>>,
                /// Allowed source vertex labels
                pub to_labels: Option<_rt::Vec<_rt::String>>,
                /// Allowed target vertex labels
                /// Container/collection this label maps to (for container-based systems)
                pub container: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for EdgeLabelSchema {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("EdgeLabelSchema")
                        .field("label", &self.label)
                        .field("properties", &self.properties)
                        .field("from-labels", &self.from_labels)
                        .field("to-labels", &self.to_labels)
                        .field("container", &self.container)
                        .finish()
                }
            }
            /// Index definition
            #[derive(Clone)]
            pub struct IndexDefinition {
                pub name: _rt::String,
                pub label: _rt::String,
                /// Vertex or edge label
                pub properties: _rt::Vec<_rt::String>,
                /// Properties to index
                pub index_type: IndexType,
                pub unique: bool,
                /// Container/collection this index applies to
                pub container: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for IndexDefinition {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("IndexDefinition")
                        .field("name", &self.name)
                        .field("label", &self.label)
                        .field("properties", &self.properties)
                        .field("index-type", &self.index_type)
                        .field("unique", &self.unique)
                        .field("container", &self.container)
                        .finish()
                }
            }
            /// Definition for an edge type in a structural graph database.
            #[derive(Clone)]
            pub struct EdgeTypeDefinition {
                /// The name of the edge collection/table.
                pub collection: _rt::String,
                /// The names of vertex collections/tables that can be at the 'from' end of an edge.
                pub from_collections: _rt::Vec<_rt::String>,
                /// The names of vertex collections/tables that can be at the 'to' end of an edge.
                pub to_collections: _rt::Vec<_rt::String>,
            }
            impl ::core::fmt::Debug for EdgeTypeDefinition {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("EdgeTypeDefinition")
                        .field("collection", &self.collection)
                        .field("from-collections", &self.from_collections)
                        .field("to-collections", &self.to_collections)
                        .finish()
                }
            }
            /// Schema management resource
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct SchemaManager {
                handle: _rt::Resource<SchemaManager>,
            }
            impl SchemaManager {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for SchemaManager {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:graph/schema@1.0.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]schema-manager"]
                            fn drop(_: u32);
                        }
                        drop(_handle);
                    }
                }
            }
            /// Container/collection types
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum ContainerType {
                VertexContainer,
                EdgeContainer,
            }
            impl ::core::fmt::Debug for ContainerType {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ContainerType::VertexContainer => {
                            f.debug_tuple("ContainerType::VertexContainer").finish()
                        }
                        ContainerType::EdgeContainer => {
                            f.debug_tuple("ContainerType::EdgeContainer").finish()
                        }
                    }
                }
            }
            impl ContainerType {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> ContainerType {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => ContainerType::VertexContainer,
                        1 => ContainerType::EdgeContainer,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            /// Container information
            #[derive(Clone)]
            pub struct ContainerInfo {
                pub name: _rt::String,
                pub container_type: ContainerType,
                pub element_count: Option<u64>,
            }
            impl ::core::fmt::Debug for ContainerInfo {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ContainerInfo")
                        .field("name", &self.name)
                        .field("container-type", &self.container_type)
                        .field("element-count", &self.element_count)
                        .finish()
                }
            }
            impl SchemaManager {
                #[allow(unused_unsafe, clippy::all)]
                /// Define or update vertex label schema
                pub fn define_vertex_label(
                    &self,
                    schema: &VertexLabelSchema,
                ) -> Result<(), GraphError> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 32]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 32],
                        );
                        let VertexLabelSchema {
                            label: label0,
                            properties: properties0,
                            container: container0,
                        } = schema;
                        let vec1 = label0;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        let vec23 = properties0;
                        let len23 = vec23.len();
                        let layout23 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec23.len() * 64,
                            8,
                        );
                        let result23 = if layout23.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout23).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout23);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec23.into_iter().enumerate() {
                            let base = result23.add(i * 64);
                            {
                                let PropertyDefinition {
                                    name: name2,
                                    property_type: property_type2,
                                    required: required2,
                                    unique: unique2,
                                    default_value: default_value2,
                                } = e;
                                let vec3 = name2;
                                let ptr3 = vec3.as_ptr().cast::<u8>();
                                let len3 = vec3.len();
                                *base.add(4).cast::<usize>() = len3;
                                *base.add(0).cast::<*mut u8>() = ptr3.cast_mut();
                                *base.add(8).cast::<u8>() = (property_type2.clone() as i32)
                                    as u8;
                                *base.add(9).cast::<u8>() = (match required2 {
                                    true => 1,
                                    false => 0,
                                }) as u8;
                                *base.add(10).cast::<u8>() = (match unique2 {
                                    true => 1,
                                    false => 0,
                                }) as u8;
                                match default_value2 {
                                    Some(e) => {
                                        *base.add(16).cast::<u8>() = (1i32) as u8;
                                        use super::super::super::golem::graph::types::PropertyValue as V22;
                                        match e {
                                            V22::NullValue => {
                                                *base.add(24).cast::<u8>() = (0i32) as u8;
                                            }
                                            V22::Boolean(e) => {
                                                *base.add(24).cast::<u8>() = (1i32) as u8;
                                                *base.add(32).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                }) as u8;
                                            }
                                            V22::Int8(e) => {
                                                *base.add(24).cast::<u8>() = (2i32) as u8;
                                                *base.add(32).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            V22::Int16(e) => {
                                                *base.add(24).cast::<u8>() = (3i32) as u8;
                                                *base.add(32).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            V22::Int32(e) => {
                                                *base.add(24).cast::<u8>() = (4i32) as u8;
                                                *base.add(32).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            V22::Int64(e) => {
                                                *base.add(24).cast::<u8>() = (5i32) as u8;
                                                *base.add(32).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            V22::Uint8(e) => {
                                                *base.add(24).cast::<u8>() = (6i32) as u8;
                                                *base.add(32).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            V22::Uint16(e) => {
                                                *base.add(24).cast::<u8>() = (7i32) as u8;
                                                *base.add(32).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            V22::Uint32(e) => {
                                                *base.add(24).cast::<u8>() = (8i32) as u8;
                                                *base.add(32).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            V22::Uint64(e) => {
                                                *base.add(24).cast::<u8>() = (9i32) as u8;
                                                *base.add(32).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            V22::Float32Value(e) => {
                                                *base.add(24).cast::<u8>() = (10i32) as u8;
                                                *base.add(32).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            V22::Float64Value(e) => {
                                                *base.add(24).cast::<u8>() = (11i32) as u8;
                                                *base.add(32).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            V22::StringValue(e) => {
                                                *base.add(24).cast::<u8>() = (12i32) as u8;
                                                let vec4 = e;
                                                let ptr4 = vec4.as_ptr().cast::<u8>();
                                                let len4 = vec4.len();
                                                *base.add(36).cast::<usize>() = len4;
                                                *base.add(32).cast::<*mut u8>() = ptr4.cast_mut();
                                            }
                                            V22::Bytes(e) => {
                                                *base.add(24).cast::<u8>() = (13i32) as u8;
                                                let vec5 = e;
                                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                                let len5 = vec5.len();
                                                *base.add(36).cast::<usize>() = len5;
                                                *base.add(32).cast::<*mut u8>() = ptr5.cast_mut();
                                            }
                                            V22::Date(e) => {
                                                *base.add(24).cast::<u8>() = (14i32) as u8;
                                                let super::super::super::golem::graph::types::Date {
                                                    year: year6,
                                                    month: month6,
                                                    day: day6,
                                                } = e;
                                                *base.add(32).cast::<i32>() = _rt::as_i32(year6);
                                                *base.add(36).cast::<u8>() = (_rt::as_i32(month6)) as u8;
                                                *base.add(37).cast::<u8>() = (_rt::as_i32(day6)) as u8;
                                            }
                                            V22::Time(e) => {
                                                *base.add(24).cast::<u8>() = (15i32) as u8;
                                                let super::super::super::golem::graph::types::Time {
                                                    hour: hour7,
                                                    minute: minute7,
                                                    second: second7,
                                                    nanosecond: nanosecond7,
                                                } = e;
                                                *base.add(32).cast::<u8>() = (_rt::as_i32(hour7)) as u8;
                                                *base.add(33).cast::<u8>() = (_rt::as_i32(minute7)) as u8;
                                                *base.add(34).cast::<u8>() = (_rt::as_i32(second7)) as u8;
                                                *base.add(36).cast::<i32>() = _rt::as_i32(nanosecond7);
                                            }
                                            V22::Datetime(e) => {
                                                *base.add(24).cast::<u8>() = (16i32) as u8;
                                                let super::super::super::golem::graph::types::Datetime {
                                                    date: date8,
                                                    time: time8,
                                                    timezone_offset_minutes: timezone_offset_minutes8,
                                                } = e;
                                                let super::super::super::golem::graph::types::Date {
                                                    year: year9,
                                                    month: month9,
                                                    day: day9,
                                                } = date8;
                                                *base.add(32).cast::<i32>() = _rt::as_i32(year9);
                                                *base.add(36).cast::<u8>() = (_rt::as_i32(month9)) as u8;
                                                *base.add(37).cast::<u8>() = (_rt::as_i32(day9)) as u8;
                                                let super::super::super::golem::graph::types::Time {
                                                    hour: hour10,
                                                    minute: minute10,
                                                    second: second10,
                                                    nanosecond: nanosecond10,
                                                } = time8;
                                                *base.add(40).cast::<u8>() = (_rt::as_i32(hour10)) as u8;
                                                *base.add(41).cast::<u8>() = (_rt::as_i32(minute10)) as u8;
                                                *base.add(42).cast::<u8>() = (_rt::as_i32(second10)) as u8;
                                                *base.add(44).cast::<i32>() = _rt::as_i32(nanosecond10);
                                                match timezone_offset_minutes8 {
                                                    Some(e) => {
                                                        *base.add(48).cast::<u8>() = (1i32) as u8;
                                                        *base.add(50).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                                    }
                                                    None => {
                                                        *base.add(48).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            V22::Duration(e) => {
                                                *base.add(24).cast::<u8>() = (17i32) as u8;
                                                let super::super::super::golem::graph::types::Duration {
                                                    seconds: seconds11,
                                                    nanoseconds: nanoseconds11,
                                                } = e;
                                                *base.add(32).cast::<i64>() = _rt::as_i64(seconds11);
                                                *base.add(40).cast::<i32>() = _rt::as_i32(nanoseconds11);
                                            }
                                            V22::Point(e) => {
                                                *base.add(24).cast::<u8>() = (18i32) as u8;
                                                let super::super::super::golem::graph::types::Point {
                                                    longitude: longitude12,
                                                    latitude: latitude12,
                                                    altitude: altitude12,
                                                } = e;
                                                *base.add(32).cast::<f64>() = _rt::as_f64(longitude12);
                                                *base.add(40).cast::<f64>() = _rt::as_f64(latitude12);
                                                match altitude12 {
                                                    Some(e) => {
                                                        *base.add(48).cast::<u8>() = (1i32) as u8;
                                                        *base.add(56).cast::<f64>() = _rt::as_f64(e);
                                                    }
                                                    None => {
                                                        *base.add(48).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            V22::Linestring(e) => {
                                                *base.add(24).cast::<u8>() = (19i32) as u8;
                                                let super::super::super::golem::graph::types::Linestring {
                                                    coordinates: coordinates13,
                                                } = e;
                                                let vec15 = coordinates13;
                                                let len15 = vec15.len();
                                                let layout15 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec15.len() * 32,
                                                    8,
                                                );
                                                let result15 = if layout15.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout15).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout15);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec15.into_iter().enumerate() {
                                                    let base = result15.add(i * 32);
                                                    {
                                                        let super::super::super::golem::graph::types::Point {
                                                            longitude: longitude14,
                                                            latitude: latitude14,
                                                            altitude: altitude14,
                                                        } = e;
                                                        *base.add(0).cast::<f64>() = _rt::as_f64(longitude14);
                                                        *base.add(8).cast::<f64>() = _rt::as_f64(latitude14);
                                                        match altitude14 {
                                                            Some(e) => {
                                                                *base.add(16).cast::<u8>() = (1i32) as u8;
                                                                *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                            }
                                                            None => {
                                                                *base.add(16).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                }
                                                *base.add(36).cast::<usize>() = len15;
                                                *base.add(32).cast::<*mut u8>() = result15;
                                                cleanup_list.extend_from_slice(&[(result15, layout15)]);
                                            }
                                            V22::Polygon(e) => {
                                                *base.add(24).cast::<u8>() = (20i32) as u8;
                                                let super::super::super::golem::graph::types::Polygon {
                                                    exterior: exterior16,
                                                    holes: holes16,
                                                } = e;
                                                let vec18 = exterior16;
                                                let len18 = vec18.len();
                                                let layout18 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec18.len() * 32,
                                                    8,
                                                );
                                                let result18 = if layout18.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout18).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout18);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec18.into_iter().enumerate() {
                                                    let base = result18.add(i * 32);
                                                    {
                                                        let super::super::super::golem::graph::types::Point {
                                                            longitude: longitude17,
                                                            latitude: latitude17,
                                                            altitude: altitude17,
                                                        } = e;
                                                        *base.add(0).cast::<f64>() = _rt::as_f64(longitude17);
                                                        *base.add(8).cast::<f64>() = _rt::as_f64(latitude17);
                                                        match altitude17 {
                                                            Some(e) => {
                                                                *base.add(16).cast::<u8>() = (1i32) as u8;
                                                                *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                            }
                                                            None => {
                                                                *base.add(16).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                }
                                                *base.add(36).cast::<usize>() = len18;
                                                *base.add(32).cast::<*mut u8>() = result18;
                                                match holes16 {
                                                    Some(e) => {
                                                        *base.add(40).cast::<u8>() = (1i32) as u8;
                                                        let vec21 = e;
                                                        let len21 = vec21.len();
                                                        let layout21 = _rt::alloc::Layout::from_size_align_unchecked(
                                                            vec21.len() * 8,
                                                            4,
                                                        );
                                                        let result21 = if layout21.size() != 0 {
                                                            let ptr = _rt::alloc::alloc(layout21).cast::<u8>();
                                                            if ptr.is_null() {
                                                                _rt::alloc::handle_alloc_error(layout21);
                                                            }
                                                            ptr
                                                        } else {
                                                            ::core::ptr::null_mut()
                                                        };
                                                        for (i, e) in vec21.into_iter().enumerate() {
                                                            let base = result21.add(i * 8);
                                                            {
                                                                let vec20 = e;
                                                                let len20 = vec20.len();
                                                                let layout20 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                    vec20.len() * 32,
                                                                    8,
                                                                );
                                                                let result20 = if layout20.size() != 0 {
                                                                    let ptr = _rt::alloc::alloc(layout20).cast::<u8>();
                                                                    if ptr.is_null() {
                                                                        _rt::alloc::handle_alloc_error(layout20);
                                                                    }
                                                                    ptr
                                                                } else {
                                                                    ::core::ptr::null_mut()
                                                                };
                                                                for (i, e) in vec20.into_iter().enumerate() {
                                                                    let base = result20.add(i * 32);
                                                                    {
                                                                        let super::super::super::golem::graph::types::Point {
                                                                            longitude: longitude19,
                                                                            latitude: latitude19,
                                                                            altitude: altitude19,
                                                                        } = e;
                                                                        *base.add(0).cast::<f64>() = _rt::as_f64(longitude19);
                                                                        *base.add(8).cast::<f64>() = _rt::as_f64(latitude19);
                                                                        match altitude19 {
                                                                            Some(e) => {
                                                                                *base.add(16).cast::<u8>() = (1i32) as u8;
                                                                                *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                                            }
                                                                            None => {
                                                                                *base.add(16).cast::<u8>() = (0i32) as u8;
                                                                            }
                                                                        };
                                                                    }
                                                                }
                                                                *base.add(4).cast::<usize>() = len20;
                                                                *base.add(0).cast::<*mut u8>() = result20;
                                                                cleanup_list.extend_from_slice(&[(result20, layout20)]);
                                                            }
                                                        }
                                                        *base.add(48).cast::<usize>() = len21;
                                                        *base.add(44).cast::<*mut u8>() = result21;
                                                        cleanup_list.extend_from_slice(&[(result21, layout21)]);
                                                    }
                                                    None => {
                                                        *base.add(40).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                                cleanup_list.extend_from_slice(&[(result18, layout18)]);
                                            }
                                        }
                                    }
                                    None => {
                                        *base.add(16).cast::<u8>() = (0i32) as u8;
                                    }
                                };
                            }
                        }
                        let (result25_0, result25_1, result25_2) = match container0 {
                            Some(e) => {
                                let vec24 = e;
                                let ptr24 = vec24.as_ptr().cast::<u8>();
                                let len24 = vec24.len();
                                (1i32, ptr24.cast_mut(), len24)
                            }
                            None => (0i32, ::core::ptr::null_mut(), 0usize),
                        };
                        let ptr26 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:graph/schema@1.0.0")]
                        extern "C" {
                            #[link_name = "[method]schema-manager.define-vertex-label"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr1.cast_mut(),
                            len1,
                            result23,
                            len23,
                            result25_0,
                            result25_1,
                            result25_2,
                            ptr26,
                        );
                        let l27 = i32::from(*ptr26.add(0).cast::<u8>());
                        if layout23.size() != 0 {
                            _rt::alloc::dealloc(result23.cast(), layout23);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l27 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l28 = i32::from(*ptr26.add(8).cast::<u8>());
                                    use super::super::super::golem::graph::errors::GraphError as V83;
                                    let v83 = match l28 {
                                        0 => {
                                            let e83 = {
                                                let l29 = *ptr26.add(16).cast::<*mut u8>();
                                                let l30 = *ptr26.add(20).cast::<usize>();
                                                let len31 = l30;
                                                let bytes31 = _rt::Vec::from_raw_parts(
                                                    l29.cast(),
                                                    len31,
                                                    len31,
                                                );
                                                _rt::string_lift(bytes31)
                                            };
                                            V83::UnsupportedOperation(e83)
                                        }
                                        1 => {
                                            let e83 = {
                                                let l32 = *ptr26.add(16).cast::<*mut u8>();
                                                let l33 = *ptr26.add(20).cast::<usize>();
                                                let len34 = l33;
                                                let bytes34 = _rt::Vec::from_raw_parts(
                                                    l32.cast(),
                                                    len34,
                                                    len34,
                                                );
                                                _rt::string_lift(bytes34)
                                            };
                                            V83::ConnectionFailed(e83)
                                        }
                                        2 => {
                                            let e83 = {
                                                let l35 = *ptr26.add(16).cast::<*mut u8>();
                                                let l36 = *ptr26.add(20).cast::<usize>();
                                                let len37 = l36;
                                                let bytes37 = _rt::Vec::from_raw_parts(
                                                    l35.cast(),
                                                    len37,
                                                    len37,
                                                );
                                                _rt::string_lift(bytes37)
                                            };
                                            V83::AuthenticationFailed(e83)
                                        }
                                        3 => {
                                            let e83 = {
                                                let l38 = *ptr26.add(16).cast::<*mut u8>();
                                                let l39 = *ptr26.add(20).cast::<usize>();
                                                let len40 = l39;
                                                let bytes40 = _rt::Vec::from_raw_parts(
                                                    l38.cast(),
                                                    len40,
                                                    len40,
                                                );
                                                _rt::string_lift(bytes40)
                                            };
                                            V83::AuthorizationFailed(e83)
                                        }
                                        4 => {
                                            let e83 = {
                                                let l41 = i32::from(*ptr26.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V49;
                                                let v49 = match l41 {
                                                    0 => {
                                                        let e49 = {
                                                            let l42 = *ptr26.add(24).cast::<*mut u8>();
                                                            let l43 = *ptr26.add(28).cast::<usize>();
                                                            let len44 = l43;
                                                            let bytes44 = _rt::Vec::from_raw_parts(
                                                                l42.cast(),
                                                                len44,
                                                                len44,
                                                            );
                                                            _rt::string_lift(bytes44)
                                                        };
                                                        V49::StringValue(e49)
                                                    }
                                                    1 => {
                                                        let e49 = {
                                                            let l45 = *ptr26.add(24).cast::<i64>();
                                                            l45
                                                        };
                                                        V49::Int64(e49)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e49 = {
                                                            let l46 = *ptr26.add(24).cast::<*mut u8>();
                                                            let l47 = *ptr26.add(28).cast::<usize>();
                                                            let len48 = l47;
                                                            let bytes48 = _rt::Vec::from_raw_parts(
                                                                l46.cast(),
                                                                len48,
                                                                len48,
                                                            );
                                                            _rt::string_lift(bytes48)
                                                        };
                                                        V49::Uuid(e49)
                                                    }
                                                };
                                                v49
                                            };
                                            V83::ElementNotFound(e83)
                                        }
                                        5 => {
                                            let e83 = {
                                                let l50 = i32::from(*ptr26.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V58;
                                                let v58 = match l50 {
                                                    0 => {
                                                        let e58 = {
                                                            let l51 = *ptr26.add(24).cast::<*mut u8>();
                                                            let l52 = *ptr26.add(28).cast::<usize>();
                                                            let len53 = l52;
                                                            let bytes53 = _rt::Vec::from_raw_parts(
                                                                l51.cast(),
                                                                len53,
                                                                len53,
                                                            );
                                                            _rt::string_lift(bytes53)
                                                        };
                                                        V58::StringValue(e58)
                                                    }
                                                    1 => {
                                                        let e58 = {
                                                            let l54 = *ptr26.add(24).cast::<i64>();
                                                            l54
                                                        };
                                                        V58::Int64(e58)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e58 = {
                                                            let l55 = *ptr26.add(24).cast::<*mut u8>();
                                                            let l56 = *ptr26.add(28).cast::<usize>();
                                                            let len57 = l56;
                                                            let bytes57 = _rt::Vec::from_raw_parts(
                                                                l55.cast(),
                                                                len57,
                                                                len57,
                                                            );
                                                            _rt::string_lift(bytes57)
                                                        };
                                                        V58::Uuid(e58)
                                                    }
                                                };
                                                v58
                                            };
                                            V83::DuplicateElement(e83)
                                        }
                                        6 => {
                                            let e83 = {
                                                let l59 = *ptr26.add(16).cast::<*mut u8>();
                                                let l60 = *ptr26.add(20).cast::<usize>();
                                                let len61 = l60;
                                                let bytes61 = _rt::Vec::from_raw_parts(
                                                    l59.cast(),
                                                    len61,
                                                    len61,
                                                );
                                                _rt::string_lift(bytes61)
                                            };
                                            V83::SchemaViolation(e83)
                                        }
                                        7 => {
                                            let e83 = {
                                                let l62 = *ptr26.add(16).cast::<*mut u8>();
                                                let l63 = *ptr26.add(20).cast::<usize>();
                                                let len64 = l63;
                                                let bytes64 = _rt::Vec::from_raw_parts(
                                                    l62.cast(),
                                                    len64,
                                                    len64,
                                                );
                                                _rt::string_lift(bytes64)
                                            };
                                            V83::ConstraintViolation(e83)
                                        }
                                        8 => {
                                            let e83 = {
                                                let l65 = *ptr26.add(16).cast::<*mut u8>();
                                                let l66 = *ptr26.add(20).cast::<usize>();
                                                let len67 = l66;
                                                let bytes67 = _rt::Vec::from_raw_parts(
                                                    l65.cast(),
                                                    len67,
                                                    len67,
                                                );
                                                _rt::string_lift(bytes67)
                                            };
                                            V83::InvalidPropertyType(e83)
                                        }
                                        9 => {
                                            let e83 = {
                                                let l68 = *ptr26.add(16).cast::<*mut u8>();
                                                let l69 = *ptr26.add(20).cast::<usize>();
                                                let len70 = l69;
                                                let bytes70 = _rt::Vec::from_raw_parts(
                                                    l68.cast(),
                                                    len70,
                                                    len70,
                                                );
                                                _rt::string_lift(bytes70)
                                            };
                                            V83::InvalidQuery(e83)
                                        }
                                        10 => {
                                            let e83 = {
                                                let l71 = *ptr26.add(16).cast::<*mut u8>();
                                                let l72 = *ptr26.add(20).cast::<usize>();
                                                let len73 = l72;
                                                let bytes73 = _rt::Vec::from_raw_parts(
                                                    l71.cast(),
                                                    len73,
                                                    len73,
                                                );
                                                _rt::string_lift(bytes73)
                                            };
                                            V83::TransactionFailed(e83)
                                        }
                                        11 => V83::TransactionConflict,
                                        12 => V83::TransactionTimeout,
                                        13 => V83::DeadlockDetected,
                                        14 => V83::Timeout,
                                        15 => {
                                            let e83 = {
                                                let l74 = *ptr26.add(16).cast::<*mut u8>();
                                                let l75 = *ptr26.add(20).cast::<usize>();
                                                let len76 = l75;
                                                let bytes76 = _rt::Vec::from_raw_parts(
                                                    l74.cast(),
                                                    len76,
                                                    len76,
                                                );
                                                _rt::string_lift(bytes76)
                                            };
                                            V83::ResourceExhausted(e83)
                                        }
                                        16 => {
                                            let e83 = {
                                                let l77 = *ptr26.add(16).cast::<*mut u8>();
                                                let l78 = *ptr26.add(20).cast::<usize>();
                                                let len79 = l78;
                                                let bytes79 = _rt::Vec::from_raw_parts(
                                                    l77.cast(),
                                                    len79,
                                                    len79,
                                                );
                                                _rt::string_lift(bytes79)
                                            };
                                            V83::InternalError(e83)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 17, "invalid enum discriminant");
                                            let e83 = {
                                                let l80 = *ptr26.add(16).cast::<*mut u8>();
                                                let l81 = *ptr26.add(20).cast::<usize>();
                                                let len82 = l81;
                                                let bytes82 = _rt::Vec::from_raw_parts(
                                                    l80.cast(),
                                                    len82,
                                                    len82,
                                                );
                                                _rt::string_lift(bytes82)
                                            };
                                            V83::ServiceUnavailable(e83)
                                        }
                                    };
                                    v83
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl SchemaManager {
                #[allow(unused_unsafe, clippy::all)]
                /// Define or update edge label schema
                pub fn define_edge_label(
                    &self,
                    schema: &EdgeLabelSchema,
                ) -> Result<(), GraphError> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 32]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 32],
                        );
                        let EdgeLabelSchema {
                            label: label0,
                            properties: properties0,
                            from_labels: from_labels0,
                            to_labels: to_labels0,
                            container: container0,
                        } = schema;
                        let vec1 = label0;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        let vec23 = properties0;
                        let len23 = vec23.len();
                        let layout23 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec23.len() * 64,
                            8,
                        );
                        let result23 = if layout23.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout23).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout23);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec23.into_iter().enumerate() {
                            let base = result23.add(i * 64);
                            {
                                let PropertyDefinition {
                                    name: name2,
                                    property_type: property_type2,
                                    required: required2,
                                    unique: unique2,
                                    default_value: default_value2,
                                } = e;
                                let vec3 = name2;
                                let ptr3 = vec3.as_ptr().cast::<u8>();
                                let len3 = vec3.len();
                                *base.add(4).cast::<usize>() = len3;
                                *base.add(0).cast::<*mut u8>() = ptr3.cast_mut();
                                *base.add(8).cast::<u8>() = (property_type2.clone() as i32)
                                    as u8;
                                *base.add(9).cast::<u8>() = (match required2 {
                                    true => 1,
                                    false => 0,
                                }) as u8;
                                *base.add(10).cast::<u8>() = (match unique2 {
                                    true => 1,
                                    false => 0,
                                }) as u8;
                                match default_value2 {
                                    Some(e) => {
                                        *base.add(16).cast::<u8>() = (1i32) as u8;
                                        use super::super::super::golem::graph::types::PropertyValue as V22;
                                        match e {
                                            V22::NullValue => {
                                                *base.add(24).cast::<u8>() = (0i32) as u8;
                                            }
                                            V22::Boolean(e) => {
                                                *base.add(24).cast::<u8>() = (1i32) as u8;
                                                *base.add(32).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                }) as u8;
                                            }
                                            V22::Int8(e) => {
                                                *base.add(24).cast::<u8>() = (2i32) as u8;
                                                *base.add(32).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            V22::Int16(e) => {
                                                *base.add(24).cast::<u8>() = (3i32) as u8;
                                                *base.add(32).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            V22::Int32(e) => {
                                                *base.add(24).cast::<u8>() = (4i32) as u8;
                                                *base.add(32).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            V22::Int64(e) => {
                                                *base.add(24).cast::<u8>() = (5i32) as u8;
                                                *base.add(32).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            V22::Uint8(e) => {
                                                *base.add(24).cast::<u8>() = (6i32) as u8;
                                                *base.add(32).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            V22::Uint16(e) => {
                                                *base.add(24).cast::<u8>() = (7i32) as u8;
                                                *base.add(32).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            V22::Uint32(e) => {
                                                *base.add(24).cast::<u8>() = (8i32) as u8;
                                                *base.add(32).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            V22::Uint64(e) => {
                                                *base.add(24).cast::<u8>() = (9i32) as u8;
                                                *base.add(32).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            V22::Float32Value(e) => {
                                                *base.add(24).cast::<u8>() = (10i32) as u8;
                                                *base.add(32).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            V22::Float64Value(e) => {
                                                *base.add(24).cast::<u8>() = (11i32) as u8;
                                                *base.add(32).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            V22::StringValue(e) => {
                                                *base.add(24).cast::<u8>() = (12i32) as u8;
                                                let vec4 = e;
                                                let ptr4 = vec4.as_ptr().cast::<u8>();
                                                let len4 = vec4.len();
                                                *base.add(36).cast::<usize>() = len4;
                                                *base.add(32).cast::<*mut u8>() = ptr4.cast_mut();
                                            }
                                            V22::Bytes(e) => {
                                                *base.add(24).cast::<u8>() = (13i32) as u8;
                                                let vec5 = e;
                                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                                let len5 = vec5.len();
                                                *base.add(36).cast::<usize>() = len5;
                                                *base.add(32).cast::<*mut u8>() = ptr5.cast_mut();
                                            }
                                            V22::Date(e) => {
                                                *base.add(24).cast::<u8>() = (14i32) as u8;
                                                let super::super::super::golem::graph::types::Date {
                                                    year: year6,
                                                    month: month6,
                                                    day: day6,
                                                } = e;
                                                *base.add(32).cast::<i32>() = _rt::as_i32(year6);
                                                *base.add(36).cast::<u8>() = (_rt::as_i32(month6)) as u8;
                                                *base.add(37).cast::<u8>() = (_rt::as_i32(day6)) as u8;
                                            }
                                            V22::Time(e) => {
                                                *base.add(24).cast::<u8>() = (15i32) as u8;
                                                let super::super::super::golem::graph::types::Time {
                                                    hour: hour7,
                                                    minute: minute7,
                                                    second: second7,
                                                    nanosecond: nanosecond7,
                                                } = e;
                                                *base.add(32).cast::<u8>() = (_rt::as_i32(hour7)) as u8;
                                                *base.add(33).cast::<u8>() = (_rt::as_i32(minute7)) as u8;
                                                *base.add(34).cast::<u8>() = (_rt::as_i32(second7)) as u8;
                                                *base.add(36).cast::<i32>() = _rt::as_i32(nanosecond7);
                                            }
                                            V22::Datetime(e) => {
                                                *base.add(24).cast::<u8>() = (16i32) as u8;
                                                let super::super::super::golem::graph::types::Datetime {
                                                    date: date8,
                                                    time: time8,
                                                    timezone_offset_minutes: timezone_offset_minutes8,
                                                } = e;
                                                let super::super::super::golem::graph::types::Date {
                                                    year: year9,
                                                    month: month9,
                                                    day: day9,
                                                } = date8;
                                                *base.add(32).cast::<i32>() = _rt::as_i32(year9);
                                                *base.add(36).cast::<u8>() = (_rt::as_i32(month9)) as u8;
                                                *base.add(37).cast::<u8>() = (_rt::as_i32(day9)) as u8;
                                                let super::super::super::golem::graph::types::Time {
                                                    hour: hour10,
                                                    minute: minute10,
                                                    second: second10,
                                                    nanosecond: nanosecond10,
                                                } = time8;
                                                *base.add(40).cast::<u8>() = (_rt::as_i32(hour10)) as u8;
                                                *base.add(41).cast::<u8>() = (_rt::as_i32(minute10)) as u8;
                                                *base.add(42).cast::<u8>() = (_rt::as_i32(second10)) as u8;
                                                *base.add(44).cast::<i32>() = _rt::as_i32(nanosecond10);
                                                match timezone_offset_minutes8 {
                                                    Some(e) => {
                                                        *base.add(48).cast::<u8>() = (1i32) as u8;
                                                        *base.add(50).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                                    }
                                                    None => {
                                                        *base.add(48).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            V22::Duration(e) => {
                                                *base.add(24).cast::<u8>() = (17i32) as u8;
                                                let super::super::super::golem::graph::types::Duration {
                                                    seconds: seconds11,
                                                    nanoseconds: nanoseconds11,
                                                } = e;
                                                *base.add(32).cast::<i64>() = _rt::as_i64(seconds11);
                                                *base.add(40).cast::<i32>() = _rt::as_i32(nanoseconds11);
                                            }
                                            V22::Point(e) => {
                                                *base.add(24).cast::<u8>() = (18i32) as u8;
                                                let super::super::super::golem::graph::types::Point {
                                                    longitude: longitude12,
                                                    latitude: latitude12,
                                                    altitude: altitude12,
                                                } = e;
                                                *base.add(32).cast::<f64>() = _rt::as_f64(longitude12);
                                                *base.add(40).cast::<f64>() = _rt::as_f64(latitude12);
                                                match altitude12 {
                                                    Some(e) => {
                                                        *base.add(48).cast::<u8>() = (1i32) as u8;
                                                        *base.add(56).cast::<f64>() = _rt::as_f64(e);
                                                    }
                                                    None => {
                                                        *base.add(48).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            V22::Linestring(e) => {
                                                *base.add(24).cast::<u8>() = (19i32) as u8;
                                                let super::super::super::golem::graph::types::Linestring {
                                                    coordinates: coordinates13,
                                                } = e;
                                                let vec15 = coordinates13;
                                                let len15 = vec15.len();
                                                let layout15 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec15.len() * 32,
                                                    8,
                                                );
                                                let result15 = if layout15.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout15).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout15);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec15.into_iter().enumerate() {
                                                    let base = result15.add(i * 32);
                                                    {
                                                        let super::super::super::golem::graph::types::Point {
                                                            longitude: longitude14,
                                                            latitude: latitude14,
                                                            altitude: altitude14,
                                                        } = e;
                                                        *base.add(0).cast::<f64>() = _rt::as_f64(longitude14);
                                                        *base.add(8).cast::<f64>() = _rt::as_f64(latitude14);
                                                        match altitude14 {
                                                            Some(e) => {
                                                                *base.add(16).cast::<u8>() = (1i32) as u8;
                                                                *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                            }
                                                            None => {
                                                                *base.add(16).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                }
                                                *base.add(36).cast::<usize>() = len15;
                                                *base.add(32).cast::<*mut u8>() = result15;
                                                cleanup_list.extend_from_slice(&[(result15, layout15)]);
                                            }
                                            V22::Polygon(e) => {
                                                *base.add(24).cast::<u8>() = (20i32) as u8;
                                                let super::super::super::golem::graph::types::Polygon {
                                                    exterior: exterior16,
                                                    holes: holes16,
                                                } = e;
                                                let vec18 = exterior16;
                                                let len18 = vec18.len();
                                                let layout18 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec18.len() * 32,
                                                    8,
                                                );
                                                let result18 = if layout18.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout18).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout18);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec18.into_iter().enumerate() {
                                                    let base = result18.add(i * 32);
                                                    {
                                                        let super::super::super::golem::graph::types::Point {
                                                            longitude: longitude17,
                                                            latitude: latitude17,
                                                            altitude: altitude17,
                                                        } = e;
                                                        *base.add(0).cast::<f64>() = _rt::as_f64(longitude17);
                                                        *base.add(8).cast::<f64>() = _rt::as_f64(latitude17);
                                                        match altitude17 {
                                                            Some(e) => {
                                                                *base.add(16).cast::<u8>() = (1i32) as u8;
                                                                *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                            }
                                                            None => {
                                                                *base.add(16).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                }
                                                *base.add(36).cast::<usize>() = len18;
                                                *base.add(32).cast::<*mut u8>() = result18;
                                                match holes16 {
                                                    Some(e) => {
                                                        *base.add(40).cast::<u8>() = (1i32) as u8;
                                                        let vec21 = e;
                                                        let len21 = vec21.len();
                                                        let layout21 = _rt::alloc::Layout::from_size_align_unchecked(
                                                            vec21.len() * 8,
                                                            4,
                                                        );
                                                        let result21 = if layout21.size() != 0 {
                                                            let ptr = _rt::alloc::alloc(layout21).cast::<u8>();
                                                            if ptr.is_null() {
                                                                _rt::alloc::handle_alloc_error(layout21);
                                                            }
                                                            ptr
                                                        } else {
                                                            ::core::ptr::null_mut()
                                                        };
                                                        for (i, e) in vec21.into_iter().enumerate() {
                                                            let base = result21.add(i * 8);
                                                            {
                                                                let vec20 = e;
                                                                let len20 = vec20.len();
                                                                let layout20 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                    vec20.len() * 32,
                                                                    8,
                                                                );
                                                                let result20 = if layout20.size() != 0 {
                                                                    let ptr = _rt::alloc::alloc(layout20).cast::<u8>();
                                                                    if ptr.is_null() {
                                                                        _rt::alloc::handle_alloc_error(layout20);
                                                                    }
                                                                    ptr
                                                                } else {
                                                                    ::core::ptr::null_mut()
                                                                };
                                                                for (i, e) in vec20.into_iter().enumerate() {
                                                                    let base = result20.add(i * 32);
                                                                    {
                                                                        let super::super::super::golem::graph::types::Point {
                                                                            longitude: longitude19,
                                                                            latitude: latitude19,
                                                                            altitude: altitude19,
                                                                        } = e;
                                                                        *base.add(0).cast::<f64>() = _rt::as_f64(longitude19);
                                                                        *base.add(8).cast::<f64>() = _rt::as_f64(latitude19);
                                                                        match altitude19 {
                                                                            Some(e) => {
                                                                                *base.add(16).cast::<u8>() = (1i32) as u8;
                                                                                *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                                            }
                                                                            None => {
                                                                                *base.add(16).cast::<u8>() = (0i32) as u8;
                                                                            }
                                                                        };
                                                                    }
                                                                }
                                                                *base.add(4).cast::<usize>() = len20;
                                                                *base.add(0).cast::<*mut u8>() = result20;
                                                                cleanup_list.extend_from_slice(&[(result20, layout20)]);
                                                            }
                                                        }
                                                        *base.add(48).cast::<usize>() = len21;
                                                        *base.add(44).cast::<*mut u8>() = result21;
                                                        cleanup_list.extend_from_slice(&[(result21, layout21)]);
                                                    }
                                                    None => {
                                                        *base.add(40).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                                cleanup_list.extend_from_slice(&[(result18, layout18)]);
                                            }
                                        }
                                    }
                                    None => {
                                        *base.add(16).cast::<u8>() = (0i32) as u8;
                                    }
                                };
                            }
                        }
                        let (result26_0, result26_1, result26_2) = match from_labels0 {
                            Some(e) => {
                                let vec25 = e;
                                let len25 = vec25.len();
                                let layout25 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec25.len() * 8,
                                    4,
                                );
                                let result25 = if layout25.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout25).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout25);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec25.into_iter().enumerate() {
                                    let base = result25.add(i * 8);
                                    {
                                        let vec24 = e;
                                        let ptr24 = vec24.as_ptr().cast::<u8>();
                                        let len24 = vec24.len();
                                        *base.add(4).cast::<usize>() = len24;
                                        *base.add(0).cast::<*mut u8>() = ptr24.cast_mut();
                                    }
                                }
                                cleanup_list.extend_from_slice(&[(result25, layout25)]);
                                (1i32, result25, len25)
                            }
                            None => (0i32, ::core::ptr::null_mut(), 0usize),
                        };
                        let (result29_0, result29_1, result29_2) = match to_labels0 {
                            Some(e) => {
                                let vec28 = e;
                                let len28 = vec28.len();
                                let layout28 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec28.len() * 8,
                                    4,
                                );
                                let result28 = if layout28.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout28).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout28);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec28.into_iter().enumerate() {
                                    let base = result28.add(i * 8);
                                    {
                                        let vec27 = e;
                                        let ptr27 = vec27.as_ptr().cast::<u8>();
                                        let len27 = vec27.len();
                                        *base.add(4).cast::<usize>() = len27;
                                        *base.add(0).cast::<*mut u8>() = ptr27.cast_mut();
                                    }
                                }
                                cleanup_list.extend_from_slice(&[(result28, layout28)]);
                                (1i32, result28, len28)
                            }
                            None => (0i32, ::core::ptr::null_mut(), 0usize),
                        };
                        let (result31_0, result31_1, result31_2) = match container0 {
                            Some(e) => {
                                let vec30 = e;
                                let ptr30 = vec30.as_ptr().cast::<u8>();
                                let len30 = vec30.len();
                                (1i32, ptr30.cast_mut(), len30)
                            }
                            None => (0i32, ::core::ptr::null_mut(), 0usize),
                        };
                        let ptr32 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:graph/schema@1.0.0")]
                        extern "C" {
                            #[link_name = "[method]schema-manager.define-edge-label"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr1.cast_mut(),
                            len1,
                            result23,
                            len23,
                            result26_0,
                            result26_1,
                            result26_2,
                            result29_0,
                            result29_1,
                            result29_2,
                            result31_0,
                            result31_1,
                            result31_2,
                            ptr32,
                        );
                        let l33 = i32::from(*ptr32.add(0).cast::<u8>());
                        if layout23.size() != 0 {
                            _rt::alloc::dealloc(result23.cast(), layout23);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l33 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l34 = i32::from(*ptr32.add(8).cast::<u8>());
                                    use super::super::super::golem::graph::errors::GraphError as V89;
                                    let v89 = match l34 {
                                        0 => {
                                            let e89 = {
                                                let l35 = *ptr32.add(16).cast::<*mut u8>();
                                                let l36 = *ptr32.add(20).cast::<usize>();
                                                let len37 = l36;
                                                let bytes37 = _rt::Vec::from_raw_parts(
                                                    l35.cast(),
                                                    len37,
                                                    len37,
                                                );
                                                _rt::string_lift(bytes37)
                                            };
                                            V89::UnsupportedOperation(e89)
                                        }
                                        1 => {
                                            let e89 = {
                                                let l38 = *ptr32.add(16).cast::<*mut u8>();
                                                let l39 = *ptr32.add(20).cast::<usize>();
                                                let len40 = l39;
                                                let bytes40 = _rt::Vec::from_raw_parts(
                                                    l38.cast(),
                                                    len40,
                                                    len40,
                                                );
                                                _rt::string_lift(bytes40)
                                            };
                                            V89::ConnectionFailed(e89)
                                        }
                                        2 => {
                                            let e89 = {
                                                let l41 = *ptr32.add(16).cast::<*mut u8>();
                                                let l42 = *ptr32.add(20).cast::<usize>();
                                                let len43 = l42;
                                                let bytes43 = _rt::Vec::from_raw_parts(
                                                    l41.cast(),
                                                    len43,
                                                    len43,
                                                );
                                                _rt::string_lift(bytes43)
                                            };
                                            V89::AuthenticationFailed(e89)
                                        }
                                        3 => {
                                            let e89 = {
                                                let l44 = *ptr32.add(16).cast::<*mut u8>();
                                                let l45 = *ptr32.add(20).cast::<usize>();
                                                let len46 = l45;
                                                let bytes46 = _rt::Vec::from_raw_parts(
                                                    l44.cast(),
                                                    len46,
                                                    len46,
                                                );
                                                _rt::string_lift(bytes46)
                                            };
                                            V89::AuthorizationFailed(e89)
                                        }
                                        4 => {
                                            let e89 = {
                                                let l47 = i32::from(*ptr32.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V55;
                                                let v55 = match l47 {
                                                    0 => {
                                                        let e55 = {
                                                            let l48 = *ptr32.add(24).cast::<*mut u8>();
                                                            let l49 = *ptr32.add(28).cast::<usize>();
                                                            let len50 = l49;
                                                            let bytes50 = _rt::Vec::from_raw_parts(
                                                                l48.cast(),
                                                                len50,
                                                                len50,
                                                            );
                                                            _rt::string_lift(bytes50)
                                                        };
                                                        V55::StringValue(e55)
                                                    }
                                                    1 => {
                                                        let e55 = {
                                                            let l51 = *ptr32.add(24).cast::<i64>();
                                                            l51
                                                        };
                                                        V55::Int64(e55)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e55 = {
                                                            let l52 = *ptr32.add(24).cast::<*mut u8>();
                                                            let l53 = *ptr32.add(28).cast::<usize>();
                                                            let len54 = l53;
                                                            let bytes54 = _rt::Vec::from_raw_parts(
                                                                l52.cast(),
                                                                len54,
                                                                len54,
                                                            );
                                                            _rt::string_lift(bytes54)
                                                        };
                                                        V55::Uuid(e55)
                                                    }
                                                };
                                                v55
                                            };
                                            V89::ElementNotFound(e89)
                                        }
                                        5 => {
                                            let e89 = {
                                                let l56 = i32::from(*ptr32.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V64;
                                                let v64 = match l56 {
                                                    0 => {
                                                        let e64 = {
                                                            let l57 = *ptr32.add(24).cast::<*mut u8>();
                                                            let l58 = *ptr32.add(28).cast::<usize>();
                                                            let len59 = l58;
                                                            let bytes59 = _rt::Vec::from_raw_parts(
                                                                l57.cast(),
                                                                len59,
                                                                len59,
                                                            );
                                                            _rt::string_lift(bytes59)
                                                        };
                                                        V64::StringValue(e64)
                                                    }
                                                    1 => {
                                                        let e64 = {
                                                            let l60 = *ptr32.add(24).cast::<i64>();
                                                            l60
                                                        };
                                                        V64::Int64(e64)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e64 = {
                                                            let l61 = *ptr32.add(24).cast::<*mut u8>();
                                                            let l62 = *ptr32.add(28).cast::<usize>();
                                                            let len63 = l62;
                                                            let bytes63 = _rt::Vec::from_raw_parts(
                                                                l61.cast(),
                                                                len63,
                                                                len63,
                                                            );
                                                            _rt::string_lift(bytes63)
                                                        };
                                                        V64::Uuid(e64)
                                                    }
                                                };
                                                v64
                                            };
                                            V89::DuplicateElement(e89)
                                        }
                                        6 => {
                                            let e89 = {
                                                let l65 = *ptr32.add(16).cast::<*mut u8>();
                                                let l66 = *ptr32.add(20).cast::<usize>();
                                                let len67 = l66;
                                                let bytes67 = _rt::Vec::from_raw_parts(
                                                    l65.cast(),
                                                    len67,
                                                    len67,
                                                );
                                                _rt::string_lift(bytes67)
                                            };
                                            V89::SchemaViolation(e89)
                                        }
                                        7 => {
                                            let e89 = {
                                                let l68 = *ptr32.add(16).cast::<*mut u8>();
                                                let l69 = *ptr32.add(20).cast::<usize>();
                                                let len70 = l69;
                                                let bytes70 = _rt::Vec::from_raw_parts(
                                                    l68.cast(),
                                                    len70,
                                                    len70,
                                                );
                                                _rt::string_lift(bytes70)
                                            };
                                            V89::ConstraintViolation(e89)
                                        }
                                        8 => {
                                            let e89 = {
                                                let l71 = *ptr32.add(16).cast::<*mut u8>();
                                                let l72 = *ptr32.add(20).cast::<usize>();
                                                let len73 = l72;
                                                let bytes73 = _rt::Vec::from_raw_parts(
                                                    l71.cast(),
                                                    len73,
                                                    len73,
                                                );
                                                _rt::string_lift(bytes73)
                                            };
                                            V89::InvalidPropertyType(e89)
                                        }
                                        9 => {
                                            let e89 = {
                                                let l74 = *ptr32.add(16).cast::<*mut u8>();
                                                let l75 = *ptr32.add(20).cast::<usize>();
                                                let len76 = l75;
                                                let bytes76 = _rt::Vec::from_raw_parts(
                                                    l74.cast(),
                                                    len76,
                                                    len76,
                                                );
                                                _rt::string_lift(bytes76)
                                            };
                                            V89::InvalidQuery(e89)
                                        }
                                        10 => {
                                            let e89 = {
                                                let l77 = *ptr32.add(16).cast::<*mut u8>();
                                                let l78 = *ptr32.add(20).cast::<usize>();
                                                let len79 = l78;
                                                let bytes79 = _rt::Vec::from_raw_parts(
                                                    l77.cast(),
                                                    len79,
                                                    len79,
                                                );
                                                _rt::string_lift(bytes79)
                                            };
                                            V89::TransactionFailed(e89)
                                        }
                                        11 => V89::TransactionConflict,
                                        12 => V89::TransactionTimeout,
                                        13 => V89::DeadlockDetected,
                                        14 => V89::Timeout,
                                        15 => {
                                            let e89 = {
                                                let l80 = *ptr32.add(16).cast::<*mut u8>();
                                                let l81 = *ptr32.add(20).cast::<usize>();
                                                let len82 = l81;
                                                let bytes82 = _rt::Vec::from_raw_parts(
                                                    l80.cast(),
                                                    len82,
                                                    len82,
                                                );
                                                _rt::string_lift(bytes82)
                                            };
                                            V89::ResourceExhausted(e89)
                                        }
                                        16 => {
                                            let e89 = {
                                                let l83 = *ptr32.add(16).cast::<*mut u8>();
                                                let l84 = *ptr32.add(20).cast::<usize>();
                                                let len85 = l84;
                                                let bytes85 = _rt::Vec::from_raw_parts(
                                                    l83.cast(),
                                                    len85,
                                                    len85,
                                                );
                                                _rt::string_lift(bytes85)
                                            };
                                            V89::InternalError(e89)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 17, "invalid enum discriminant");
                                            let e89 = {
                                                let l86 = *ptr32.add(16).cast::<*mut u8>();
                                                let l87 = *ptr32.add(20).cast::<usize>();
                                                let len88 = l87;
                                                let bytes88 = _rt::Vec::from_raw_parts(
                                                    l86.cast(),
                                                    len88,
                                                    len88,
                                                );
                                                _rt::string_lift(bytes88)
                                            };
                                            V89::ServiceUnavailable(e89)
                                        }
                                    };
                                    v89
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl SchemaManager {
                #[allow(unused_unsafe, clippy::all)]
                /// Get vertex label schema
                pub fn get_vertex_label_schema(
                    &self,
                    label: &str,
                ) -> Result<Option<VertexLabelSchema>, GraphError> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 40]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 40],
                        );
                        let vec0 = label;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:graph/schema@1.0.0")]
                        extern "C" {
                            #[link_name = "[method]schema-manager.get-vertex-label-schema"]
                            fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0.cast_mut(), len0, ptr1);
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => {
                                let e = {
                                    let l3 = i32::from(*ptr1.add(8).cast::<u8>());
                                    match l3 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l4 = *ptr1.add(12).cast::<*mut u8>();
                                                let l5 = *ptr1.add(16).cast::<usize>();
                                                let len6 = l5;
                                                let bytes6 = _rt::Vec::from_raw_parts(
                                                    l4.cast(),
                                                    len6,
                                                    len6,
                                                );
                                                let l7 = *ptr1.add(20).cast::<*mut u8>();
                                                let l8 = *ptr1.add(24).cast::<usize>();
                                                let base82 = l7;
                                                let len82 = l8;
                                                let mut result82 = _rt::Vec::with_capacity(len82);
                                                for i in 0..len82 {
                                                    let base = base82.add(i * 64);
                                                    let e82 = {
                                                        let l9 = *base.add(0).cast::<*mut u8>();
                                                        let l10 = *base.add(4).cast::<usize>();
                                                        let len11 = l10;
                                                        let bytes11 = _rt::Vec::from_raw_parts(
                                                            l9.cast(),
                                                            len11,
                                                            len11,
                                                        );
                                                        let l12 = i32::from(*base.add(8).cast::<u8>());
                                                        let l13 = i32::from(*base.add(9).cast::<u8>());
                                                        let l14 = i32::from(*base.add(10).cast::<u8>());
                                                        let l15 = i32::from(*base.add(16).cast::<u8>());
                                                        PropertyDefinition {
                                                            name: _rt::string_lift(bytes11),
                                                            property_type: PropertyType::_lift(l12 as u8),
                                                            required: _rt::bool_lift(l13 as u8),
                                                            unique: _rt::bool_lift(l14 as u8),
                                                            default_value: match l15 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l16 = i32::from(*base.add(24).cast::<u8>());
                                                                        use super::super::super::golem::graph::types::PropertyValue as V81;
                                                                        let v81 = match l16 {
                                                                            0 => V81::NullValue,
                                                                            1 => {
                                                                                let e81 = {
                                                                                    let l17 = i32::from(*base.add(32).cast::<u8>());
                                                                                    _rt::bool_lift(l17 as u8)
                                                                                };
                                                                                V81::Boolean(e81)
                                                                            }
                                                                            2 => {
                                                                                let e81 = {
                                                                                    let l18 = i32::from(*base.add(32).cast::<i8>());
                                                                                    l18 as i8
                                                                                };
                                                                                V81::Int8(e81)
                                                                            }
                                                                            3 => {
                                                                                let e81 = {
                                                                                    let l19 = i32::from(*base.add(32).cast::<i16>());
                                                                                    l19 as i16
                                                                                };
                                                                                V81::Int16(e81)
                                                                            }
                                                                            4 => {
                                                                                let e81 = {
                                                                                    let l20 = *base.add(32).cast::<i32>();
                                                                                    l20
                                                                                };
                                                                                V81::Int32(e81)
                                                                            }
                                                                            5 => {
                                                                                let e81 = {
                                                                                    let l21 = *base.add(32).cast::<i64>();
                                                                                    l21
                                                                                };
                                                                                V81::Int64(e81)
                                                                            }
                                                                            6 => {
                                                                                let e81 = {
                                                                                    let l22 = i32::from(*base.add(32).cast::<u8>());
                                                                                    l22 as u8
                                                                                };
                                                                                V81::Uint8(e81)
                                                                            }
                                                                            7 => {
                                                                                let e81 = {
                                                                                    let l23 = i32::from(*base.add(32).cast::<u16>());
                                                                                    l23 as u16
                                                                                };
                                                                                V81::Uint16(e81)
                                                                            }
                                                                            8 => {
                                                                                let e81 = {
                                                                                    let l24 = *base.add(32).cast::<i32>();
                                                                                    l24 as u32
                                                                                };
                                                                                V81::Uint32(e81)
                                                                            }
                                                                            9 => {
                                                                                let e81 = {
                                                                                    let l25 = *base.add(32).cast::<i64>();
                                                                                    l25 as u64
                                                                                };
                                                                                V81::Uint64(e81)
                                                                            }
                                                                            10 => {
                                                                                let e81 = {
                                                                                    let l26 = *base.add(32).cast::<f32>();
                                                                                    l26
                                                                                };
                                                                                V81::Float32Value(e81)
                                                                            }
                                                                            11 => {
                                                                                let e81 = {
                                                                                    let l27 = *base.add(32).cast::<f64>();
                                                                                    l27
                                                                                };
                                                                                V81::Float64Value(e81)
                                                                            }
                                                                            12 => {
                                                                                let e81 = {
                                                                                    let l28 = *base.add(32).cast::<*mut u8>();
                                                                                    let l29 = *base.add(36).cast::<usize>();
                                                                                    let len30 = l29;
                                                                                    let bytes30 = _rt::Vec::from_raw_parts(
                                                                                        l28.cast(),
                                                                                        len30,
                                                                                        len30,
                                                                                    );
                                                                                    _rt::string_lift(bytes30)
                                                                                };
                                                                                V81::StringValue(e81)
                                                                            }
                                                                            13 => {
                                                                                let e81 = {
                                                                                    let l31 = *base.add(32).cast::<*mut u8>();
                                                                                    let l32 = *base.add(36).cast::<usize>();
                                                                                    let len33 = l32;
                                                                                    _rt::Vec::from_raw_parts(l31.cast(), len33, len33)
                                                                                };
                                                                                V81::Bytes(e81)
                                                                            }
                                                                            14 => {
                                                                                let e81 = {
                                                                                    let l34 = *base.add(32).cast::<i32>();
                                                                                    let l35 = i32::from(*base.add(36).cast::<u8>());
                                                                                    let l36 = i32::from(*base.add(37).cast::<u8>());
                                                                                    super::super::super::golem::graph::types::Date {
                                                                                        year: l34 as u32,
                                                                                        month: l35 as u8,
                                                                                        day: l36 as u8,
                                                                                    }
                                                                                };
                                                                                V81::Date(e81)
                                                                            }
                                                                            15 => {
                                                                                let e81 = {
                                                                                    let l37 = i32::from(*base.add(32).cast::<u8>());
                                                                                    let l38 = i32::from(*base.add(33).cast::<u8>());
                                                                                    let l39 = i32::from(*base.add(34).cast::<u8>());
                                                                                    let l40 = *base.add(36).cast::<i32>();
                                                                                    super::super::super::golem::graph::types::Time {
                                                                                        hour: l37 as u8,
                                                                                        minute: l38 as u8,
                                                                                        second: l39 as u8,
                                                                                        nanosecond: l40 as u32,
                                                                                    }
                                                                                };
                                                                                V81::Time(e81)
                                                                            }
                                                                            16 => {
                                                                                let e81 = {
                                                                                    let l41 = *base.add(32).cast::<i32>();
                                                                                    let l42 = i32::from(*base.add(36).cast::<u8>());
                                                                                    let l43 = i32::from(*base.add(37).cast::<u8>());
                                                                                    let l44 = i32::from(*base.add(40).cast::<u8>());
                                                                                    let l45 = i32::from(*base.add(41).cast::<u8>());
                                                                                    let l46 = i32::from(*base.add(42).cast::<u8>());
                                                                                    let l47 = *base.add(44).cast::<i32>();
                                                                                    let l48 = i32::from(*base.add(48).cast::<u8>());
                                                                                    super::super::super::golem::graph::types::Datetime {
                                                                                        date: super::super::super::golem::graph::types::Date {
                                                                                            year: l41 as u32,
                                                                                            month: l42 as u8,
                                                                                            day: l43 as u8,
                                                                                        },
                                                                                        time: super::super::super::golem::graph::types::Time {
                                                                                            hour: l44 as u8,
                                                                                            minute: l45 as u8,
                                                                                            second: l46 as u8,
                                                                                            nanosecond: l47 as u32,
                                                                                        },
                                                                                        timezone_offset_minutes: match l48 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l49 = i32::from(*base.add(50).cast::<i16>());
                                                                                                    l49 as i16
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        },
                                                                                    }
                                                                                };
                                                                                V81::Datetime(e81)
                                                                            }
                                                                            17 => {
                                                                                let e81 = {
                                                                                    let l50 = *base.add(32).cast::<i64>();
                                                                                    let l51 = *base.add(40).cast::<i32>();
                                                                                    super::super::super::golem::graph::types::Duration {
                                                                                        seconds: l50,
                                                                                        nanoseconds: l51 as u32,
                                                                                    }
                                                                                };
                                                                                V81::Duration(e81)
                                                                            }
                                                                            18 => {
                                                                                let e81 = {
                                                                                    let l52 = *base.add(32).cast::<f64>();
                                                                                    let l53 = *base.add(40).cast::<f64>();
                                                                                    let l54 = i32::from(*base.add(48).cast::<u8>());
                                                                                    super::super::super::golem::graph::types::Point {
                                                                                        longitude: l52,
                                                                                        latitude: l53,
                                                                                        altitude: match l54 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l55 = *base.add(56).cast::<f64>();
                                                                                                    l55
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        },
                                                                                    }
                                                                                };
                                                                                V81::Point(e81)
                                                                            }
                                                                            19 => {
                                                                                let e81 = {
                                                                                    let l56 = *base.add(32).cast::<*mut u8>();
                                                                                    let l57 = *base.add(36).cast::<usize>();
                                                                                    let base62 = l56;
                                                                                    let len62 = l57;
                                                                                    let mut result62 = _rt::Vec::with_capacity(len62);
                                                                                    for i in 0..len62 {
                                                                                        let base = base62.add(i * 32);
                                                                                        let e62 = {
                                                                                            let l58 = *base.add(0).cast::<f64>();
                                                                                            let l59 = *base.add(8).cast::<f64>();
                                                                                            let l60 = i32::from(*base.add(16).cast::<u8>());
                                                                                            super::super::super::golem::graph::types::Point {
                                                                                                longitude: l58,
                                                                                                latitude: l59,
                                                                                                altitude: match l60 {
                                                                                                    0 => None,
                                                                                                    1 => {
                                                                                                        let e = {
                                                                                                            let l61 = *base.add(24).cast::<f64>();
                                                                                                            l61
                                                                                                        };
                                                                                                        Some(e)
                                                                                                    }
                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                },
                                                                                            }
                                                                                        };
                                                                                        result62.push(e62);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base62, len62 * 32, 8);
                                                                                    super::super::super::golem::graph::types::Linestring {
                                                                                        coordinates: result62,
                                                                                    }
                                                                                };
                                                                                V81::Linestring(e81)
                                                                            }
                                                                            n => {
                                                                                debug_assert_eq!(n, 20, "invalid enum discriminant");
                                                                                let e81 = {
                                                                                    let l63 = *base.add(32).cast::<*mut u8>();
                                                                                    let l64 = *base.add(36).cast::<usize>();
                                                                                    let base69 = l63;
                                                                                    let len69 = l64;
                                                                                    let mut result69 = _rt::Vec::with_capacity(len69);
                                                                                    for i in 0..len69 {
                                                                                        let base = base69.add(i * 32);
                                                                                        let e69 = {
                                                                                            let l65 = *base.add(0).cast::<f64>();
                                                                                            let l66 = *base.add(8).cast::<f64>();
                                                                                            let l67 = i32::from(*base.add(16).cast::<u8>());
                                                                                            super::super::super::golem::graph::types::Point {
                                                                                                longitude: l65,
                                                                                                latitude: l66,
                                                                                                altitude: match l67 {
                                                                                                    0 => None,
                                                                                                    1 => {
                                                                                                        let e = {
                                                                                                            let l68 = *base.add(24).cast::<f64>();
                                                                                                            l68
                                                                                                        };
                                                                                                        Some(e)
                                                                                                    }
                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                },
                                                                                            }
                                                                                        };
                                                                                        result69.push(e69);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base69, len69 * 32, 8);
                                                                                    let l70 = i32::from(*base.add(40).cast::<u8>());
                                                                                    super::super::super::golem::graph::types::Polygon {
                                                                                        exterior: result69,
                                                                                        holes: match l70 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l71 = *base.add(44).cast::<*mut u8>();
                                                                                                    let l72 = *base.add(48).cast::<usize>();
                                                                                                    let base80 = l71;
                                                                                                    let len80 = l72;
                                                                                                    let mut result80 = _rt::Vec::with_capacity(len80);
                                                                                                    for i in 0..len80 {
                                                                                                        let base = base80.add(i * 8);
                                                                                                        let e80 = {
                                                                                                            let l73 = *base.add(0).cast::<*mut u8>();
                                                                                                            let l74 = *base.add(4).cast::<usize>();
                                                                                                            let base79 = l73;
                                                                                                            let len79 = l74;
                                                                                                            let mut result79 = _rt::Vec::with_capacity(len79);
                                                                                                            for i in 0..len79 {
                                                                                                                let base = base79.add(i * 32);
                                                                                                                let e79 = {
                                                                                                                    let l75 = *base.add(0).cast::<f64>();
                                                                                                                    let l76 = *base.add(8).cast::<f64>();
                                                                                                                    let l77 = i32::from(*base.add(16).cast::<u8>());
                                                                                                                    super::super::super::golem::graph::types::Point {
                                                                                                                        longitude: l75,
                                                                                                                        latitude: l76,
                                                                                                                        altitude: match l77 {
                                                                                                                            0 => None,
                                                                                                                            1 => {
                                                                                                                                let e = {
                                                                                                                                    let l78 = *base.add(24).cast::<f64>();
                                                                                                                                    l78
                                                                                                                                };
                                                                                                                                Some(e)
                                                                                                                            }
                                                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                                                        },
                                                                                                                    }
                                                                                                                };
                                                                                                                result79.push(e79);
                                                                                                            }
                                                                                                            _rt::cabi_dealloc(base79, len79 * 32, 8);
                                                                                                            result79
                                                                                                        };
                                                                                                        result80.push(e80);
                                                                                                    }
                                                                                                    _rt::cabi_dealloc(base80, len80 * 8, 4);
                                                                                                    result80
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        },
                                                                                    }
                                                                                };
                                                                                V81::Polygon(e81)
                                                                            }
                                                                        };
                                                                        v81
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                        }
                                                    };
                                                    result82.push(e82);
                                                }
                                                _rt::cabi_dealloc(base82, len82 * 64, 8);
                                                let l83 = i32::from(*ptr1.add(28).cast::<u8>());
                                                VertexLabelSchema {
                                                    label: _rt::string_lift(bytes6),
                                                    properties: result82,
                                                    container: match l83 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l84 = *ptr1.add(32).cast::<*mut u8>();
                                                                let l85 = *ptr1.add(36).cast::<usize>();
                                                                let len86 = l85;
                                                                let bytes86 = _rt::Vec::from_raw_parts(
                                                                    l84.cast(),
                                                                    len86,
                                                                    len86,
                                                                );
                                                                _rt::string_lift(bytes86)
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                }
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    }
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l87 = i32::from(*ptr1.add(8).cast::<u8>());
                                    use super::super::super::golem::graph::errors::GraphError as V142;
                                    let v142 = match l87 {
                                        0 => {
                                            let e142 = {
                                                let l88 = *ptr1.add(16).cast::<*mut u8>();
                                                let l89 = *ptr1.add(20).cast::<usize>();
                                                let len90 = l89;
                                                let bytes90 = _rt::Vec::from_raw_parts(
                                                    l88.cast(),
                                                    len90,
                                                    len90,
                                                );
                                                _rt::string_lift(bytes90)
                                            };
                                            V142::UnsupportedOperation(e142)
                                        }
                                        1 => {
                                            let e142 = {
                                                let l91 = *ptr1.add(16).cast::<*mut u8>();
                                                let l92 = *ptr1.add(20).cast::<usize>();
                                                let len93 = l92;
                                                let bytes93 = _rt::Vec::from_raw_parts(
                                                    l91.cast(),
                                                    len93,
                                                    len93,
                                                );
                                                _rt::string_lift(bytes93)
                                            };
                                            V142::ConnectionFailed(e142)
                                        }
                                        2 => {
                                            let e142 = {
                                                let l94 = *ptr1.add(16).cast::<*mut u8>();
                                                let l95 = *ptr1.add(20).cast::<usize>();
                                                let len96 = l95;
                                                let bytes96 = _rt::Vec::from_raw_parts(
                                                    l94.cast(),
                                                    len96,
                                                    len96,
                                                );
                                                _rt::string_lift(bytes96)
                                            };
                                            V142::AuthenticationFailed(e142)
                                        }
                                        3 => {
                                            let e142 = {
                                                let l97 = *ptr1.add(16).cast::<*mut u8>();
                                                let l98 = *ptr1.add(20).cast::<usize>();
                                                let len99 = l98;
                                                let bytes99 = _rt::Vec::from_raw_parts(
                                                    l97.cast(),
                                                    len99,
                                                    len99,
                                                );
                                                _rt::string_lift(bytes99)
                                            };
                                            V142::AuthorizationFailed(e142)
                                        }
                                        4 => {
                                            let e142 = {
                                                let l100 = i32::from(*ptr1.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V108;
                                                let v108 = match l100 {
                                                    0 => {
                                                        let e108 = {
                                                            let l101 = *ptr1.add(24).cast::<*mut u8>();
                                                            let l102 = *ptr1.add(28).cast::<usize>();
                                                            let len103 = l102;
                                                            let bytes103 = _rt::Vec::from_raw_parts(
                                                                l101.cast(),
                                                                len103,
                                                                len103,
                                                            );
                                                            _rt::string_lift(bytes103)
                                                        };
                                                        V108::StringValue(e108)
                                                    }
                                                    1 => {
                                                        let e108 = {
                                                            let l104 = *ptr1.add(24).cast::<i64>();
                                                            l104
                                                        };
                                                        V108::Int64(e108)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e108 = {
                                                            let l105 = *ptr1.add(24).cast::<*mut u8>();
                                                            let l106 = *ptr1.add(28).cast::<usize>();
                                                            let len107 = l106;
                                                            let bytes107 = _rt::Vec::from_raw_parts(
                                                                l105.cast(),
                                                                len107,
                                                                len107,
                                                            );
                                                            _rt::string_lift(bytes107)
                                                        };
                                                        V108::Uuid(e108)
                                                    }
                                                };
                                                v108
                                            };
                                            V142::ElementNotFound(e142)
                                        }
                                        5 => {
                                            let e142 = {
                                                let l109 = i32::from(*ptr1.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V117;
                                                let v117 = match l109 {
                                                    0 => {
                                                        let e117 = {
                                                            let l110 = *ptr1.add(24).cast::<*mut u8>();
                                                            let l111 = *ptr1.add(28).cast::<usize>();
                                                            let len112 = l111;
                                                            let bytes112 = _rt::Vec::from_raw_parts(
                                                                l110.cast(),
                                                                len112,
                                                                len112,
                                                            );
                                                            _rt::string_lift(bytes112)
                                                        };
                                                        V117::StringValue(e117)
                                                    }
                                                    1 => {
                                                        let e117 = {
                                                            let l113 = *ptr1.add(24).cast::<i64>();
                                                            l113
                                                        };
                                                        V117::Int64(e117)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e117 = {
                                                            let l114 = *ptr1.add(24).cast::<*mut u8>();
                                                            let l115 = *ptr1.add(28).cast::<usize>();
                                                            let len116 = l115;
                                                            let bytes116 = _rt::Vec::from_raw_parts(
                                                                l114.cast(),
                                                                len116,
                                                                len116,
                                                            );
                                                            _rt::string_lift(bytes116)
                                                        };
                                                        V117::Uuid(e117)
                                                    }
                                                };
                                                v117
                                            };
                                            V142::DuplicateElement(e142)
                                        }
                                        6 => {
                                            let e142 = {
                                                let l118 = *ptr1.add(16).cast::<*mut u8>();
                                                let l119 = *ptr1.add(20).cast::<usize>();
                                                let len120 = l119;
                                                let bytes120 = _rt::Vec::from_raw_parts(
                                                    l118.cast(),
                                                    len120,
                                                    len120,
                                                );
                                                _rt::string_lift(bytes120)
                                            };
                                            V142::SchemaViolation(e142)
                                        }
                                        7 => {
                                            let e142 = {
                                                let l121 = *ptr1.add(16).cast::<*mut u8>();
                                                let l122 = *ptr1.add(20).cast::<usize>();
                                                let len123 = l122;
                                                let bytes123 = _rt::Vec::from_raw_parts(
                                                    l121.cast(),
                                                    len123,
                                                    len123,
                                                );
                                                _rt::string_lift(bytes123)
                                            };
                                            V142::ConstraintViolation(e142)
                                        }
                                        8 => {
                                            let e142 = {
                                                let l124 = *ptr1.add(16).cast::<*mut u8>();
                                                let l125 = *ptr1.add(20).cast::<usize>();
                                                let len126 = l125;
                                                let bytes126 = _rt::Vec::from_raw_parts(
                                                    l124.cast(),
                                                    len126,
                                                    len126,
                                                );
                                                _rt::string_lift(bytes126)
                                            };
                                            V142::InvalidPropertyType(e142)
                                        }
                                        9 => {
                                            let e142 = {
                                                let l127 = *ptr1.add(16).cast::<*mut u8>();
                                                let l128 = *ptr1.add(20).cast::<usize>();
                                                let len129 = l128;
                                                let bytes129 = _rt::Vec::from_raw_parts(
                                                    l127.cast(),
                                                    len129,
                                                    len129,
                                                );
                                                _rt::string_lift(bytes129)
                                            };
                                            V142::InvalidQuery(e142)
                                        }
                                        10 => {
                                            let e142 = {
                                                let l130 = *ptr1.add(16).cast::<*mut u8>();
                                                let l131 = *ptr1.add(20).cast::<usize>();
                                                let len132 = l131;
                                                let bytes132 = _rt::Vec::from_raw_parts(
                                                    l130.cast(),
                                                    len132,
                                                    len132,
                                                );
                                                _rt::string_lift(bytes132)
                                            };
                                            V142::TransactionFailed(e142)
                                        }
                                        11 => V142::TransactionConflict,
                                        12 => V142::TransactionTimeout,
                                        13 => V142::DeadlockDetected,
                                        14 => V142::Timeout,
                                        15 => {
                                            let e142 = {
                                                let l133 = *ptr1.add(16).cast::<*mut u8>();
                                                let l134 = *ptr1.add(20).cast::<usize>();
                                                let len135 = l134;
                                                let bytes135 = _rt::Vec::from_raw_parts(
                                                    l133.cast(),
                                                    len135,
                                                    len135,
                                                );
                                                _rt::string_lift(bytes135)
                                            };
                                            V142::ResourceExhausted(e142)
                                        }
                                        16 => {
                                            let e142 = {
                                                let l136 = *ptr1.add(16).cast::<*mut u8>();
                                                let l137 = *ptr1.add(20).cast::<usize>();
                                                let len138 = l137;
                                                let bytes138 = _rt::Vec::from_raw_parts(
                                                    l136.cast(),
                                                    len138,
                                                    len138,
                                                );
                                                _rt::string_lift(bytes138)
                                            };
                                            V142::InternalError(e142)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 17, "invalid enum discriminant");
                                            let e142 = {
                                                let l139 = *ptr1.add(16).cast::<*mut u8>();
                                                let l140 = *ptr1.add(20).cast::<usize>();
                                                let len141 = l140;
                                                let bytes141 = _rt::Vec::from_raw_parts(
                                                    l139.cast(),
                                                    len141,
                                                    len141,
                                                );
                                                _rt::string_lift(bytes141)
                                            };
                                            V142::ServiceUnavailable(e142)
                                        }
                                    };
                                    v142
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl SchemaManager {
                #[allow(unused_unsafe, clippy::all)]
                /// Get edge label schema
                pub fn get_edge_label_schema(
                    &self,
                    label: &str,
                ) -> Result<Option<EdgeLabelSchema>, GraphError> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 64]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 64],
                        );
                        let vec0 = label;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:graph/schema@1.0.0")]
                        extern "C" {
                            #[link_name = "[method]schema-manager.get-edge-label-schema"]
                            fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0.cast_mut(), len0, ptr1);
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => {
                                let e = {
                                    let l3 = i32::from(*ptr1.add(8).cast::<u8>());
                                    match l3 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l4 = *ptr1.add(12).cast::<*mut u8>();
                                                let l5 = *ptr1.add(16).cast::<usize>();
                                                let len6 = l5;
                                                let bytes6 = _rt::Vec::from_raw_parts(
                                                    l4.cast(),
                                                    len6,
                                                    len6,
                                                );
                                                let l7 = *ptr1.add(20).cast::<*mut u8>();
                                                let l8 = *ptr1.add(24).cast::<usize>();
                                                let base82 = l7;
                                                let len82 = l8;
                                                let mut result82 = _rt::Vec::with_capacity(len82);
                                                for i in 0..len82 {
                                                    let base = base82.add(i * 64);
                                                    let e82 = {
                                                        let l9 = *base.add(0).cast::<*mut u8>();
                                                        let l10 = *base.add(4).cast::<usize>();
                                                        let len11 = l10;
                                                        let bytes11 = _rt::Vec::from_raw_parts(
                                                            l9.cast(),
                                                            len11,
                                                            len11,
                                                        );
                                                        let l12 = i32::from(*base.add(8).cast::<u8>());
                                                        let l13 = i32::from(*base.add(9).cast::<u8>());
                                                        let l14 = i32::from(*base.add(10).cast::<u8>());
                                                        let l15 = i32::from(*base.add(16).cast::<u8>());
                                                        PropertyDefinition {
                                                            name: _rt::string_lift(bytes11),
                                                            property_type: PropertyType::_lift(l12 as u8),
                                                            required: _rt::bool_lift(l13 as u8),
                                                            unique: _rt::bool_lift(l14 as u8),
                                                            default_value: match l15 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l16 = i32::from(*base.add(24).cast::<u8>());
                                                                        use super::super::super::golem::graph::types::PropertyValue as V81;
                                                                        let v81 = match l16 {
                                                                            0 => V81::NullValue,
                                                                            1 => {
                                                                                let e81 = {
                                                                                    let l17 = i32::from(*base.add(32).cast::<u8>());
                                                                                    _rt::bool_lift(l17 as u8)
                                                                                };
                                                                                V81::Boolean(e81)
                                                                            }
                                                                            2 => {
                                                                                let e81 = {
                                                                                    let l18 = i32::from(*base.add(32).cast::<i8>());
                                                                                    l18 as i8
                                                                                };
                                                                                V81::Int8(e81)
                                                                            }
                                                                            3 => {
                                                                                let e81 = {
                                                                                    let l19 = i32::from(*base.add(32).cast::<i16>());
                                                                                    l19 as i16
                                                                                };
                                                                                V81::Int16(e81)
                                                                            }
                                                                            4 => {
                                                                                let e81 = {
                                                                                    let l20 = *base.add(32).cast::<i32>();
                                                                                    l20
                                                                                };
                                                                                V81::Int32(e81)
                                                                            }
                                                                            5 => {
                                                                                let e81 = {
                                                                                    let l21 = *base.add(32).cast::<i64>();
                                                                                    l21
                                                                                };
                                                                                V81::Int64(e81)
                                                                            }
                                                                            6 => {
                                                                                let e81 = {
                                                                                    let l22 = i32::from(*base.add(32).cast::<u8>());
                                                                                    l22 as u8
                                                                                };
                                                                                V81::Uint8(e81)
                                                                            }
                                                                            7 => {
                                                                                let e81 = {
                                                                                    let l23 = i32::from(*base.add(32).cast::<u16>());
                                                                                    l23 as u16
                                                                                };
                                                                                V81::Uint16(e81)
                                                                            }
                                                                            8 => {
                                                                                let e81 = {
                                                                                    let l24 = *base.add(32).cast::<i32>();
                                                                                    l24 as u32
                                                                                };
                                                                                V81::Uint32(e81)
                                                                            }
                                                                            9 => {
                                                                                let e81 = {
                                                                                    let l25 = *base.add(32).cast::<i64>();
                                                                                    l25 as u64
                                                                                };
                                                                                V81::Uint64(e81)
                                                                            }
                                                                            10 => {
                                                                                let e81 = {
                                                                                    let l26 = *base.add(32).cast::<f32>();
                                                                                    l26
                                                                                };
                                                                                V81::Float32Value(e81)
                                                                            }
                                                                            11 => {
                                                                                let e81 = {
                                                                                    let l27 = *base.add(32).cast::<f64>();
                                                                                    l27
                                                                                };
                                                                                V81::Float64Value(e81)
                                                                            }
                                                                            12 => {
                                                                                let e81 = {
                                                                                    let l28 = *base.add(32).cast::<*mut u8>();
                                                                                    let l29 = *base.add(36).cast::<usize>();
                                                                                    let len30 = l29;
                                                                                    let bytes30 = _rt::Vec::from_raw_parts(
                                                                                        l28.cast(),
                                                                                        len30,
                                                                                        len30,
                                                                                    );
                                                                                    _rt::string_lift(bytes30)
                                                                                };
                                                                                V81::StringValue(e81)
                                                                            }
                                                                            13 => {
                                                                                let e81 = {
                                                                                    let l31 = *base.add(32).cast::<*mut u8>();
                                                                                    let l32 = *base.add(36).cast::<usize>();
                                                                                    let len33 = l32;
                                                                                    _rt::Vec::from_raw_parts(l31.cast(), len33, len33)
                                                                                };
                                                                                V81::Bytes(e81)
                                                                            }
                                                                            14 => {
                                                                                let e81 = {
                                                                                    let l34 = *base.add(32).cast::<i32>();
                                                                                    let l35 = i32::from(*base.add(36).cast::<u8>());
                                                                                    let l36 = i32::from(*base.add(37).cast::<u8>());
                                                                                    super::super::super::golem::graph::types::Date {
                                                                                        year: l34 as u32,
                                                                                        month: l35 as u8,
                                                                                        day: l36 as u8,
                                                                                    }
                                                                                };
                                                                                V81::Date(e81)
                                                                            }
                                                                            15 => {
                                                                                let e81 = {
                                                                                    let l37 = i32::from(*base.add(32).cast::<u8>());
                                                                                    let l38 = i32::from(*base.add(33).cast::<u8>());
                                                                                    let l39 = i32::from(*base.add(34).cast::<u8>());
                                                                                    let l40 = *base.add(36).cast::<i32>();
                                                                                    super::super::super::golem::graph::types::Time {
                                                                                        hour: l37 as u8,
                                                                                        minute: l38 as u8,
                                                                                        second: l39 as u8,
                                                                                        nanosecond: l40 as u32,
                                                                                    }
                                                                                };
                                                                                V81::Time(e81)
                                                                            }
                                                                            16 => {
                                                                                let e81 = {
                                                                                    let l41 = *base.add(32).cast::<i32>();
                                                                                    let l42 = i32::from(*base.add(36).cast::<u8>());
                                                                                    let l43 = i32::from(*base.add(37).cast::<u8>());
                                                                                    let l44 = i32::from(*base.add(40).cast::<u8>());
                                                                                    let l45 = i32::from(*base.add(41).cast::<u8>());
                                                                                    let l46 = i32::from(*base.add(42).cast::<u8>());
                                                                                    let l47 = *base.add(44).cast::<i32>();
                                                                                    let l48 = i32::from(*base.add(48).cast::<u8>());
                                                                                    super::super::super::golem::graph::types::Datetime {
                                                                                        date: super::super::super::golem::graph::types::Date {
                                                                                            year: l41 as u32,
                                                                                            month: l42 as u8,
                                                                                            day: l43 as u8,
                                                                                        },
                                                                                        time: super::super::super::golem::graph::types::Time {
                                                                                            hour: l44 as u8,
                                                                                            minute: l45 as u8,
                                                                                            second: l46 as u8,
                                                                                            nanosecond: l47 as u32,
                                                                                        },
                                                                                        timezone_offset_minutes: match l48 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l49 = i32::from(*base.add(50).cast::<i16>());
                                                                                                    l49 as i16
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        },
                                                                                    }
                                                                                };
                                                                                V81::Datetime(e81)
                                                                            }
                                                                            17 => {
                                                                                let e81 = {
                                                                                    let l50 = *base.add(32).cast::<i64>();
                                                                                    let l51 = *base.add(40).cast::<i32>();
                                                                                    super::super::super::golem::graph::types::Duration {
                                                                                        seconds: l50,
                                                                                        nanoseconds: l51 as u32,
                                                                                    }
                                                                                };
                                                                                V81::Duration(e81)
                                                                            }
                                                                            18 => {
                                                                                let e81 = {
                                                                                    let l52 = *base.add(32).cast::<f64>();
                                                                                    let l53 = *base.add(40).cast::<f64>();
                                                                                    let l54 = i32::from(*base.add(48).cast::<u8>());
                                                                                    super::super::super::golem::graph::types::Point {
                                                                                        longitude: l52,
                                                                                        latitude: l53,
                                                                                        altitude: match l54 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l55 = *base.add(56).cast::<f64>();
                                                                                                    l55
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        },
                                                                                    }
                                                                                };
                                                                                V81::Point(e81)
                                                                            }
                                                                            19 => {
                                                                                let e81 = {
                                                                                    let l56 = *base.add(32).cast::<*mut u8>();
                                                                                    let l57 = *base.add(36).cast::<usize>();
                                                                                    let base62 = l56;
                                                                                    let len62 = l57;
                                                                                    let mut result62 = _rt::Vec::with_capacity(len62);
                                                                                    for i in 0..len62 {
                                                                                        let base = base62.add(i * 32);
                                                                                        let e62 = {
                                                                                            let l58 = *base.add(0).cast::<f64>();
                                                                                            let l59 = *base.add(8).cast::<f64>();
                                                                                            let l60 = i32::from(*base.add(16).cast::<u8>());
                                                                                            super::super::super::golem::graph::types::Point {
                                                                                                longitude: l58,
                                                                                                latitude: l59,
                                                                                                altitude: match l60 {
                                                                                                    0 => None,
                                                                                                    1 => {
                                                                                                        let e = {
                                                                                                            let l61 = *base.add(24).cast::<f64>();
                                                                                                            l61
                                                                                                        };
                                                                                                        Some(e)
                                                                                                    }
                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                },
                                                                                            }
                                                                                        };
                                                                                        result62.push(e62);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base62, len62 * 32, 8);
                                                                                    super::super::super::golem::graph::types::Linestring {
                                                                                        coordinates: result62,
                                                                                    }
                                                                                };
                                                                                V81::Linestring(e81)
                                                                            }
                                                                            n => {
                                                                                debug_assert_eq!(n, 20, "invalid enum discriminant");
                                                                                let e81 = {
                                                                                    let l63 = *base.add(32).cast::<*mut u8>();
                                                                                    let l64 = *base.add(36).cast::<usize>();
                                                                                    let base69 = l63;
                                                                                    let len69 = l64;
                                                                                    let mut result69 = _rt::Vec::with_capacity(len69);
                                                                                    for i in 0..len69 {
                                                                                        let base = base69.add(i * 32);
                                                                                        let e69 = {
                                                                                            let l65 = *base.add(0).cast::<f64>();
                                                                                            let l66 = *base.add(8).cast::<f64>();
                                                                                            let l67 = i32::from(*base.add(16).cast::<u8>());
                                                                                            super::super::super::golem::graph::types::Point {
                                                                                                longitude: l65,
                                                                                                latitude: l66,
                                                                                                altitude: match l67 {
                                                                                                    0 => None,
                                                                                                    1 => {
                                                                                                        let e = {
                                                                                                            let l68 = *base.add(24).cast::<f64>();
                                                                                                            l68
                                                                                                        };
                                                                                                        Some(e)
                                                                                                    }
                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                },
                                                                                            }
                                                                                        };
                                                                                        result69.push(e69);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base69, len69 * 32, 8);
                                                                                    let l70 = i32::from(*base.add(40).cast::<u8>());
                                                                                    super::super::super::golem::graph::types::Polygon {
                                                                                        exterior: result69,
                                                                                        holes: match l70 {
                                                                                            0 => None,
                                                                                            1 => {
                                                                                                let e = {
                                                                                                    let l71 = *base.add(44).cast::<*mut u8>();
                                                                                                    let l72 = *base.add(48).cast::<usize>();
                                                                                                    let base80 = l71;
                                                                                                    let len80 = l72;
                                                                                                    let mut result80 = _rt::Vec::with_capacity(len80);
                                                                                                    for i in 0..len80 {
                                                                                                        let base = base80.add(i * 8);
                                                                                                        let e80 = {
                                                                                                            let l73 = *base.add(0).cast::<*mut u8>();
                                                                                                            let l74 = *base.add(4).cast::<usize>();
                                                                                                            let base79 = l73;
                                                                                                            let len79 = l74;
                                                                                                            let mut result79 = _rt::Vec::with_capacity(len79);
                                                                                                            for i in 0..len79 {
                                                                                                                let base = base79.add(i * 32);
                                                                                                                let e79 = {
                                                                                                                    let l75 = *base.add(0).cast::<f64>();
                                                                                                                    let l76 = *base.add(8).cast::<f64>();
                                                                                                                    let l77 = i32::from(*base.add(16).cast::<u8>());
                                                                                                                    super::super::super::golem::graph::types::Point {
                                                                                                                        longitude: l75,
                                                                                                                        latitude: l76,
                                                                                                                        altitude: match l77 {
                                                                                                                            0 => None,
                                                                                                                            1 => {
                                                                                                                                let e = {
                                                                                                                                    let l78 = *base.add(24).cast::<f64>();
                                                                                                                                    l78
                                                                                                                                };
                                                                                                                                Some(e)
                                                                                                                            }
                                                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                                                        },
                                                                                                                    }
                                                                                                                };
                                                                                                                result79.push(e79);
                                                                                                            }
                                                                                                            _rt::cabi_dealloc(base79, len79 * 32, 8);
                                                                                                            result79
                                                                                                        };
                                                                                                        result80.push(e80);
                                                                                                    }
                                                                                                    _rt::cabi_dealloc(base80, len80 * 8, 4);
                                                                                                    result80
                                                                                                };
                                                                                                Some(e)
                                                                                            }
                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                        },
                                                                                    }
                                                                                };
                                                                                V81::Polygon(e81)
                                                                            }
                                                                        };
                                                                        v81
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                        }
                                                    };
                                                    result82.push(e82);
                                                }
                                                _rt::cabi_dealloc(base82, len82 * 64, 8);
                                                let l83 = i32::from(*ptr1.add(28).cast::<u8>());
                                                let l90 = i32::from(*ptr1.add(40).cast::<u8>());
                                                let l97 = i32::from(*ptr1.add(52).cast::<u8>());
                                                EdgeLabelSchema {
                                                    label: _rt::string_lift(bytes6),
                                                    properties: result82,
                                                    from_labels: match l83 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l84 = *ptr1.add(32).cast::<*mut u8>();
                                                                let l85 = *ptr1.add(36).cast::<usize>();
                                                                let base89 = l84;
                                                                let len89 = l85;
                                                                let mut result89 = _rt::Vec::with_capacity(len89);
                                                                for i in 0..len89 {
                                                                    let base = base89.add(i * 8);
                                                                    let e89 = {
                                                                        let l86 = *base.add(0).cast::<*mut u8>();
                                                                        let l87 = *base.add(4).cast::<usize>();
                                                                        let len88 = l87;
                                                                        let bytes88 = _rt::Vec::from_raw_parts(
                                                                            l86.cast(),
                                                                            len88,
                                                                            len88,
                                                                        );
                                                                        _rt::string_lift(bytes88)
                                                                    };
                                                                    result89.push(e89);
                                                                }
                                                                _rt::cabi_dealloc(base89, len89 * 8, 4);
                                                                result89
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                    to_labels: match l90 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l91 = *ptr1.add(44).cast::<*mut u8>();
                                                                let l92 = *ptr1.add(48).cast::<usize>();
                                                                let base96 = l91;
                                                                let len96 = l92;
                                                                let mut result96 = _rt::Vec::with_capacity(len96);
                                                                for i in 0..len96 {
                                                                    let base = base96.add(i * 8);
                                                                    let e96 = {
                                                                        let l93 = *base.add(0).cast::<*mut u8>();
                                                                        let l94 = *base.add(4).cast::<usize>();
                                                                        let len95 = l94;
                                                                        let bytes95 = _rt::Vec::from_raw_parts(
                                                                            l93.cast(),
                                                                            len95,
                                                                            len95,
                                                                        );
                                                                        _rt::string_lift(bytes95)
                                                                    };
                                                                    result96.push(e96);
                                                                }
                                                                _rt::cabi_dealloc(base96, len96 * 8, 4);
                                                                result96
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                    container: match l97 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l98 = *ptr1.add(56).cast::<*mut u8>();
                                                                let l99 = *ptr1.add(60).cast::<usize>();
                                                                let len100 = l99;
                                                                let bytes100 = _rt::Vec::from_raw_parts(
                                                                    l98.cast(),
                                                                    len100,
                                                                    len100,
                                                                );
                                                                _rt::string_lift(bytes100)
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                }
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    }
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l101 = i32::from(*ptr1.add(8).cast::<u8>());
                                    use super::super::super::golem::graph::errors::GraphError as V156;
                                    let v156 = match l101 {
                                        0 => {
                                            let e156 = {
                                                let l102 = *ptr1.add(16).cast::<*mut u8>();
                                                let l103 = *ptr1.add(20).cast::<usize>();
                                                let len104 = l103;
                                                let bytes104 = _rt::Vec::from_raw_parts(
                                                    l102.cast(),
                                                    len104,
                                                    len104,
                                                );
                                                _rt::string_lift(bytes104)
                                            };
                                            V156::UnsupportedOperation(e156)
                                        }
                                        1 => {
                                            let e156 = {
                                                let l105 = *ptr1.add(16).cast::<*mut u8>();
                                                let l106 = *ptr1.add(20).cast::<usize>();
                                                let len107 = l106;
                                                let bytes107 = _rt::Vec::from_raw_parts(
                                                    l105.cast(),
                                                    len107,
                                                    len107,
                                                );
                                                _rt::string_lift(bytes107)
                                            };
                                            V156::ConnectionFailed(e156)
                                        }
                                        2 => {
                                            let e156 = {
                                                let l108 = *ptr1.add(16).cast::<*mut u8>();
                                                let l109 = *ptr1.add(20).cast::<usize>();
                                                let len110 = l109;
                                                let bytes110 = _rt::Vec::from_raw_parts(
                                                    l108.cast(),
                                                    len110,
                                                    len110,
                                                );
                                                _rt::string_lift(bytes110)
                                            };
                                            V156::AuthenticationFailed(e156)
                                        }
                                        3 => {
                                            let e156 = {
                                                let l111 = *ptr1.add(16).cast::<*mut u8>();
                                                let l112 = *ptr1.add(20).cast::<usize>();
                                                let len113 = l112;
                                                let bytes113 = _rt::Vec::from_raw_parts(
                                                    l111.cast(),
                                                    len113,
                                                    len113,
                                                );
                                                _rt::string_lift(bytes113)
                                            };
                                            V156::AuthorizationFailed(e156)
                                        }
                                        4 => {
                                            let e156 = {
                                                let l114 = i32::from(*ptr1.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V122;
                                                let v122 = match l114 {
                                                    0 => {
                                                        let e122 = {
                                                            let l115 = *ptr1.add(24).cast::<*mut u8>();
                                                            let l116 = *ptr1.add(28).cast::<usize>();
                                                            let len117 = l116;
                                                            let bytes117 = _rt::Vec::from_raw_parts(
                                                                l115.cast(),
                                                                len117,
                                                                len117,
                                                            );
                                                            _rt::string_lift(bytes117)
                                                        };
                                                        V122::StringValue(e122)
                                                    }
                                                    1 => {
                                                        let e122 = {
                                                            let l118 = *ptr1.add(24).cast::<i64>();
                                                            l118
                                                        };
                                                        V122::Int64(e122)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e122 = {
                                                            let l119 = *ptr1.add(24).cast::<*mut u8>();
                                                            let l120 = *ptr1.add(28).cast::<usize>();
                                                            let len121 = l120;
                                                            let bytes121 = _rt::Vec::from_raw_parts(
                                                                l119.cast(),
                                                                len121,
                                                                len121,
                                                            );
                                                            _rt::string_lift(bytes121)
                                                        };
                                                        V122::Uuid(e122)
                                                    }
                                                };
                                                v122
                                            };
                                            V156::ElementNotFound(e156)
                                        }
                                        5 => {
                                            let e156 = {
                                                let l123 = i32::from(*ptr1.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V131;
                                                let v131 = match l123 {
                                                    0 => {
                                                        let e131 = {
                                                            let l124 = *ptr1.add(24).cast::<*mut u8>();
                                                            let l125 = *ptr1.add(28).cast::<usize>();
                                                            let len126 = l125;
                                                            let bytes126 = _rt::Vec::from_raw_parts(
                                                                l124.cast(),
                                                                len126,
                                                                len126,
                                                            );
                                                            _rt::string_lift(bytes126)
                                                        };
                                                        V131::StringValue(e131)
                                                    }
                                                    1 => {
                                                        let e131 = {
                                                            let l127 = *ptr1.add(24).cast::<i64>();
                                                            l127
                                                        };
                                                        V131::Int64(e131)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e131 = {
                                                            let l128 = *ptr1.add(24).cast::<*mut u8>();
                                                            let l129 = *ptr1.add(28).cast::<usize>();
                                                            let len130 = l129;
                                                            let bytes130 = _rt::Vec::from_raw_parts(
                                                                l128.cast(),
                                                                len130,
                                                                len130,
                                                            );
                                                            _rt::string_lift(bytes130)
                                                        };
                                                        V131::Uuid(e131)
                                                    }
                                                };
                                                v131
                                            };
                                            V156::DuplicateElement(e156)
                                        }
                                        6 => {
                                            let e156 = {
                                                let l132 = *ptr1.add(16).cast::<*mut u8>();
                                                let l133 = *ptr1.add(20).cast::<usize>();
                                                let len134 = l133;
                                                let bytes134 = _rt::Vec::from_raw_parts(
                                                    l132.cast(),
                                                    len134,
                                                    len134,
                                                );
                                                _rt::string_lift(bytes134)
                                            };
                                            V156::SchemaViolation(e156)
                                        }
                                        7 => {
                                            let e156 = {
                                                let l135 = *ptr1.add(16).cast::<*mut u8>();
                                                let l136 = *ptr1.add(20).cast::<usize>();
                                                let len137 = l136;
                                                let bytes137 = _rt::Vec::from_raw_parts(
                                                    l135.cast(),
                                                    len137,
                                                    len137,
                                                );
                                                _rt::string_lift(bytes137)
                                            };
                                            V156::ConstraintViolation(e156)
                                        }
                                        8 => {
                                            let e156 = {
                                                let l138 = *ptr1.add(16).cast::<*mut u8>();
                                                let l139 = *ptr1.add(20).cast::<usize>();
                                                let len140 = l139;
                                                let bytes140 = _rt::Vec::from_raw_parts(
                                                    l138.cast(),
                                                    len140,
                                                    len140,
                                                );
                                                _rt::string_lift(bytes140)
                                            };
                                            V156::InvalidPropertyType(e156)
                                        }
                                        9 => {
                                            let e156 = {
                                                let l141 = *ptr1.add(16).cast::<*mut u8>();
                                                let l142 = *ptr1.add(20).cast::<usize>();
                                                let len143 = l142;
                                                let bytes143 = _rt::Vec::from_raw_parts(
                                                    l141.cast(),
                                                    len143,
                                                    len143,
                                                );
                                                _rt::string_lift(bytes143)
                                            };
                                            V156::InvalidQuery(e156)
                                        }
                                        10 => {
                                            let e156 = {
                                                let l144 = *ptr1.add(16).cast::<*mut u8>();
                                                let l145 = *ptr1.add(20).cast::<usize>();
                                                let len146 = l145;
                                                let bytes146 = _rt::Vec::from_raw_parts(
                                                    l144.cast(),
                                                    len146,
                                                    len146,
                                                );
                                                _rt::string_lift(bytes146)
                                            };
                                            V156::TransactionFailed(e156)
                                        }
                                        11 => V156::TransactionConflict,
                                        12 => V156::TransactionTimeout,
                                        13 => V156::DeadlockDetected,
                                        14 => V156::Timeout,
                                        15 => {
                                            let e156 = {
                                                let l147 = *ptr1.add(16).cast::<*mut u8>();
                                                let l148 = *ptr1.add(20).cast::<usize>();
                                                let len149 = l148;
                                                let bytes149 = _rt::Vec::from_raw_parts(
                                                    l147.cast(),
                                                    len149,
                                                    len149,
                                                );
                                                _rt::string_lift(bytes149)
                                            };
                                            V156::ResourceExhausted(e156)
                                        }
                                        16 => {
                                            let e156 = {
                                                let l150 = *ptr1.add(16).cast::<*mut u8>();
                                                let l151 = *ptr1.add(20).cast::<usize>();
                                                let len152 = l151;
                                                let bytes152 = _rt::Vec::from_raw_parts(
                                                    l150.cast(),
                                                    len152,
                                                    len152,
                                                );
                                                _rt::string_lift(bytes152)
                                            };
                                            V156::InternalError(e156)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 17, "invalid enum discriminant");
                                            let e156 = {
                                                let l153 = *ptr1.add(16).cast::<*mut u8>();
                                                let l154 = *ptr1.add(20).cast::<usize>();
                                                let len155 = l154;
                                                let bytes155 = _rt::Vec::from_raw_parts(
                                                    l153.cast(),
                                                    len155,
                                                    len155,
                                                );
                                                _rt::string_lift(bytes155)
                                            };
                                            V156::ServiceUnavailable(e156)
                                        }
                                    };
                                    v156
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl SchemaManager {
                #[allow(unused_unsafe, clippy::all)]
                /// List all vertex labels
                pub fn list_vertex_labels(
                    &self,
                ) -> Result<_rt::Vec<_rt::String>, GraphError> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 32]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 32],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:graph/schema@1.0.0")]
                        extern "C" {
                            #[link_name = "[method]schema-manager.list-vertex-labels"]
                            fn wit_import(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(8).cast::<*mut u8>();
                                    let l3 = *ptr0.add(12).cast::<usize>();
                                    let base7 = l2;
                                    let len7 = l3;
                                    let mut result7 = _rt::Vec::with_capacity(len7);
                                    for i in 0..len7 {
                                        let base = base7.add(i * 8);
                                        let e7 = {
                                            let l4 = *base.add(0).cast::<*mut u8>();
                                            let l5 = *base.add(4).cast::<usize>();
                                            let len6 = l5;
                                            let bytes6 = _rt::Vec::from_raw_parts(
                                                l4.cast(),
                                                len6,
                                                len6,
                                            );
                                            _rt::string_lift(bytes6)
                                        };
                                        result7.push(e7);
                                    }
                                    _rt::cabi_dealloc(base7, len7 * 8, 4);
                                    result7
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l8 = i32::from(*ptr0.add(8).cast::<u8>());
                                    use super::super::super::golem::graph::errors::GraphError as V63;
                                    let v63 = match l8 {
                                        0 => {
                                            let e63 = {
                                                let l9 = *ptr0.add(16).cast::<*mut u8>();
                                                let l10 = *ptr0.add(20).cast::<usize>();
                                                let len11 = l10;
                                                let bytes11 = _rt::Vec::from_raw_parts(
                                                    l9.cast(),
                                                    len11,
                                                    len11,
                                                );
                                                _rt::string_lift(bytes11)
                                            };
                                            V63::UnsupportedOperation(e63)
                                        }
                                        1 => {
                                            let e63 = {
                                                let l12 = *ptr0.add(16).cast::<*mut u8>();
                                                let l13 = *ptr0.add(20).cast::<usize>();
                                                let len14 = l13;
                                                let bytes14 = _rt::Vec::from_raw_parts(
                                                    l12.cast(),
                                                    len14,
                                                    len14,
                                                );
                                                _rt::string_lift(bytes14)
                                            };
                                            V63::ConnectionFailed(e63)
                                        }
                                        2 => {
                                            let e63 = {
                                                let l15 = *ptr0.add(16).cast::<*mut u8>();
                                                let l16 = *ptr0.add(20).cast::<usize>();
                                                let len17 = l16;
                                                let bytes17 = _rt::Vec::from_raw_parts(
                                                    l15.cast(),
                                                    len17,
                                                    len17,
                                                );
                                                _rt::string_lift(bytes17)
                                            };
                                            V63::AuthenticationFailed(e63)
                                        }
                                        3 => {
                                            let e63 = {
                                                let l18 = *ptr0.add(16).cast::<*mut u8>();
                                                let l19 = *ptr0.add(20).cast::<usize>();
                                                let len20 = l19;
                                                let bytes20 = _rt::Vec::from_raw_parts(
                                                    l18.cast(),
                                                    len20,
                                                    len20,
                                                );
                                                _rt::string_lift(bytes20)
                                            };
                                            V63::AuthorizationFailed(e63)
                                        }
                                        4 => {
                                            let e63 = {
                                                let l21 = i32::from(*ptr0.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V29;
                                                let v29 = match l21 {
                                                    0 => {
                                                        let e29 = {
                                                            let l22 = *ptr0.add(24).cast::<*mut u8>();
                                                            let l23 = *ptr0.add(28).cast::<usize>();
                                                            let len24 = l23;
                                                            let bytes24 = _rt::Vec::from_raw_parts(
                                                                l22.cast(),
                                                                len24,
                                                                len24,
                                                            );
                                                            _rt::string_lift(bytes24)
                                                        };
                                                        V29::StringValue(e29)
                                                    }
                                                    1 => {
                                                        let e29 = {
                                                            let l25 = *ptr0.add(24).cast::<i64>();
                                                            l25
                                                        };
                                                        V29::Int64(e29)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e29 = {
                                                            let l26 = *ptr0.add(24).cast::<*mut u8>();
                                                            let l27 = *ptr0.add(28).cast::<usize>();
                                                            let len28 = l27;
                                                            let bytes28 = _rt::Vec::from_raw_parts(
                                                                l26.cast(),
                                                                len28,
                                                                len28,
                                                            );
                                                            _rt::string_lift(bytes28)
                                                        };
                                                        V29::Uuid(e29)
                                                    }
                                                };
                                                v29
                                            };
                                            V63::ElementNotFound(e63)
                                        }
                                        5 => {
                                            let e63 = {
                                                let l30 = i32::from(*ptr0.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V38;
                                                let v38 = match l30 {
                                                    0 => {
                                                        let e38 = {
                                                            let l31 = *ptr0.add(24).cast::<*mut u8>();
                                                            let l32 = *ptr0.add(28).cast::<usize>();
                                                            let len33 = l32;
                                                            let bytes33 = _rt::Vec::from_raw_parts(
                                                                l31.cast(),
                                                                len33,
                                                                len33,
                                                            );
                                                            _rt::string_lift(bytes33)
                                                        };
                                                        V38::StringValue(e38)
                                                    }
                                                    1 => {
                                                        let e38 = {
                                                            let l34 = *ptr0.add(24).cast::<i64>();
                                                            l34
                                                        };
                                                        V38::Int64(e38)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e38 = {
                                                            let l35 = *ptr0.add(24).cast::<*mut u8>();
                                                            let l36 = *ptr0.add(28).cast::<usize>();
                                                            let len37 = l36;
                                                            let bytes37 = _rt::Vec::from_raw_parts(
                                                                l35.cast(),
                                                                len37,
                                                                len37,
                                                            );
                                                            _rt::string_lift(bytes37)
                                                        };
                                                        V38::Uuid(e38)
                                                    }
                                                };
                                                v38
                                            };
                                            V63::DuplicateElement(e63)
                                        }
                                        6 => {
                                            let e63 = {
                                                let l39 = *ptr0.add(16).cast::<*mut u8>();
                                                let l40 = *ptr0.add(20).cast::<usize>();
                                                let len41 = l40;
                                                let bytes41 = _rt::Vec::from_raw_parts(
                                                    l39.cast(),
                                                    len41,
                                                    len41,
                                                );
                                                _rt::string_lift(bytes41)
                                            };
                                            V63::SchemaViolation(e63)
                                        }
                                        7 => {
                                            let e63 = {
                                                let l42 = *ptr0.add(16).cast::<*mut u8>();
                                                let l43 = *ptr0.add(20).cast::<usize>();
                                                let len44 = l43;
                                                let bytes44 = _rt::Vec::from_raw_parts(
                                                    l42.cast(),
                                                    len44,
                                                    len44,
                                                );
                                                _rt::string_lift(bytes44)
                                            };
                                            V63::ConstraintViolation(e63)
                                        }
                                        8 => {
                                            let e63 = {
                                                let l45 = *ptr0.add(16).cast::<*mut u8>();
                                                let l46 = *ptr0.add(20).cast::<usize>();
                                                let len47 = l46;
                                                let bytes47 = _rt::Vec::from_raw_parts(
                                                    l45.cast(),
                                                    len47,
                                                    len47,
                                                );
                                                _rt::string_lift(bytes47)
                                            };
                                            V63::InvalidPropertyType(e63)
                                        }
                                        9 => {
                                            let e63 = {
                                                let l48 = *ptr0.add(16).cast::<*mut u8>();
                                                let l49 = *ptr0.add(20).cast::<usize>();
                                                let len50 = l49;
                                                let bytes50 = _rt::Vec::from_raw_parts(
                                                    l48.cast(),
                                                    len50,
                                                    len50,
                                                );
                                                _rt::string_lift(bytes50)
                                            };
                                            V63::InvalidQuery(e63)
                                        }
                                        10 => {
                                            let e63 = {
                                                let l51 = *ptr0.add(16).cast::<*mut u8>();
                                                let l52 = *ptr0.add(20).cast::<usize>();
                                                let len53 = l52;
                                                let bytes53 = _rt::Vec::from_raw_parts(
                                                    l51.cast(),
                                                    len53,
                                                    len53,
                                                );
                                                _rt::string_lift(bytes53)
                                            };
                                            V63::TransactionFailed(e63)
                                        }
                                        11 => V63::TransactionConflict,
                                        12 => V63::TransactionTimeout,
                                        13 => V63::DeadlockDetected,
                                        14 => V63::Timeout,
                                        15 => {
                                            let e63 = {
                                                let l54 = *ptr0.add(16).cast::<*mut u8>();
                                                let l55 = *ptr0.add(20).cast::<usize>();
                                                let len56 = l55;
                                                let bytes56 = _rt::Vec::from_raw_parts(
                                                    l54.cast(),
                                                    len56,
                                                    len56,
                                                );
                                                _rt::string_lift(bytes56)
                                            };
                                            V63::ResourceExhausted(e63)
                                        }
                                        16 => {
                                            let e63 = {
                                                let l57 = *ptr0.add(16).cast::<*mut u8>();
                                                let l58 = *ptr0.add(20).cast::<usize>();
                                                let len59 = l58;
                                                let bytes59 = _rt::Vec::from_raw_parts(
                                                    l57.cast(),
                                                    len59,
                                                    len59,
                                                );
                                                _rt::string_lift(bytes59)
                                            };
                                            V63::InternalError(e63)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 17, "invalid enum discriminant");
                                            let e63 = {
                                                let l60 = *ptr0.add(16).cast::<*mut u8>();
                                                let l61 = *ptr0.add(20).cast::<usize>();
                                                let len62 = l61;
                                                let bytes62 = _rt::Vec::from_raw_parts(
                                                    l60.cast(),
                                                    len62,
                                                    len62,
                                                );
                                                _rt::string_lift(bytes62)
                                            };
                                            V63::ServiceUnavailable(e63)
                                        }
                                    };
                                    v63
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl SchemaManager {
                #[allow(unused_unsafe, clippy::all)]
                /// List all edge labels
                pub fn list_edge_labels(
                    &self,
                ) -> Result<_rt::Vec<_rt::String>, GraphError> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 32]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 32],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:graph/schema@1.0.0")]
                        extern "C" {
                            #[link_name = "[method]schema-manager.list-edge-labels"]
                            fn wit_import(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(8).cast::<*mut u8>();
                                    let l3 = *ptr0.add(12).cast::<usize>();
                                    let base7 = l2;
                                    let len7 = l3;
                                    let mut result7 = _rt::Vec::with_capacity(len7);
                                    for i in 0..len7 {
                                        let base = base7.add(i * 8);
                                        let e7 = {
                                            let l4 = *base.add(0).cast::<*mut u8>();
                                            let l5 = *base.add(4).cast::<usize>();
                                            let len6 = l5;
                                            let bytes6 = _rt::Vec::from_raw_parts(
                                                l4.cast(),
                                                len6,
                                                len6,
                                            );
                                            _rt::string_lift(bytes6)
                                        };
                                        result7.push(e7);
                                    }
                                    _rt::cabi_dealloc(base7, len7 * 8, 4);
                                    result7
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l8 = i32::from(*ptr0.add(8).cast::<u8>());
                                    use super::super::super::golem::graph::errors::GraphError as V63;
                                    let v63 = match l8 {
                                        0 => {
                                            let e63 = {
                                                let l9 = *ptr0.add(16).cast::<*mut u8>();
                                                let l10 = *ptr0.add(20).cast::<usize>();
                                                let len11 = l10;
                                                let bytes11 = _rt::Vec::from_raw_parts(
                                                    l9.cast(),
                                                    len11,
                                                    len11,
                                                );
                                                _rt::string_lift(bytes11)
                                            };
                                            V63::UnsupportedOperation(e63)
                                        }
                                        1 => {
                                            let e63 = {
                                                let l12 = *ptr0.add(16).cast::<*mut u8>();
                                                let l13 = *ptr0.add(20).cast::<usize>();
                                                let len14 = l13;
                                                let bytes14 = _rt::Vec::from_raw_parts(
                                                    l12.cast(),
                                                    len14,
                                                    len14,
                                                );
                                                _rt::string_lift(bytes14)
                                            };
                                            V63::ConnectionFailed(e63)
                                        }
                                        2 => {
                                            let e63 = {
                                                let l15 = *ptr0.add(16).cast::<*mut u8>();
                                                let l16 = *ptr0.add(20).cast::<usize>();
                                                let len17 = l16;
                                                let bytes17 = _rt::Vec::from_raw_parts(
                                                    l15.cast(),
                                                    len17,
                                                    len17,
                                                );
                                                _rt::string_lift(bytes17)
                                            };
                                            V63::AuthenticationFailed(e63)
                                        }
                                        3 => {
                                            let e63 = {
                                                let l18 = *ptr0.add(16).cast::<*mut u8>();
                                                let l19 = *ptr0.add(20).cast::<usize>();
                                                let len20 = l19;
                                                let bytes20 = _rt::Vec::from_raw_parts(
                                                    l18.cast(),
                                                    len20,
                                                    len20,
                                                );
                                                _rt::string_lift(bytes20)
                                            };
                                            V63::AuthorizationFailed(e63)
                                        }
                                        4 => {
                                            let e63 = {
                                                let l21 = i32::from(*ptr0.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V29;
                                                let v29 = match l21 {
                                                    0 => {
                                                        let e29 = {
                                                            let l22 = *ptr0.add(24).cast::<*mut u8>();
                                                            let l23 = *ptr0.add(28).cast::<usize>();
                                                            let len24 = l23;
                                                            let bytes24 = _rt::Vec::from_raw_parts(
                                                                l22.cast(),
                                                                len24,
                                                                len24,
                                                            );
                                                            _rt::string_lift(bytes24)
                                                        };
                                                        V29::StringValue(e29)
                                                    }
                                                    1 => {
                                                        let e29 = {
                                                            let l25 = *ptr0.add(24).cast::<i64>();
                                                            l25
                                                        };
                                                        V29::Int64(e29)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e29 = {
                                                            let l26 = *ptr0.add(24).cast::<*mut u8>();
                                                            let l27 = *ptr0.add(28).cast::<usize>();
                                                            let len28 = l27;
                                                            let bytes28 = _rt::Vec::from_raw_parts(
                                                                l26.cast(),
                                                                len28,
                                                                len28,
                                                            );
                                                            _rt::string_lift(bytes28)
                                                        };
                                                        V29::Uuid(e29)
                                                    }
                                                };
                                                v29
                                            };
                                            V63::ElementNotFound(e63)
                                        }
                                        5 => {
                                            let e63 = {
                                                let l30 = i32::from(*ptr0.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V38;
                                                let v38 = match l30 {
                                                    0 => {
                                                        let e38 = {
                                                            let l31 = *ptr0.add(24).cast::<*mut u8>();
                                                            let l32 = *ptr0.add(28).cast::<usize>();
                                                            let len33 = l32;
                                                            let bytes33 = _rt::Vec::from_raw_parts(
                                                                l31.cast(),
                                                                len33,
                                                                len33,
                                                            );
                                                            _rt::string_lift(bytes33)
                                                        };
                                                        V38::StringValue(e38)
                                                    }
                                                    1 => {
                                                        let e38 = {
                                                            let l34 = *ptr0.add(24).cast::<i64>();
                                                            l34
                                                        };
                                                        V38::Int64(e38)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e38 = {
                                                            let l35 = *ptr0.add(24).cast::<*mut u8>();
                                                            let l36 = *ptr0.add(28).cast::<usize>();
                                                            let len37 = l36;
                                                            let bytes37 = _rt::Vec::from_raw_parts(
                                                                l35.cast(),
                                                                len37,
                                                                len37,
                                                            );
                                                            _rt::string_lift(bytes37)
                                                        };
                                                        V38::Uuid(e38)
                                                    }
                                                };
                                                v38
                                            };
                                            V63::DuplicateElement(e63)
                                        }
                                        6 => {
                                            let e63 = {
                                                let l39 = *ptr0.add(16).cast::<*mut u8>();
                                                let l40 = *ptr0.add(20).cast::<usize>();
                                                let len41 = l40;
                                                let bytes41 = _rt::Vec::from_raw_parts(
                                                    l39.cast(),
                                                    len41,
                                                    len41,
                                                );
                                                _rt::string_lift(bytes41)
                                            };
                                            V63::SchemaViolation(e63)
                                        }
                                        7 => {
                                            let e63 = {
                                                let l42 = *ptr0.add(16).cast::<*mut u8>();
                                                let l43 = *ptr0.add(20).cast::<usize>();
                                                let len44 = l43;
                                                let bytes44 = _rt::Vec::from_raw_parts(
                                                    l42.cast(),
                                                    len44,
                                                    len44,
                                                );
                                                _rt::string_lift(bytes44)
                                            };
                                            V63::ConstraintViolation(e63)
                                        }
                                        8 => {
                                            let e63 = {
                                                let l45 = *ptr0.add(16).cast::<*mut u8>();
                                                let l46 = *ptr0.add(20).cast::<usize>();
                                                let len47 = l46;
                                                let bytes47 = _rt::Vec::from_raw_parts(
                                                    l45.cast(),
                                                    len47,
                                                    len47,
                                                );
                                                _rt::string_lift(bytes47)
                                            };
                                            V63::InvalidPropertyType(e63)
                                        }
                                        9 => {
                                            let e63 = {
                                                let l48 = *ptr0.add(16).cast::<*mut u8>();
                                                let l49 = *ptr0.add(20).cast::<usize>();
                                                let len50 = l49;
                                                let bytes50 = _rt::Vec::from_raw_parts(
                                                    l48.cast(),
                                                    len50,
                                                    len50,
                                                );
                                                _rt::string_lift(bytes50)
                                            };
                                            V63::InvalidQuery(e63)
                                        }
                                        10 => {
                                            let e63 = {
                                                let l51 = *ptr0.add(16).cast::<*mut u8>();
                                                let l52 = *ptr0.add(20).cast::<usize>();
                                                let len53 = l52;
                                                let bytes53 = _rt::Vec::from_raw_parts(
                                                    l51.cast(),
                                                    len53,
                                                    len53,
                                                );
                                                _rt::string_lift(bytes53)
                                            };
                                            V63::TransactionFailed(e63)
                                        }
                                        11 => V63::TransactionConflict,
                                        12 => V63::TransactionTimeout,
                                        13 => V63::DeadlockDetected,
                                        14 => V63::Timeout,
                                        15 => {
                                            let e63 = {
                                                let l54 = *ptr0.add(16).cast::<*mut u8>();
                                                let l55 = *ptr0.add(20).cast::<usize>();
                                                let len56 = l55;
                                                let bytes56 = _rt::Vec::from_raw_parts(
                                                    l54.cast(),
                                                    len56,
                                                    len56,
                                                );
                                                _rt::string_lift(bytes56)
                                            };
                                            V63::ResourceExhausted(e63)
                                        }
                                        16 => {
                                            let e63 = {
                                                let l57 = *ptr0.add(16).cast::<*mut u8>();
                                                let l58 = *ptr0.add(20).cast::<usize>();
                                                let len59 = l58;
                                                let bytes59 = _rt::Vec::from_raw_parts(
                                                    l57.cast(),
                                                    len59,
                                                    len59,
                                                );
                                                _rt::string_lift(bytes59)
                                            };
                                            V63::InternalError(e63)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 17, "invalid enum discriminant");
                                            let e63 = {
                                                let l60 = *ptr0.add(16).cast::<*mut u8>();
                                                let l61 = *ptr0.add(20).cast::<usize>();
                                                let len62 = l61;
                                                let bytes62 = _rt::Vec::from_raw_parts(
                                                    l60.cast(),
                                                    len62,
                                                    len62,
                                                );
                                                _rt::string_lift(bytes62)
                                            };
                                            V63::ServiceUnavailable(e63)
                                        }
                                    };
                                    v63
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl SchemaManager {
                #[allow(unused_unsafe, clippy::all)]
                /// Create index
                pub fn create_index(
                    &self,
                    index: &IndexDefinition,
                ) -> Result<(), GraphError> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 32]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 32],
                        );
                        let IndexDefinition {
                            name: name0,
                            label: label0,
                            properties: properties0,
                            index_type: index_type0,
                            unique: unique0,
                            container: container0,
                        } = index;
                        let vec1 = name0;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        let vec2 = label0;
                        let ptr2 = vec2.as_ptr().cast::<u8>();
                        let len2 = vec2.len();
                        let vec4 = properties0;
                        let len4 = vec4.len();
                        let layout4 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec4.len() * 8,
                            4,
                        );
                        let result4 = if layout4.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout4).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout4);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec4.into_iter().enumerate() {
                            let base = result4.add(i * 8);
                            {
                                let vec3 = e;
                                let ptr3 = vec3.as_ptr().cast::<u8>();
                                let len3 = vec3.len();
                                *base.add(4).cast::<usize>() = len3;
                                *base.add(0).cast::<*mut u8>() = ptr3.cast_mut();
                            }
                        }
                        let (result6_0, result6_1, result6_2) = match container0 {
                            Some(e) => {
                                let vec5 = e;
                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                let len5 = vec5.len();
                                (1i32, ptr5.cast_mut(), len5)
                            }
                            None => (0i32, ::core::ptr::null_mut(), 0usize),
                        };
                        let ptr7 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:graph/schema@1.0.0")]
                        extern "C" {
                            #[link_name = "[method]schema-manager.create-index"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                                _: i32,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: i32,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr1.cast_mut(),
                            len1,
                            ptr2.cast_mut(),
                            len2,
                            result4,
                            len4,
                            index_type0.clone() as i32,
                            match unique0 {
                                true => 1,
                                false => 0,
                            },
                            result6_0,
                            result6_1,
                            result6_2,
                            ptr7,
                        );
                        let l8 = i32::from(*ptr7.add(0).cast::<u8>());
                        if layout4.size() != 0 {
                            _rt::alloc::dealloc(result4.cast(), layout4);
                        }
                        match l8 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l9 = i32::from(*ptr7.add(8).cast::<u8>());
                                    use super::super::super::golem::graph::errors::GraphError as V64;
                                    let v64 = match l9 {
                                        0 => {
                                            let e64 = {
                                                let l10 = *ptr7.add(16).cast::<*mut u8>();
                                                let l11 = *ptr7.add(20).cast::<usize>();
                                                let len12 = l11;
                                                let bytes12 = _rt::Vec::from_raw_parts(
                                                    l10.cast(),
                                                    len12,
                                                    len12,
                                                );
                                                _rt::string_lift(bytes12)
                                            };
                                            V64::UnsupportedOperation(e64)
                                        }
                                        1 => {
                                            let e64 = {
                                                let l13 = *ptr7.add(16).cast::<*mut u8>();
                                                let l14 = *ptr7.add(20).cast::<usize>();
                                                let len15 = l14;
                                                let bytes15 = _rt::Vec::from_raw_parts(
                                                    l13.cast(),
                                                    len15,
                                                    len15,
                                                );
                                                _rt::string_lift(bytes15)
                                            };
                                            V64::ConnectionFailed(e64)
                                        }
                                        2 => {
                                            let e64 = {
                                                let l16 = *ptr7.add(16).cast::<*mut u8>();
                                                let l17 = *ptr7.add(20).cast::<usize>();
                                                let len18 = l17;
                                                let bytes18 = _rt::Vec::from_raw_parts(
                                                    l16.cast(),
                                                    len18,
                                                    len18,
                                                );
                                                _rt::string_lift(bytes18)
                                            };
                                            V64::AuthenticationFailed(e64)
                                        }
                                        3 => {
                                            let e64 = {
                                                let l19 = *ptr7.add(16).cast::<*mut u8>();
                                                let l20 = *ptr7.add(20).cast::<usize>();
                                                let len21 = l20;
                                                let bytes21 = _rt::Vec::from_raw_parts(
                                                    l19.cast(),
                                                    len21,
                                                    len21,
                                                );
                                                _rt::string_lift(bytes21)
                                            };
                                            V64::AuthorizationFailed(e64)
                                        }
                                        4 => {
                                            let e64 = {
                                                let l22 = i32::from(*ptr7.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V30;
                                                let v30 = match l22 {
                                                    0 => {
                                                        let e30 = {
                                                            let l23 = *ptr7.add(24).cast::<*mut u8>();
                                                            let l24 = *ptr7.add(28).cast::<usize>();
                                                            let len25 = l24;
                                                            let bytes25 = _rt::Vec::from_raw_parts(
                                                                l23.cast(),
                                                                len25,
                                                                len25,
                                                            );
                                                            _rt::string_lift(bytes25)
                                                        };
                                                        V30::StringValue(e30)
                                                    }
                                                    1 => {
                                                        let e30 = {
                                                            let l26 = *ptr7.add(24).cast::<i64>();
                                                            l26
                                                        };
                                                        V30::Int64(e30)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e30 = {
                                                            let l27 = *ptr7.add(24).cast::<*mut u8>();
                                                            let l28 = *ptr7.add(28).cast::<usize>();
                                                            let len29 = l28;
                                                            let bytes29 = _rt::Vec::from_raw_parts(
                                                                l27.cast(),
                                                                len29,
                                                                len29,
                                                            );
                                                            _rt::string_lift(bytes29)
                                                        };
                                                        V30::Uuid(e30)
                                                    }
                                                };
                                                v30
                                            };
                                            V64::ElementNotFound(e64)
                                        }
                                        5 => {
                                            let e64 = {
                                                let l31 = i32::from(*ptr7.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V39;
                                                let v39 = match l31 {
                                                    0 => {
                                                        let e39 = {
                                                            let l32 = *ptr7.add(24).cast::<*mut u8>();
                                                            let l33 = *ptr7.add(28).cast::<usize>();
                                                            let len34 = l33;
                                                            let bytes34 = _rt::Vec::from_raw_parts(
                                                                l32.cast(),
                                                                len34,
                                                                len34,
                                                            );
                                                            _rt::string_lift(bytes34)
                                                        };
                                                        V39::StringValue(e39)
                                                    }
                                                    1 => {
                                                        let e39 = {
                                                            let l35 = *ptr7.add(24).cast::<i64>();
                                                            l35
                                                        };
                                                        V39::Int64(e39)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e39 = {
                                                            let l36 = *ptr7.add(24).cast::<*mut u8>();
                                                            let l37 = *ptr7.add(28).cast::<usize>();
                                                            let len38 = l37;
                                                            let bytes38 = _rt::Vec::from_raw_parts(
                                                                l36.cast(),
                                                                len38,
                                                                len38,
                                                            );
                                                            _rt::string_lift(bytes38)
                                                        };
                                                        V39::Uuid(e39)
                                                    }
                                                };
                                                v39
                                            };
                                            V64::DuplicateElement(e64)
                                        }
                                        6 => {
                                            let e64 = {
                                                let l40 = *ptr7.add(16).cast::<*mut u8>();
                                                let l41 = *ptr7.add(20).cast::<usize>();
                                                let len42 = l41;
                                                let bytes42 = _rt::Vec::from_raw_parts(
                                                    l40.cast(),
                                                    len42,
                                                    len42,
                                                );
                                                _rt::string_lift(bytes42)
                                            };
                                            V64::SchemaViolation(e64)
                                        }
                                        7 => {
                                            let e64 = {
                                                let l43 = *ptr7.add(16).cast::<*mut u8>();
                                                let l44 = *ptr7.add(20).cast::<usize>();
                                                let len45 = l44;
                                                let bytes45 = _rt::Vec::from_raw_parts(
                                                    l43.cast(),
                                                    len45,
                                                    len45,
                                                );
                                                _rt::string_lift(bytes45)
                                            };
                                            V64::ConstraintViolation(e64)
                                        }
                                        8 => {
                                            let e64 = {
                                                let l46 = *ptr7.add(16).cast::<*mut u8>();
                                                let l47 = *ptr7.add(20).cast::<usize>();
                                                let len48 = l47;
                                                let bytes48 = _rt::Vec::from_raw_parts(
                                                    l46.cast(),
                                                    len48,
                                                    len48,
                                                );
                                                _rt::string_lift(bytes48)
                                            };
                                            V64::InvalidPropertyType(e64)
                                        }
                                        9 => {
                                            let e64 = {
                                                let l49 = *ptr7.add(16).cast::<*mut u8>();
                                                let l50 = *ptr7.add(20).cast::<usize>();
                                                let len51 = l50;
                                                let bytes51 = _rt::Vec::from_raw_parts(
                                                    l49.cast(),
                                                    len51,
                                                    len51,
                                                );
                                                _rt::string_lift(bytes51)
                                            };
                                            V64::InvalidQuery(e64)
                                        }
                                        10 => {
                                            let e64 = {
                                                let l52 = *ptr7.add(16).cast::<*mut u8>();
                                                let l53 = *ptr7.add(20).cast::<usize>();
                                                let len54 = l53;
                                                let bytes54 = _rt::Vec::from_raw_parts(
                                                    l52.cast(),
                                                    len54,
                                                    len54,
                                                );
                                                _rt::string_lift(bytes54)
                                            };
                                            V64::TransactionFailed(e64)
                                        }
                                        11 => V64::TransactionConflict,
                                        12 => V64::TransactionTimeout,
                                        13 => V64::DeadlockDetected,
                                        14 => V64::Timeout,
                                        15 => {
                                            let e64 = {
                                                let l55 = *ptr7.add(16).cast::<*mut u8>();
                                                let l56 = *ptr7.add(20).cast::<usize>();
                                                let len57 = l56;
                                                let bytes57 = _rt::Vec::from_raw_parts(
                                                    l55.cast(),
                                                    len57,
                                                    len57,
                                                );
                                                _rt::string_lift(bytes57)
                                            };
                                            V64::ResourceExhausted(e64)
                                        }
                                        16 => {
                                            let e64 = {
                                                let l58 = *ptr7.add(16).cast::<*mut u8>();
                                                let l59 = *ptr7.add(20).cast::<usize>();
                                                let len60 = l59;
                                                let bytes60 = _rt::Vec::from_raw_parts(
                                                    l58.cast(),
                                                    len60,
                                                    len60,
                                                );
                                                _rt::string_lift(bytes60)
                                            };
                                            V64::InternalError(e64)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 17, "invalid enum discriminant");
                                            let e64 = {
                                                let l61 = *ptr7.add(16).cast::<*mut u8>();
                                                let l62 = *ptr7.add(20).cast::<usize>();
                                                let len63 = l62;
                                                let bytes63 = _rt::Vec::from_raw_parts(
                                                    l61.cast(),
                                                    len63,
                                                    len63,
                                                );
                                                _rt::string_lift(bytes63)
                                            };
                                            V64::ServiceUnavailable(e64)
                                        }
                                    };
                                    v64
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl SchemaManager {
                #[allow(unused_unsafe, clippy::all)]
                /// Drop index
                pub fn drop_index(&self, name: &str) -> Result<(), GraphError> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 32]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 32],
                        );
                        let vec0 = name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:graph/schema@1.0.0")]
                        extern "C" {
                            #[link_name = "[method]schema-manager.drop-index"]
                            fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0.cast_mut(), len0, ptr1);
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = i32::from(*ptr1.add(8).cast::<u8>());
                                    use super::super::super::golem::graph::errors::GraphError as V58;
                                    let v58 = match l3 {
                                        0 => {
                                            let e58 = {
                                                let l4 = *ptr1.add(16).cast::<*mut u8>();
                                                let l5 = *ptr1.add(20).cast::<usize>();
                                                let len6 = l5;
                                                let bytes6 = _rt::Vec::from_raw_parts(
                                                    l4.cast(),
                                                    len6,
                                                    len6,
                                                );
                                                _rt::string_lift(bytes6)
                                            };
                                            V58::UnsupportedOperation(e58)
                                        }
                                        1 => {
                                            let e58 = {
                                                let l7 = *ptr1.add(16).cast::<*mut u8>();
                                                let l8 = *ptr1.add(20).cast::<usize>();
                                                let len9 = l8;
                                                let bytes9 = _rt::Vec::from_raw_parts(
                                                    l7.cast(),
                                                    len9,
                                                    len9,
                                                );
                                                _rt::string_lift(bytes9)
                                            };
                                            V58::ConnectionFailed(e58)
                                        }
                                        2 => {
                                            let e58 = {
                                                let l10 = *ptr1.add(16).cast::<*mut u8>();
                                                let l11 = *ptr1.add(20).cast::<usize>();
                                                let len12 = l11;
                                                let bytes12 = _rt::Vec::from_raw_parts(
                                                    l10.cast(),
                                                    len12,
                                                    len12,
                                                );
                                                _rt::string_lift(bytes12)
                                            };
                                            V58::AuthenticationFailed(e58)
                                        }
                                        3 => {
                                            let e58 = {
                                                let l13 = *ptr1.add(16).cast::<*mut u8>();
                                                let l14 = *ptr1.add(20).cast::<usize>();
                                                let len15 = l14;
                                                let bytes15 = _rt::Vec::from_raw_parts(
                                                    l13.cast(),
                                                    len15,
                                                    len15,
                                                );
                                                _rt::string_lift(bytes15)
                                            };
                                            V58::AuthorizationFailed(e58)
                                        }
                                        4 => {
                                            let e58 = {
                                                let l16 = i32::from(*ptr1.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V24;
                                                let v24 = match l16 {
                                                    0 => {
                                                        let e24 = {
                                                            let l17 = *ptr1.add(24).cast::<*mut u8>();
                                                            let l18 = *ptr1.add(28).cast::<usize>();
                                                            let len19 = l18;
                                                            let bytes19 = _rt::Vec::from_raw_parts(
                                                                l17.cast(),
                                                                len19,
                                                                len19,
                                                            );
                                                            _rt::string_lift(bytes19)
                                                        };
                                                        V24::StringValue(e24)
                                                    }
                                                    1 => {
                                                        let e24 = {
                                                            let l20 = *ptr1.add(24).cast::<i64>();
                                                            l20
                                                        };
                                                        V24::Int64(e24)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e24 = {
                                                            let l21 = *ptr1.add(24).cast::<*mut u8>();
                                                            let l22 = *ptr1.add(28).cast::<usize>();
                                                            let len23 = l22;
                                                            let bytes23 = _rt::Vec::from_raw_parts(
                                                                l21.cast(),
                                                                len23,
                                                                len23,
                                                            );
                                                            _rt::string_lift(bytes23)
                                                        };
                                                        V24::Uuid(e24)
                                                    }
                                                };
                                                v24
                                            };
                                            V58::ElementNotFound(e58)
                                        }
                                        5 => {
                                            let e58 = {
                                                let l25 = i32::from(*ptr1.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V33;
                                                let v33 = match l25 {
                                                    0 => {
                                                        let e33 = {
                                                            let l26 = *ptr1.add(24).cast::<*mut u8>();
                                                            let l27 = *ptr1.add(28).cast::<usize>();
                                                            let len28 = l27;
                                                            let bytes28 = _rt::Vec::from_raw_parts(
                                                                l26.cast(),
                                                                len28,
                                                                len28,
                                                            );
                                                            _rt::string_lift(bytes28)
                                                        };
                                                        V33::StringValue(e33)
                                                    }
                                                    1 => {
                                                        let e33 = {
                                                            let l29 = *ptr1.add(24).cast::<i64>();
                                                            l29
                                                        };
                                                        V33::Int64(e33)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e33 = {
                                                            let l30 = *ptr1.add(24).cast::<*mut u8>();
                                                            let l31 = *ptr1.add(28).cast::<usize>();
                                                            let len32 = l31;
                                                            let bytes32 = _rt::Vec::from_raw_parts(
                                                                l30.cast(),
                                                                len32,
                                                                len32,
                                                            );
                                                            _rt::string_lift(bytes32)
                                                        };
                                                        V33::Uuid(e33)
                                                    }
                                                };
                                                v33
                                            };
                                            V58::DuplicateElement(e58)
                                        }
                                        6 => {
                                            let e58 = {
                                                let l34 = *ptr1.add(16).cast::<*mut u8>();
                                                let l35 = *ptr1.add(20).cast::<usize>();
                                                let len36 = l35;
                                                let bytes36 = _rt::Vec::from_raw_parts(
                                                    l34.cast(),
                                                    len36,
                                                    len36,
                                                );
                                                _rt::string_lift(bytes36)
                                            };
                                            V58::SchemaViolation(e58)
                                        }
                                        7 => {
                                            let e58 = {
                                                let l37 = *ptr1.add(16).cast::<*mut u8>();
                                                let l38 = *ptr1.add(20).cast::<usize>();
                                                let len39 = l38;
                                                let bytes39 = _rt::Vec::from_raw_parts(
                                                    l37.cast(),
                                                    len39,
                                                    len39,
                                                );
                                                _rt::string_lift(bytes39)
                                            };
                                            V58::ConstraintViolation(e58)
                                        }
                                        8 => {
                                            let e58 = {
                                                let l40 = *ptr1.add(16).cast::<*mut u8>();
                                                let l41 = *ptr1.add(20).cast::<usize>();
                                                let len42 = l41;
                                                let bytes42 = _rt::Vec::from_raw_parts(
                                                    l40.cast(),
                                                    len42,
                                                    len42,
                                                );
                                                _rt::string_lift(bytes42)
                                            };
                                            V58::InvalidPropertyType(e58)
                                        }
                                        9 => {
                                            let e58 = {
                                                let l43 = *ptr1.add(16).cast::<*mut u8>();
                                                let l44 = *ptr1.add(20).cast::<usize>();
                                                let len45 = l44;
                                                let bytes45 = _rt::Vec::from_raw_parts(
                                                    l43.cast(),
                                                    len45,
                                                    len45,
                                                );
                                                _rt::string_lift(bytes45)
                                            };
                                            V58::InvalidQuery(e58)
                                        }
                                        10 => {
                                            let e58 = {
                                                let l46 = *ptr1.add(16).cast::<*mut u8>();
                                                let l47 = *ptr1.add(20).cast::<usize>();
                                                let len48 = l47;
                                                let bytes48 = _rt::Vec::from_raw_parts(
                                                    l46.cast(),
                                                    len48,
                                                    len48,
                                                );
                                                _rt::string_lift(bytes48)
                                            };
                                            V58::TransactionFailed(e58)
                                        }
                                        11 => V58::TransactionConflict,
                                        12 => V58::TransactionTimeout,
                                        13 => V58::DeadlockDetected,
                                        14 => V58::Timeout,
                                        15 => {
                                            let e58 = {
                                                let l49 = *ptr1.add(16).cast::<*mut u8>();
                                                let l50 = *ptr1.add(20).cast::<usize>();
                                                let len51 = l50;
                                                let bytes51 = _rt::Vec::from_raw_parts(
                                                    l49.cast(),
                                                    len51,
                                                    len51,
                                                );
                                                _rt::string_lift(bytes51)
                                            };
                                            V58::ResourceExhausted(e58)
                                        }
                                        16 => {
                                            let e58 = {
                                                let l52 = *ptr1.add(16).cast::<*mut u8>();
                                                let l53 = *ptr1.add(20).cast::<usize>();
                                                let len54 = l53;
                                                let bytes54 = _rt::Vec::from_raw_parts(
                                                    l52.cast(),
                                                    len54,
                                                    len54,
                                                );
                                                _rt::string_lift(bytes54)
                                            };
                                            V58::InternalError(e58)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 17, "invalid enum discriminant");
                                            let e58 = {
                                                let l55 = *ptr1.add(16).cast::<*mut u8>();
                                                let l56 = *ptr1.add(20).cast::<usize>();
                                                let len57 = l56;
                                                let bytes57 = _rt::Vec::from_raw_parts(
                                                    l55.cast(),
                                                    len57,
                                                    len57,
                                                );
                                                _rt::string_lift(bytes57)
                                            };
                                            V58::ServiceUnavailable(e58)
                                        }
                                    };
                                    v58
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl SchemaManager {
                #[allow(unused_unsafe, clippy::all)]
                /// List indexes
                pub fn list_indexes(
                    &self,
                ) -> Result<_rt::Vec<IndexDefinition>, GraphError> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 32]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 32],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:graph/schema@1.0.0")]
                        extern "C" {
                            #[link_name = "[method]schema-manager.list-indexes"]
                            fn wit_import(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(8).cast::<*mut u8>();
                                    let l3 = *ptr0.add(12).cast::<usize>();
                                    let base22 = l2;
                                    let len22 = l3;
                                    let mut result22 = _rt::Vec::with_capacity(len22);
                                    for i in 0..len22 {
                                        let base = base22.add(i * 40);
                                        let e22 = {
                                            let l4 = *base.add(0).cast::<*mut u8>();
                                            let l5 = *base.add(4).cast::<usize>();
                                            let len6 = l5;
                                            let bytes6 = _rt::Vec::from_raw_parts(
                                                l4.cast(),
                                                len6,
                                                len6,
                                            );
                                            let l7 = *base.add(8).cast::<*mut u8>();
                                            let l8 = *base.add(12).cast::<usize>();
                                            let len9 = l8;
                                            let bytes9 = _rt::Vec::from_raw_parts(
                                                l7.cast(),
                                                len9,
                                                len9,
                                            );
                                            let l10 = *base.add(16).cast::<*mut u8>();
                                            let l11 = *base.add(20).cast::<usize>();
                                            let base15 = l10;
                                            let len15 = l11;
                                            let mut result15 = _rt::Vec::with_capacity(len15);
                                            for i in 0..len15 {
                                                let base = base15.add(i * 8);
                                                let e15 = {
                                                    let l12 = *base.add(0).cast::<*mut u8>();
                                                    let l13 = *base.add(4).cast::<usize>();
                                                    let len14 = l13;
                                                    let bytes14 = _rt::Vec::from_raw_parts(
                                                        l12.cast(),
                                                        len14,
                                                        len14,
                                                    );
                                                    _rt::string_lift(bytes14)
                                                };
                                                result15.push(e15);
                                            }
                                            _rt::cabi_dealloc(base15, len15 * 8, 4);
                                            let l16 = i32::from(*base.add(24).cast::<u8>());
                                            let l17 = i32::from(*base.add(25).cast::<u8>());
                                            let l18 = i32::from(*base.add(28).cast::<u8>());
                                            IndexDefinition {
                                                name: _rt::string_lift(bytes6),
                                                label: _rt::string_lift(bytes9),
                                                properties: result15,
                                                index_type: IndexType::_lift(l16 as u8),
                                                unique: _rt::bool_lift(l17 as u8),
                                                container: match l18 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l19 = *base.add(32).cast::<*mut u8>();
                                                            let l20 = *base.add(36).cast::<usize>();
                                                            let len21 = l20;
                                                            let bytes21 = _rt::Vec::from_raw_parts(
                                                                l19.cast(),
                                                                len21,
                                                                len21,
                                                            );
                                                            _rt::string_lift(bytes21)
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                            }
                                        };
                                        result22.push(e22);
                                    }
                                    _rt::cabi_dealloc(base22, len22 * 40, 4);
                                    result22
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l23 = i32::from(*ptr0.add(8).cast::<u8>());
                                    use super::super::super::golem::graph::errors::GraphError as V78;
                                    let v78 = match l23 {
                                        0 => {
                                            let e78 = {
                                                let l24 = *ptr0.add(16).cast::<*mut u8>();
                                                let l25 = *ptr0.add(20).cast::<usize>();
                                                let len26 = l25;
                                                let bytes26 = _rt::Vec::from_raw_parts(
                                                    l24.cast(),
                                                    len26,
                                                    len26,
                                                );
                                                _rt::string_lift(bytes26)
                                            };
                                            V78::UnsupportedOperation(e78)
                                        }
                                        1 => {
                                            let e78 = {
                                                let l27 = *ptr0.add(16).cast::<*mut u8>();
                                                let l28 = *ptr0.add(20).cast::<usize>();
                                                let len29 = l28;
                                                let bytes29 = _rt::Vec::from_raw_parts(
                                                    l27.cast(),
                                                    len29,
                                                    len29,
                                                );
                                                _rt::string_lift(bytes29)
                                            };
                                            V78::ConnectionFailed(e78)
                                        }
                                        2 => {
                                            let e78 = {
                                                let l30 = *ptr0.add(16).cast::<*mut u8>();
                                                let l31 = *ptr0.add(20).cast::<usize>();
                                                let len32 = l31;
                                                let bytes32 = _rt::Vec::from_raw_parts(
                                                    l30.cast(),
                                                    len32,
                                                    len32,
                                                );
                                                _rt::string_lift(bytes32)
                                            };
                                            V78::AuthenticationFailed(e78)
                                        }
                                        3 => {
                                            let e78 = {
                                                let l33 = *ptr0.add(16).cast::<*mut u8>();
                                                let l34 = *ptr0.add(20).cast::<usize>();
                                                let len35 = l34;
                                                let bytes35 = _rt::Vec::from_raw_parts(
                                                    l33.cast(),
                                                    len35,
                                                    len35,
                                                );
                                                _rt::string_lift(bytes35)
                                            };
                                            V78::AuthorizationFailed(e78)
                                        }
                                        4 => {
                                            let e78 = {
                                                let l36 = i32::from(*ptr0.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V44;
                                                let v44 = match l36 {
                                                    0 => {
                                                        let e44 = {
                                                            let l37 = *ptr0.add(24).cast::<*mut u8>();
                                                            let l38 = *ptr0.add(28).cast::<usize>();
                                                            let len39 = l38;
                                                            let bytes39 = _rt::Vec::from_raw_parts(
                                                                l37.cast(),
                                                                len39,
                                                                len39,
                                                            );
                                                            _rt::string_lift(bytes39)
                                                        };
                                                        V44::StringValue(e44)
                                                    }
                                                    1 => {
                                                        let e44 = {
                                                            let l40 = *ptr0.add(24).cast::<i64>();
                                                            l40
                                                        };
                                                        V44::Int64(e44)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e44 = {
                                                            let l41 = *ptr0.add(24).cast::<*mut u8>();
                                                            let l42 = *ptr0.add(28).cast::<usize>();
                                                            let len43 = l42;
                                                            let bytes43 = _rt::Vec::from_raw_parts(
                                                                l41.cast(),
                                                                len43,
                                                                len43,
                                                            );
                                                            _rt::string_lift(bytes43)
                                                        };
                                                        V44::Uuid(e44)
                                                    }
                                                };
                                                v44
                                            };
                                            V78::ElementNotFound(e78)
                                        }
                                        5 => {
                                            let e78 = {
                                                let l45 = i32::from(*ptr0.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V53;
                                                let v53 = match l45 {
                                                    0 => {
                                                        let e53 = {
                                                            let l46 = *ptr0.add(24).cast::<*mut u8>();
                                                            let l47 = *ptr0.add(28).cast::<usize>();
                                                            let len48 = l47;
                                                            let bytes48 = _rt::Vec::from_raw_parts(
                                                                l46.cast(),
                                                                len48,
                                                                len48,
                                                            );
                                                            _rt::string_lift(bytes48)
                                                        };
                                                        V53::StringValue(e53)
                                                    }
                                                    1 => {
                                                        let e53 = {
                                                            let l49 = *ptr0.add(24).cast::<i64>();
                                                            l49
                                                        };
                                                        V53::Int64(e53)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e53 = {
                                                            let l50 = *ptr0.add(24).cast::<*mut u8>();
                                                            let l51 = *ptr0.add(28).cast::<usize>();
                                                            let len52 = l51;
                                                            let bytes52 = _rt::Vec::from_raw_parts(
                                                                l50.cast(),
                                                                len52,
                                                                len52,
                                                            );
                                                            _rt::string_lift(bytes52)
                                                        };
                                                        V53::Uuid(e53)
                                                    }
                                                };
                                                v53
                                            };
                                            V78::DuplicateElement(e78)
                                        }
                                        6 => {
                                            let e78 = {
                                                let l54 = *ptr0.add(16).cast::<*mut u8>();
                                                let l55 = *ptr0.add(20).cast::<usize>();
                                                let len56 = l55;
                                                let bytes56 = _rt::Vec::from_raw_parts(
                                                    l54.cast(),
                                                    len56,
                                                    len56,
                                                );
                                                _rt::string_lift(bytes56)
                                            };
                                            V78::SchemaViolation(e78)
                                        }
                                        7 => {
                                            let e78 = {
                                                let l57 = *ptr0.add(16).cast::<*mut u8>();
                                                let l58 = *ptr0.add(20).cast::<usize>();
                                                let len59 = l58;
                                                let bytes59 = _rt::Vec::from_raw_parts(
                                                    l57.cast(),
                                                    len59,
                                                    len59,
                                                );
                                                _rt::string_lift(bytes59)
                                            };
                                            V78::ConstraintViolation(e78)
                                        }
                                        8 => {
                                            let e78 = {
                                                let l60 = *ptr0.add(16).cast::<*mut u8>();
                                                let l61 = *ptr0.add(20).cast::<usize>();
                                                let len62 = l61;
                                                let bytes62 = _rt::Vec::from_raw_parts(
                                                    l60.cast(),
                                                    len62,
                                                    len62,
                                                );
                                                _rt::string_lift(bytes62)
                                            };
                                            V78::InvalidPropertyType(e78)
                                        }
                                        9 => {
                                            let e78 = {
                                                let l63 = *ptr0.add(16).cast::<*mut u8>();
                                                let l64 = *ptr0.add(20).cast::<usize>();
                                                let len65 = l64;
                                                let bytes65 = _rt::Vec::from_raw_parts(
                                                    l63.cast(),
                                                    len65,
                                                    len65,
                                                );
                                                _rt::string_lift(bytes65)
                                            };
                                            V78::InvalidQuery(e78)
                                        }
                                        10 => {
                                            let e78 = {
                                                let l66 = *ptr0.add(16).cast::<*mut u8>();
                                                let l67 = *ptr0.add(20).cast::<usize>();
                                                let len68 = l67;
                                                let bytes68 = _rt::Vec::from_raw_parts(
                                                    l66.cast(),
                                                    len68,
                                                    len68,
                                                );
                                                _rt::string_lift(bytes68)
                                            };
                                            V78::TransactionFailed(e78)
                                        }
                                        11 => V78::TransactionConflict,
                                        12 => V78::TransactionTimeout,
                                        13 => V78::DeadlockDetected,
                                        14 => V78::Timeout,
                                        15 => {
                                            let e78 = {
                                                let l69 = *ptr0.add(16).cast::<*mut u8>();
                                                let l70 = *ptr0.add(20).cast::<usize>();
                                                let len71 = l70;
                                                let bytes71 = _rt::Vec::from_raw_parts(
                                                    l69.cast(),
                                                    len71,
                                                    len71,
                                                );
                                                _rt::string_lift(bytes71)
                                            };
                                            V78::ResourceExhausted(e78)
                                        }
                                        16 => {
                                            let e78 = {
                                                let l72 = *ptr0.add(16).cast::<*mut u8>();
                                                let l73 = *ptr0.add(20).cast::<usize>();
                                                let len74 = l73;
                                                let bytes74 = _rt::Vec::from_raw_parts(
                                                    l72.cast(),
                                                    len74,
                                                    len74,
                                                );
                                                _rt::string_lift(bytes74)
                                            };
                                            V78::InternalError(e78)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 17, "invalid enum discriminant");
                                            let e78 = {
                                                let l75 = *ptr0.add(16).cast::<*mut u8>();
                                                let l76 = *ptr0.add(20).cast::<usize>();
                                                let len77 = l76;
                                                let bytes77 = _rt::Vec::from_raw_parts(
                                                    l75.cast(),
                                                    len77,
                                                    len77,
                                                );
                                                _rt::string_lift(bytes77)
                                            };
                                            V78::ServiceUnavailable(e78)
                                        }
                                    };
                                    v78
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl SchemaManager {
                #[allow(unused_unsafe, clippy::all)]
                /// Get index by name
                pub fn get_index(
                    &self,
                    name: &str,
                ) -> Result<Option<IndexDefinition>, GraphError> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 56]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 56],
                        );
                        let vec0 = name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:graph/schema@1.0.0")]
                        extern "C" {
                            #[link_name = "[method]schema-manager.get-index"]
                            fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0.cast_mut(), len0, ptr1);
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => {
                                let e = {
                                    let l3 = i32::from(*ptr1.add(8).cast::<u8>());
                                    match l3 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l4 = *ptr1.add(12).cast::<*mut u8>();
                                                let l5 = *ptr1.add(16).cast::<usize>();
                                                let len6 = l5;
                                                let bytes6 = _rt::Vec::from_raw_parts(
                                                    l4.cast(),
                                                    len6,
                                                    len6,
                                                );
                                                let l7 = *ptr1.add(20).cast::<*mut u8>();
                                                let l8 = *ptr1.add(24).cast::<usize>();
                                                let len9 = l8;
                                                let bytes9 = _rt::Vec::from_raw_parts(
                                                    l7.cast(),
                                                    len9,
                                                    len9,
                                                );
                                                let l10 = *ptr1.add(28).cast::<*mut u8>();
                                                let l11 = *ptr1.add(32).cast::<usize>();
                                                let base15 = l10;
                                                let len15 = l11;
                                                let mut result15 = _rt::Vec::with_capacity(len15);
                                                for i in 0..len15 {
                                                    let base = base15.add(i * 8);
                                                    let e15 = {
                                                        let l12 = *base.add(0).cast::<*mut u8>();
                                                        let l13 = *base.add(4).cast::<usize>();
                                                        let len14 = l13;
                                                        let bytes14 = _rt::Vec::from_raw_parts(
                                                            l12.cast(),
                                                            len14,
                                                            len14,
                                                        );
                                                        _rt::string_lift(bytes14)
                                                    };
                                                    result15.push(e15);
                                                }
                                                _rt::cabi_dealloc(base15, len15 * 8, 4);
                                                let l16 = i32::from(*ptr1.add(36).cast::<u8>());
                                                let l17 = i32::from(*ptr1.add(37).cast::<u8>());
                                                let l18 = i32::from(*ptr1.add(40).cast::<u8>());
                                                IndexDefinition {
                                                    name: _rt::string_lift(bytes6),
                                                    label: _rt::string_lift(bytes9),
                                                    properties: result15,
                                                    index_type: IndexType::_lift(l16 as u8),
                                                    unique: _rt::bool_lift(l17 as u8),
                                                    container: match l18 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l19 = *ptr1.add(44).cast::<*mut u8>();
                                                                let l20 = *ptr1.add(48).cast::<usize>();
                                                                let len21 = l20;
                                                                let bytes21 = _rt::Vec::from_raw_parts(
                                                                    l19.cast(),
                                                                    len21,
                                                                    len21,
                                                                );
                                                                _rt::string_lift(bytes21)
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                }
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    }
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l22 = i32::from(*ptr1.add(8).cast::<u8>());
                                    use super::super::super::golem::graph::errors::GraphError as V77;
                                    let v77 = match l22 {
                                        0 => {
                                            let e77 = {
                                                let l23 = *ptr1.add(16).cast::<*mut u8>();
                                                let l24 = *ptr1.add(20).cast::<usize>();
                                                let len25 = l24;
                                                let bytes25 = _rt::Vec::from_raw_parts(
                                                    l23.cast(),
                                                    len25,
                                                    len25,
                                                );
                                                _rt::string_lift(bytes25)
                                            };
                                            V77::UnsupportedOperation(e77)
                                        }
                                        1 => {
                                            let e77 = {
                                                let l26 = *ptr1.add(16).cast::<*mut u8>();
                                                let l27 = *ptr1.add(20).cast::<usize>();
                                                let len28 = l27;
                                                let bytes28 = _rt::Vec::from_raw_parts(
                                                    l26.cast(),
                                                    len28,
                                                    len28,
                                                );
                                                _rt::string_lift(bytes28)
                                            };
                                            V77::ConnectionFailed(e77)
                                        }
                                        2 => {
                                            let e77 = {
                                                let l29 = *ptr1.add(16).cast::<*mut u8>();
                                                let l30 = *ptr1.add(20).cast::<usize>();
                                                let len31 = l30;
                                                let bytes31 = _rt::Vec::from_raw_parts(
                                                    l29.cast(),
                                                    len31,
                                                    len31,
                                                );
                                                _rt::string_lift(bytes31)
                                            };
                                            V77::AuthenticationFailed(e77)
                                        }
                                        3 => {
                                            let e77 = {
                                                let l32 = *ptr1.add(16).cast::<*mut u8>();
                                                let l33 = *ptr1.add(20).cast::<usize>();
                                                let len34 = l33;
                                                let bytes34 = _rt::Vec::from_raw_parts(
                                                    l32.cast(),
                                                    len34,
                                                    len34,
                                                );
                                                _rt::string_lift(bytes34)
                                            };
                                            V77::AuthorizationFailed(e77)
                                        }
                                        4 => {
                                            let e77 = {
                                                let l35 = i32::from(*ptr1.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V43;
                                                let v43 = match l35 {
                                                    0 => {
                                                        let e43 = {
                                                            let l36 = *ptr1.add(24).cast::<*mut u8>();
                                                            let l37 = *ptr1.add(28).cast::<usize>();
                                                            let len38 = l37;
                                                            let bytes38 = _rt::Vec::from_raw_parts(
                                                                l36.cast(),
                                                                len38,
                                                                len38,
                                                            );
                                                            _rt::string_lift(bytes38)
                                                        };
                                                        V43::StringValue(e43)
                                                    }
                                                    1 => {
                                                        let e43 = {
                                                            let l39 = *ptr1.add(24).cast::<i64>();
                                                            l39
                                                        };
                                                        V43::Int64(e43)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e43 = {
                                                            let l40 = *ptr1.add(24).cast::<*mut u8>();
                                                            let l41 = *ptr1.add(28).cast::<usize>();
                                                            let len42 = l41;
                                                            let bytes42 = _rt::Vec::from_raw_parts(
                                                                l40.cast(),
                                                                len42,
                                                                len42,
                                                            );
                                                            _rt::string_lift(bytes42)
                                                        };
                                                        V43::Uuid(e43)
                                                    }
                                                };
                                                v43
                                            };
                                            V77::ElementNotFound(e77)
                                        }
                                        5 => {
                                            let e77 = {
                                                let l44 = i32::from(*ptr1.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V52;
                                                let v52 = match l44 {
                                                    0 => {
                                                        let e52 = {
                                                            let l45 = *ptr1.add(24).cast::<*mut u8>();
                                                            let l46 = *ptr1.add(28).cast::<usize>();
                                                            let len47 = l46;
                                                            let bytes47 = _rt::Vec::from_raw_parts(
                                                                l45.cast(),
                                                                len47,
                                                                len47,
                                                            );
                                                            _rt::string_lift(bytes47)
                                                        };
                                                        V52::StringValue(e52)
                                                    }
                                                    1 => {
                                                        let e52 = {
                                                            let l48 = *ptr1.add(24).cast::<i64>();
                                                            l48
                                                        };
                                                        V52::Int64(e52)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e52 = {
                                                            let l49 = *ptr1.add(24).cast::<*mut u8>();
                                                            let l50 = *ptr1.add(28).cast::<usize>();
                                                            let len51 = l50;
                                                            let bytes51 = _rt::Vec::from_raw_parts(
                                                                l49.cast(),
                                                                len51,
                                                                len51,
                                                            );
                                                            _rt::string_lift(bytes51)
                                                        };
                                                        V52::Uuid(e52)
                                                    }
                                                };
                                                v52
                                            };
                                            V77::DuplicateElement(e77)
                                        }
                                        6 => {
                                            let e77 = {
                                                let l53 = *ptr1.add(16).cast::<*mut u8>();
                                                let l54 = *ptr1.add(20).cast::<usize>();
                                                let len55 = l54;
                                                let bytes55 = _rt::Vec::from_raw_parts(
                                                    l53.cast(),
                                                    len55,
                                                    len55,
                                                );
                                                _rt::string_lift(bytes55)
                                            };
                                            V77::SchemaViolation(e77)
                                        }
                                        7 => {
                                            let e77 = {
                                                let l56 = *ptr1.add(16).cast::<*mut u8>();
                                                let l57 = *ptr1.add(20).cast::<usize>();
                                                let len58 = l57;
                                                let bytes58 = _rt::Vec::from_raw_parts(
                                                    l56.cast(),
                                                    len58,
                                                    len58,
                                                );
                                                _rt::string_lift(bytes58)
                                            };
                                            V77::ConstraintViolation(e77)
                                        }
                                        8 => {
                                            let e77 = {
                                                let l59 = *ptr1.add(16).cast::<*mut u8>();
                                                let l60 = *ptr1.add(20).cast::<usize>();
                                                let len61 = l60;
                                                let bytes61 = _rt::Vec::from_raw_parts(
                                                    l59.cast(),
                                                    len61,
                                                    len61,
                                                );
                                                _rt::string_lift(bytes61)
                                            };
                                            V77::InvalidPropertyType(e77)
                                        }
                                        9 => {
                                            let e77 = {
                                                let l62 = *ptr1.add(16).cast::<*mut u8>();
                                                let l63 = *ptr1.add(20).cast::<usize>();
                                                let len64 = l63;
                                                let bytes64 = _rt::Vec::from_raw_parts(
                                                    l62.cast(),
                                                    len64,
                                                    len64,
                                                );
                                                _rt::string_lift(bytes64)
                                            };
                                            V77::InvalidQuery(e77)
                                        }
                                        10 => {
                                            let e77 = {
                                                let l65 = *ptr1.add(16).cast::<*mut u8>();
                                                let l66 = *ptr1.add(20).cast::<usize>();
                                                let len67 = l66;
                                                let bytes67 = _rt::Vec::from_raw_parts(
                                                    l65.cast(),
                                                    len67,
                                                    len67,
                                                );
                                                _rt::string_lift(bytes67)
                                            };
                                            V77::TransactionFailed(e77)
                                        }
                                        11 => V77::TransactionConflict,
                                        12 => V77::TransactionTimeout,
                                        13 => V77::DeadlockDetected,
                                        14 => V77::Timeout,
                                        15 => {
                                            let e77 = {
                                                let l68 = *ptr1.add(16).cast::<*mut u8>();
                                                let l69 = *ptr1.add(20).cast::<usize>();
                                                let len70 = l69;
                                                let bytes70 = _rt::Vec::from_raw_parts(
                                                    l68.cast(),
                                                    len70,
                                                    len70,
                                                );
                                                _rt::string_lift(bytes70)
                                            };
                                            V77::ResourceExhausted(e77)
                                        }
                                        16 => {
                                            let e77 = {
                                                let l71 = *ptr1.add(16).cast::<*mut u8>();
                                                let l72 = *ptr1.add(20).cast::<usize>();
                                                let len73 = l72;
                                                let bytes73 = _rt::Vec::from_raw_parts(
                                                    l71.cast(),
                                                    len73,
                                                    len73,
                                                );
                                                _rt::string_lift(bytes73)
                                            };
                                            V77::InternalError(e77)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 17, "invalid enum discriminant");
                                            let e77 = {
                                                let l74 = *ptr1.add(16).cast::<*mut u8>();
                                                let l75 = *ptr1.add(20).cast::<usize>();
                                                let len76 = l75;
                                                let bytes76 = _rt::Vec::from_raw_parts(
                                                    l74.cast(),
                                                    len76,
                                                    len76,
                                                );
                                                _rt::string_lift(bytes76)
                                            };
                                            V77::ServiceUnavailable(e77)
                                        }
                                    };
                                    v77
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl SchemaManager {
                #[allow(unused_unsafe, clippy::all)]
                /// Define edge type for structural databases (ArangoDB-style)
                pub fn define_edge_type(
                    &self,
                    definition: &EdgeTypeDefinition,
                ) -> Result<(), GraphError> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 32]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 32],
                        );
                        let EdgeTypeDefinition {
                            collection: collection0,
                            from_collections: from_collections0,
                            to_collections: to_collections0,
                        } = definition;
                        let vec1 = collection0;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        let vec3 = from_collections0;
                        let len3 = vec3.len();
                        let layout3 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec3.len() * 8,
                            4,
                        );
                        let result3 = if layout3.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout3).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout3);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec3.into_iter().enumerate() {
                            let base = result3.add(i * 8);
                            {
                                let vec2 = e;
                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                let len2 = vec2.len();
                                *base.add(4).cast::<usize>() = len2;
                                *base.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                            }
                        }
                        let vec5 = to_collections0;
                        let len5 = vec5.len();
                        let layout5 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec5.len() * 8,
                            4,
                        );
                        let result5 = if layout5.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout5).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout5);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec5.into_iter().enumerate() {
                            let base = result5.add(i * 8);
                            {
                                let vec4 = e;
                                let ptr4 = vec4.as_ptr().cast::<u8>();
                                let len4 = vec4.len();
                                *base.add(4).cast::<usize>() = len4;
                                *base.add(0).cast::<*mut u8>() = ptr4.cast_mut();
                            }
                        }
                        let ptr6 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:graph/schema@1.0.0")]
                        extern "C" {
                            #[link_name = "[method]schema-manager.define-edge-type"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr1.cast_mut(),
                            len1,
                            result3,
                            len3,
                            result5,
                            len5,
                            ptr6,
                        );
                        let l7 = i32::from(*ptr6.add(0).cast::<u8>());
                        if layout3.size() != 0 {
                            _rt::alloc::dealloc(result3.cast(), layout3);
                        }
                        if layout5.size() != 0 {
                            _rt::alloc::dealloc(result5.cast(), layout5);
                        }
                        match l7 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l8 = i32::from(*ptr6.add(8).cast::<u8>());
                                    use super::super::super::golem::graph::errors::GraphError as V63;
                                    let v63 = match l8 {
                                        0 => {
                                            let e63 = {
                                                let l9 = *ptr6.add(16).cast::<*mut u8>();
                                                let l10 = *ptr6.add(20).cast::<usize>();
                                                let len11 = l10;
                                                let bytes11 = _rt::Vec::from_raw_parts(
                                                    l9.cast(),
                                                    len11,
                                                    len11,
                                                );
                                                _rt::string_lift(bytes11)
                                            };
                                            V63::UnsupportedOperation(e63)
                                        }
                                        1 => {
                                            let e63 = {
                                                let l12 = *ptr6.add(16).cast::<*mut u8>();
                                                let l13 = *ptr6.add(20).cast::<usize>();
                                                let len14 = l13;
                                                let bytes14 = _rt::Vec::from_raw_parts(
                                                    l12.cast(),
                                                    len14,
                                                    len14,
                                                );
                                                _rt::string_lift(bytes14)
                                            };
                                            V63::ConnectionFailed(e63)
                                        }
                                        2 => {
                                            let e63 = {
                                                let l15 = *ptr6.add(16).cast::<*mut u8>();
                                                let l16 = *ptr6.add(20).cast::<usize>();
                                                let len17 = l16;
                                                let bytes17 = _rt::Vec::from_raw_parts(
                                                    l15.cast(),
                                                    len17,
                                                    len17,
                                                );
                                                _rt::string_lift(bytes17)
                                            };
                                            V63::AuthenticationFailed(e63)
                                        }
                                        3 => {
                                            let e63 = {
                                                let l18 = *ptr6.add(16).cast::<*mut u8>();
                                                let l19 = *ptr6.add(20).cast::<usize>();
                                                let len20 = l19;
                                                let bytes20 = _rt::Vec::from_raw_parts(
                                                    l18.cast(),
                                                    len20,
                                                    len20,
                                                );
                                                _rt::string_lift(bytes20)
                                            };
                                            V63::AuthorizationFailed(e63)
                                        }
                                        4 => {
                                            let e63 = {
                                                let l21 = i32::from(*ptr6.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V29;
                                                let v29 = match l21 {
                                                    0 => {
                                                        let e29 = {
                                                            let l22 = *ptr6.add(24).cast::<*mut u8>();
                                                            let l23 = *ptr6.add(28).cast::<usize>();
                                                            let len24 = l23;
                                                            let bytes24 = _rt::Vec::from_raw_parts(
                                                                l22.cast(),
                                                                len24,
                                                                len24,
                                                            );
                                                            _rt::string_lift(bytes24)
                                                        };
                                                        V29::StringValue(e29)
                                                    }
                                                    1 => {
                                                        let e29 = {
                                                            let l25 = *ptr6.add(24).cast::<i64>();
                                                            l25
                                                        };
                                                        V29::Int64(e29)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e29 = {
                                                            let l26 = *ptr6.add(24).cast::<*mut u8>();
                                                            let l27 = *ptr6.add(28).cast::<usize>();
                                                            let len28 = l27;
                                                            let bytes28 = _rt::Vec::from_raw_parts(
                                                                l26.cast(),
                                                                len28,
                                                                len28,
                                                            );
                                                            _rt::string_lift(bytes28)
                                                        };
                                                        V29::Uuid(e29)
                                                    }
                                                };
                                                v29
                                            };
                                            V63::ElementNotFound(e63)
                                        }
                                        5 => {
                                            let e63 = {
                                                let l30 = i32::from(*ptr6.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V38;
                                                let v38 = match l30 {
                                                    0 => {
                                                        let e38 = {
                                                            let l31 = *ptr6.add(24).cast::<*mut u8>();
                                                            let l32 = *ptr6.add(28).cast::<usize>();
                                                            let len33 = l32;
                                                            let bytes33 = _rt::Vec::from_raw_parts(
                                                                l31.cast(),
                                                                len33,
                                                                len33,
                                                            );
                                                            _rt::string_lift(bytes33)
                                                        };
                                                        V38::StringValue(e38)
                                                    }
                                                    1 => {
                                                        let e38 = {
                                                            let l34 = *ptr6.add(24).cast::<i64>();
                                                            l34
                                                        };
                                                        V38::Int64(e38)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e38 = {
                                                            let l35 = *ptr6.add(24).cast::<*mut u8>();
                                                            let l36 = *ptr6.add(28).cast::<usize>();
                                                            let len37 = l36;
                                                            let bytes37 = _rt::Vec::from_raw_parts(
                                                                l35.cast(),
                                                                len37,
                                                                len37,
                                                            );
                                                            _rt::string_lift(bytes37)
                                                        };
                                                        V38::Uuid(e38)
                                                    }
                                                };
                                                v38
                                            };
                                            V63::DuplicateElement(e63)
                                        }
                                        6 => {
                                            let e63 = {
                                                let l39 = *ptr6.add(16).cast::<*mut u8>();
                                                let l40 = *ptr6.add(20).cast::<usize>();
                                                let len41 = l40;
                                                let bytes41 = _rt::Vec::from_raw_parts(
                                                    l39.cast(),
                                                    len41,
                                                    len41,
                                                );
                                                _rt::string_lift(bytes41)
                                            };
                                            V63::SchemaViolation(e63)
                                        }
                                        7 => {
                                            let e63 = {
                                                let l42 = *ptr6.add(16).cast::<*mut u8>();
                                                let l43 = *ptr6.add(20).cast::<usize>();
                                                let len44 = l43;
                                                let bytes44 = _rt::Vec::from_raw_parts(
                                                    l42.cast(),
                                                    len44,
                                                    len44,
                                                );
                                                _rt::string_lift(bytes44)
                                            };
                                            V63::ConstraintViolation(e63)
                                        }
                                        8 => {
                                            let e63 = {
                                                let l45 = *ptr6.add(16).cast::<*mut u8>();
                                                let l46 = *ptr6.add(20).cast::<usize>();
                                                let len47 = l46;
                                                let bytes47 = _rt::Vec::from_raw_parts(
                                                    l45.cast(),
                                                    len47,
                                                    len47,
                                                );
                                                _rt::string_lift(bytes47)
                                            };
                                            V63::InvalidPropertyType(e63)
                                        }
                                        9 => {
                                            let e63 = {
                                                let l48 = *ptr6.add(16).cast::<*mut u8>();
                                                let l49 = *ptr6.add(20).cast::<usize>();
                                                let len50 = l49;
                                                let bytes50 = _rt::Vec::from_raw_parts(
                                                    l48.cast(),
                                                    len50,
                                                    len50,
                                                );
                                                _rt::string_lift(bytes50)
                                            };
                                            V63::InvalidQuery(e63)
                                        }
                                        10 => {
                                            let e63 = {
                                                let l51 = *ptr6.add(16).cast::<*mut u8>();
                                                let l52 = *ptr6.add(20).cast::<usize>();
                                                let len53 = l52;
                                                let bytes53 = _rt::Vec::from_raw_parts(
                                                    l51.cast(),
                                                    len53,
                                                    len53,
                                                );
                                                _rt::string_lift(bytes53)
                                            };
                                            V63::TransactionFailed(e63)
                                        }
                                        11 => V63::TransactionConflict,
                                        12 => V63::TransactionTimeout,
                                        13 => V63::DeadlockDetected,
                                        14 => V63::Timeout,
                                        15 => {
                                            let e63 = {
                                                let l54 = *ptr6.add(16).cast::<*mut u8>();
                                                let l55 = *ptr6.add(20).cast::<usize>();
                                                let len56 = l55;
                                                let bytes56 = _rt::Vec::from_raw_parts(
                                                    l54.cast(),
                                                    len56,
                                                    len56,
                                                );
                                                _rt::string_lift(bytes56)
                                            };
                                            V63::ResourceExhausted(e63)
                                        }
                                        16 => {
                                            let e63 = {
                                                let l57 = *ptr6.add(16).cast::<*mut u8>();
                                                let l58 = *ptr6.add(20).cast::<usize>();
                                                let len59 = l58;
                                                let bytes59 = _rt::Vec::from_raw_parts(
                                                    l57.cast(),
                                                    len59,
                                                    len59,
                                                );
                                                _rt::string_lift(bytes59)
                                            };
                                            V63::InternalError(e63)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 17, "invalid enum discriminant");
                                            let e63 = {
                                                let l60 = *ptr6.add(16).cast::<*mut u8>();
                                                let l61 = *ptr6.add(20).cast::<usize>();
                                                let len62 = l61;
                                                let bytes62 = _rt::Vec::from_raw_parts(
                                                    l60.cast(),
                                                    len62,
                                                    len62,
                                                );
                                                _rt::string_lift(bytes62)
                                            };
                                            V63::ServiceUnavailable(e63)
                                        }
                                    };
                                    v63
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl SchemaManager {
                #[allow(unused_unsafe, clippy::all)]
                /// List edge type definitions
                pub fn list_edge_types(
                    &self,
                ) -> Result<_rt::Vec<EdgeTypeDefinition>, GraphError> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 32]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 32],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:graph/schema@1.0.0")]
                        extern "C" {
                            #[link_name = "[method]schema-manager.list-edge-types"]
                            fn wit_import(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(8).cast::<*mut u8>();
                                    let l3 = *ptr0.add(12).cast::<usize>();
                                    let base19 = l2;
                                    let len19 = l3;
                                    let mut result19 = _rt::Vec::with_capacity(len19);
                                    for i in 0..len19 {
                                        let base = base19.add(i * 24);
                                        let e19 = {
                                            let l4 = *base.add(0).cast::<*mut u8>();
                                            let l5 = *base.add(4).cast::<usize>();
                                            let len6 = l5;
                                            let bytes6 = _rt::Vec::from_raw_parts(
                                                l4.cast(),
                                                len6,
                                                len6,
                                            );
                                            let l7 = *base.add(8).cast::<*mut u8>();
                                            let l8 = *base.add(12).cast::<usize>();
                                            let base12 = l7;
                                            let len12 = l8;
                                            let mut result12 = _rt::Vec::with_capacity(len12);
                                            for i in 0..len12 {
                                                let base = base12.add(i * 8);
                                                let e12 = {
                                                    let l9 = *base.add(0).cast::<*mut u8>();
                                                    let l10 = *base.add(4).cast::<usize>();
                                                    let len11 = l10;
                                                    let bytes11 = _rt::Vec::from_raw_parts(
                                                        l9.cast(),
                                                        len11,
                                                        len11,
                                                    );
                                                    _rt::string_lift(bytes11)
                                                };
                                                result12.push(e12);
                                            }
                                            _rt::cabi_dealloc(base12, len12 * 8, 4);
                                            let l13 = *base.add(16).cast::<*mut u8>();
                                            let l14 = *base.add(20).cast::<usize>();
                                            let base18 = l13;
                                            let len18 = l14;
                                            let mut result18 = _rt::Vec::with_capacity(len18);
                                            for i in 0..len18 {
                                                let base = base18.add(i * 8);
                                                let e18 = {
                                                    let l15 = *base.add(0).cast::<*mut u8>();
                                                    let l16 = *base.add(4).cast::<usize>();
                                                    let len17 = l16;
                                                    let bytes17 = _rt::Vec::from_raw_parts(
                                                        l15.cast(),
                                                        len17,
                                                        len17,
                                                    );
                                                    _rt::string_lift(bytes17)
                                                };
                                                result18.push(e18);
                                            }
                                            _rt::cabi_dealloc(base18, len18 * 8, 4);
                                            EdgeTypeDefinition {
                                                collection: _rt::string_lift(bytes6),
                                                from_collections: result12,
                                                to_collections: result18,
                                            }
                                        };
                                        result19.push(e19);
                                    }
                                    _rt::cabi_dealloc(base19, len19 * 24, 4);
                                    result19
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l20 = i32::from(*ptr0.add(8).cast::<u8>());
                                    use super::super::super::golem::graph::errors::GraphError as V75;
                                    let v75 = match l20 {
                                        0 => {
                                            let e75 = {
                                                let l21 = *ptr0.add(16).cast::<*mut u8>();
                                                let l22 = *ptr0.add(20).cast::<usize>();
                                                let len23 = l22;
                                                let bytes23 = _rt::Vec::from_raw_parts(
                                                    l21.cast(),
                                                    len23,
                                                    len23,
                                                );
                                                _rt::string_lift(bytes23)
                                            };
                                            V75::UnsupportedOperation(e75)
                                        }
                                        1 => {
                                            let e75 = {
                                                let l24 = *ptr0.add(16).cast::<*mut u8>();
                                                let l25 = *ptr0.add(20).cast::<usize>();
                                                let len26 = l25;
                                                let bytes26 = _rt::Vec::from_raw_parts(
                                                    l24.cast(),
                                                    len26,
                                                    len26,
                                                );
                                                _rt::string_lift(bytes26)
                                            };
                                            V75::ConnectionFailed(e75)
                                        }
                                        2 => {
                                            let e75 = {
                                                let l27 = *ptr0.add(16).cast::<*mut u8>();
                                                let l28 = *ptr0.add(20).cast::<usize>();
                                                let len29 = l28;
                                                let bytes29 = _rt::Vec::from_raw_parts(
                                                    l27.cast(),
                                                    len29,
                                                    len29,
                                                );
                                                _rt::string_lift(bytes29)
                                            };
                                            V75::AuthenticationFailed(e75)
                                        }
                                        3 => {
                                            let e75 = {
                                                let l30 = *ptr0.add(16).cast::<*mut u8>();
                                                let l31 = *ptr0.add(20).cast::<usize>();
                                                let len32 = l31;
                                                let bytes32 = _rt::Vec::from_raw_parts(
                                                    l30.cast(),
                                                    len32,
                                                    len32,
                                                );
                                                _rt::string_lift(bytes32)
                                            };
                                            V75::AuthorizationFailed(e75)
                                        }
                                        4 => {
                                            let e75 = {
                                                let l33 = i32::from(*ptr0.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V41;
                                                let v41 = match l33 {
                                                    0 => {
                                                        let e41 = {
                                                            let l34 = *ptr0.add(24).cast::<*mut u8>();
                                                            let l35 = *ptr0.add(28).cast::<usize>();
                                                            let len36 = l35;
                                                            let bytes36 = _rt::Vec::from_raw_parts(
                                                                l34.cast(),
                                                                len36,
                                                                len36,
                                                            );
                                                            _rt::string_lift(bytes36)
                                                        };
                                                        V41::StringValue(e41)
                                                    }
                                                    1 => {
                                                        let e41 = {
                                                            let l37 = *ptr0.add(24).cast::<i64>();
                                                            l37
                                                        };
                                                        V41::Int64(e41)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e41 = {
                                                            let l38 = *ptr0.add(24).cast::<*mut u8>();
                                                            let l39 = *ptr0.add(28).cast::<usize>();
                                                            let len40 = l39;
                                                            let bytes40 = _rt::Vec::from_raw_parts(
                                                                l38.cast(),
                                                                len40,
                                                                len40,
                                                            );
                                                            _rt::string_lift(bytes40)
                                                        };
                                                        V41::Uuid(e41)
                                                    }
                                                };
                                                v41
                                            };
                                            V75::ElementNotFound(e75)
                                        }
                                        5 => {
                                            let e75 = {
                                                let l42 = i32::from(*ptr0.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V50;
                                                let v50 = match l42 {
                                                    0 => {
                                                        let e50 = {
                                                            let l43 = *ptr0.add(24).cast::<*mut u8>();
                                                            let l44 = *ptr0.add(28).cast::<usize>();
                                                            let len45 = l44;
                                                            let bytes45 = _rt::Vec::from_raw_parts(
                                                                l43.cast(),
                                                                len45,
                                                                len45,
                                                            );
                                                            _rt::string_lift(bytes45)
                                                        };
                                                        V50::StringValue(e50)
                                                    }
                                                    1 => {
                                                        let e50 = {
                                                            let l46 = *ptr0.add(24).cast::<i64>();
                                                            l46
                                                        };
                                                        V50::Int64(e50)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e50 = {
                                                            let l47 = *ptr0.add(24).cast::<*mut u8>();
                                                            let l48 = *ptr0.add(28).cast::<usize>();
                                                            let len49 = l48;
                                                            let bytes49 = _rt::Vec::from_raw_parts(
                                                                l47.cast(),
                                                                len49,
                                                                len49,
                                                            );
                                                            _rt::string_lift(bytes49)
                                                        };
                                                        V50::Uuid(e50)
                                                    }
                                                };
                                                v50
                                            };
                                            V75::DuplicateElement(e75)
                                        }
                                        6 => {
                                            let e75 = {
                                                let l51 = *ptr0.add(16).cast::<*mut u8>();
                                                let l52 = *ptr0.add(20).cast::<usize>();
                                                let len53 = l52;
                                                let bytes53 = _rt::Vec::from_raw_parts(
                                                    l51.cast(),
                                                    len53,
                                                    len53,
                                                );
                                                _rt::string_lift(bytes53)
                                            };
                                            V75::SchemaViolation(e75)
                                        }
                                        7 => {
                                            let e75 = {
                                                let l54 = *ptr0.add(16).cast::<*mut u8>();
                                                let l55 = *ptr0.add(20).cast::<usize>();
                                                let len56 = l55;
                                                let bytes56 = _rt::Vec::from_raw_parts(
                                                    l54.cast(),
                                                    len56,
                                                    len56,
                                                );
                                                _rt::string_lift(bytes56)
                                            };
                                            V75::ConstraintViolation(e75)
                                        }
                                        8 => {
                                            let e75 = {
                                                let l57 = *ptr0.add(16).cast::<*mut u8>();
                                                let l58 = *ptr0.add(20).cast::<usize>();
                                                let len59 = l58;
                                                let bytes59 = _rt::Vec::from_raw_parts(
                                                    l57.cast(),
                                                    len59,
                                                    len59,
                                                );
                                                _rt::string_lift(bytes59)
                                            };
                                            V75::InvalidPropertyType(e75)
                                        }
                                        9 => {
                                            let e75 = {
                                                let l60 = *ptr0.add(16).cast::<*mut u8>();
                                                let l61 = *ptr0.add(20).cast::<usize>();
                                                let len62 = l61;
                                                let bytes62 = _rt::Vec::from_raw_parts(
                                                    l60.cast(),
                                                    len62,
                                                    len62,
                                                );
                                                _rt::string_lift(bytes62)
                                            };
                                            V75::InvalidQuery(e75)
                                        }
                                        10 => {
                                            let e75 = {
                                                let l63 = *ptr0.add(16).cast::<*mut u8>();
                                                let l64 = *ptr0.add(20).cast::<usize>();
                                                let len65 = l64;
                                                let bytes65 = _rt::Vec::from_raw_parts(
                                                    l63.cast(),
                                                    len65,
                                                    len65,
                                                );
                                                _rt::string_lift(bytes65)
                                            };
                                            V75::TransactionFailed(e75)
                                        }
                                        11 => V75::TransactionConflict,
                                        12 => V75::TransactionTimeout,
                                        13 => V75::DeadlockDetected,
                                        14 => V75::Timeout,
                                        15 => {
                                            let e75 = {
                                                let l66 = *ptr0.add(16).cast::<*mut u8>();
                                                let l67 = *ptr0.add(20).cast::<usize>();
                                                let len68 = l67;
                                                let bytes68 = _rt::Vec::from_raw_parts(
                                                    l66.cast(),
                                                    len68,
                                                    len68,
                                                );
                                                _rt::string_lift(bytes68)
                                            };
                                            V75::ResourceExhausted(e75)
                                        }
                                        16 => {
                                            let e75 = {
                                                let l69 = *ptr0.add(16).cast::<*mut u8>();
                                                let l70 = *ptr0.add(20).cast::<usize>();
                                                let len71 = l70;
                                                let bytes71 = _rt::Vec::from_raw_parts(
                                                    l69.cast(),
                                                    len71,
                                                    len71,
                                                );
                                                _rt::string_lift(bytes71)
                                            };
                                            V75::InternalError(e75)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 17, "invalid enum discriminant");
                                            let e75 = {
                                                let l72 = *ptr0.add(16).cast::<*mut u8>();
                                                let l73 = *ptr0.add(20).cast::<usize>();
                                                let len74 = l73;
                                                let bytes74 = _rt::Vec::from_raw_parts(
                                                    l72.cast(),
                                                    len74,
                                                    len74,
                                                );
                                                _rt::string_lift(bytes74)
                                            };
                                            V75::ServiceUnavailable(e75)
                                        }
                                    };
                                    v75
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl SchemaManager {
                #[allow(unused_unsafe, clippy::all)]
                /// Create container/collection for organizing data
                pub fn create_container(
                    &self,
                    name: &str,
                    container_type: ContainerType,
                ) -> Result<(), GraphError> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 32]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 32],
                        );
                        let vec0 = name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:graph/schema@1.0.0")]
                        extern "C" {
                            #[link_name = "[method]schema-manager.create-container"]
                            fn wit_import(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            container_type.clone() as i32,
                            ptr1,
                        );
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l3 = i32::from(*ptr1.add(8).cast::<u8>());
                                    use super::super::super::golem::graph::errors::GraphError as V58;
                                    let v58 = match l3 {
                                        0 => {
                                            let e58 = {
                                                let l4 = *ptr1.add(16).cast::<*mut u8>();
                                                let l5 = *ptr1.add(20).cast::<usize>();
                                                let len6 = l5;
                                                let bytes6 = _rt::Vec::from_raw_parts(
                                                    l4.cast(),
                                                    len6,
                                                    len6,
                                                );
                                                _rt::string_lift(bytes6)
                                            };
                                            V58::UnsupportedOperation(e58)
                                        }
                                        1 => {
                                            let e58 = {
                                                let l7 = *ptr1.add(16).cast::<*mut u8>();
                                                let l8 = *ptr1.add(20).cast::<usize>();
                                                let len9 = l8;
                                                let bytes9 = _rt::Vec::from_raw_parts(
                                                    l7.cast(),
                                                    len9,
                                                    len9,
                                                );
                                                _rt::string_lift(bytes9)
                                            };
                                            V58::ConnectionFailed(e58)
                                        }
                                        2 => {
                                            let e58 = {
                                                let l10 = *ptr1.add(16).cast::<*mut u8>();
                                                let l11 = *ptr1.add(20).cast::<usize>();
                                                let len12 = l11;
                                                let bytes12 = _rt::Vec::from_raw_parts(
                                                    l10.cast(),
                                                    len12,
                                                    len12,
                                                );
                                                _rt::string_lift(bytes12)
                                            };
                                            V58::AuthenticationFailed(e58)
                                        }
                                        3 => {
                                            let e58 = {
                                                let l13 = *ptr1.add(16).cast::<*mut u8>();
                                                let l14 = *ptr1.add(20).cast::<usize>();
                                                let len15 = l14;
                                                let bytes15 = _rt::Vec::from_raw_parts(
                                                    l13.cast(),
                                                    len15,
                                                    len15,
                                                );
                                                _rt::string_lift(bytes15)
                                            };
                                            V58::AuthorizationFailed(e58)
                                        }
                                        4 => {
                                            let e58 = {
                                                let l16 = i32::from(*ptr1.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V24;
                                                let v24 = match l16 {
                                                    0 => {
                                                        let e24 = {
                                                            let l17 = *ptr1.add(24).cast::<*mut u8>();
                                                            let l18 = *ptr1.add(28).cast::<usize>();
                                                            let len19 = l18;
                                                            let bytes19 = _rt::Vec::from_raw_parts(
                                                                l17.cast(),
                                                                len19,
                                                                len19,
                                                            );
                                                            _rt::string_lift(bytes19)
                                                        };
                                                        V24::StringValue(e24)
                                                    }
                                                    1 => {
                                                        let e24 = {
                                                            let l20 = *ptr1.add(24).cast::<i64>();
                                                            l20
                                                        };
                                                        V24::Int64(e24)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e24 = {
                                                            let l21 = *ptr1.add(24).cast::<*mut u8>();
                                                            let l22 = *ptr1.add(28).cast::<usize>();
                                                            let len23 = l22;
                                                            let bytes23 = _rt::Vec::from_raw_parts(
                                                                l21.cast(),
                                                                len23,
                                                                len23,
                                                            );
                                                            _rt::string_lift(bytes23)
                                                        };
                                                        V24::Uuid(e24)
                                                    }
                                                };
                                                v24
                                            };
                                            V58::ElementNotFound(e58)
                                        }
                                        5 => {
                                            let e58 = {
                                                let l25 = i32::from(*ptr1.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V33;
                                                let v33 = match l25 {
                                                    0 => {
                                                        let e33 = {
                                                            let l26 = *ptr1.add(24).cast::<*mut u8>();
                                                            let l27 = *ptr1.add(28).cast::<usize>();
                                                            let len28 = l27;
                                                            let bytes28 = _rt::Vec::from_raw_parts(
                                                                l26.cast(),
                                                                len28,
                                                                len28,
                                                            );
                                                            _rt::string_lift(bytes28)
                                                        };
                                                        V33::StringValue(e33)
                                                    }
                                                    1 => {
                                                        let e33 = {
                                                            let l29 = *ptr1.add(24).cast::<i64>();
                                                            l29
                                                        };
                                                        V33::Int64(e33)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e33 = {
                                                            let l30 = *ptr1.add(24).cast::<*mut u8>();
                                                            let l31 = *ptr1.add(28).cast::<usize>();
                                                            let len32 = l31;
                                                            let bytes32 = _rt::Vec::from_raw_parts(
                                                                l30.cast(),
                                                                len32,
                                                                len32,
                                                            );
                                                            _rt::string_lift(bytes32)
                                                        };
                                                        V33::Uuid(e33)
                                                    }
                                                };
                                                v33
                                            };
                                            V58::DuplicateElement(e58)
                                        }
                                        6 => {
                                            let e58 = {
                                                let l34 = *ptr1.add(16).cast::<*mut u8>();
                                                let l35 = *ptr1.add(20).cast::<usize>();
                                                let len36 = l35;
                                                let bytes36 = _rt::Vec::from_raw_parts(
                                                    l34.cast(),
                                                    len36,
                                                    len36,
                                                );
                                                _rt::string_lift(bytes36)
                                            };
                                            V58::SchemaViolation(e58)
                                        }
                                        7 => {
                                            let e58 = {
                                                let l37 = *ptr1.add(16).cast::<*mut u8>();
                                                let l38 = *ptr1.add(20).cast::<usize>();
                                                let len39 = l38;
                                                let bytes39 = _rt::Vec::from_raw_parts(
                                                    l37.cast(),
                                                    len39,
                                                    len39,
                                                );
                                                _rt::string_lift(bytes39)
                                            };
                                            V58::ConstraintViolation(e58)
                                        }
                                        8 => {
                                            let e58 = {
                                                let l40 = *ptr1.add(16).cast::<*mut u8>();
                                                let l41 = *ptr1.add(20).cast::<usize>();
                                                let len42 = l41;
                                                let bytes42 = _rt::Vec::from_raw_parts(
                                                    l40.cast(),
                                                    len42,
                                                    len42,
                                                );
                                                _rt::string_lift(bytes42)
                                            };
                                            V58::InvalidPropertyType(e58)
                                        }
                                        9 => {
                                            let e58 = {
                                                let l43 = *ptr1.add(16).cast::<*mut u8>();
                                                let l44 = *ptr1.add(20).cast::<usize>();
                                                let len45 = l44;
                                                let bytes45 = _rt::Vec::from_raw_parts(
                                                    l43.cast(),
                                                    len45,
                                                    len45,
                                                );
                                                _rt::string_lift(bytes45)
                                            };
                                            V58::InvalidQuery(e58)
                                        }
                                        10 => {
                                            let e58 = {
                                                let l46 = *ptr1.add(16).cast::<*mut u8>();
                                                let l47 = *ptr1.add(20).cast::<usize>();
                                                let len48 = l47;
                                                let bytes48 = _rt::Vec::from_raw_parts(
                                                    l46.cast(),
                                                    len48,
                                                    len48,
                                                );
                                                _rt::string_lift(bytes48)
                                            };
                                            V58::TransactionFailed(e58)
                                        }
                                        11 => V58::TransactionConflict,
                                        12 => V58::TransactionTimeout,
                                        13 => V58::DeadlockDetected,
                                        14 => V58::Timeout,
                                        15 => {
                                            let e58 = {
                                                let l49 = *ptr1.add(16).cast::<*mut u8>();
                                                let l50 = *ptr1.add(20).cast::<usize>();
                                                let len51 = l50;
                                                let bytes51 = _rt::Vec::from_raw_parts(
                                                    l49.cast(),
                                                    len51,
                                                    len51,
                                                );
                                                _rt::string_lift(bytes51)
                                            };
                                            V58::ResourceExhausted(e58)
                                        }
                                        16 => {
                                            let e58 = {
                                                let l52 = *ptr1.add(16).cast::<*mut u8>();
                                                let l53 = *ptr1.add(20).cast::<usize>();
                                                let len54 = l53;
                                                let bytes54 = _rt::Vec::from_raw_parts(
                                                    l52.cast(),
                                                    len54,
                                                    len54,
                                                );
                                                _rt::string_lift(bytes54)
                                            };
                                            V58::InternalError(e58)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 17, "invalid enum discriminant");
                                            let e58 = {
                                                let l55 = *ptr1.add(16).cast::<*mut u8>();
                                                let l56 = *ptr1.add(20).cast::<usize>();
                                                let len57 = l56;
                                                let bytes57 = _rt::Vec::from_raw_parts(
                                                    l55.cast(),
                                                    len57,
                                                    len57,
                                                );
                                                _rt::string_lift(bytes57)
                                            };
                                            V58::ServiceUnavailable(e58)
                                        }
                                    };
                                    v58
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl SchemaManager {
                #[allow(unused_unsafe, clippy::all)]
                /// List containers/collections
                pub fn list_containers(
                    &self,
                ) -> Result<_rt::Vec<ContainerInfo>, GraphError> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 32]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 32],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:graph/schema@1.0.0")]
                        extern "C" {
                            #[link_name = "[method]schema-manager.list-containers"]
                            fn wit_import(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(8).cast::<*mut u8>();
                                    let l3 = *ptr0.add(12).cast::<usize>();
                                    let base10 = l2;
                                    let len10 = l3;
                                    let mut result10 = _rt::Vec::with_capacity(len10);
                                    for i in 0..len10 {
                                        let base = base10.add(i * 32);
                                        let e10 = {
                                            let l4 = *base.add(0).cast::<*mut u8>();
                                            let l5 = *base.add(4).cast::<usize>();
                                            let len6 = l5;
                                            let bytes6 = _rt::Vec::from_raw_parts(
                                                l4.cast(),
                                                len6,
                                                len6,
                                            );
                                            let l7 = i32::from(*base.add(8).cast::<u8>());
                                            let l8 = i32::from(*base.add(16).cast::<u8>());
                                            ContainerInfo {
                                                name: _rt::string_lift(bytes6),
                                                container_type: ContainerType::_lift(l7 as u8),
                                                element_count: match l8 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l9 = *base.add(24).cast::<i64>();
                                                            l9 as u64
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                            }
                                        };
                                        result10.push(e10);
                                    }
                                    _rt::cabi_dealloc(base10, len10 * 32, 8);
                                    result10
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l11 = i32::from(*ptr0.add(8).cast::<u8>());
                                    use super::super::super::golem::graph::errors::GraphError as V66;
                                    let v66 = match l11 {
                                        0 => {
                                            let e66 = {
                                                let l12 = *ptr0.add(16).cast::<*mut u8>();
                                                let l13 = *ptr0.add(20).cast::<usize>();
                                                let len14 = l13;
                                                let bytes14 = _rt::Vec::from_raw_parts(
                                                    l12.cast(),
                                                    len14,
                                                    len14,
                                                );
                                                _rt::string_lift(bytes14)
                                            };
                                            V66::UnsupportedOperation(e66)
                                        }
                                        1 => {
                                            let e66 = {
                                                let l15 = *ptr0.add(16).cast::<*mut u8>();
                                                let l16 = *ptr0.add(20).cast::<usize>();
                                                let len17 = l16;
                                                let bytes17 = _rt::Vec::from_raw_parts(
                                                    l15.cast(),
                                                    len17,
                                                    len17,
                                                );
                                                _rt::string_lift(bytes17)
                                            };
                                            V66::ConnectionFailed(e66)
                                        }
                                        2 => {
                                            let e66 = {
                                                let l18 = *ptr0.add(16).cast::<*mut u8>();
                                                let l19 = *ptr0.add(20).cast::<usize>();
                                                let len20 = l19;
                                                let bytes20 = _rt::Vec::from_raw_parts(
                                                    l18.cast(),
                                                    len20,
                                                    len20,
                                                );
                                                _rt::string_lift(bytes20)
                                            };
                                            V66::AuthenticationFailed(e66)
                                        }
                                        3 => {
                                            let e66 = {
                                                let l21 = *ptr0.add(16).cast::<*mut u8>();
                                                let l22 = *ptr0.add(20).cast::<usize>();
                                                let len23 = l22;
                                                let bytes23 = _rt::Vec::from_raw_parts(
                                                    l21.cast(),
                                                    len23,
                                                    len23,
                                                );
                                                _rt::string_lift(bytes23)
                                            };
                                            V66::AuthorizationFailed(e66)
                                        }
                                        4 => {
                                            let e66 = {
                                                let l24 = i32::from(*ptr0.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V32;
                                                let v32 = match l24 {
                                                    0 => {
                                                        let e32 = {
                                                            let l25 = *ptr0.add(24).cast::<*mut u8>();
                                                            let l26 = *ptr0.add(28).cast::<usize>();
                                                            let len27 = l26;
                                                            let bytes27 = _rt::Vec::from_raw_parts(
                                                                l25.cast(),
                                                                len27,
                                                                len27,
                                                            );
                                                            _rt::string_lift(bytes27)
                                                        };
                                                        V32::StringValue(e32)
                                                    }
                                                    1 => {
                                                        let e32 = {
                                                            let l28 = *ptr0.add(24).cast::<i64>();
                                                            l28
                                                        };
                                                        V32::Int64(e32)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e32 = {
                                                            let l29 = *ptr0.add(24).cast::<*mut u8>();
                                                            let l30 = *ptr0.add(28).cast::<usize>();
                                                            let len31 = l30;
                                                            let bytes31 = _rt::Vec::from_raw_parts(
                                                                l29.cast(),
                                                                len31,
                                                                len31,
                                                            );
                                                            _rt::string_lift(bytes31)
                                                        };
                                                        V32::Uuid(e32)
                                                    }
                                                };
                                                v32
                                            };
                                            V66::ElementNotFound(e66)
                                        }
                                        5 => {
                                            let e66 = {
                                                let l33 = i32::from(*ptr0.add(16).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V41;
                                                let v41 = match l33 {
                                                    0 => {
                                                        let e41 = {
                                                            let l34 = *ptr0.add(24).cast::<*mut u8>();
                                                            let l35 = *ptr0.add(28).cast::<usize>();
                                                            let len36 = l35;
                                                            let bytes36 = _rt::Vec::from_raw_parts(
                                                                l34.cast(),
                                                                len36,
                                                                len36,
                                                            );
                                                            _rt::string_lift(bytes36)
                                                        };
                                                        V41::StringValue(e41)
                                                    }
                                                    1 => {
                                                        let e41 = {
                                                            let l37 = *ptr0.add(24).cast::<i64>();
                                                            l37
                                                        };
                                                        V41::Int64(e41)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e41 = {
                                                            let l38 = *ptr0.add(24).cast::<*mut u8>();
                                                            let l39 = *ptr0.add(28).cast::<usize>();
                                                            let len40 = l39;
                                                            let bytes40 = _rt::Vec::from_raw_parts(
                                                                l38.cast(),
                                                                len40,
                                                                len40,
                                                            );
                                                            _rt::string_lift(bytes40)
                                                        };
                                                        V41::Uuid(e41)
                                                    }
                                                };
                                                v41
                                            };
                                            V66::DuplicateElement(e66)
                                        }
                                        6 => {
                                            let e66 = {
                                                let l42 = *ptr0.add(16).cast::<*mut u8>();
                                                let l43 = *ptr0.add(20).cast::<usize>();
                                                let len44 = l43;
                                                let bytes44 = _rt::Vec::from_raw_parts(
                                                    l42.cast(),
                                                    len44,
                                                    len44,
                                                );
                                                _rt::string_lift(bytes44)
                                            };
                                            V66::SchemaViolation(e66)
                                        }
                                        7 => {
                                            let e66 = {
                                                let l45 = *ptr0.add(16).cast::<*mut u8>();
                                                let l46 = *ptr0.add(20).cast::<usize>();
                                                let len47 = l46;
                                                let bytes47 = _rt::Vec::from_raw_parts(
                                                    l45.cast(),
                                                    len47,
                                                    len47,
                                                );
                                                _rt::string_lift(bytes47)
                                            };
                                            V66::ConstraintViolation(e66)
                                        }
                                        8 => {
                                            let e66 = {
                                                let l48 = *ptr0.add(16).cast::<*mut u8>();
                                                let l49 = *ptr0.add(20).cast::<usize>();
                                                let len50 = l49;
                                                let bytes50 = _rt::Vec::from_raw_parts(
                                                    l48.cast(),
                                                    len50,
                                                    len50,
                                                );
                                                _rt::string_lift(bytes50)
                                            };
                                            V66::InvalidPropertyType(e66)
                                        }
                                        9 => {
                                            let e66 = {
                                                let l51 = *ptr0.add(16).cast::<*mut u8>();
                                                let l52 = *ptr0.add(20).cast::<usize>();
                                                let len53 = l52;
                                                let bytes53 = _rt::Vec::from_raw_parts(
                                                    l51.cast(),
                                                    len53,
                                                    len53,
                                                );
                                                _rt::string_lift(bytes53)
                                            };
                                            V66::InvalidQuery(e66)
                                        }
                                        10 => {
                                            let e66 = {
                                                let l54 = *ptr0.add(16).cast::<*mut u8>();
                                                let l55 = *ptr0.add(20).cast::<usize>();
                                                let len56 = l55;
                                                let bytes56 = _rt::Vec::from_raw_parts(
                                                    l54.cast(),
                                                    len56,
                                                    len56,
                                                );
                                                _rt::string_lift(bytes56)
                                            };
                                            V66::TransactionFailed(e66)
                                        }
                                        11 => V66::TransactionConflict,
                                        12 => V66::TransactionTimeout,
                                        13 => V66::DeadlockDetected,
                                        14 => V66::Timeout,
                                        15 => {
                                            let e66 = {
                                                let l57 = *ptr0.add(16).cast::<*mut u8>();
                                                let l58 = *ptr0.add(20).cast::<usize>();
                                                let len59 = l58;
                                                let bytes59 = _rt::Vec::from_raw_parts(
                                                    l57.cast(),
                                                    len59,
                                                    len59,
                                                );
                                                _rt::string_lift(bytes59)
                                            };
                                            V66::ResourceExhausted(e66)
                                        }
                                        16 => {
                                            let e66 = {
                                                let l60 = *ptr0.add(16).cast::<*mut u8>();
                                                let l61 = *ptr0.add(20).cast::<usize>();
                                                let len62 = l61;
                                                let bytes62 = _rt::Vec::from_raw_parts(
                                                    l60.cast(),
                                                    len62,
                                                    len62,
                                                );
                                                _rt::string_lift(bytes62)
                                            };
                                            V66::InternalError(e66)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 17, "invalid enum discriminant");
                                            let e66 = {
                                                let l63 = *ptr0.add(16).cast::<*mut u8>();
                                                let l64 = *ptr0.add(20).cast::<usize>();
                                                let len65 = l64;
                                                let bytes65 = _rt::Vec::from_raw_parts(
                                                    l63.cast(),
                                                    len65,
                                                    len65,
                                                );
                                                _rt::string_lift(bytes65)
                                            };
                                            V66::ServiceUnavailable(e66)
                                        }
                                    };
                                    v66
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Get schema manager for the graph
            pub fn get_schema_manager() -> Result<SchemaManager, GraphError> {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 32]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 32]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:graph/schema@1.0.0")]
                    extern "C" {
                        #[link_name = "get-schema-manager"]
                        fn wit_import(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0);
                    let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                    match l1 {
                        0 => {
                            let e = {
                                let l2 = *ptr0.add(8).cast::<i32>();
                                SchemaManager::from_handle(l2 as u32)
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l3 = i32::from(*ptr0.add(8).cast::<u8>());
                                use super::super::super::golem::graph::errors::GraphError as V58;
                                let v58 = match l3 {
                                    0 => {
                                        let e58 = {
                                            let l4 = *ptr0.add(16).cast::<*mut u8>();
                                            let l5 = *ptr0.add(20).cast::<usize>();
                                            let len6 = l5;
                                            let bytes6 = _rt::Vec::from_raw_parts(
                                                l4.cast(),
                                                len6,
                                                len6,
                                            );
                                            _rt::string_lift(bytes6)
                                        };
                                        V58::UnsupportedOperation(e58)
                                    }
                                    1 => {
                                        let e58 = {
                                            let l7 = *ptr0.add(16).cast::<*mut u8>();
                                            let l8 = *ptr0.add(20).cast::<usize>();
                                            let len9 = l8;
                                            let bytes9 = _rt::Vec::from_raw_parts(
                                                l7.cast(),
                                                len9,
                                                len9,
                                            );
                                            _rt::string_lift(bytes9)
                                        };
                                        V58::ConnectionFailed(e58)
                                    }
                                    2 => {
                                        let e58 = {
                                            let l10 = *ptr0.add(16).cast::<*mut u8>();
                                            let l11 = *ptr0.add(20).cast::<usize>();
                                            let len12 = l11;
                                            let bytes12 = _rt::Vec::from_raw_parts(
                                                l10.cast(),
                                                len12,
                                                len12,
                                            );
                                            _rt::string_lift(bytes12)
                                        };
                                        V58::AuthenticationFailed(e58)
                                    }
                                    3 => {
                                        let e58 = {
                                            let l13 = *ptr0.add(16).cast::<*mut u8>();
                                            let l14 = *ptr0.add(20).cast::<usize>();
                                            let len15 = l14;
                                            let bytes15 = _rt::Vec::from_raw_parts(
                                                l13.cast(),
                                                len15,
                                                len15,
                                            );
                                            _rt::string_lift(bytes15)
                                        };
                                        V58::AuthorizationFailed(e58)
                                    }
                                    4 => {
                                        let e58 = {
                                            let l16 = i32::from(*ptr0.add(16).cast::<u8>());
                                            use super::super::super::golem::graph::types::ElementId as V24;
                                            let v24 = match l16 {
                                                0 => {
                                                    let e24 = {
                                                        let l17 = *ptr0.add(24).cast::<*mut u8>();
                                                        let l18 = *ptr0.add(28).cast::<usize>();
                                                        let len19 = l18;
                                                        let bytes19 = _rt::Vec::from_raw_parts(
                                                            l17.cast(),
                                                            len19,
                                                            len19,
                                                        );
                                                        _rt::string_lift(bytes19)
                                                    };
                                                    V24::StringValue(e24)
                                                }
                                                1 => {
                                                    let e24 = {
                                                        let l20 = *ptr0.add(24).cast::<i64>();
                                                        l20
                                                    };
                                                    V24::Int64(e24)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                    let e24 = {
                                                        let l21 = *ptr0.add(24).cast::<*mut u8>();
                                                        let l22 = *ptr0.add(28).cast::<usize>();
                                                        let len23 = l22;
                                                        let bytes23 = _rt::Vec::from_raw_parts(
                                                            l21.cast(),
                                                            len23,
                                                            len23,
                                                        );
                                                        _rt::string_lift(bytes23)
                                                    };
                                                    V24::Uuid(e24)
                                                }
                                            };
                                            v24
                                        };
                                        V58::ElementNotFound(e58)
                                    }
                                    5 => {
                                        let e58 = {
                                            let l25 = i32::from(*ptr0.add(16).cast::<u8>());
                                            use super::super::super::golem::graph::types::ElementId as V33;
                                            let v33 = match l25 {
                                                0 => {
                                                    let e33 = {
                                                        let l26 = *ptr0.add(24).cast::<*mut u8>();
                                                        let l27 = *ptr0.add(28).cast::<usize>();
                                                        let len28 = l27;
                                                        let bytes28 = _rt::Vec::from_raw_parts(
                                                            l26.cast(),
                                                            len28,
                                                            len28,
                                                        );
                                                        _rt::string_lift(bytes28)
                                                    };
                                                    V33::StringValue(e33)
                                                }
                                                1 => {
                                                    let e33 = {
                                                        let l29 = *ptr0.add(24).cast::<i64>();
                                                        l29
                                                    };
                                                    V33::Int64(e33)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                    let e33 = {
                                                        let l30 = *ptr0.add(24).cast::<*mut u8>();
                                                        let l31 = *ptr0.add(28).cast::<usize>();
                                                        let len32 = l31;
                                                        let bytes32 = _rt::Vec::from_raw_parts(
                                                            l30.cast(),
                                                            len32,
                                                            len32,
                                                        );
                                                        _rt::string_lift(bytes32)
                                                    };
                                                    V33::Uuid(e33)
                                                }
                                            };
                                            v33
                                        };
                                        V58::DuplicateElement(e58)
                                    }
                                    6 => {
                                        let e58 = {
                                            let l34 = *ptr0.add(16).cast::<*mut u8>();
                                            let l35 = *ptr0.add(20).cast::<usize>();
                                            let len36 = l35;
                                            let bytes36 = _rt::Vec::from_raw_parts(
                                                l34.cast(),
                                                len36,
                                                len36,
                                            );
                                            _rt::string_lift(bytes36)
                                        };
                                        V58::SchemaViolation(e58)
                                    }
                                    7 => {
                                        let e58 = {
                                            let l37 = *ptr0.add(16).cast::<*mut u8>();
                                            let l38 = *ptr0.add(20).cast::<usize>();
                                            let len39 = l38;
                                            let bytes39 = _rt::Vec::from_raw_parts(
                                                l37.cast(),
                                                len39,
                                                len39,
                                            );
                                            _rt::string_lift(bytes39)
                                        };
                                        V58::ConstraintViolation(e58)
                                    }
                                    8 => {
                                        let e58 = {
                                            let l40 = *ptr0.add(16).cast::<*mut u8>();
                                            let l41 = *ptr0.add(20).cast::<usize>();
                                            let len42 = l41;
                                            let bytes42 = _rt::Vec::from_raw_parts(
                                                l40.cast(),
                                                len42,
                                                len42,
                                            );
                                            _rt::string_lift(bytes42)
                                        };
                                        V58::InvalidPropertyType(e58)
                                    }
                                    9 => {
                                        let e58 = {
                                            let l43 = *ptr0.add(16).cast::<*mut u8>();
                                            let l44 = *ptr0.add(20).cast::<usize>();
                                            let len45 = l44;
                                            let bytes45 = _rt::Vec::from_raw_parts(
                                                l43.cast(),
                                                len45,
                                                len45,
                                            );
                                            _rt::string_lift(bytes45)
                                        };
                                        V58::InvalidQuery(e58)
                                    }
                                    10 => {
                                        let e58 = {
                                            let l46 = *ptr0.add(16).cast::<*mut u8>();
                                            let l47 = *ptr0.add(20).cast::<usize>();
                                            let len48 = l47;
                                            let bytes48 = _rt::Vec::from_raw_parts(
                                                l46.cast(),
                                                len48,
                                                len48,
                                            );
                                            _rt::string_lift(bytes48)
                                        };
                                        V58::TransactionFailed(e58)
                                    }
                                    11 => V58::TransactionConflict,
                                    12 => V58::TransactionTimeout,
                                    13 => V58::DeadlockDetected,
                                    14 => V58::Timeout,
                                    15 => {
                                        let e58 = {
                                            let l49 = *ptr0.add(16).cast::<*mut u8>();
                                            let l50 = *ptr0.add(20).cast::<usize>();
                                            let len51 = l50;
                                            let bytes51 = _rt::Vec::from_raw_parts(
                                                l49.cast(),
                                                len51,
                                                len51,
                                            );
                                            _rt::string_lift(bytes51)
                                        };
                                        V58::ResourceExhausted(e58)
                                    }
                                    16 => {
                                        let e58 = {
                                            let l52 = *ptr0.add(16).cast::<*mut u8>();
                                            let l53 = *ptr0.add(20).cast::<usize>();
                                            let len54 = l53;
                                            let bytes54 = _rt::Vec::from_raw_parts(
                                                l52.cast(),
                                                len54,
                                                len54,
                                            );
                                            _rt::string_lift(bytes54)
                                        };
                                        V58::InternalError(e58)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 17, "invalid enum discriminant");
                                        let e58 = {
                                            let l55 = *ptr0.add(16).cast::<*mut u8>();
                                            let l56 = *ptr0.add(20).cast::<usize>();
                                            let len57 = l56;
                                            let bytes57 = _rt::Vec::from_raw_parts(
                                                l55.cast(),
                                                len57,
                                                len57,
                                            );
                                            _rt::string_lift(bytes57)
                                        };
                                        V58::ServiceUnavailable(e58)
                                    }
                                };
                                v58
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
        }
        /// Graph traversal and pathfinding operations
        #[allow(dead_code, clippy::all)]
        pub mod traversal {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Vertex = super::super::super::golem::graph::types::Vertex;
            pub type Edge = super::super::super::golem::graph::types::Edge;
            pub type Path = super::super::super::golem::graph::types::Path;
            pub type ElementId = super::super::super::golem::graph::types::ElementId;
            pub type Direction = super::super::super::golem::graph::types::Direction;
            pub type FilterCondition = super::super::super::golem::graph::types::FilterCondition;
            pub type GraphError = super::super::super::golem::graph::errors::GraphError;
            pub type Transaction = super::super::super::golem::graph::transactions::Transaction;
            /// Path finding options
            #[derive(Clone)]
            pub struct PathOptions {
                pub max_depth: Option<u32>,
                pub edge_types: Option<_rt::Vec<_rt::String>>,
                pub vertex_types: Option<_rt::Vec<_rt::String>>,
                pub vertex_filters: Option<_rt::Vec<FilterCondition>>,
                pub edge_filters: Option<_rt::Vec<FilterCondition>>,
            }
            impl ::core::fmt::Debug for PathOptions {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("PathOptions")
                        .field("max-depth", &self.max_depth)
                        .field("edge-types", &self.edge_types)
                        .field("vertex-types", &self.vertex_types)
                        .field("vertex-filters", &self.vertex_filters)
                        .field("edge-filters", &self.edge_filters)
                        .finish()
                }
            }
            /// Neighborhood exploration options
            #[derive(Clone)]
            pub struct NeighborhoodOptions {
                pub depth: u32,
                pub direction: Direction,
                pub edge_types: Option<_rt::Vec<_rt::String>>,
                pub max_vertices: Option<u32>,
            }
            impl ::core::fmt::Debug for NeighborhoodOptions {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("NeighborhoodOptions")
                        .field("depth", &self.depth)
                        .field("direction", &self.direction)
                        .field("edge-types", &self.edge_types)
                        .field("max-vertices", &self.max_vertices)
                        .finish()
                }
            }
            /// Subgraph containing related vertices and edges
            #[derive(Clone)]
            pub struct Subgraph {
                pub vertices: _rt::Vec<Vertex>,
                pub edges: _rt::Vec<Edge>,
            }
            impl ::core::fmt::Debug for Subgraph {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Subgraph")
                        .field("vertices", &self.vertices)
                        .field("edges", &self.edges)
                        .finish()
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Find shortest path between two vertices
            pub fn find_shortest_path(
                transaction: &Transaction,
                from_vertex: &ElementId,
                to_vertex: &ElementId,
                options: Option<&PathOptions>,
            ) -> Result<Option<Path>, GraphError> {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 104]);
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 104],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    *ptr0.add(0).cast::<i32>() = (transaction).handle() as i32;
                    use super::super::super::golem::graph::types::ElementId as V3;
                    match from_vertex {
                        V3::StringValue(e) => {
                            *ptr0.add(8).cast::<u8>() = (0i32) as u8;
                            let vec1 = e;
                            let ptr1 = vec1.as_ptr().cast::<u8>();
                            let len1 = vec1.len();
                            *ptr0.add(20).cast::<usize>() = len1;
                            *ptr0.add(16).cast::<*mut u8>() = ptr1.cast_mut();
                        }
                        V3::Int64(e) => {
                            *ptr0.add(8).cast::<u8>() = (1i32) as u8;
                            *ptr0.add(16).cast::<i64>() = _rt::as_i64(e);
                        }
                        V3::Uuid(e) => {
                            *ptr0.add(8).cast::<u8>() = (2i32) as u8;
                            let vec2 = e;
                            let ptr2 = vec2.as_ptr().cast::<u8>();
                            let len2 = vec2.len();
                            *ptr0.add(20).cast::<usize>() = len2;
                            *ptr0.add(16).cast::<*mut u8>() = ptr2.cast_mut();
                        }
                    }
                    use super::super::super::golem::graph::types::ElementId as V6;
                    match to_vertex {
                        V6::StringValue(e) => {
                            *ptr0.add(24).cast::<u8>() = (0i32) as u8;
                            let vec4 = e;
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            *ptr0.add(36).cast::<usize>() = len4;
                            *ptr0.add(32).cast::<*mut u8>() = ptr4.cast_mut();
                        }
                        V6::Int64(e) => {
                            *ptr0.add(24).cast::<u8>() = (1i32) as u8;
                            *ptr0.add(32).cast::<i64>() = _rt::as_i64(e);
                        }
                        V6::Uuid(e) => {
                            *ptr0.add(24).cast::<u8>() = (2i32) as u8;
                            let vec5 = e;
                            let ptr5 = vec5.as_ptr().cast::<u8>();
                            let len5 = vec5.len();
                            *ptr0.add(36).cast::<usize>() = len5;
                            *ptr0.add(32).cast::<*mut u8>() = ptr5.cast_mut();
                        }
                    }
                    match options {
                        Some(e) => {
                            *ptr0.add(40).cast::<u8>() = (1i32) as u8;
                            let PathOptions {
                                max_depth: max_depth7,
                                edge_types: edge_types7,
                                vertex_types: vertex_types7,
                                vertex_filters: vertex_filters7,
                                edge_filters: edge_filters7,
                            } = e;
                            match max_depth7 {
                                Some(e) => {
                                    *ptr0.add(44).cast::<u8>() = (1i32) as u8;
                                    *ptr0.add(48).cast::<i32>() = _rt::as_i32(e);
                                }
                                None => {
                                    *ptr0.add(44).cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match edge_types7 {
                                Some(e) => {
                                    *ptr0.add(52).cast::<u8>() = (1i32) as u8;
                                    let vec9 = e;
                                    let len9 = vec9.len();
                                    let layout9 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec9.len() * 8,
                                        4,
                                    );
                                    let result9 = if layout9.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout9).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout9);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec9.into_iter().enumerate() {
                                        let base = result9.add(i * 8);
                                        {
                                            let vec8 = e;
                                            let ptr8 = vec8.as_ptr().cast::<u8>();
                                            let len8 = vec8.len();
                                            *base.add(4).cast::<usize>() = len8;
                                            *base.add(0).cast::<*mut u8>() = ptr8.cast_mut();
                                        }
                                    }
                                    *ptr0.add(60).cast::<usize>() = len9;
                                    *ptr0.add(56).cast::<*mut u8>() = result9;
                                    cleanup_list.extend_from_slice(&[(result9, layout9)]);
                                }
                                None => {
                                    *ptr0.add(52).cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match vertex_types7 {
                                Some(e) => {
                                    *ptr0.add(64).cast::<u8>() = (1i32) as u8;
                                    let vec11 = e;
                                    let len11 = vec11.len();
                                    let layout11 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec11.len() * 8,
                                        4,
                                    );
                                    let result11 = if layout11.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout11).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout11);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec11.into_iter().enumerate() {
                                        let base = result11.add(i * 8);
                                        {
                                            let vec10 = e;
                                            let ptr10 = vec10.as_ptr().cast::<u8>();
                                            let len10 = vec10.len();
                                            *base.add(4).cast::<usize>() = len10;
                                            *base.add(0).cast::<*mut u8>() = ptr10.cast_mut();
                                        }
                                    }
                                    *ptr0.add(72).cast::<usize>() = len11;
                                    *ptr0.add(68).cast::<*mut u8>() = result11;
                                    cleanup_list.extend_from_slice(&[(result11, layout11)]);
                                }
                                None => {
                                    *ptr0.add(64).cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match vertex_filters7 {
                                Some(e) => {
                                    *ptr0.add(76).cast::<u8>() = (1i32) as u8;
                                    let vec33 = e;
                                    let len33 = vec33.len();
                                    let layout33 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec33.len() * 56,
                                        8,
                                    );
                                    let result33 = if layout33.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout33).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout33);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec33.into_iter().enumerate() {
                                        let base = result33.add(i * 56);
                                        {
                                            let super::super::super::golem::graph::types::FilterCondition {
                                                property: property12,
                                                operator: operator12,
                                                value: value12,
                                            } = e;
                                            let vec13 = property12;
                                            let ptr13 = vec13.as_ptr().cast::<u8>();
                                            let len13 = vec13.len();
                                            *base.add(4).cast::<usize>() = len13;
                                            *base.add(0).cast::<*mut u8>() = ptr13.cast_mut();
                                            *base.add(8).cast::<u8>() = (operator12.clone() as i32)
                                                as u8;
                                            use super::super::super::golem::graph::types::PropertyValue as V32;
                                            match value12 {
                                                V32::NullValue => {
                                                    *base.add(16).cast::<u8>() = (0i32) as u8;
                                                }
                                                V32::Boolean(e) => {
                                                    *base.add(16).cast::<u8>() = (1i32) as u8;
                                                    *base.add(24).cast::<u8>() = (match e {
                                                        true => 1,
                                                        false => 0,
                                                    }) as u8;
                                                }
                                                V32::Int8(e) => {
                                                    *base.add(16).cast::<u8>() = (2i32) as u8;
                                                    *base.add(24).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                                }
                                                V32::Int16(e) => {
                                                    *base.add(16).cast::<u8>() = (3i32) as u8;
                                                    *base.add(24).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                                }
                                                V32::Int32(e) => {
                                                    *base.add(16).cast::<u8>() = (4i32) as u8;
                                                    *base.add(24).cast::<i32>() = _rt::as_i32(e);
                                                }
                                                V32::Int64(e) => {
                                                    *base.add(16).cast::<u8>() = (5i32) as u8;
                                                    *base.add(24).cast::<i64>() = _rt::as_i64(e);
                                                }
                                                V32::Uint8(e) => {
                                                    *base.add(16).cast::<u8>() = (6i32) as u8;
                                                    *base.add(24).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                                }
                                                V32::Uint16(e) => {
                                                    *base.add(16).cast::<u8>() = (7i32) as u8;
                                                    *base.add(24).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                                }
                                                V32::Uint32(e) => {
                                                    *base.add(16).cast::<u8>() = (8i32) as u8;
                                                    *base.add(24).cast::<i32>() = _rt::as_i32(e);
                                                }
                                                V32::Uint64(e) => {
                                                    *base.add(16).cast::<u8>() = (9i32) as u8;
                                                    *base.add(24).cast::<i64>() = _rt::as_i64(e);
                                                }
                                                V32::Float32Value(e) => {
                                                    *base.add(16).cast::<u8>() = (10i32) as u8;
                                                    *base.add(24).cast::<f32>() = _rt::as_f32(e);
                                                }
                                                V32::Float64Value(e) => {
                                                    *base.add(16).cast::<u8>() = (11i32) as u8;
                                                    *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                }
                                                V32::StringValue(e) => {
                                                    *base.add(16).cast::<u8>() = (12i32) as u8;
                                                    let vec14 = e;
                                                    let ptr14 = vec14.as_ptr().cast::<u8>();
                                                    let len14 = vec14.len();
                                                    *base.add(28).cast::<usize>() = len14;
                                                    *base.add(24).cast::<*mut u8>() = ptr14.cast_mut();
                                                }
                                                V32::Bytes(e) => {
                                                    *base.add(16).cast::<u8>() = (13i32) as u8;
                                                    let vec15 = e;
                                                    let ptr15 = vec15.as_ptr().cast::<u8>();
                                                    let len15 = vec15.len();
                                                    *base.add(28).cast::<usize>() = len15;
                                                    *base.add(24).cast::<*mut u8>() = ptr15.cast_mut();
                                                }
                                                V32::Date(e) => {
                                                    *base.add(16).cast::<u8>() = (14i32) as u8;
                                                    let super::super::super::golem::graph::types::Date {
                                                        year: year16,
                                                        month: month16,
                                                        day: day16,
                                                    } = e;
                                                    *base.add(24).cast::<i32>() = _rt::as_i32(year16);
                                                    *base.add(28).cast::<u8>() = (_rt::as_i32(month16)) as u8;
                                                    *base.add(29).cast::<u8>() = (_rt::as_i32(day16)) as u8;
                                                }
                                                V32::Time(e) => {
                                                    *base.add(16).cast::<u8>() = (15i32) as u8;
                                                    let super::super::super::golem::graph::types::Time {
                                                        hour: hour17,
                                                        minute: minute17,
                                                        second: second17,
                                                        nanosecond: nanosecond17,
                                                    } = e;
                                                    *base.add(24).cast::<u8>() = (_rt::as_i32(hour17)) as u8;
                                                    *base.add(25).cast::<u8>() = (_rt::as_i32(minute17)) as u8;
                                                    *base.add(26).cast::<u8>() = (_rt::as_i32(second17)) as u8;
                                                    *base.add(28).cast::<i32>() = _rt::as_i32(nanosecond17);
                                                }
                                                V32::Datetime(e) => {
                                                    *base.add(16).cast::<u8>() = (16i32) as u8;
                                                    let super::super::super::golem::graph::types::Datetime {
                                                        date: date18,
                                                        time: time18,
                                                        timezone_offset_minutes: timezone_offset_minutes18,
                                                    } = e;
                                                    let super::super::super::golem::graph::types::Date {
                                                        year: year19,
                                                        month: month19,
                                                        day: day19,
                                                    } = date18;
                                                    *base.add(24).cast::<i32>() = _rt::as_i32(year19);
                                                    *base.add(28).cast::<u8>() = (_rt::as_i32(month19)) as u8;
                                                    *base.add(29).cast::<u8>() = (_rt::as_i32(day19)) as u8;
                                                    let super::super::super::golem::graph::types::Time {
                                                        hour: hour20,
                                                        minute: minute20,
                                                        second: second20,
                                                        nanosecond: nanosecond20,
                                                    } = time18;
                                                    *base.add(32).cast::<u8>() = (_rt::as_i32(hour20)) as u8;
                                                    *base.add(33).cast::<u8>() = (_rt::as_i32(minute20)) as u8;
                                                    *base.add(34).cast::<u8>() = (_rt::as_i32(second20)) as u8;
                                                    *base.add(36).cast::<i32>() = _rt::as_i32(nanosecond20);
                                                    match timezone_offset_minutes18 {
                                                        Some(e) => {
                                                            *base.add(40).cast::<u8>() = (1i32) as u8;
                                                            *base.add(42).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                                        }
                                                        None => {
                                                            *base.add(40).cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                                V32::Duration(e) => {
                                                    *base.add(16).cast::<u8>() = (17i32) as u8;
                                                    let super::super::super::golem::graph::types::Duration {
                                                        seconds: seconds21,
                                                        nanoseconds: nanoseconds21,
                                                    } = e;
                                                    *base.add(24).cast::<i64>() = _rt::as_i64(seconds21);
                                                    *base.add(32).cast::<i32>() = _rt::as_i32(nanoseconds21);
                                                }
                                                V32::Point(e) => {
                                                    *base.add(16).cast::<u8>() = (18i32) as u8;
                                                    let super::super::super::golem::graph::types::Point {
                                                        longitude: longitude22,
                                                        latitude: latitude22,
                                                        altitude: altitude22,
                                                    } = e;
                                                    *base.add(24).cast::<f64>() = _rt::as_f64(longitude22);
                                                    *base.add(32).cast::<f64>() = _rt::as_f64(latitude22);
                                                    match altitude22 {
                                                        Some(e) => {
                                                            *base.add(40).cast::<u8>() = (1i32) as u8;
                                                            *base.add(48).cast::<f64>() = _rt::as_f64(e);
                                                        }
                                                        None => {
                                                            *base.add(40).cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                                V32::Linestring(e) => {
                                                    *base.add(16).cast::<u8>() = (19i32) as u8;
                                                    let super::super::super::golem::graph::types::Linestring {
                                                        coordinates: coordinates23,
                                                    } = e;
                                                    let vec25 = coordinates23;
                                                    let len25 = vec25.len();
                                                    let layout25 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec25.len() * 32,
                                                        8,
                                                    );
                                                    let result25 = if layout25.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout25).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout25);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec25.into_iter().enumerate() {
                                                        let base = result25.add(i * 32);
                                                        {
                                                            let super::super::super::golem::graph::types::Point {
                                                                longitude: longitude24,
                                                                latitude: latitude24,
                                                                altitude: altitude24,
                                                            } = e;
                                                            *base.add(0).cast::<f64>() = _rt::as_f64(longitude24);
                                                            *base.add(8).cast::<f64>() = _rt::as_f64(latitude24);
                                                            match altitude24 {
                                                                Some(e) => {
                                                                    *base.add(16).cast::<u8>() = (1i32) as u8;
                                                                    *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                                }
                                                                None => {
                                                                    *base.add(16).cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                    }
                                                    *base.add(28).cast::<usize>() = len25;
                                                    *base.add(24).cast::<*mut u8>() = result25;
                                                    cleanup_list.extend_from_slice(&[(result25, layout25)]);
                                                }
                                                V32::Polygon(e) => {
                                                    *base.add(16).cast::<u8>() = (20i32) as u8;
                                                    let super::super::super::golem::graph::types::Polygon {
                                                        exterior: exterior26,
                                                        holes: holes26,
                                                    } = e;
                                                    let vec28 = exterior26;
                                                    let len28 = vec28.len();
                                                    let layout28 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec28.len() * 32,
                                                        8,
                                                    );
                                                    let result28 = if layout28.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout28).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout28);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec28.into_iter().enumerate() {
                                                        let base = result28.add(i * 32);
                                                        {
                                                            let super::super::super::golem::graph::types::Point {
                                                                longitude: longitude27,
                                                                latitude: latitude27,
                                                                altitude: altitude27,
                                                            } = e;
                                                            *base.add(0).cast::<f64>() = _rt::as_f64(longitude27);
                                                            *base.add(8).cast::<f64>() = _rt::as_f64(latitude27);
                                                            match altitude27 {
                                                                Some(e) => {
                                                                    *base.add(16).cast::<u8>() = (1i32) as u8;
                                                                    *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                                }
                                                                None => {
                                                                    *base.add(16).cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                    }
                                                    *base.add(28).cast::<usize>() = len28;
                                                    *base.add(24).cast::<*mut u8>() = result28;
                                                    match holes26 {
                                                        Some(e) => {
                                                            *base.add(32).cast::<u8>() = (1i32) as u8;
                                                            let vec31 = e;
                                                            let len31 = vec31.len();
                                                            let layout31 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec31.len() * 8,
                                                                4,
                                                            );
                                                            let result31 = if layout31.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout31).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout31);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec31.into_iter().enumerate() {
                                                                let base = result31.add(i * 8);
                                                                {
                                                                    let vec30 = e;
                                                                    let len30 = vec30.len();
                                                                    let layout30 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec30.len() * 32,
                                                                        8,
                                                                    );
                                                                    let result30 = if layout30.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout30).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout30);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec30.into_iter().enumerate() {
                                                                        let base = result30.add(i * 32);
                                                                        {
                                                                            let super::super::super::golem::graph::types::Point {
                                                                                longitude: longitude29,
                                                                                latitude: latitude29,
                                                                                altitude: altitude29,
                                                                            } = e;
                                                                            *base.add(0).cast::<f64>() = _rt::as_f64(longitude29);
                                                                            *base.add(8).cast::<f64>() = _rt::as_f64(latitude29);
                                                                            match altitude29 {
                                                                                Some(e) => {
                                                                                    *base.add(16).cast::<u8>() = (1i32) as u8;
                                                                                    *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                                                }
                                                                                None => {
                                                                                    *base.add(16).cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                        }
                                                                    }
                                                                    *base.add(4).cast::<usize>() = len30;
                                                                    *base.add(0).cast::<*mut u8>() = result30;
                                                                    cleanup_list.extend_from_slice(&[(result30, layout30)]);
                                                                }
                                                            }
                                                            *base.add(40).cast::<usize>() = len31;
                                                            *base.add(36).cast::<*mut u8>() = result31;
                                                            cleanup_list.extend_from_slice(&[(result31, layout31)]);
                                                        }
                                                        None => {
                                                            *base.add(32).cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    cleanup_list.extend_from_slice(&[(result28, layout28)]);
                                                }
                                            }
                                        }
                                    }
                                    *ptr0.add(84).cast::<usize>() = len33;
                                    *ptr0.add(80).cast::<*mut u8>() = result33;
                                    cleanup_list.extend_from_slice(&[(result33, layout33)]);
                                }
                                None => {
                                    *ptr0.add(76).cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match edge_filters7 {
                                Some(e) => {
                                    *ptr0.add(88).cast::<u8>() = (1i32) as u8;
                                    let vec55 = e;
                                    let len55 = vec55.len();
                                    let layout55 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec55.len() * 56,
                                        8,
                                    );
                                    let result55 = if layout55.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout55).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout55);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec55.into_iter().enumerate() {
                                        let base = result55.add(i * 56);
                                        {
                                            let super::super::super::golem::graph::types::FilterCondition {
                                                property: property34,
                                                operator: operator34,
                                                value: value34,
                                            } = e;
                                            let vec35 = property34;
                                            let ptr35 = vec35.as_ptr().cast::<u8>();
                                            let len35 = vec35.len();
                                            *base.add(4).cast::<usize>() = len35;
                                            *base.add(0).cast::<*mut u8>() = ptr35.cast_mut();
                                            *base.add(8).cast::<u8>() = (operator34.clone() as i32)
                                                as u8;
                                            use super::super::super::golem::graph::types::PropertyValue as V54;
                                            match value34 {
                                                V54::NullValue => {
                                                    *base.add(16).cast::<u8>() = (0i32) as u8;
                                                }
                                                V54::Boolean(e) => {
                                                    *base.add(16).cast::<u8>() = (1i32) as u8;
                                                    *base.add(24).cast::<u8>() = (match e {
                                                        true => 1,
                                                        false => 0,
                                                    }) as u8;
                                                }
                                                V54::Int8(e) => {
                                                    *base.add(16).cast::<u8>() = (2i32) as u8;
                                                    *base.add(24).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                                }
                                                V54::Int16(e) => {
                                                    *base.add(16).cast::<u8>() = (3i32) as u8;
                                                    *base.add(24).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                                }
                                                V54::Int32(e) => {
                                                    *base.add(16).cast::<u8>() = (4i32) as u8;
                                                    *base.add(24).cast::<i32>() = _rt::as_i32(e);
                                                }
                                                V54::Int64(e) => {
                                                    *base.add(16).cast::<u8>() = (5i32) as u8;
                                                    *base.add(24).cast::<i64>() = _rt::as_i64(e);
                                                }
                                                V54::Uint8(e) => {
                                                    *base.add(16).cast::<u8>() = (6i32) as u8;
                                                    *base.add(24).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                                }
                                                V54::Uint16(e) => {
                                                    *base.add(16).cast::<u8>() = (7i32) as u8;
                                                    *base.add(24).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                                }
                                                V54::Uint32(e) => {
                                                    *base.add(16).cast::<u8>() = (8i32) as u8;
                                                    *base.add(24).cast::<i32>() = _rt::as_i32(e);
                                                }
                                                V54::Uint64(e) => {
                                                    *base.add(16).cast::<u8>() = (9i32) as u8;
                                                    *base.add(24).cast::<i64>() = _rt::as_i64(e);
                                                }
                                                V54::Float32Value(e) => {
                                                    *base.add(16).cast::<u8>() = (10i32) as u8;
                                                    *base.add(24).cast::<f32>() = _rt::as_f32(e);
                                                }
                                                V54::Float64Value(e) => {
                                                    *base.add(16).cast::<u8>() = (11i32) as u8;
                                                    *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                }
                                                V54::StringValue(e) => {
                                                    *base.add(16).cast::<u8>() = (12i32) as u8;
                                                    let vec36 = e;
                                                    let ptr36 = vec36.as_ptr().cast::<u8>();
                                                    let len36 = vec36.len();
                                                    *base.add(28).cast::<usize>() = len36;
                                                    *base.add(24).cast::<*mut u8>() = ptr36.cast_mut();
                                                }
                                                V54::Bytes(e) => {
                                                    *base.add(16).cast::<u8>() = (13i32) as u8;
                                                    let vec37 = e;
                                                    let ptr37 = vec37.as_ptr().cast::<u8>();
                                                    let len37 = vec37.len();
                                                    *base.add(28).cast::<usize>() = len37;
                                                    *base.add(24).cast::<*mut u8>() = ptr37.cast_mut();
                                                }
                                                V54::Date(e) => {
                                                    *base.add(16).cast::<u8>() = (14i32) as u8;
                                                    let super::super::super::golem::graph::types::Date {
                                                        year: year38,
                                                        month: month38,
                                                        day: day38,
                                                    } = e;
                                                    *base.add(24).cast::<i32>() = _rt::as_i32(year38);
                                                    *base.add(28).cast::<u8>() = (_rt::as_i32(month38)) as u8;
                                                    *base.add(29).cast::<u8>() = (_rt::as_i32(day38)) as u8;
                                                }
                                                V54::Time(e) => {
                                                    *base.add(16).cast::<u8>() = (15i32) as u8;
                                                    let super::super::super::golem::graph::types::Time {
                                                        hour: hour39,
                                                        minute: minute39,
                                                        second: second39,
                                                        nanosecond: nanosecond39,
                                                    } = e;
                                                    *base.add(24).cast::<u8>() = (_rt::as_i32(hour39)) as u8;
                                                    *base.add(25).cast::<u8>() = (_rt::as_i32(minute39)) as u8;
                                                    *base.add(26).cast::<u8>() = (_rt::as_i32(second39)) as u8;
                                                    *base.add(28).cast::<i32>() = _rt::as_i32(nanosecond39);
                                                }
                                                V54::Datetime(e) => {
                                                    *base.add(16).cast::<u8>() = (16i32) as u8;
                                                    let super::super::super::golem::graph::types::Datetime {
                                                        date: date40,
                                                        time: time40,
                                                        timezone_offset_minutes: timezone_offset_minutes40,
                                                    } = e;
                                                    let super::super::super::golem::graph::types::Date {
                                                        year: year41,
                                                        month: month41,
                                                        day: day41,
                                                    } = date40;
                                                    *base.add(24).cast::<i32>() = _rt::as_i32(year41);
                                                    *base.add(28).cast::<u8>() = (_rt::as_i32(month41)) as u8;
                                                    *base.add(29).cast::<u8>() = (_rt::as_i32(day41)) as u8;
                                                    let super::super::super::golem::graph::types::Time {
                                                        hour: hour42,
                                                        minute: minute42,
                                                        second: second42,
                                                        nanosecond: nanosecond42,
                                                    } = time40;
                                                    *base.add(32).cast::<u8>() = (_rt::as_i32(hour42)) as u8;
                                                    *base.add(33).cast::<u8>() = (_rt::as_i32(minute42)) as u8;
                                                    *base.add(34).cast::<u8>() = (_rt::as_i32(second42)) as u8;
                                                    *base.add(36).cast::<i32>() = _rt::as_i32(nanosecond42);
                                                    match timezone_offset_minutes40 {
                                                        Some(e) => {
                                                            *base.add(40).cast::<u8>() = (1i32) as u8;
                                                            *base.add(42).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                                        }
                                                        None => {
                                                            *base.add(40).cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                                V54::Duration(e) => {
                                                    *base.add(16).cast::<u8>() = (17i32) as u8;
                                                    let super::super::super::golem::graph::types::Duration {
                                                        seconds: seconds43,
                                                        nanoseconds: nanoseconds43,
                                                    } = e;
                                                    *base.add(24).cast::<i64>() = _rt::as_i64(seconds43);
                                                    *base.add(32).cast::<i32>() = _rt::as_i32(nanoseconds43);
                                                }
                                                V54::Point(e) => {
                                                    *base.add(16).cast::<u8>() = (18i32) as u8;
                                                    let super::super::super::golem::graph::types::Point {
                                                        longitude: longitude44,
                                                        latitude: latitude44,
                                                        altitude: altitude44,
                                                    } = e;
                                                    *base.add(24).cast::<f64>() = _rt::as_f64(longitude44);
                                                    *base.add(32).cast::<f64>() = _rt::as_f64(latitude44);
                                                    match altitude44 {
                                                        Some(e) => {
                                                            *base.add(40).cast::<u8>() = (1i32) as u8;
                                                            *base.add(48).cast::<f64>() = _rt::as_f64(e);
                                                        }
                                                        None => {
                                                            *base.add(40).cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                                V54::Linestring(e) => {
                                                    *base.add(16).cast::<u8>() = (19i32) as u8;
                                                    let super::super::super::golem::graph::types::Linestring {
                                                        coordinates: coordinates45,
                                                    } = e;
                                                    let vec47 = coordinates45;
                                                    let len47 = vec47.len();
                                                    let layout47 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec47.len() * 32,
                                                        8,
                                                    );
                                                    let result47 = if layout47.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout47).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout47);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec47.into_iter().enumerate() {
                                                        let base = result47.add(i * 32);
                                                        {
                                                            let super::super::super::golem::graph::types::Point {
                                                                longitude: longitude46,
                                                                latitude: latitude46,
                                                                altitude: altitude46,
                                                            } = e;
                                                            *base.add(0).cast::<f64>() = _rt::as_f64(longitude46);
                                                            *base.add(8).cast::<f64>() = _rt::as_f64(latitude46);
                                                            match altitude46 {
                                                                Some(e) => {
                                                                    *base.add(16).cast::<u8>() = (1i32) as u8;
                                                                    *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                                }
                                                                None => {
                                                                    *base.add(16).cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                    }
                                                    *base.add(28).cast::<usize>() = len47;
                                                    *base.add(24).cast::<*mut u8>() = result47;
                                                    cleanup_list.extend_from_slice(&[(result47, layout47)]);
                                                }
                                                V54::Polygon(e) => {
                                                    *base.add(16).cast::<u8>() = (20i32) as u8;
                                                    let super::super::super::golem::graph::types::Polygon {
                                                        exterior: exterior48,
                                                        holes: holes48,
                                                    } = e;
                                                    let vec50 = exterior48;
                                                    let len50 = vec50.len();
                                                    let layout50 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec50.len() * 32,
                                                        8,
                                                    );
                                                    let result50 = if layout50.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout50).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout50);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec50.into_iter().enumerate() {
                                                        let base = result50.add(i * 32);
                                                        {
                                                            let super::super::super::golem::graph::types::Point {
                                                                longitude: longitude49,
                                                                latitude: latitude49,
                                                                altitude: altitude49,
                                                            } = e;
                                                            *base.add(0).cast::<f64>() = _rt::as_f64(longitude49);
                                                            *base.add(8).cast::<f64>() = _rt::as_f64(latitude49);
                                                            match altitude49 {
                                                                Some(e) => {
                                                                    *base.add(16).cast::<u8>() = (1i32) as u8;
                                                                    *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                                }
                                                                None => {
                                                                    *base.add(16).cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                    }
                                                    *base.add(28).cast::<usize>() = len50;
                                                    *base.add(24).cast::<*mut u8>() = result50;
                                                    match holes48 {
                                                        Some(e) => {
                                                            *base.add(32).cast::<u8>() = (1i32) as u8;
                                                            let vec53 = e;
                                                            let len53 = vec53.len();
                                                            let layout53 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec53.len() * 8,
                                                                4,
                                                            );
                                                            let result53 = if layout53.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout53).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout53);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec53.into_iter().enumerate() {
                                                                let base = result53.add(i * 8);
                                                                {
                                                                    let vec52 = e;
                                                                    let len52 = vec52.len();
                                                                    let layout52 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec52.len() * 32,
                                                                        8,
                                                                    );
                                                                    let result52 = if layout52.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout52).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout52);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec52.into_iter().enumerate() {
                                                                        let base = result52.add(i * 32);
                                                                        {
                                                                            let super::super::super::golem::graph::types::Point {
                                                                                longitude: longitude51,
                                                                                latitude: latitude51,
                                                                                altitude: altitude51,
                                                                            } = e;
                                                                            *base.add(0).cast::<f64>() = _rt::as_f64(longitude51);
                                                                            *base.add(8).cast::<f64>() = _rt::as_f64(latitude51);
                                                                            match altitude51 {
                                                                                Some(e) => {
                                                                                    *base.add(16).cast::<u8>() = (1i32) as u8;
                                                                                    *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                                                }
                                                                                None => {
                                                                                    *base.add(16).cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                        }
                                                                    }
                                                                    *base.add(4).cast::<usize>() = len52;
                                                                    *base.add(0).cast::<*mut u8>() = result52;
                                                                    cleanup_list.extend_from_slice(&[(result52, layout52)]);
                                                                }
                                                            }
                                                            *base.add(40).cast::<usize>() = len53;
                                                            *base.add(36).cast::<*mut u8>() = result53;
                                                            cleanup_list.extend_from_slice(&[(result53, layout53)]);
                                                        }
                                                        None => {
                                                            *base.add(32).cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    cleanup_list.extend_from_slice(&[(result50, layout50)]);
                                                }
                                            }
                                        }
                                    }
                                    *ptr0.add(96).cast::<usize>() = len55;
                                    *ptr0.add(92).cast::<*mut u8>() = result55;
                                    cleanup_list.extend_from_slice(&[(result55, layout55)]);
                                }
                                None => {
                                    *ptr0.add(88).cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        None => {
                            *ptr0.add(40).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    let ptr56 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:graph/traversal@1.0.0")]
                    extern "C" {
                        #[link_name = "find-shortest-path"]
                        fn wit_import(_: *mut u8, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0, ptr56);
                    let l57 = i32::from(*ptr56.add(0).cast::<u8>());
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                    match l57 {
                        0 => {
                            let e = {
                                let l58 = i32::from(*ptr56.add(8).cast::<u8>());
                                match l58 {
                                    0 => None,
                                    1 => {
                                        let e = {
                                            let l59 = *ptr56.add(12).cast::<*mut u8>();
                                            let l60 = *ptr56.add(16).cast::<usize>();
                                            let base151 = l59;
                                            let len151 = l60;
                                            let mut result151 = _rt::Vec::with_capacity(len151);
                                            for i in 0..len151 {
                                                let base = base151.add(i * 40);
                                                let e151 = {
                                                    let l61 = i32::from(*base.add(0).cast::<u8>());
                                                    use super::super::super::golem::graph::types::ElementId as V69;
                                                    let v69 = match l61 {
                                                        0 => {
                                                            let e69 = {
                                                                let l62 = *base.add(8).cast::<*mut u8>();
                                                                let l63 = *base.add(12).cast::<usize>();
                                                                let len64 = l63;
                                                                let bytes64 = _rt::Vec::from_raw_parts(
                                                                    l62.cast(),
                                                                    len64,
                                                                    len64,
                                                                );
                                                                _rt::string_lift(bytes64)
                                                            };
                                                            V69::StringValue(e69)
                                                        }
                                                        1 => {
                                                            let e69 = {
                                                                let l65 = *base.add(8).cast::<i64>();
                                                                l65
                                                            };
                                                            V69::Int64(e69)
                                                        }
                                                        n => {
                                                            debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                            let e69 = {
                                                                let l66 = *base.add(8).cast::<*mut u8>();
                                                                let l67 = *base.add(12).cast::<usize>();
                                                                let len68 = l67;
                                                                let bytes68 = _rt::Vec::from_raw_parts(
                                                                    l66.cast(),
                                                                    len68,
                                                                    len68,
                                                                );
                                                                _rt::string_lift(bytes68)
                                                            };
                                                            V69::Uuid(e69)
                                                        }
                                                    };
                                                    let l70 = *base.add(16).cast::<*mut u8>();
                                                    let l71 = *base.add(20).cast::<usize>();
                                                    let len72 = l71;
                                                    let bytes72 = _rt::Vec::from_raw_parts(
                                                        l70.cast(),
                                                        len72,
                                                        len72,
                                                    );
                                                    let l73 = *base.add(24).cast::<*mut u8>();
                                                    let l74 = *base.add(28).cast::<usize>();
                                                    let base78 = l73;
                                                    let len78 = l74;
                                                    let mut result78 = _rt::Vec::with_capacity(len78);
                                                    for i in 0..len78 {
                                                        let base = base78.add(i * 8);
                                                        let e78 = {
                                                            let l75 = *base.add(0).cast::<*mut u8>();
                                                            let l76 = *base.add(4).cast::<usize>();
                                                            let len77 = l76;
                                                            let bytes77 = _rt::Vec::from_raw_parts(
                                                                l75.cast(),
                                                                len77,
                                                                len77,
                                                            );
                                                            _rt::string_lift(bytes77)
                                                        };
                                                        result78.push(e78);
                                                    }
                                                    _rt::cabi_dealloc(base78, len78 * 8, 4);
                                                    let l79 = *base.add(32).cast::<*mut u8>();
                                                    let l80 = *base.add(36).cast::<usize>();
                                                    let base150 = l79;
                                                    let len150 = l80;
                                                    let mut result150 = _rt::Vec::with_capacity(len150);
                                                    for i in 0..len150 {
                                                        let base = base150.add(i * 48);
                                                        let e150 = {
                                                            let l81 = *base.add(0).cast::<*mut u8>();
                                                            let l82 = *base.add(4).cast::<usize>();
                                                            let len83 = l82;
                                                            let bytes83 = _rt::Vec::from_raw_parts(
                                                                l81.cast(),
                                                                len83,
                                                                len83,
                                                            );
                                                            let l84 = i32::from(*base.add(8).cast::<u8>());
                                                            use super::super::super::golem::graph::types::PropertyValue as V149;
                                                            let v149 = match l84 {
                                                                0 => V149::NullValue,
                                                                1 => {
                                                                    let e149 = {
                                                                        let l85 = i32::from(*base.add(16).cast::<u8>());
                                                                        _rt::bool_lift(l85 as u8)
                                                                    };
                                                                    V149::Boolean(e149)
                                                                }
                                                                2 => {
                                                                    let e149 = {
                                                                        let l86 = i32::from(*base.add(16).cast::<i8>());
                                                                        l86 as i8
                                                                    };
                                                                    V149::Int8(e149)
                                                                }
                                                                3 => {
                                                                    let e149 = {
                                                                        let l87 = i32::from(*base.add(16).cast::<i16>());
                                                                        l87 as i16
                                                                    };
                                                                    V149::Int16(e149)
                                                                }
                                                                4 => {
                                                                    let e149 = {
                                                                        let l88 = *base.add(16).cast::<i32>();
                                                                        l88
                                                                    };
                                                                    V149::Int32(e149)
                                                                }
                                                                5 => {
                                                                    let e149 = {
                                                                        let l89 = *base.add(16).cast::<i64>();
                                                                        l89
                                                                    };
                                                                    V149::Int64(e149)
                                                                }
                                                                6 => {
                                                                    let e149 = {
                                                                        let l90 = i32::from(*base.add(16).cast::<u8>());
                                                                        l90 as u8
                                                                    };
                                                                    V149::Uint8(e149)
                                                                }
                                                                7 => {
                                                                    let e149 = {
                                                                        let l91 = i32::from(*base.add(16).cast::<u16>());
                                                                        l91 as u16
                                                                    };
                                                                    V149::Uint16(e149)
                                                                }
                                                                8 => {
                                                                    let e149 = {
                                                                        let l92 = *base.add(16).cast::<i32>();
                                                                        l92 as u32
                                                                    };
                                                                    V149::Uint32(e149)
                                                                }
                                                                9 => {
                                                                    let e149 = {
                                                                        let l93 = *base.add(16).cast::<i64>();
                                                                        l93 as u64
                                                                    };
                                                                    V149::Uint64(e149)
                                                                }
                                                                10 => {
                                                                    let e149 = {
                                                                        let l94 = *base.add(16).cast::<f32>();
                                                                        l94
                                                                    };
                                                                    V149::Float32Value(e149)
                                                                }
                                                                11 => {
                                                                    let e149 = {
                                                                        let l95 = *base.add(16).cast::<f64>();
                                                                        l95
                                                                    };
                                                                    V149::Float64Value(e149)
                                                                }
                                                                12 => {
                                                                    let e149 = {
                                                                        let l96 = *base.add(16).cast::<*mut u8>();
                                                                        let l97 = *base.add(20).cast::<usize>();
                                                                        let len98 = l97;
                                                                        let bytes98 = _rt::Vec::from_raw_parts(
                                                                            l96.cast(),
                                                                            len98,
                                                                            len98,
                                                                        );
                                                                        _rt::string_lift(bytes98)
                                                                    };
                                                                    V149::StringValue(e149)
                                                                }
                                                                13 => {
                                                                    let e149 = {
                                                                        let l99 = *base.add(16).cast::<*mut u8>();
                                                                        let l100 = *base.add(20).cast::<usize>();
                                                                        let len101 = l100;
                                                                        _rt::Vec::from_raw_parts(l99.cast(), len101, len101)
                                                                    };
                                                                    V149::Bytes(e149)
                                                                }
                                                                14 => {
                                                                    let e149 = {
                                                                        let l102 = *base.add(16).cast::<i32>();
                                                                        let l103 = i32::from(*base.add(20).cast::<u8>());
                                                                        let l104 = i32::from(*base.add(21).cast::<u8>());
                                                                        super::super::super::golem::graph::types::Date {
                                                                            year: l102 as u32,
                                                                            month: l103 as u8,
                                                                            day: l104 as u8,
                                                                        }
                                                                    };
                                                                    V149::Date(e149)
                                                                }
                                                                15 => {
                                                                    let e149 = {
                                                                        let l105 = i32::from(*base.add(16).cast::<u8>());
                                                                        let l106 = i32::from(*base.add(17).cast::<u8>());
                                                                        let l107 = i32::from(*base.add(18).cast::<u8>());
                                                                        let l108 = *base.add(20).cast::<i32>();
                                                                        super::super::super::golem::graph::types::Time {
                                                                            hour: l105 as u8,
                                                                            minute: l106 as u8,
                                                                            second: l107 as u8,
                                                                            nanosecond: l108 as u32,
                                                                        }
                                                                    };
                                                                    V149::Time(e149)
                                                                }
                                                                16 => {
                                                                    let e149 = {
                                                                        let l109 = *base.add(16).cast::<i32>();
                                                                        let l110 = i32::from(*base.add(20).cast::<u8>());
                                                                        let l111 = i32::from(*base.add(21).cast::<u8>());
                                                                        let l112 = i32::from(*base.add(24).cast::<u8>());
                                                                        let l113 = i32::from(*base.add(25).cast::<u8>());
                                                                        let l114 = i32::from(*base.add(26).cast::<u8>());
                                                                        let l115 = *base.add(28).cast::<i32>();
                                                                        let l116 = i32::from(*base.add(32).cast::<u8>());
                                                                        super::super::super::golem::graph::types::Datetime {
                                                                            date: super::super::super::golem::graph::types::Date {
                                                                                year: l109 as u32,
                                                                                month: l110 as u8,
                                                                                day: l111 as u8,
                                                                            },
                                                                            time: super::super::super::golem::graph::types::Time {
                                                                                hour: l112 as u8,
                                                                                minute: l113 as u8,
                                                                                second: l114 as u8,
                                                                                nanosecond: l115 as u32,
                                                                            },
                                                                            timezone_offset_minutes: match l116 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l117 = i32::from(*base.add(34).cast::<i16>());
                                                                                        l117 as i16
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            },
                                                                        }
                                                                    };
                                                                    V149::Datetime(e149)
                                                                }
                                                                17 => {
                                                                    let e149 = {
                                                                        let l118 = *base.add(16).cast::<i64>();
                                                                        let l119 = *base.add(24).cast::<i32>();
                                                                        super::super::super::golem::graph::types::Duration {
                                                                            seconds: l118,
                                                                            nanoseconds: l119 as u32,
                                                                        }
                                                                    };
                                                                    V149::Duration(e149)
                                                                }
                                                                18 => {
                                                                    let e149 = {
                                                                        let l120 = *base.add(16).cast::<f64>();
                                                                        let l121 = *base.add(24).cast::<f64>();
                                                                        let l122 = i32::from(*base.add(32).cast::<u8>());
                                                                        super::super::super::golem::graph::types::Point {
                                                                            longitude: l120,
                                                                            latitude: l121,
                                                                            altitude: match l122 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l123 = *base.add(40).cast::<f64>();
                                                                                        l123
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            },
                                                                        }
                                                                    };
                                                                    V149::Point(e149)
                                                                }
                                                                19 => {
                                                                    let e149 = {
                                                                        let l124 = *base.add(16).cast::<*mut u8>();
                                                                        let l125 = *base.add(20).cast::<usize>();
                                                                        let base130 = l124;
                                                                        let len130 = l125;
                                                                        let mut result130 = _rt::Vec::with_capacity(len130);
                                                                        for i in 0..len130 {
                                                                            let base = base130.add(i * 32);
                                                                            let e130 = {
                                                                                let l126 = *base.add(0).cast::<f64>();
                                                                                let l127 = *base.add(8).cast::<f64>();
                                                                                let l128 = i32::from(*base.add(16).cast::<u8>());
                                                                                super::super::super::golem::graph::types::Point {
                                                                                    longitude: l126,
                                                                                    latitude: l127,
                                                                                    altitude: match l128 {
                                                                                        0 => None,
                                                                                        1 => {
                                                                                            let e = {
                                                                                                let l129 = *base.add(24).cast::<f64>();
                                                                                                l129
                                                                                            };
                                                                                            Some(e)
                                                                                        }
                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                    },
                                                                                }
                                                                            };
                                                                            result130.push(e130);
                                                                        }
                                                                        _rt::cabi_dealloc(base130, len130 * 32, 8);
                                                                        super::super::super::golem::graph::types::Linestring {
                                                                            coordinates: result130,
                                                                        }
                                                                    };
                                                                    V149::Linestring(e149)
                                                                }
                                                                n => {
                                                                    debug_assert_eq!(n, 20, "invalid enum discriminant");
                                                                    let e149 = {
                                                                        let l131 = *base.add(16).cast::<*mut u8>();
                                                                        let l132 = *base.add(20).cast::<usize>();
                                                                        let base137 = l131;
                                                                        let len137 = l132;
                                                                        let mut result137 = _rt::Vec::with_capacity(len137);
                                                                        for i in 0..len137 {
                                                                            let base = base137.add(i * 32);
                                                                            let e137 = {
                                                                                let l133 = *base.add(0).cast::<f64>();
                                                                                let l134 = *base.add(8).cast::<f64>();
                                                                                let l135 = i32::from(*base.add(16).cast::<u8>());
                                                                                super::super::super::golem::graph::types::Point {
                                                                                    longitude: l133,
                                                                                    latitude: l134,
                                                                                    altitude: match l135 {
                                                                                        0 => None,
                                                                                        1 => {
                                                                                            let e = {
                                                                                                let l136 = *base.add(24).cast::<f64>();
                                                                                                l136
                                                                                            };
                                                                                            Some(e)
                                                                                        }
                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                    },
                                                                                }
                                                                            };
                                                                            result137.push(e137);
                                                                        }
                                                                        _rt::cabi_dealloc(base137, len137 * 32, 8);
                                                                        let l138 = i32::from(*base.add(24).cast::<u8>());
                                                                        super::super::super::golem::graph::types::Polygon {
                                                                            exterior: result137,
                                                                            holes: match l138 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l139 = *base.add(28).cast::<*mut u8>();
                                                                                        let l140 = *base.add(32).cast::<usize>();
                                                                                        let base148 = l139;
                                                                                        let len148 = l140;
                                                                                        let mut result148 = _rt::Vec::with_capacity(len148);
                                                                                        for i in 0..len148 {
                                                                                            let base = base148.add(i * 8);
                                                                                            let e148 = {
                                                                                                let l141 = *base.add(0).cast::<*mut u8>();
                                                                                                let l142 = *base.add(4).cast::<usize>();
                                                                                                let base147 = l141;
                                                                                                let len147 = l142;
                                                                                                let mut result147 = _rt::Vec::with_capacity(len147);
                                                                                                for i in 0..len147 {
                                                                                                    let base = base147.add(i * 32);
                                                                                                    let e147 = {
                                                                                                        let l143 = *base.add(0).cast::<f64>();
                                                                                                        let l144 = *base.add(8).cast::<f64>();
                                                                                                        let l145 = i32::from(*base.add(16).cast::<u8>());
                                                                                                        super::super::super::golem::graph::types::Point {
                                                                                                            longitude: l143,
                                                                                                            latitude: l144,
                                                                                                            altitude: match l145 {
                                                                                                                0 => None,
                                                                                                                1 => {
                                                                                                                    let e = {
                                                                                                                        let l146 = *base.add(24).cast::<f64>();
                                                                                                                        l146
                                                                                                                    };
                                                                                                                    Some(e)
                                                                                                                }
                                                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                                                            },
                                                                                                        }
                                                                                                    };
                                                                                                    result147.push(e147);
                                                                                                }
                                                                                                _rt::cabi_dealloc(base147, len147 * 32, 8);
                                                                                                result147
                                                                                            };
                                                                                            result148.push(e148);
                                                                                        }
                                                                                        _rt::cabi_dealloc(base148, len148 * 8, 4);
                                                                                        result148
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            },
                                                                        }
                                                                    };
                                                                    V149::Polygon(e149)
                                                                }
                                                            };
                                                            (_rt::string_lift(bytes83), v149)
                                                        };
                                                        result150.push(e150);
                                                    }
                                                    _rt::cabi_dealloc(base150, len150 * 48, 8);
                                                    super::super::super::golem::graph::types::Vertex {
                                                        id: v69,
                                                        vertex_type: _rt::string_lift(bytes72),
                                                        additional_labels: result78,
                                                        properties: result150,
                                                    }
                                                };
                                                result151.push(e151);
                                            }
                                            _rt::cabi_dealloc(base151, len151 * 40, 8);
                                            let l152 = *ptr56.add(20).cast::<*mut u8>();
                                            let l153 = *ptr56.add(24).cast::<usize>();
                                            let base256 = l152;
                                            let len256 = l153;
                                            let mut result256 = _rt::Vec::with_capacity(len256);
                                            for i in 0..len256 {
                                                let base = base256.add(i * 64);
                                                let e256 = {
                                                    let l154 = i32::from(*base.add(0).cast::<u8>());
                                                    use super::super::super::golem::graph::types::ElementId as V162;
                                                    let v162 = match l154 {
                                                        0 => {
                                                            let e162 = {
                                                                let l155 = *base.add(8).cast::<*mut u8>();
                                                                let l156 = *base.add(12).cast::<usize>();
                                                                let len157 = l156;
                                                                let bytes157 = _rt::Vec::from_raw_parts(
                                                                    l155.cast(),
                                                                    len157,
                                                                    len157,
                                                                );
                                                                _rt::string_lift(bytes157)
                                                            };
                                                            V162::StringValue(e162)
                                                        }
                                                        1 => {
                                                            let e162 = {
                                                                let l158 = *base.add(8).cast::<i64>();
                                                                l158
                                                            };
                                                            V162::Int64(e162)
                                                        }
                                                        n => {
                                                            debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                            let e162 = {
                                                                let l159 = *base.add(8).cast::<*mut u8>();
                                                                let l160 = *base.add(12).cast::<usize>();
                                                                let len161 = l160;
                                                                let bytes161 = _rt::Vec::from_raw_parts(
                                                                    l159.cast(),
                                                                    len161,
                                                                    len161,
                                                                );
                                                                _rt::string_lift(bytes161)
                                                            };
                                                            V162::Uuid(e162)
                                                        }
                                                    };
                                                    let l163 = *base.add(16).cast::<*mut u8>();
                                                    let l164 = *base.add(20).cast::<usize>();
                                                    let len165 = l164;
                                                    let bytes165 = _rt::Vec::from_raw_parts(
                                                        l163.cast(),
                                                        len165,
                                                        len165,
                                                    );
                                                    let l166 = i32::from(*base.add(24).cast::<u8>());
                                                    use super::super::super::golem::graph::types::ElementId as V174;
                                                    let v174 = match l166 {
                                                        0 => {
                                                            let e174 = {
                                                                let l167 = *base.add(32).cast::<*mut u8>();
                                                                let l168 = *base.add(36).cast::<usize>();
                                                                let len169 = l168;
                                                                let bytes169 = _rt::Vec::from_raw_parts(
                                                                    l167.cast(),
                                                                    len169,
                                                                    len169,
                                                                );
                                                                _rt::string_lift(bytes169)
                                                            };
                                                            V174::StringValue(e174)
                                                        }
                                                        1 => {
                                                            let e174 = {
                                                                let l170 = *base.add(32).cast::<i64>();
                                                                l170
                                                            };
                                                            V174::Int64(e174)
                                                        }
                                                        n => {
                                                            debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                            let e174 = {
                                                                let l171 = *base.add(32).cast::<*mut u8>();
                                                                let l172 = *base.add(36).cast::<usize>();
                                                                let len173 = l172;
                                                                let bytes173 = _rt::Vec::from_raw_parts(
                                                                    l171.cast(),
                                                                    len173,
                                                                    len173,
                                                                );
                                                                _rt::string_lift(bytes173)
                                                            };
                                                            V174::Uuid(e174)
                                                        }
                                                    };
                                                    let l175 = i32::from(*base.add(40).cast::<u8>());
                                                    use super::super::super::golem::graph::types::ElementId as V183;
                                                    let v183 = match l175 {
                                                        0 => {
                                                            let e183 = {
                                                                let l176 = *base.add(48).cast::<*mut u8>();
                                                                let l177 = *base.add(52).cast::<usize>();
                                                                let len178 = l177;
                                                                let bytes178 = _rt::Vec::from_raw_parts(
                                                                    l176.cast(),
                                                                    len178,
                                                                    len178,
                                                                );
                                                                _rt::string_lift(bytes178)
                                                            };
                                                            V183::StringValue(e183)
                                                        }
                                                        1 => {
                                                            let e183 = {
                                                                let l179 = *base.add(48).cast::<i64>();
                                                                l179
                                                            };
                                                            V183::Int64(e183)
                                                        }
                                                        n => {
                                                            debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                            let e183 = {
                                                                let l180 = *base.add(48).cast::<*mut u8>();
                                                                let l181 = *base.add(52).cast::<usize>();
                                                                let len182 = l181;
                                                                let bytes182 = _rt::Vec::from_raw_parts(
                                                                    l180.cast(),
                                                                    len182,
                                                                    len182,
                                                                );
                                                                _rt::string_lift(bytes182)
                                                            };
                                                            V183::Uuid(e183)
                                                        }
                                                    };
                                                    let l184 = *base.add(56).cast::<*mut u8>();
                                                    let l185 = *base.add(60).cast::<usize>();
                                                    let base255 = l184;
                                                    let len255 = l185;
                                                    let mut result255 = _rt::Vec::with_capacity(len255);
                                                    for i in 0..len255 {
                                                        let base = base255.add(i * 48);
                                                        let e255 = {
                                                            let l186 = *base.add(0).cast::<*mut u8>();
                                                            let l187 = *base.add(4).cast::<usize>();
                                                            let len188 = l187;
                                                            let bytes188 = _rt::Vec::from_raw_parts(
                                                                l186.cast(),
                                                                len188,
                                                                len188,
                                                            );
                                                            let l189 = i32::from(*base.add(8).cast::<u8>());
                                                            use super::super::super::golem::graph::types::PropertyValue as V254;
                                                            let v254 = match l189 {
                                                                0 => V254::NullValue,
                                                                1 => {
                                                                    let e254 = {
                                                                        let l190 = i32::from(*base.add(16).cast::<u8>());
                                                                        _rt::bool_lift(l190 as u8)
                                                                    };
                                                                    V254::Boolean(e254)
                                                                }
                                                                2 => {
                                                                    let e254 = {
                                                                        let l191 = i32::from(*base.add(16).cast::<i8>());
                                                                        l191 as i8
                                                                    };
                                                                    V254::Int8(e254)
                                                                }
                                                                3 => {
                                                                    let e254 = {
                                                                        let l192 = i32::from(*base.add(16).cast::<i16>());
                                                                        l192 as i16
                                                                    };
                                                                    V254::Int16(e254)
                                                                }
                                                                4 => {
                                                                    let e254 = {
                                                                        let l193 = *base.add(16).cast::<i32>();
                                                                        l193
                                                                    };
                                                                    V254::Int32(e254)
                                                                }
                                                                5 => {
                                                                    let e254 = {
                                                                        let l194 = *base.add(16).cast::<i64>();
                                                                        l194
                                                                    };
                                                                    V254::Int64(e254)
                                                                }
                                                                6 => {
                                                                    let e254 = {
                                                                        let l195 = i32::from(*base.add(16).cast::<u8>());
                                                                        l195 as u8
                                                                    };
                                                                    V254::Uint8(e254)
                                                                }
                                                                7 => {
                                                                    let e254 = {
                                                                        let l196 = i32::from(*base.add(16).cast::<u16>());
                                                                        l196 as u16
                                                                    };
                                                                    V254::Uint16(e254)
                                                                }
                                                                8 => {
                                                                    let e254 = {
                                                                        let l197 = *base.add(16).cast::<i32>();
                                                                        l197 as u32
                                                                    };
                                                                    V254::Uint32(e254)
                                                                }
                                                                9 => {
                                                                    let e254 = {
                                                                        let l198 = *base.add(16).cast::<i64>();
                                                                        l198 as u64
                                                                    };
                                                                    V254::Uint64(e254)
                                                                }
                                                                10 => {
                                                                    let e254 = {
                                                                        let l199 = *base.add(16).cast::<f32>();
                                                                        l199
                                                                    };
                                                                    V254::Float32Value(e254)
                                                                }
                                                                11 => {
                                                                    let e254 = {
                                                                        let l200 = *base.add(16).cast::<f64>();
                                                                        l200
                                                                    };
                                                                    V254::Float64Value(e254)
                                                                }
                                                                12 => {
                                                                    let e254 = {
                                                                        let l201 = *base.add(16).cast::<*mut u8>();
                                                                        let l202 = *base.add(20).cast::<usize>();
                                                                        let len203 = l202;
                                                                        let bytes203 = _rt::Vec::from_raw_parts(
                                                                            l201.cast(),
                                                                            len203,
                                                                            len203,
                                                                        );
                                                                        _rt::string_lift(bytes203)
                                                                    };
                                                                    V254::StringValue(e254)
                                                                }
                                                                13 => {
                                                                    let e254 = {
                                                                        let l204 = *base.add(16).cast::<*mut u8>();
                                                                        let l205 = *base.add(20).cast::<usize>();
                                                                        let len206 = l205;
                                                                        _rt::Vec::from_raw_parts(l204.cast(), len206, len206)
                                                                    };
                                                                    V254::Bytes(e254)
                                                                }
                                                                14 => {
                                                                    let e254 = {
                                                                        let l207 = *base.add(16).cast::<i32>();
                                                                        let l208 = i32::from(*base.add(20).cast::<u8>());
                                                                        let l209 = i32::from(*base.add(21).cast::<u8>());
                                                                        super::super::super::golem::graph::types::Date {
                                                                            year: l207 as u32,
                                                                            month: l208 as u8,
                                                                            day: l209 as u8,
                                                                        }
                                                                    };
                                                                    V254::Date(e254)
                                                                }
                                                                15 => {
                                                                    let e254 = {
                                                                        let l210 = i32::from(*base.add(16).cast::<u8>());
                                                                        let l211 = i32::from(*base.add(17).cast::<u8>());
                                                                        let l212 = i32::from(*base.add(18).cast::<u8>());
                                                                        let l213 = *base.add(20).cast::<i32>();
                                                                        super::super::super::golem::graph::types::Time {
                                                                            hour: l210 as u8,
                                                                            minute: l211 as u8,
                                                                            second: l212 as u8,
                                                                            nanosecond: l213 as u32,
                                                                        }
                                                                    };
                                                                    V254::Time(e254)
                                                                }
                                                                16 => {
                                                                    let e254 = {
                                                                        let l214 = *base.add(16).cast::<i32>();
                                                                        let l215 = i32::from(*base.add(20).cast::<u8>());
                                                                        let l216 = i32::from(*base.add(21).cast::<u8>());
                                                                        let l217 = i32::from(*base.add(24).cast::<u8>());
                                                                        let l218 = i32::from(*base.add(25).cast::<u8>());
                                                                        let l219 = i32::from(*base.add(26).cast::<u8>());
                                                                        let l220 = *base.add(28).cast::<i32>();
                                                                        let l221 = i32::from(*base.add(32).cast::<u8>());
                                                                        super::super::super::golem::graph::types::Datetime {
                                                                            date: super::super::super::golem::graph::types::Date {
                                                                                year: l214 as u32,
                                                                                month: l215 as u8,
                                                                                day: l216 as u8,
                                                                            },
                                                                            time: super::super::super::golem::graph::types::Time {
                                                                                hour: l217 as u8,
                                                                                minute: l218 as u8,
                                                                                second: l219 as u8,
                                                                                nanosecond: l220 as u32,
                                                                            },
                                                                            timezone_offset_minutes: match l221 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l222 = i32::from(*base.add(34).cast::<i16>());
                                                                                        l222 as i16
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            },
                                                                        }
                                                                    };
                                                                    V254::Datetime(e254)
                                                                }
                                                                17 => {
                                                                    let e254 = {
                                                                        let l223 = *base.add(16).cast::<i64>();
                                                                        let l224 = *base.add(24).cast::<i32>();
                                                                        super::super::super::golem::graph::types::Duration {
                                                                            seconds: l223,
                                                                            nanoseconds: l224 as u32,
                                                                        }
                                                                    };
                                                                    V254::Duration(e254)
                                                                }
                                                                18 => {
                                                                    let e254 = {
                                                                        let l225 = *base.add(16).cast::<f64>();
                                                                        let l226 = *base.add(24).cast::<f64>();
                                                                        let l227 = i32::from(*base.add(32).cast::<u8>());
                                                                        super::super::super::golem::graph::types::Point {
                                                                            longitude: l225,
                                                                            latitude: l226,
                                                                            altitude: match l227 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l228 = *base.add(40).cast::<f64>();
                                                                                        l228
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            },
                                                                        }
                                                                    };
                                                                    V254::Point(e254)
                                                                }
                                                                19 => {
                                                                    let e254 = {
                                                                        let l229 = *base.add(16).cast::<*mut u8>();
                                                                        let l230 = *base.add(20).cast::<usize>();
                                                                        let base235 = l229;
                                                                        let len235 = l230;
                                                                        let mut result235 = _rt::Vec::with_capacity(len235);
                                                                        for i in 0..len235 {
                                                                            let base = base235.add(i * 32);
                                                                            let e235 = {
                                                                                let l231 = *base.add(0).cast::<f64>();
                                                                                let l232 = *base.add(8).cast::<f64>();
                                                                                let l233 = i32::from(*base.add(16).cast::<u8>());
                                                                                super::super::super::golem::graph::types::Point {
                                                                                    longitude: l231,
                                                                                    latitude: l232,
                                                                                    altitude: match l233 {
                                                                                        0 => None,
                                                                                        1 => {
                                                                                            let e = {
                                                                                                let l234 = *base.add(24).cast::<f64>();
                                                                                                l234
                                                                                            };
                                                                                            Some(e)
                                                                                        }
                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                    },
                                                                                }
                                                                            };
                                                                            result235.push(e235);
                                                                        }
                                                                        _rt::cabi_dealloc(base235, len235 * 32, 8);
                                                                        super::super::super::golem::graph::types::Linestring {
                                                                            coordinates: result235,
                                                                        }
                                                                    };
                                                                    V254::Linestring(e254)
                                                                }
                                                                n => {
                                                                    debug_assert_eq!(n, 20, "invalid enum discriminant");
                                                                    let e254 = {
                                                                        let l236 = *base.add(16).cast::<*mut u8>();
                                                                        let l237 = *base.add(20).cast::<usize>();
                                                                        let base242 = l236;
                                                                        let len242 = l237;
                                                                        let mut result242 = _rt::Vec::with_capacity(len242);
                                                                        for i in 0..len242 {
                                                                            let base = base242.add(i * 32);
                                                                            let e242 = {
                                                                                let l238 = *base.add(0).cast::<f64>();
                                                                                let l239 = *base.add(8).cast::<f64>();
                                                                                let l240 = i32::from(*base.add(16).cast::<u8>());
                                                                                super::super::super::golem::graph::types::Point {
                                                                                    longitude: l238,
                                                                                    latitude: l239,
                                                                                    altitude: match l240 {
                                                                                        0 => None,
                                                                                        1 => {
                                                                                            let e = {
                                                                                                let l241 = *base.add(24).cast::<f64>();
                                                                                                l241
                                                                                            };
                                                                                            Some(e)
                                                                                        }
                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                    },
                                                                                }
                                                                            };
                                                                            result242.push(e242);
                                                                        }
                                                                        _rt::cabi_dealloc(base242, len242 * 32, 8);
                                                                        let l243 = i32::from(*base.add(24).cast::<u8>());
                                                                        super::super::super::golem::graph::types::Polygon {
                                                                            exterior: result242,
                                                                            holes: match l243 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l244 = *base.add(28).cast::<*mut u8>();
                                                                                        let l245 = *base.add(32).cast::<usize>();
                                                                                        let base253 = l244;
                                                                                        let len253 = l245;
                                                                                        let mut result253 = _rt::Vec::with_capacity(len253);
                                                                                        for i in 0..len253 {
                                                                                            let base = base253.add(i * 8);
                                                                                            let e253 = {
                                                                                                let l246 = *base.add(0).cast::<*mut u8>();
                                                                                                let l247 = *base.add(4).cast::<usize>();
                                                                                                let base252 = l246;
                                                                                                let len252 = l247;
                                                                                                let mut result252 = _rt::Vec::with_capacity(len252);
                                                                                                for i in 0..len252 {
                                                                                                    let base = base252.add(i * 32);
                                                                                                    let e252 = {
                                                                                                        let l248 = *base.add(0).cast::<f64>();
                                                                                                        let l249 = *base.add(8).cast::<f64>();
                                                                                                        let l250 = i32::from(*base.add(16).cast::<u8>());
                                                                                                        super::super::super::golem::graph::types::Point {
                                                                                                            longitude: l248,
                                                                                                            latitude: l249,
                                                                                                            altitude: match l250 {
                                                                                                                0 => None,
                                                                                                                1 => {
                                                                                                                    let e = {
                                                                                                                        let l251 = *base.add(24).cast::<f64>();
                                                                                                                        l251
                                                                                                                    };
                                                                                                                    Some(e)
                                                                                                                }
                                                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                                                            },
                                                                                                        }
                                                                                                    };
                                                                                                    result252.push(e252);
                                                                                                }
                                                                                                _rt::cabi_dealloc(base252, len252 * 32, 8);
                                                                                                result252
                                                                                            };
                                                                                            result253.push(e253);
                                                                                        }
                                                                                        _rt::cabi_dealloc(base253, len253 * 8, 4);
                                                                                        result253
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            },
                                                                        }
                                                                    };
                                                                    V254::Polygon(e254)
                                                                }
                                                            };
                                                            (_rt::string_lift(bytes188), v254)
                                                        };
                                                        result255.push(e255);
                                                    }
                                                    _rt::cabi_dealloc(base255, len255 * 48, 8);
                                                    super::super::super::golem::graph::types::Edge {
                                                        id: v162,
                                                        edge_type: _rt::string_lift(bytes165),
                                                        from_vertex: v174,
                                                        to_vertex: v183,
                                                        properties: result255,
                                                    }
                                                };
                                                result256.push(e256);
                                            }
                                            _rt::cabi_dealloc(base256, len256 * 64, 8);
                                            let l257 = *ptr56.add(28).cast::<i32>();
                                            super::super::super::golem::graph::types::Path {
                                                vertices: result151,
                                                edges: result256,
                                                length: l257 as u32,
                                            }
                                        };
                                        Some(e)
                                    }
                                    _ => _rt::invalid_enum_discriminant(),
                                }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l258 = i32::from(*ptr56.add(8).cast::<u8>());
                                use super::super::super::golem::graph::errors::GraphError as V313;
                                let v313 = match l258 {
                                    0 => {
                                        let e313 = {
                                            let l259 = *ptr56.add(16).cast::<*mut u8>();
                                            let l260 = *ptr56.add(20).cast::<usize>();
                                            let len261 = l260;
                                            let bytes261 = _rt::Vec::from_raw_parts(
                                                l259.cast(),
                                                len261,
                                                len261,
                                            );
                                            _rt::string_lift(bytes261)
                                        };
                                        V313::UnsupportedOperation(e313)
                                    }
                                    1 => {
                                        let e313 = {
                                            let l262 = *ptr56.add(16).cast::<*mut u8>();
                                            let l263 = *ptr56.add(20).cast::<usize>();
                                            let len264 = l263;
                                            let bytes264 = _rt::Vec::from_raw_parts(
                                                l262.cast(),
                                                len264,
                                                len264,
                                            );
                                            _rt::string_lift(bytes264)
                                        };
                                        V313::ConnectionFailed(e313)
                                    }
                                    2 => {
                                        let e313 = {
                                            let l265 = *ptr56.add(16).cast::<*mut u8>();
                                            let l266 = *ptr56.add(20).cast::<usize>();
                                            let len267 = l266;
                                            let bytes267 = _rt::Vec::from_raw_parts(
                                                l265.cast(),
                                                len267,
                                                len267,
                                            );
                                            _rt::string_lift(bytes267)
                                        };
                                        V313::AuthenticationFailed(e313)
                                    }
                                    3 => {
                                        let e313 = {
                                            let l268 = *ptr56.add(16).cast::<*mut u8>();
                                            let l269 = *ptr56.add(20).cast::<usize>();
                                            let len270 = l269;
                                            let bytes270 = _rt::Vec::from_raw_parts(
                                                l268.cast(),
                                                len270,
                                                len270,
                                            );
                                            _rt::string_lift(bytes270)
                                        };
                                        V313::AuthorizationFailed(e313)
                                    }
                                    4 => {
                                        let e313 = {
                                            let l271 = i32::from(*ptr56.add(16).cast::<u8>());
                                            use super::super::super::golem::graph::types::ElementId as V279;
                                            let v279 = match l271 {
                                                0 => {
                                                    let e279 = {
                                                        let l272 = *ptr56.add(24).cast::<*mut u8>();
                                                        let l273 = *ptr56.add(28).cast::<usize>();
                                                        let len274 = l273;
                                                        let bytes274 = _rt::Vec::from_raw_parts(
                                                            l272.cast(),
                                                            len274,
                                                            len274,
                                                        );
                                                        _rt::string_lift(bytes274)
                                                    };
                                                    V279::StringValue(e279)
                                                }
                                                1 => {
                                                    let e279 = {
                                                        let l275 = *ptr56.add(24).cast::<i64>();
                                                        l275
                                                    };
                                                    V279::Int64(e279)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                    let e279 = {
                                                        let l276 = *ptr56.add(24).cast::<*mut u8>();
                                                        let l277 = *ptr56.add(28).cast::<usize>();
                                                        let len278 = l277;
                                                        let bytes278 = _rt::Vec::from_raw_parts(
                                                            l276.cast(),
                                                            len278,
                                                            len278,
                                                        );
                                                        _rt::string_lift(bytes278)
                                                    };
                                                    V279::Uuid(e279)
                                                }
                                            };
                                            v279
                                        };
                                        V313::ElementNotFound(e313)
                                    }
                                    5 => {
                                        let e313 = {
                                            let l280 = i32::from(*ptr56.add(16).cast::<u8>());
                                            use super::super::super::golem::graph::types::ElementId as V288;
                                            let v288 = match l280 {
                                                0 => {
                                                    let e288 = {
                                                        let l281 = *ptr56.add(24).cast::<*mut u8>();
                                                        let l282 = *ptr56.add(28).cast::<usize>();
                                                        let len283 = l282;
                                                        let bytes283 = _rt::Vec::from_raw_parts(
                                                            l281.cast(),
                                                            len283,
                                                            len283,
                                                        );
                                                        _rt::string_lift(bytes283)
                                                    };
                                                    V288::StringValue(e288)
                                                }
                                                1 => {
                                                    let e288 = {
                                                        let l284 = *ptr56.add(24).cast::<i64>();
                                                        l284
                                                    };
                                                    V288::Int64(e288)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                    let e288 = {
                                                        let l285 = *ptr56.add(24).cast::<*mut u8>();
                                                        let l286 = *ptr56.add(28).cast::<usize>();
                                                        let len287 = l286;
                                                        let bytes287 = _rt::Vec::from_raw_parts(
                                                            l285.cast(),
                                                            len287,
                                                            len287,
                                                        );
                                                        _rt::string_lift(bytes287)
                                                    };
                                                    V288::Uuid(e288)
                                                }
                                            };
                                            v288
                                        };
                                        V313::DuplicateElement(e313)
                                    }
                                    6 => {
                                        let e313 = {
                                            let l289 = *ptr56.add(16).cast::<*mut u8>();
                                            let l290 = *ptr56.add(20).cast::<usize>();
                                            let len291 = l290;
                                            let bytes291 = _rt::Vec::from_raw_parts(
                                                l289.cast(),
                                                len291,
                                                len291,
                                            );
                                            _rt::string_lift(bytes291)
                                        };
                                        V313::SchemaViolation(e313)
                                    }
                                    7 => {
                                        let e313 = {
                                            let l292 = *ptr56.add(16).cast::<*mut u8>();
                                            let l293 = *ptr56.add(20).cast::<usize>();
                                            let len294 = l293;
                                            let bytes294 = _rt::Vec::from_raw_parts(
                                                l292.cast(),
                                                len294,
                                                len294,
                                            );
                                            _rt::string_lift(bytes294)
                                        };
                                        V313::ConstraintViolation(e313)
                                    }
                                    8 => {
                                        let e313 = {
                                            let l295 = *ptr56.add(16).cast::<*mut u8>();
                                            let l296 = *ptr56.add(20).cast::<usize>();
                                            let len297 = l296;
                                            let bytes297 = _rt::Vec::from_raw_parts(
                                                l295.cast(),
                                                len297,
                                                len297,
                                            );
                                            _rt::string_lift(bytes297)
                                        };
                                        V313::InvalidPropertyType(e313)
                                    }
                                    9 => {
                                        let e313 = {
                                            let l298 = *ptr56.add(16).cast::<*mut u8>();
                                            let l299 = *ptr56.add(20).cast::<usize>();
                                            let len300 = l299;
                                            let bytes300 = _rt::Vec::from_raw_parts(
                                                l298.cast(),
                                                len300,
                                                len300,
                                            );
                                            _rt::string_lift(bytes300)
                                        };
                                        V313::InvalidQuery(e313)
                                    }
                                    10 => {
                                        let e313 = {
                                            let l301 = *ptr56.add(16).cast::<*mut u8>();
                                            let l302 = *ptr56.add(20).cast::<usize>();
                                            let len303 = l302;
                                            let bytes303 = _rt::Vec::from_raw_parts(
                                                l301.cast(),
                                                len303,
                                                len303,
                                            );
                                            _rt::string_lift(bytes303)
                                        };
                                        V313::TransactionFailed(e313)
                                    }
                                    11 => V313::TransactionConflict,
                                    12 => V313::TransactionTimeout,
                                    13 => V313::DeadlockDetected,
                                    14 => V313::Timeout,
                                    15 => {
                                        let e313 = {
                                            let l304 = *ptr56.add(16).cast::<*mut u8>();
                                            let l305 = *ptr56.add(20).cast::<usize>();
                                            let len306 = l305;
                                            let bytes306 = _rt::Vec::from_raw_parts(
                                                l304.cast(),
                                                len306,
                                                len306,
                                            );
                                            _rt::string_lift(bytes306)
                                        };
                                        V313::ResourceExhausted(e313)
                                    }
                                    16 => {
                                        let e313 = {
                                            let l307 = *ptr56.add(16).cast::<*mut u8>();
                                            let l308 = *ptr56.add(20).cast::<usize>();
                                            let len309 = l308;
                                            let bytes309 = _rt::Vec::from_raw_parts(
                                                l307.cast(),
                                                len309,
                                                len309,
                                            );
                                            _rt::string_lift(bytes309)
                                        };
                                        V313::InternalError(e313)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 17, "invalid enum discriminant");
                                        let e313 = {
                                            let l310 = *ptr56.add(16).cast::<*mut u8>();
                                            let l311 = *ptr56.add(20).cast::<usize>();
                                            let len312 = l311;
                                            let bytes312 = _rt::Vec::from_raw_parts(
                                                l310.cast(),
                                                len312,
                                                len312,
                                            );
                                            _rt::string_lift(bytes312)
                                        };
                                        V313::ServiceUnavailable(e313)
                                    }
                                };
                                v313
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Find all paths between two vertices (up to limit)
            pub fn find_all_paths(
                transaction: &Transaction,
                from_vertex: &ElementId,
                to_vertex: &ElementId,
                options: Option<&PathOptions>,
                limit: Option<u32>,
            ) -> Result<_rt::Vec<Path>, GraphError> {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 112]);
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 112],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    *ptr0.add(0).cast::<i32>() = (transaction).handle() as i32;
                    use super::super::super::golem::graph::types::ElementId as V3;
                    match from_vertex {
                        V3::StringValue(e) => {
                            *ptr0.add(8).cast::<u8>() = (0i32) as u8;
                            let vec1 = e;
                            let ptr1 = vec1.as_ptr().cast::<u8>();
                            let len1 = vec1.len();
                            *ptr0.add(20).cast::<usize>() = len1;
                            *ptr0.add(16).cast::<*mut u8>() = ptr1.cast_mut();
                        }
                        V3::Int64(e) => {
                            *ptr0.add(8).cast::<u8>() = (1i32) as u8;
                            *ptr0.add(16).cast::<i64>() = _rt::as_i64(e);
                        }
                        V3::Uuid(e) => {
                            *ptr0.add(8).cast::<u8>() = (2i32) as u8;
                            let vec2 = e;
                            let ptr2 = vec2.as_ptr().cast::<u8>();
                            let len2 = vec2.len();
                            *ptr0.add(20).cast::<usize>() = len2;
                            *ptr0.add(16).cast::<*mut u8>() = ptr2.cast_mut();
                        }
                    }
                    use super::super::super::golem::graph::types::ElementId as V6;
                    match to_vertex {
                        V6::StringValue(e) => {
                            *ptr0.add(24).cast::<u8>() = (0i32) as u8;
                            let vec4 = e;
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            *ptr0.add(36).cast::<usize>() = len4;
                            *ptr0.add(32).cast::<*mut u8>() = ptr4.cast_mut();
                        }
                        V6::Int64(e) => {
                            *ptr0.add(24).cast::<u8>() = (1i32) as u8;
                            *ptr0.add(32).cast::<i64>() = _rt::as_i64(e);
                        }
                        V6::Uuid(e) => {
                            *ptr0.add(24).cast::<u8>() = (2i32) as u8;
                            let vec5 = e;
                            let ptr5 = vec5.as_ptr().cast::<u8>();
                            let len5 = vec5.len();
                            *ptr0.add(36).cast::<usize>() = len5;
                            *ptr0.add(32).cast::<*mut u8>() = ptr5.cast_mut();
                        }
                    }
                    match options {
                        Some(e) => {
                            *ptr0.add(40).cast::<u8>() = (1i32) as u8;
                            let PathOptions {
                                max_depth: max_depth7,
                                edge_types: edge_types7,
                                vertex_types: vertex_types7,
                                vertex_filters: vertex_filters7,
                                edge_filters: edge_filters7,
                            } = e;
                            match max_depth7 {
                                Some(e) => {
                                    *ptr0.add(44).cast::<u8>() = (1i32) as u8;
                                    *ptr0.add(48).cast::<i32>() = _rt::as_i32(e);
                                }
                                None => {
                                    *ptr0.add(44).cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match edge_types7 {
                                Some(e) => {
                                    *ptr0.add(52).cast::<u8>() = (1i32) as u8;
                                    let vec9 = e;
                                    let len9 = vec9.len();
                                    let layout9 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec9.len() * 8,
                                        4,
                                    );
                                    let result9 = if layout9.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout9).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout9);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec9.into_iter().enumerate() {
                                        let base = result9.add(i * 8);
                                        {
                                            let vec8 = e;
                                            let ptr8 = vec8.as_ptr().cast::<u8>();
                                            let len8 = vec8.len();
                                            *base.add(4).cast::<usize>() = len8;
                                            *base.add(0).cast::<*mut u8>() = ptr8.cast_mut();
                                        }
                                    }
                                    *ptr0.add(60).cast::<usize>() = len9;
                                    *ptr0.add(56).cast::<*mut u8>() = result9;
                                    cleanup_list.extend_from_slice(&[(result9, layout9)]);
                                }
                                None => {
                                    *ptr0.add(52).cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match vertex_types7 {
                                Some(e) => {
                                    *ptr0.add(64).cast::<u8>() = (1i32) as u8;
                                    let vec11 = e;
                                    let len11 = vec11.len();
                                    let layout11 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec11.len() * 8,
                                        4,
                                    );
                                    let result11 = if layout11.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout11).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout11);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec11.into_iter().enumerate() {
                                        let base = result11.add(i * 8);
                                        {
                                            let vec10 = e;
                                            let ptr10 = vec10.as_ptr().cast::<u8>();
                                            let len10 = vec10.len();
                                            *base.add(4).cast::<usize>() = len10;
                                            *base.add(0).cast::<*mut u8>() = ptr10.cast_mut();
                                        }
                                    }
                                    *ptr0.add(72).cast::<usize>() = len11;
                                    *ptr0.add(68).cast::<*mut u8>() = result11;
                                    cleanup_list.extend_from_slice(&[(result11, layout11)]);
                                }
                                None => {
                                    *ptr0.add(64).cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match vertex_filters7 {
                                Some(e) => {
                                    *ptr0.add(76).cast::<u8>() = (1i32) as u8;
                                    let vec33 = e;
                                    let len33 = vec33.len();
                                    let layout33 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec33.len() * 56,
                                        8,
                                    );
                                    let result33 = if layout33.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout33).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout33);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec33.into_iter().enumerate() {
                                        let base = result33.add(i * 56);
                                        {
                                            let super::super::super::golem::graph::types::FilterCondition {
                                                property: property12,
                                                operator: operator12,
                                                value: value12,
                                            } = e;
                                            let vec13 = property12;
                                            let ptr13 = vec13.as_ptr().cast::<u8>();
                                            let len13 = vec13.len();
                                            *base.add(4).cast::<usize>() = len13;
                                            *base.add(0).cast::<*mut u8>() = ptr13.cast_mut();
                                            *base.add(8).cast::<u8>() = (operator12.clone() as i32)
                                                as u8;
                                            use super::super::super::golem::graph::types::PropertyValue as V32;
                                            match value12 {
                                                V32::NullValue => {
                                                    *base.add(16).cast::<u8>() = (0i32) as u8;
                                                }
                                                V32::Boolean(e) => {
                                                    *base.add(16).cast::<u8>() = (1i32) as u8;
                                                    *base.add(24).cast::<u8>() = (match e {
                                                        true => 1,
                                                        false => 0,
                                                    }) as u8;
                                                }
                                                V32::Int8(e) => {
                                                    *base.add(16).cast::<u8>() = (2i32) as u8;
                                                    *base.add(24).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                                }
                                                V32::Int16(e) => {
                                                    *base.add(16).cast::<u8>() = (3i32) as u8;
                                                    *base.add(24).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                                }
                                                V32::Int32(e) => {
                                                    *base.add(16).cast::<u8>() = (4i32) as u8;
                                                    *base.add(24).cast::<i32>() = _rt::as_i32(e);
                                                }
                                                V32::Int64(e) => {
                                                    *base.add(16).cast::<u8>() = (5i32) as u8;
                                                    *base.add(24).cast::<i64>() = _rt::as_i64(e);
                                                }
                                                V32::Uint8(e) => {
                                                    *base.add(16).cast::<u8>() = (6i32) as u8;
                                                    *base.add(24).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                                }
                                                V32::Uint16(e) => {
                                                    *base.add(16).cast::<u8>() = (7i32) as u8;
                                                    *base.add(24).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                                }
                                                V32::Uint32(e) => {
                                                    *base.add(16).cast::<u8>() = (8i32) as u8;
                                                    *base.add(24).cast::<i32>() = _rt::as_i32(e);
                                                }
                                                V32::Uint64(e) => {
                                                    *base.add(16).cast::<u8>() = (9i32) as u8;
                                                    *base.add(24).cast::<i64>() = _rt::as_i64(e);
                                                }
                                                V32::Float32Value(e) => {
                                                    *base.add(16).cast::<u8>() = (10i32) as u8;
                                                    *base.add(24).cast::<f32>() = _rt::as_f32(e);
                                                }
                                                V32::Float64Value(e) => {
                                                    *base.add(16).cast::<u8>() = (11i32) as u8;
                                                    *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                }
                                                V32::StringValue(e) => {
                                                    *base.add(16).cast::<u8>() = (12i32) as u8;
                                                    let vec14 = e;
                                                    let ptr14 = vec14.as_ptr().cast::<u8>();
                                                    let len14 = vec14.len();
                                                    *base.add(28).cast::<usize>() = len14;
                                                    *base.add(24).cast::<*mut u8>() = ptr14.cast_mut();
                                                }
                                                V32::Bytes(e) => {
                                                    *base.add(16).cast::<u8>() = (13i32) as u8;
                                                    let vec15 = e;
                                                    let ptr15 = vec15.as_ptr().cast::<u8>();
                                                    let len15 = vec15.len();
                                                    *base.add(28).cast::<usize>() = len15;
                                                    *base.add(24).cast::<*mut u8>() = ptr15.cast_mut();
                                                }
                                                V32::Date(e) => {
                                                    *base.add(16).cast::<u8>() = (14i32) as u8;
                                                    let super::super::super::golem::graph::types::Date {
                                                        year: year16,
                                                        month: month16,
                                                        day: day16,
                                                    } = e;
                                                    *base.add(24).cast::<i32>() = _rt::as_i32(year16);
                                                    *base.add(28).cast::<u8>() = (_rt::as_i32(month16)) as u8;
                                                    *base.add(29).cast::<u8>() = (_rt::as_i32(day16)) as u8;
                                                }
                                                V32::Time(e) => {
                                                    *base.add(16).cast::<u8>() = (15i32) as u8;
                                                    let super::super::super::golem::graph::types::Time {
                                                        hour: hour17,
                                                        minute: minute17,
                                                        second: second17,
                                                        nanosecond: nanosecond17,
                                                    } = e;
                                                    *base.add(24).cast::<u8>() = (_rt::as_i32(hour17)) as u8;
                                                    *base.add(25).cast::<u8>() = (_rt::as_i32(minute17)) as u8;
                                                    *base.add(26).cast::<u8>() = (_rt::as_i32(second17)) as u8;
                                                    *base.add(28).cast::<i32>() = _rt::as_i32(nanosecond17);
                                                }
                                                V32::Datetime(e) => {
                                                    *base.add(16).cast::<u8>() = (16i32) as u8;
                                                    let super::super::super::golem::graph::types::Datetime {
                                                        date: date18,
                                                        time: time18,
                                                        timezone_offset_minutes: timezone_offset_minutes18,
                                                    } = e;
                                                    let super::super::super::golem::graph::types::Date {
                                                        year: year19,
                                                        month: month19,
                                                        day: day19,
                                                    } = date18;
                                                    *base.add(24).cast::<i32>() = _rt::as_i32(year19);
                                                    *base.add(28).cast::<u8>() = (_rt::as_i32(month19)) as u8;
                                                    *base.add(29).cast::<u8>() = (_rt::as_i32(day19)) as u8;
                                                    let super::super::super::golem::graph::types::Time {
                                                        hour: hour20,
                                                        minute: minute20,
                                                        second: second20,
                                                        nanosecond: nanosecond20,
                                                    } = time18;
                                                    *base.add(32).cast::<u8>() = (_rt::as_i32(hour20)) as u8;
                                                    *base.add(33).cast::<u8>() = (_rt::as_i32(minute20)) as u8;
                                                    *base.add(34).cast::<u8>() = (_rt::as_i32(second20)) as u8;
                                                    *base.add(36).cast::<i32>() = _rt::as_i32(nanosecond20);
                                                    match timezone_offset_minutes18 {
                                                        Some(e) => {
                                                            *base.add(40).cast::<u8>() = (1i32) as u8;
                                                            *base.add(42).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                                        }
                                                        None => {
                                                            *base.add(40).cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                                V32::Duration(e) => {
                                                    *base.add(16).cast::<u8>() = (17i32) as u8;
                                                    let super::super::super::golem::graph::types::Duration {
                                                        seconds: seconds21,
                                                        nanoseconds: nanoseconds21,
                                                    } = e;
                                                    *base.add(24).cast::<i64>() = _rt::as_i64(seconds21);
                                                    *base.add(32).cast::<i32>() = _rt::as_i32(nanoseconds21);
                                                }
                                                V32::Point(e) => {
                                                    *base.add(16).cast::<u8>() = (18i32) as u8;
                                                    let super::super::super::golem::graph::types::Point {
                                                        longitude: longitude22,
                                                        latitude: latitude22,
                                                        altitude: altitude22,
                                                    } = e;
                                                    *base.add(24).cast::<f64>() = _rt::as_f64(longitude22);
                                                    *base.add(32).cast::<f64>() = _rt::as_f64(latitude22);
                                                    match altitude22 {
                                                        Some(e) => {
                                                            *base.add(40).cast::<u8>() = (1i32) as u8;
                                                            *base.add(48).cast::<f64>() = _rt::as_f64(e);
                                                        }
                                                        None => {
                                                            *base.add(40).cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                                V32::Linestring(e) => {
                                                    *base.add(16).cast::<u8>() = (19i32) as u8;
                                                    let super::super::super::golem::graph::types::Linestring {
                                                        coordinates: coordinates23,
                                                    } = e;
                                                    let vec25 = coordinates23;
                                                    let len25 = vec25.len();
                                                    let layout25 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec25.len() * 32,
                                                        8,
                                                    );
                                                    let result25 = if layout25.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout25).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout25);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec25.into_iter().enumerate() {
                                                        let base = result25.add(i * 32);
                                                        {
                                                            let super::super::super::golem::graph::types::Point {
                                                                longitude: longitude24,
                                                                latitude: latitude24,
                                                                altitude: altitude24,
                                                            } = e;
                                                            *base.add(0).cast::<f64>() = _rt::as_f64(longitude24);
                                                            *base.add(8).cast::<f64>() = _rt::as_f64(latitude24);
                                                            match altitude24 {
                                                                Some(e) => {
                                                                    *base.add(16).cast::<u8>() = (1i32) as u8;
                                                                    *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                                }
                                                                None => {
                                                                    *base.add(16).cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                    }
                                                    *base.add(28).cast::<usize>() = len25;
                                                    *base.add(24).cast::<*mut u8>() = result25;
                                                    cleanup_list.extend_from_slice(&[(result25, layout25)]);
                                                }
                                                V32::Polygon(e) => {
                                                    *base.add(16).cast::<u8>() = (20i32) as u8;
                                                    let super::super::super::golem::graph::types::Polygon {
                                                        exterior: exterior26,
                                                        holes: holes26,
                                                    } = e;
                                                    let vec28 = exterior26;
                                                    let len28 = vec28.len();
                                                    let layout28 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec28.len() * 32,
                                                        8,
                                                    );
                                                    let result28 = if layout28.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout28).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout28);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec28.into_iter().enumerate() {
                                                        let base = result28.add(i * 32);
                                                        {
                                                            let super::super::super::golem::graph::types::Point {
                                                                longitude: longitude27,
                                                                latitude: latitude27,
                                                                altitude: altitude27,
                                                            } = e;
                                                            *base.add(0).cast::<f64>() = _rt::as_f64(longitude27);
                                                            *base.add(8).cast::<f64>() = _rt::as_f64(latitude27);
                                                            match altitude27 {
                                                                Some(e) => {
                                                                    *base.add(16).cast::<u8>() = (1i32) as u8;
                                                                    *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                                }
                                                                None => {
                                                                    *base.add(16).cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                    }
                                                    *base.add(28).cast::<usize>() = len28;
                                                    *base.add(24).cast::<*mut u8>() = result28;
                                                    match holes26 {
                                                        Some(e) => {
                                                            *base.add(32).cast::<u8>() = (1i32) as u8;
                                                            let vec31 = e;
                                                            let len31 = vec31.len();
                                                            let layout31 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec31.len() * 8,
                                                                4,
                                                            );
                                                            let result31 = if layout31.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout31).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout31);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec31.into_iter().enumerate() {
                                                                let base = result31.add(i * 8);
                                                                {
                                                                    let vec30 = e;
                                                                    let len30 = vec30.len();
                                                                    let layout30 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec30.len() * 32,
                                                                        8,
                                                                    );
                                                                    let result30 = if layout30.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout30).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout30);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec30.into_iter().enumerate() {
                                                                        let base = result30.add(i * 32);
                                                                        {
                                                                            let super::super::super::golem::graph::types::Point {
                                                                                longitude: longitude29,
                                                                                latitude: latitude29,
                                                                                altitude: altitude29,
                                                                            } = e;
                                                                            *base.add(0).cast::<f64>() = _rt::as_f64(longitude29);
                                                                            *base.add(8).cast::<f64>() = _rt::as_f64(latitude29);
                                                                            match altitude29 {
                                                                                Some(e) => {
                                                                                    *base.add(16).cast::<u8>() = (1i32) as u8;
                                                                                    *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                                                }
                                                                                None => {
                                                                                    *base.add(16).cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                        }
                                                                    }
                                                                    *base.add(4).cast::<usize>() = len30;
                                                                    *base.add(0).cast::<*mut u8>() = result30;
                                                                    cleanup_list.extend_from_slice(&[(result30, layout30)]);
                                                                }
                                                            }
                                                            *base.add(40).cast::<usize>() = len31;
                                                            *base.add(36).cast::<*mut u8>() = result31;
                                                            cleanup_list.extend_from_slice(&[(result31, layout31)]);
                                                        }
                                                        None => {
                                                            *base.add(32).cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    cleanup_list.extend_from_slice(&[(result28, layout28)]);
                                                }
                                            }
                                        }
                                    }
                                    *ptr0.add(84).cast::<usize>() = len33;
                                    *ptr0.add(80).cast::<*mut u8>() = result33;
                                    cleanup_list.extend_from_slice(&[(result33, layout33)]);
                                }
                                None => {
                                    *ptr0.add(76).cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match edge_filters7 {
                                Some(e) => {
                                    *ptr0.add(88).cast::<u8>() = (1i32) as u8;
                                    let vec55 = e;
                                    let len55 = vec55.len();
                                    let layout55 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec55.len() * 56,
                                        8,
                                    );
                                    let result55 = if layout55.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout55).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout55);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec55.into_iter().enumerate() {
                                        let base = result55.add(i * 56);
                                        {
                                            let super::super::super::golem::graph::types::FilterCondition {
                                                property: property34,
                                                operator: operator34,
                                                value: value34,
                                            } = e;
                                            let vec35 = property34;
                                            let ptr35 = vec35.as_ptr().cast::<u8>();
                                            let len35 = vec35.len();
                                            *base.add(4).cast::<usize>() = len35;
                                            *base.add(0).cast::<*mut u8>() = ptr35.cast_mut();
                                            *base.add(8).cast::<u8>() = (operator34.clone() as i32)
                                                as u8;
                                            use super::super::super::golem::graph::types::PropertyValue as V54;
                                            match value34 {
                                                V54::NullValue => {
                                                    *base.add(16).cast::<u8>() = (0i32) as u8;
                                                }
                                                V54::Boolean(e) => {
                                                    *base.add(16).cast::<u8>() = (1i32) as u8;
                                                    *base.add(24).cast::<u8>() = (match e {
                                                        true => 1,
                                                        false => 0,
                                                    }) as u8;
                                                }
                                                V54::Int8(e) => {
                                                    *base.add(16).cast::<u8>() = (2i32) as u8;
                                                    *base.add(24).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                                }
                                                V54::Int16(e) => {
                                                    *base.add(16).cast::<u8>() = (3i32) as u8;
                                                    *base.add(24).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                                }
                                                V54::Int32(e) => {
                                                    *base.add(16).cast::<u8>() = (4i32) as u8;
                                                    *base.add(24).cast::<i32>() = _rt::as_i32(e);
                                                }
                                                V54::Int64(e) => {
                                                    *base.add(16).cast::<u8>() = (5i32) as u8;
                                                    *base.add(24).cast::<i64>() = _rt::as_i64(e);
                                                }
                                                V54::Uint8(e) => {
                                                    *base.add(16).cast::<u8>() = (6i32) as u8;
                                                    *base.add(24).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                                }
                                                V54::Uint16(e) => {
                                                    *base.add(16).cast::<u8>() = (7i32) as u8;
                                                    *base.add(24).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                                }
                                                V54::Uint32(e) => {
                                                    *base.add(16).cast::<u8>() = (8i32) as u8;
                                                    *base.add(24).cast::<i32>() = _rt::as_i32(e);
                                                }
                                                V54::Uint64(e) => {
                                                    *base.add(16).cast::<u8>() = (9i32) as u8;
                                                    *base.add(24).cast::<i64>() = _rt::as_i64(e);
                                                }
                                                V54::Float32Value(e) => {
                                                    *base.add(16).cast::<u8>() = (10i32) as u8;
                                                    *base.add(24).cast::<f32>() = _rt::as_f32(e);
                                                }
                                                V54::Float64Value(e) => {
                                                    *base.add(16).cast::<u8>() = (11i32) as u8;
                                                    *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                }
                                                V54::StringValue(e) => {
                                                    *base.add(16).cast::<u8>() = (12i32) as u8;
                                                    let vec36 = e;
                                                    let ptr36 = vec36.as_ptr().cast::<u8>();
                                                    let len36 = vec36.len();
                                                    *base.add(28).cast::<usize>() = len36;
                                                    *base.add(24).cast::<*mut u8>() = ptr36.cast_mut();
                                                }
                                                V54::Bytes(e) => {
                                                    *base.add(16).cast::<u8>() = (13i32) as u8;
                                                    let vec37 = e;
                                                    let ptr37 = vec37.as_ptr().cast::<u8>();
                                                    let len37 = vec37.len();
                                                    *base.add(28).cast::<usize>() = len37;
                                                    *base.add(24).cast::<*mut u8>() = ptr37.cast_mut();
                                                }
                                                V54::Date(e) => {
                                                    *base.add(16).cast::<u8>() = (14i32) as u8;
                                                    let super::super::super::golem::graph::types::Date {
                                                        year: year38,
                                                        month: month38,
                                                        day: day38,
                                                    } = e;
                                                    *base.add(24).cast::<i32>() = _rt::as_i32(year38);
                                                    *base.add(28).cast::<u8>() = (_rt::as_i32(month38)) as u8;
                                                    *base.add(29).cast::<u8>() = (_rt::as_i32(day38)) as u8;
                                                }
                                                V54::Time(e) => {
                                                    *base.add(16).cast::<u8>() = (15i32) as u8;
                                                    let super::super::super::golem::graph::types::Time {
                                                        hour: hour39,
                                                        minute: minute39,
                                                        second: second39,
                                                        nanosecond: nanosecond39,
                                                    } = e;
                                                    *base.add(24).cast::<u8>() = (_rt::as_i32(hour39)) as u8;
                                                    *base.add(25).cast::<u8>() = (_rt::as_i32(minute39)) as u8;
                                                    *base.add(26).cast::<u8>() = (_rt::as_i32(second39)) as u8;
                                                    *base.add(28).cast::<i32>() = _rt::as_i32(nanosecond39);
                                                }
                                                V54::Datetime(e) => {
                                                    *base.add(16).cast::<u8>() = (16i32) as u8;
                                                    let super::super::super::golem::graph::types::Datetime {
                                                        date: date40,
                                                        time: time40,
                                                        timezone_offset_minutes: timezone_offset_minutes40,
                                                    } = e;
                                                    let super::super::super::golem::graph::types::Date {
                                                        year: year41,
                                                        month: month41,
                                                        day: day41,
                                                    } = date40;
                                                    *base.add(24).cast::<i32>() = _rt::as_i32(year41);
                                                    *base.add(28).cast::<u8>() = (_rt::as_i32(month41)) as u8;
                                                    *base.add(29).cast::<u8>() = (_rt::as_i32(day41)) as u8;
                                                    let super::super::super::golem::graph::types::Time {
                                                        hour: hour42,
                                                        minute: minute42,
                                                        second: second42,
                                                        nanosecond: nanosecond42,
                                                    } = time40;
                                                    *base.add(32).cast::<u8>() = (_rt::as_i32(hour42)) as u8;
                                                    *base.add(33).cast::<u8>() = (_rt::as_i32(minute42)) as u8;
                                                    *base.add(34).cast::<u8>() = (_rt::as_i32(second42)) as u8;
                                                    *base.add(36).cast::<i32>() = _rt::as_i32(nanosecond42);
                                                    match timezone_offset_minutes40 {
                                                        Some(e) => {
                                                            *base.add(40).cast::<u8>() = (1i32) as u8;
                                                            *base.add(42).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                                        }
                                                        None => {
                                                            *base.add(40).cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                                V54::Duration(e) => {
                                                    *base.add(16).cast::<u8>() = (17i32) as u8;
                                                    let super::super::super::golem::graph::types::Duration {
                                                        seconds: seconds43,
                                                        nanoseconds: nanoseconds43,
                                                    } = e;
                                                    *base.add(24).cast::<i64>() = _rt::as_i64(seconds43);
                                                    *base.add(32).cast::<i32>() = _rt::as_i32(nanoseconds43);
                                                }
                                                V54::Point(e) => {
                                                    *base.add(16).cast::<u8>() = (18i32) as u8;
                                                    let super::super::super::golem::graph::types::Point {
                                                        longitude: longitude44,
                                                        latitude: latitude44,
                                                        altitude: altitude44,
                                                    } = e;
                                                    *base.add(24).cast::<f64>() = _rt::as_f64(longitude44);
                                                    *base.add(32).cast::<f64>() = _rt::as_f64(latitude44);
                                                    match altitude44 {
                                                        Some(e) => {
                                                            *base.add(40).cast::<u8>() = (1i32) as u8;
                                                            *base.add(48).cast::<f64>() = _rt::as_f64(e);
                                                        }
                                                        None => {
                                                            *base.add(40).cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                                V54::Linestring(e) => {
                                                    *base.add(16).cast::<u8>() = (19i32) as u8;
                                                    let super::super::super::golem::graph::types::Linestring {
                                                        coordinates: coordinates45,
                                                    } = e;
                                                    let vec47 = coordinates45;
                                                    let len47 = vec47.len();
                                                    let layout47 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec47.len() * 32,
                                                        8,
                                                    );
                                                    let result47 = if layout47.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout47).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout47);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec47.into_iter().enumerate() {
                                                        let base = result47.add(i * 32);
                                                        {
                                                            let super::super::super::golem::graph::types::Point {
                                                                longitude: longitude46,
                                                                latitude: latitude46,
                                                                altitude: altitude46,
                                                            } = e;
                                                            *base.add(0).cast::<f64>() = _rt::as_f64(longitude46);
                                                            *base.add(8).cast::<f64>() = _rt::as_f64(latitude46);
                                                            match altitude46 {
                                                                Some(e) => {
                                                                    *base.add(16).cast::<u8>() = (1i32) as u8;
                                                                    *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                                }
                                                                None => {
                                                                    *base.add(16).cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                    }
                                                    *base.add(28).cast::<usize>() = len47;
                                                    *base.add(24).cast::<*mut u8>() = result47;
                                                    cleanup_list.extend_from_slice(&[(result47, layout47)]);
                                                }
                                                V54::Polygon(e) => {
                                                    *base.add(16).cast::<u8>() = (20i32) as u8;
                                                    let super::super::super::golem::graph::types::Polygon {
                                                        exterior: exterior48,
                                                        holes: holes48,
                                                    } = e;
                                                    let vec50 = exterior48;
                                                    let len50 = vec50.len();
                                                    let layout50 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec50.len() * 32,
                                                        8,
                                                    );
                                                    let result50 = if layout50.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout50).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout50);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec50.into_iter().enumerate() {
                                                        let base = result50.add(i * 32);
                                                        {
                                                            let super::super::super::golem::graph::types::Point {
                                                                longitude: longitude49,
                                                                latitude: latitude49,
                                                                altitude: altitude49,
                                                            } = e;
                                                            *base.add(0).cast::<f64>() = _rt::as_f64(longitude49);
                                                            *base.add(8).cast::<f64>() = _rt::as_f64(latitude49);
                                                            match altitude49 {
                                                                Some(e) => {
                                                                    *base.add(16).cast::<u8>() = (1i32) as u8;
                                                                    *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                                }
                                                                None => {
                                                                    *base.add(16).cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                    }
                                                    *base.add(28).cast::<usize>() = len50;
                                                    *base.add(24).cast::<*mut u8>() = result50;
                                                    match holes48 {
                                                        Some(e) => {
                                                            *base.add(32).cast::<u8>() = (1i32) as u8;
                                                            let vec53 = e;
                                                            let len53 = vec53.len();
                                                            let layout53 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec53.len() * 8,
                                                                4,
                                                            );
                                                            let result53 = if layout53.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout53).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout53);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec53.into_iter().enumerate() {
                                                                let base = result53.add(i * 8);
                                                                {
                                                                    let vec52 = e;
                                                                    let len52 = vec52.len();
                                                                    let layout52 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec52.len() * 32,
                                                                        8,
                                                                    );
                                                                    let result52 = if layout52.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout52).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout52);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec52.into_iter().enumerate() {
                                                                        let base = result52.add(i * 32);
                                                                        {
                                                                            let super::super::super::golem::graph::types::Point {
                                                                                longitude: longitude51,
                                                                                latitude: latitude51,
                                                                                altitude: altitude51,
                                                                            } = e;
                                                                            *base.add(0).cast::<f64>() = _rt::as_f64(longitude51);
                                                                            *base.add(8).cast::<f64>() = _rt::as_f64(latitude51);
                                                                            match altitude51 {
                                                                                Some(e) => {
                                                                                    *base.add(16).cast::<u8>() = (1i32) as u8;
                                                                                    *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                                                }
                                                                                None => {
                                                                                    *base.add(16).cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                        }
                                                                    }
                                                                    *base.add(4).cast::<usize>() = len52;
                                                                    *base.add(0).cast::<*mut u8>() = result52;
                                                                    cleanup_list.extend_from_slice(&[(result52, layout52)]);
                                                                }
                                                            }
                                                            *base.add(40).cast::<usize>() = len53;
                                                            *base.add(36).cast::<*mut u8>() = result53;
                                                            cleanup_list.extend_from_slice(&[(result53, layout53)]);
                                                        }
                                                        None => {
                                                            *base.add(32).cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    cleanup_list.extend_from_slice(&[(result50, layout50)]);
                                                }
                                            }
                                        }
                                    }
                                    *ptr0.add(96).cast::<usize>() = len55;
                                    *ptr0.add(92).cast::<*mut u8>() = result55;
                                    cleanup_list.extend_from_slice(&[(result55, layout55)]);
                                }
                                None => {
                                    *ptr0.add(88).cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        None => {
                            *ptr0.add(40).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    match limit {
                        Some(e) => {
                            *ptr0.add(100).cast::<u8>() = (1i32) as u8;
                            *ptr0.add(104).cast::<i32>() = _rt::as_i32(e);
                        }
                        None => {
                            *ptr0.add(100).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    let ptr56 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:graph/traversal@1.0.0")]
                    extern "C" {
                        #[link_name = "find-all-paths"]
                        fn wit_import(_: *mut u8, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0, ptr56);
                    let l57 = i32::from(*ptr56.add(0).cast::<u8>());
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                    match l57 {
                        0 => {
                            let e = {
                                let l58 = *ptr56.add(8).cast::<*mut u8>();
                                let l59 = *ptr56.add(12).cast::<usize>();
                                let base259 = l58;
                                let len259 = l59;
                                let mut result259 = _rt::Vec::with_capacity(len259);
                                for i in 0..len259 {
                                    let base = base259.add(i * 20);
                                    let e259 = {
                                        let l60 = *base.add(0).cast::<*mut u8>();
                                        let l61 = *base.add(4).cast::<usize>();
                                        let base152 = l60;
                                        let len152 = l61;
                                        let mut result152 = _rt::Vec::with_capacity(len152);
                                        for i in 0..len152 {
                                            let base = base152.add(i * 40);
                                            let e152 = {
                                                let l62 = i32::from(*base.add(0).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V70;
                                                let v70 = match l62 {
                                                    0 => {
                                                        let e70 = {
                                                            let l63 = *base.add(8).cast::<*mut u8>();
                                                            let l64 = *base.add(12).cast::<usize>();
                                                            let len65 = l64;
                                                            let bytes65 = _rt::Vec::from_raw_parts(
                                                                l63.cast(),
                                                                len65,
                                                                len65,
                                                            );
                                                            _rt::string_lift(bytes65)
                                                        };
                                                        V70::StringValue(e70)
                                                    }
                                                    1 => {
                                                        let e70 = {
                                                            let l66 = *base.add(8).cast::<i64>();
                                                            l66
                                                        };
                                                        V70::Int64(e70)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e70 = {
                                                            let l67 = *base.add(8).cast::<*mut u8>();
                                                            let l68 = *base.add(12).cast::<usize>();
                                                            let len69 = l68;
                                                            let bytes69 = _rt::Vec::from_raw_parts(
                                                                l67.cast(),
                                                                len69,
                                                                len69,
                                                            );
                                                            _rt::string_lift(bytes69)
                                                        };
                                                        V70::Uuid(e70)
                                                    }
                                                };
                                                let l71 = *base.add(16).cast::<*mut u8>();
                                                let l72 = *base.add(20).cast::<usize>();
                                                let len73 = l72;
                                                let bytes73 = _rt::Vec::from_raw_parts(
                                                    l71.cast(),
                                                    len73,
                                                    len73,
                                                );
                                                let l74 = *base.add(24).cast::<*mut u8>();
                                                let l75 = *base.add(28).cast::<usize>();
                                                let base79 = l74;
                                                let len79 = l75;
                                                let mut result79 = _rt::Vec::with_capacity(len79);
                                                for i in 0..len79 {
                                                    let base = base79.add(i * 8);
                                                    let e79 = {
                                                        let l76 = *base.add(0).cast::<*mut u8>();
                                                        let l77 = *base.add(4).cast::<usize>();
                                                        let len78 = l77;
                                                        let bytes78 = _rt::Vec::from_raw_parts(
                                                            l76.cast(),
                                                            len78,
                                                            len78,
                                                        );
                                                        _rt::string_lift(bytes78)
                                                    };
                                                    result79.push(e79);
                                                }
                                                _rt::cabi_dealloc(base79, len79 * 8, 4);
                                                let l80 = *base.add(32).cast::<*mut u8>();
                                                let l81 = *base.add(36).cast::<usize>();
                                                let base151 = l80;
                                                let len151 = l81;
                                                let mut result151 = _rt::Vec::with_capacity(len151);
                                                for i in 0..len151 {
                                                    let base = base151.add(i * 48);
                                                    let e151 = {
                                                        let l82 = *base.add(0).cast::<*mut u8>();
                                                        let l83 = *base.add(4).cast::<usize>();
                                                        let len84 = l83;
                                                        let bytes84 = _rt::Vec::from_raw_parts(
                                                            l82.cast(),
                                                            len84,
                                                            len84,
                                                        );
                                                        let l85 = i32::from(*base.add(8).cast::<u8>());
                                                        use super::super::super::golem::graph::types::PropertyValue as V150;
                                                        let v150 = match l85 {
                                                            0 => V150::NullValue,
                                                            1 => {
                                                                let e150 = {
                                                                    let l86 = i32::from(*base.add(16).cast::<u8>());
                                                                    _rt::bool_lift(l86 as u8)
                                                                };
                                                                V150::Boolean(e150)
                                                            }
                                                            2 => {
                                                                let e150 = {
                                                                    let l87 = i32::from(*base.add(16).cast::<i8>());
                                                                    l87 as i8
                                                                };
                                                                V150::Int8(e150)
                                                            }
                                                            3 => {
                                                                let e150 = {
                                                                    let l88 = i32::from(*base.add(16).cast::<i16>());
                                                                    l88 as i16
                                                                };
                                                                V150::Int16(e150)
                                                            }
                                                            4 => {
                                                                let e150 = {
                                                                    let l89 = *base.add(16).cast::<i32>();
                                                                    l89
                                                                };
                                                                V150::Int32(e150)
                                                            }
                                                            5 => {
                                                                let e150 = {
                                                                    let l90 = *base.add(16).cast::<i64>();
                                                                    l90
                                                                };
                                                                V150::Int64(e150)
                                                            }
                                                            6 => {
                                                                let e150 = {
                                                                    let l91 = i32::from(*base.add(16).cast::<u8>());
                                                                    l91 as u8
                                                                };
                                                                V150::Uint8(e150)
                                                            }
                                                            7 => {
                                                                let e150 = {
                                                                    let l92 = i32::from(*base.add(16).cast::<u16>());
                                                                    l92 as u16
                                                                };
                                                                V150::Uint16(e150)
                                                            }
                                                            8 => {
                                                                let e150 = {
                                                                    let l93 = *base.add(16).cast::<i32>();
                                                                    l93 as u32
                                                                };
                                                                V150::Uint32(e150)
                                                            }
                                                            9 => {
                                                                let e150 = {
                                                                    let l94 = *base.add(16).cast::<i64>();
                                                                    l94 as u64
                                                                };
                                                                V150::Uint64(e150)
                                                            }
                                                            10 => {
                                                                let e150 = {
                                                                    let l95 = *base.add(16).cast::<f32>();
                                                                    l95
                                                                };
                                                                V150::Float32Value(e150)
                                                            }
                                                            11 => {
                                                                let e150 = {
                                                                    let l96 = *base.add(16).cast::<f64>();
                                                                    l96
                                                                };
                                                                V150::Float64Value(e150)
                                                            }
                                                            12 => {
                                                                let e150 = {
                                                                    let l97 = *base.add(16).cast::<*mut u8>();
                                                                    let l98 = *base.add(20).cast::<usize>();
                                                                    let len99 = l98;
                                                                    let bytes99 = _rt::Vec::from_raw_parts(
                                                                        l97.cast(),
                                                                        len99,
                                                                        len99,
                                                                    );
                                                                    _rt::string_lift(bytes99)
                                                                };
                                                                V150::StringValue(e150)
                                                            }
                                                            13 => {
                                                                let e150 = {
                                                                    let l100 = *base.add(16).cast::<*mut u8>();
                                                                    let l101 = *base.add(20).cast::<usize>();
                                                                    let len102 = l101;
                                                                    _rt::Vec::from_raw_parts(l100.cast(), len102, len102)
                                                                };
                                                                V150::Bytes(e150)
                                                            }
                                                            14 => {
                                                                let e150 = {
                                                                    let l103 = *base.add(16).cast::<i32>();
                                                                    let l104 = i32::from(*base.add(20).cast::<u8>());
                                                                    let l105 = i32::from(*base.add(21).cast::<u8>());
                                                                    super::super::super::golem::graph::types::Date {
                                                                        year: l103 as u32,
                                                                        month: l104 as u8,
                                                                        day: l105 as u8,
                                                                    }
                                                                };
                                                                V150::Date(e150)
                                                            }
                                                            15 => {
                                                                let e150 = {
                                                                    let l106 = i32::from(*base.add(16).cast::<u8>());
                                                                    let l107 = i32::from(*base.add(17).cast::<u8>());
                                                                    let l108 = i32::from(*base.add(18).cast::<u8>());
                                                                    let l109 = *base.add(20).cast::<i32>();
                                                                    super::super::super::golem::graph::types::Time {
                                                                        hour: l106 as u8,
                                                                        minute: l107 as u8,
                                                                        second: l108 as u8,
                                                                        nanosecond: l109 as u32,
                                                                    }
                                                                };
                                                                V150::Time(e150)
                                                            }
                                                            16 => {
                                                                let e150 = {
                                                                    let l110 = *base.add(16).cast::<i32>();
                                                                    let l111 = i32::from(*base.add(20).cast::<u8>());
                                                                    let l112 = i32::from(*base.add(21).cast::<u8>());
                                                                    let l113 = i32::from(*base.add(24).cast::<u8>());
                                                                    let l114 = i32::from(*base.add(25).cast::<u8>());
                                                                    let l115 = i32::from(*base.add(26).cast::<u8>());
                                                                    let l116 = *base.add(28).cast::<i32>();
                                                                    let l117 = i32::from(*base.add(32).cast::<u8>());
                                                                    super::super::super::golem::graph::types::Datetime {
                                                                        date: super::super::super::golem::graph::types::Date {
                                                                            year: l110 as u32,
                                                                            month: l111 as u8,
                                                                            day: l112 as u8,
                                                                        },
                                                                        time: super::super::super::golem::graph::types::Time {
                                                                            hour: l113 as u8,
                                                                            minute: l114 as u8,
                                                                            second: l115 as u8,
                                                                            nanosecond: l116 as u32,
                                                                        },
                                                                        timezone_offset_minutes: match l117 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l118 = i32::from(*base.add(34).cast::<i16>());
                                                                                    l118 as i16
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                V150::Datetime(e150)
                                                            }
                                                            17 => {
                                                                let e150 = {
                                                                    let l119 = *base.add(16).cast::<i64>();
                                                                    let l120 = *base.add(24).cast::<i32>();
                                                                    super::super::super::golem::graph::types::Duration {
                                                                        seconds: l119,
                                                                        nanoseconds: l120 as u32,
                                                                    }
                                                                };
                                                                V150::Duration(e150)
                                                            }
                                                            18 => {
                                                                let e150 = {
                                                                    let l121 = *base.add(16).cast::<f64>();
                                                                    let l122 = *base.add(24).cast::<f64>();
                                                                    let l123 = i32::from(*base.add(32).cast::<u8>());
                                                                    super::super::super::golem::graph::types::Point {
                                                                        longitude: l121,
                                                                        latitude: l122,
                                                                        altitude: match l123 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l124 = *base.add(40).cast::<f64>();
                                                                                    l124
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                V150::Point(e150)
                                                            }
                                                            19 => {
                                                                let e150 = {
                                                                    let l125 = *base.add(16).cast::<*mut u8>();
                                                                    let l126 = *base.add(20).cast::<usize>();
                                                                    let base131 = l125;
                                                                    let len131 = l126;
                                                                    let mut result131 = _rt::Vec::with_capacity(len131);
                                                                    for i in 0..len131 {
                                                                        let base = base131.add(i * 32);
                                                                        let e131 = {
                                                                            let l127 = *base.add(0).cast::<f64>();
                                                                            let l128 = *base.add(8).cast::<f64>();
                                                                            let l129 = i32::from(*base.add(16).cast::<u8>());
                                                                            super::super::super::golem::graph::types::Point {
                                                                                longitude: l127,
                                                                                latitude: l128,
                                                                                altitude: match l129 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l130 = *base.add(24).cast::<f64>();
                                                                                            l130
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                },
                                                                            }
                                                                        };
                                                                        result131.push(e131);
                                                                    }
                                                                    _rt::cabi_dealloc(base131, len131 * 32, 8);
                                                                    super::super::super::golem::graph::types::Linestring {
                                                                        coordinates: result131,
                                                                    }
                                                                };
                                                                V150::Linestring(e150)
                                                            }
                                                            n => {
                                                                debug_assert_eq!(n, 20, "invalid enum discriminant");
                                                                let e150 = {
                                                                    let l132 = *base.add(16).cast::<*mut u8>();
                                                                    let l133 = *base.add(20).cast::<usize>();
                                                                    let base138 = l132;
                                                                    let len138 = l133;
                                                                    let mut result138 = _rt::Vec::with_capacity(len138);
                                                                    for i in 0..len138 {
                                                                        let base = base138.add(i * 32);
                                                                        let e138 = {
                                                                            let l134 = *base.add(0).cast::<f64>();
                                                                            let l135 = *base.add(8).cast::<f64>();
                                                                            let l136 = i32::from(*base.add(16).cast::<u8>());
                                                                            super::super::super::golem::graph::types::Point {
                                                                                longitude: l134,
                                                                                latitude: l135,
                                                                                altitude: match l136 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l137 = *base.add(24).cast::<f64>();
                                                                                            l137
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                },
                                                                            }
                                                                        };
                                                                        result138.push(e138);
                                                                    }
                                                                    _rt::cabi_dealloc(base138, len138 * 32, 8);
                                                                    let l139 = i32::from(*base.add(24).cast::<u8>());
                                                                    super::super::super::golem::graph::types::Polygon {
                                                                        exterior: result138,
                                                                        holes: match l139 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l140 = *base.add(28).cast::<*mut u8>();
                                                                                    let l141 = *base.add(32).cast::<usize>();
                                                                                    let base149 = l140;
                                                                                    let len149 = l141;
                                                                                    let mut result149 = _rt::Vec::with_capacity(len149);
                                                                                    for i in 0..len149 {
                                                                                        let base = base149.add(i * 8);
                                                                                        let e149 = {
                                                                                            let l142 = *base.add(0).cast::<*mut u8>();
                                                                                            let l143 = *base.add(4).cast::<usize>();
                                                                                            let base148 = l142;
                                                                                            let len148 = l143;
                                                                                            let mut result148 = _rt::Vec::with_capacity(len148);
                                                                                            for i in 0..len148 {
                                                                                                let base = base148.add(i * 32);
                                                                                                let e148 = {
                                                                                                    let l144 = *base.add(0).cast::<f64>();
                                                                                                    let l145 = *base.add(8).cast::<f64>();
                                                                                                    let l146 = i32::from(*base.add(16).cast::<u8>());
                                                                                                    super::super::super::golem::graph::types::Point {
                                                                                                        longitude: l144,
                                                                                                        latitude: l145,
                                                                                                        altitude: match l146 {
                                                                                                            0 => None,
                                                                                                            1 => {
                                                                                                                let e = {
                                                                                                                    let l147 = *base.add(24).cast::<f64>();
                                                                                                                    l147
                                                                                                                };
                                                                                                                Some(e)
                                                                                                            }
                                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                                        },
                                                                                                    }
                                                                                                };
                                                                                                result148.push(e148);
                                                                                            }
                                                                                            _rt::cabi_dealloc(base148, len148 * 32, 8);
                                                                                            result148
                                                                                        };
                                                                                        result149.push(e149);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base149, len149 * 8, 4);
                                                                                    result149
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                V150::Polygon(e150)
                                                            }
                                                        };
                                                        (_rt::string_lift(bytes84), v150)
                                                    };
                                                    result151.push(e151);
                                                }
                                                _rt::cabi_dealloc(base151, len151 * 48, 8);
                                                super::super::super::golem::graph::types::Vertex {
                                                    id: v70,
                                                    vertex_type: _rt::string_lift(bytes73),
                                                    additional_labels: result79,
                                                    properties: result151,
                                                }
                                            };
                                            result152.push(e152);
                                        }
                                        _rt::cabi_dealloc(base152, len152 * 40, 8);
                                        let l153 = *base.add(8).cast::<*mut u8>();
                                        let l154 = *base.add(12).cast::<usize>();
                                        let base257 = l153;
                                        let len257 = l154;
                                        let mut result257 = _rt::Vec::with_capacity(len257);
                                        for i in 0..len257 {
                                            let base = base257.add(i * 64);
                                            let e257 = {
                                                let l155 = i32::from(*base.add(0).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V163;
                                                let v163 = match l155 {
                                                    0 => {
                                                        let e163 = {
                                                            let l156 = *base.add(8).cast::<*mut u8>();
                                                            let l157 = *base.add(12).cast::<usize>();
                                                            let len158 = l157;
                                                            let bytes158 = _rt::Vec::from_raw_parts(
                                                                l156.cast(),
                                                                len158,
                                                                len158,
                                                            );
                                                            _rt::string_lift(bytes158)
                                                        };
                                                        V163::StringValue(e163)
                                                    }
                                                    1 => {
                                                        let e163 = {
                                                            let l159 = *base.add(8).cast::<i64>();
                                                            l159
                                                        };
                                                        V163::Int64(e163)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e163 = {
                                                            let l160 = *base.add(8).cast::<*mut u8>();
                                                            let l161 = *base.add(12).cast::<usize>();
                                                            let len162 = l161;
                                                            let bytes162 = _rt::Vec::from_raw_parts(
                                                                l160.cast(),
                                                                len162,
                                                                len162,
                                                            );
                                                            _rt::string_lift(bytes162)
                                                        };
                                                        V163::Uuid(e163)
                                                    }
                                                };
                                                let l164 = *base.add(16).cast::<*mut u8>();
                                                let l165 = *base.add(20).cast::<usize>();
                                                let len166 = l165;
                                                let bytes166 = _rt::Vec::from_raw_parts(
                                                    l164.cast(),
                                                    len166,
                                                    len166,
                                                );
                                                let l167 = i32::from(*base.add(24).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V175;
                                                let v175 = match l167 {
                                                    0 => {
                                                        let e175 = {
                                                            let l168 = *base.add(32).cast::<*mut u8>();
                                                            let l169 = *base.add(36).cast::<usize>();
                                                            let len170 = l169;
                                                            let bytes170 = _rt::Vec::from_raw_parts(
                                                                l168.cast(),
                                                                len170,
                                                                len170,
                                                            );
                                                            _rt::string_lift(bytes170)
                                                        };
                                                        V175::StringValue(e175)
                                                    }
                                                    1 => {
                                                        let e175 = {
                                                            let l171 = *base.add(32).cast::<i64>();
                                                            l171
                                                        };
                                                        V175::Int64(e175)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e175 = {
                                                            let l172 = *base.add(32).cast::<*mut u8>();
                                                            let l173 = *base.add(36).cast::<usize>();
                                                            let len174 = l173;
                                                            let bytes174 = _rt::Vec::from_raw_parts(
                                                                l172.cast(),
                                                                len174,
                                                                len174,
                                                            );
                                                            _rt::string_lift(bytes174)
                                                        };
                                                        V175::Uuid(e175)
                                                    }
                                                };
                                                let l176 = i32::from(*base.add(40).cast::<u8>());
                                                use super::super::super::golem::graph::types::ElementId as V184;
                                                let v184 = match l176 {
                                                    0 => {
                                                        let e184 = {
                                                            let l177 = *base.add(48).cast::<*mut u8>();
                                                            let l178 = *base.add(52).cast::<usize>();
                                                            let len179 = l178;
                                                            let bytes179 = _rt::Vec::from_raw_parts(
                                                                l177.cast(),
                                                                len179,
                                                                len179,
                                                            );
                                                            _rt::string_lift(bytes179)
                                                        };
                                                        V184::StringValue(e184)
                                                    }
                                                    1 => {
                                                        let e184 = {
                                                            let l180 = *base.add(48).cast::<i64>();
                                                            l180
                                                        };
                                                        V184::Int64(e184)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                        let e184 = {
                                                            let l181 = *base.add(48).cast::<*mut u8>();
                                                            let l182 = *base.add(52).cast::<usize>();
                                                            let len183 = l182;
                                                            let bytes183 = _rt::Vec::from_raw_parts(
                                                                l181.cast(),
                                                                len183,
                                                                len183,
                                                            );
                                                            _rt::string_lift(bytes183)
                                                        };
                                                        V184::Uuid(e184)
                                                    }
                                                };
                                                let l185 = *base.add(56).cast::<*mut u8>();
                                                let l186 = *base.add(60).cast::<usize>();
                                                let base256 = l185;
                                                let len256 = l186;
                                                let mut result256 = _rt::Vec::with_capacity(len256);
                                                for i in 0..len256 {
                                                    let base = base256.add(i * 48);
                                                    let e256 = {
                                                        let l187 = *base.add(0).cast::<*mut u8>();
                                                        let l188 = *base.add(4).cast::<usize>();
                                                        let len189 = l188;
                                                        let bytes189 = _rt::Vec::from_raw_parts(
                                                            l187.cast(),
                                                            len189,
                                                            len189,
                                                        );
                                                        let l190 = i32::from(*base.add(8).cast::<u8>());
                                                        use super::super::super::golem::graph::types::PropertyValue as V255;
                                                        let v255 = match l190 {
                                                            0 => V255::NullValue,
                                                            1 => {
                                                                let e255 = {
                                                                    let l191 = i32::from(*base.add(16).cast::<u8>());
                                                                    _rt::bool_lift(l191 as u8)
                                                                };
                                                                V255::Boolean(e255)
                                                            }
                                                            2 => {
                                                                let e255 = {
                                                                    let l192 = i32::from(*base.add(16).cast::<i8>());
                                                                    l192 as i8
                                                                };
                                                                V255::Int8(e255)
                                                            }
                                                            3 => {
                                                                let e255 = {
                                                                    let l193 = i32::from(*base.add(16).cast::<i16>());
                                                                    l193 as i16
                                                                };
                                                                V255::Int16(e255)
                                                            }
                                                            4 => {
                                                                let e255 = {
                                                                    let l194 = *base.add(16).cast::<i32>();
                                                                    l194
                                                                };
                                                                V255::Int32(e255)
                                                            }
                                                            5 => {
                                                                let e255 = {
                                                                    let l195 = *base.add(16).cast::<i64>();
                                                                    l195
                                                                };
                                                                V255::Int64(e255)
                                                            }
                                                            6 => {
                                                                let e255 = {
                                                                    let l196 = i32::from(*base.add(16).cast::<u8>());
                                                                    l196 as u8
                                                                };
                                                                V255::Uint8(e255)
                                                            }
                                                            7 => {
                                                                let e255 = {
                                                                    let l197 = i32::from(*base.add(16).cast::<u16>());
                                                                    l197 as u16
                                                                };
                                                                V255::Uint16(e255)
                                                            }
                                                            8 => {
                                                                let e255 = {
                                                                    let l198 = *base.add(16).cast::<i32>();
                                                                    l198 as u32
                                                                };
                                                                V255::Uint32(e255)
                                                            }
                                                            9 => {
                                                                let e255 = {
                                                                    let l199 = *base.add(16).cast::<i64>();
                                                                    l199 as u64
                                                                };
                                                                V255::Uint64(e255)
                                                            }
                                                            10 => {
                                                                let e255 = {
                                                                    let l200 = *base.add(16).cast::<f32>();
                                                                    l200
                                                                };
                                                                V255::Float32Value(e255)
                                                            }
                                                            11 => {
                                                                let e255 = {
                                                                    let l201 = *base.add(16).cast::<f64>();
                                                                    l201
                                                                };
                                                                V255::Float64Value(e255)
                                                            }
                                                            12 => {
                                                                let e255 = {
                                                                    let l202 = *base.add(16).cast::<*mut u8>();
                                                                    let l203 = *base.add(20).cast::<usize>();
                                                                    let len204 = l203;
                                                                    let bytes204 = _rt::Vec::from_raw_parts(
                                                                        l202.cast(),
                                                                        len204,
                                                                        len204,
                                                                    );
                                                                    _rt::string_lift(bytes204)
                                                                };
                                                                V255::StringValue(e255)
                                                            }
                                                            13 => {
                                                                let e255 = {
                                                                    let l205 = *base.add(16).cast::<*mut u8>();
                                                                    let l206 = *base.add(20).cast::<usize>();
                                                                    let len207 = l206;
                                                                    _rt::Vec::from_raw_parts(l205.cast(), len207, len207)
                                                                };
                                                                V255::Bytes(e255)
                                                            }
                                                            14 => {
                                                                let e255 = {
                                                                    let l208 = *base.add(16).cast::<i32>();
                                                                    let l209 = i32::from(*base.add(20).cast::<u8>());
                                                                    let l210 = i32::from(*base.add(21).cast::<u8>());
                                                                    super::super::super::golem::graph::types::Date {
                                                                        year: l208 as u32,
                                                                        month: l209 as u8,
                                                                        day: l210 as u8,
                                                                    }
                                                                };
                                                                V255::Date(e255)
                                                            }
                                                            15 => {
                                                                let e255 = {
                                                                    let l211 = i32::from(*base.add(16).cast::<u8>());
                                                                    let l212 = i32::from(*base.add(17).cast::<u8>());
                                                                    let l213 = i32::from(*base.add(18).cast::<u8>());
                                                                    let l214 = *base.add(20).cast::<i32>();
                                                                    super::super::super::golem::graph::types::Time {
                                                                        hour: l211 as u8,
                                                                        minute: l212 as u8,
                                                                        second: l213 as u8,
                                                                        nanosecond: l214 as u32,
                                                                    }
                                                                };
                                                                V255::Time(e255)
                                                            }
                                                            16 => {
                                                                let e255 = {
                                                                    let l215 = *base.add(16).cast::<i32>();
                                                                    let l216 = i32::from(*base.add(20).cast::<u8>());
                                                                    let l217 = i32::from(*base.add(21).cast::<u8>());
                                                                    let l218 = i32::from(*base.add(24).cast::<u8>());
                                                                    let l219 = i32::from(*base.add(25).cast::<u8>());
                                                                    let l220 = i32::from(*base.add(26).cast::<u8>());
                                                                    let l221 = *base.add(28).cast::<i32>();
                                                                    let l222 = i32::from(*base.add(32).cast::<u8>());
                                                                    super::super::super::golem::graph::types::Datetime {
                                                                        date: super::super::super::golem::graph::types::Date {
                                                                            year: l215 as u32,
                                                                            month: l216 as u8,
                                                                            day: l217 as u8,
                                                                        },
                                                                        time: super::super::super::golem::graph::types::Time {
                                                                            hour: l218 as u8,
                                                                            minute: l219 as u8,
                                                                            second: l220 as u8,
                                                                            nanosecond: l221 as u32,
                                                                        },
                                                                        timezone_offset_minutes: match l222 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l223 = i32::from(*base.add(34).cast::<i16>());
                                                                                    l223 as i16
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                V255::Datetime(e255)
                                                            }
                                                            17 => {
                                                                let e255 = {
                                                                    let l224 = *base.add(16).cast::<i64>();
                                                                    let l225 = *base.add(24).cast::<i32>();
                                                                    super::super::super::golem::graph::types::Duration {
                                                                        seconds: l224,
                                                                        nanoseconds: l225 as u32,
                                                                    }
                                                                };
                                                                V255::Duration(e255)
                                                            }
                                                            18 => {
                                                                let e255 = {
                                                                    let l226 = *base.add(16).cast::<f64>();
                                                                    let l227 = *base.add(24).cast::<f64>();
                                                                    let l228 = i32::from(*base.add(32).cast::<u8>());
                                                                    super::super::super::golem::graph::types::Point {
                                                                        longitude: l226,
                                                                        latitude: l227,
                                                                        altitude: match l228 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l229 = *base.add(40).cast::<f64>();
                                                                                    l229
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                V255::Point(e255)
                                                            }
                                                            19 => {
                                                                let e255 = {
                                                                    let l230 = *base.add(16).cast::<*mut u8>();
                                                                    let l231 = *base.add(20).cast::<usize>();
                                                                    let base236 = l230;
                                                                    let len236 = l231;
                                                                    let mut result236 = _rt::Vec::with_capacity(len236);
                                                                    for i in 0..len236 {
                                                                        let base = base236.add(i * 32);
                                                                        let e236 = {
                                                                            let l232 = *base.add(0).cast::<f64>();
                                                                            let l233 = *base.add(8).cast::<f64>();
                                                                            let l234 = i32::from(*base.add(16).cast::<u8>());
                                                                            super::super::super::golem::graph::types::Point {
                                                                                longitude: l232,
                                                                                latitude: l233,
                                                                                altitude: match l234 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l235 = *base.add(24).cast::<f64>();
                                                                                            l235
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                },
                                                                            }
                                                                        };
                                                                        result236.push(e236);
                                                                    }
                                                                    _rt::cabi_dealloc(base236, len236 * 32, 8);
                                                                    super::super::super::golem::graph::types::Linestring {
                                                                        coordinates: result236,
                                                                    }
                                                                };
                                                                V255::Linestring(e255)
                                                            }
                                                            n => {
                                                                debug_assert_eq!(n, 20, "invalid enum discriminant");
                                                                let e255 = {
                                                                    let l237 = *base.add(16).cast::<*mut u8>();
                                                                    let l238 = *base.add(20).cast::<usize>();
                                                                    let base243 = l237;
                                                                    let len243 = l238;
                                                                    let mut result243 = _rt::Vec::with_capacity(len243);
                                                                    for i in 0..len243 {
                                                                        let base = base243.add(i * 32);
                                                                        let e243 = {
                                                                            let l239 = *base.add(0).cast::<f64>();
                                                                            let l240 = *base.add(8).cast::<f64>();
                                                                            let l241 = i32::from(*base.add(16).cast::<u8>());
                                                                            super::super::super::golem::graph::types::Point {
                                                                                longitude: l239,
                                                                                latitude: l240,
                                                                                altitude: match l241 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l242 = *base.add(24).cast::<f64>();
                                                                                            l242
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                },
                                                                            }
                                                                        };
                                                                        result243.push(e243);
                                                                    }
                                                                    _rt::cabi_dealloc(base243, len243 * 32, 8);
                                                                    let l244 = i32::from(*base.add(24).cast::<u8>());
                                                                    super::super::super::golem::graph::types::Polygon {
                                                                        exterior: result243,
                                                                        holes: match l244 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l245 = *base.add(28).cast::<*mut u8>();
                                                                                    let l246 = *base.add(32).cast::<usize>();
                                                                                    let base254 = l245;
                                                                                    let len254 = l246;
                                                                                    let mut result254 = _rt::Vec::with_capacity(len254);
                                                                                    for i in 0..len254 {
                                                                                        let base = base254.add(i * 8);
                                                                                        let e254 = {
                                                                                            let l247 = *base.add(0).cast::<*mut u8>();
                                                                                            let l248 = *base.add(4).cast::<usize>();
                                                                                            let base253 = l247;
                                                                                            let len253 = l248;
                                                                                            let mut result253 = _rt::Vec::with_capacity(len253);
                                                                                            for i in 0..len253 {
                                                                                                let base = base253.add(i * 32);
                                                                                                let e253 = {
                                                                                                    let l249 = *base.add(0).cast::<f64>();
                                                                                                    let l250 = *base.add(8).cast::<f64>();
                                                                                                    let l251 = i32::from(*base.add(16).cast::<u8>());
                                                                                                    super::super::super::golem::graph::types::Point {
                                                                                                        longitude: l249,
                                                                                                        latitude: l250,
                                                                                                        altitude: match l251 {
                                                                                                            0 => None,
                                                                                                            1 => {
                                                                                                                let e = {
                                                                                                                    let l252 = *base.add(24).cast::<f64>();
                                                                                                                    l252
                                                                                                                };
                                                                                                                Some(e)
                                                                                                            }
                                                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                                                        },
                                                                                                    }
                                                                                                };
                                                                                                result253.push(e253);
                                                                                            }
                                                                                            _rt::cabi_dealloc(base253, len253 * 32, 8);
                                                                                            result253
                                                                                        };
                                                                                        result254.push(e254);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base254, len254 * 8, 4);
                                                                                    result254
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                V255::Polygon(e255)
                                                            }
                                                        };
                                                        (_rt::string_lift(bytes189), v255)
                                                    };
                                                    result256.push(e256);
                                                }
                                                _rt::cabi_dealloc(base256, len256 * 48, 8);
                                                super::super::super::golem::graph::types::Edge {
                                                    id: v163,
                                                    edge_type: _rt::string_lift(bytes166),
                                                    from_vertex: v175,
                                                    to_vertex: v184,
                                                    properties: result256,
                                                }
                                            };
                                            result257.push(e257);
                                        }
                                        _rt::cabi_dealloc(base257, len257 * 64, 8);
                                        let l258 = *base.add(16).cast::<i32>();
                                        super::super::super::golem::graph::types::Path {
                                            vertices: result152,
                                            edges: result257,
                                            length: l258 as u32,
                                        }
                                    };
                                    result259.push(e259);
                                }
                                _rt::cabi_dealloc(base259, len259 * 20, 4);
                                result259
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l260 = i32::from(*ptr56.add(8).cast::<u8>());
                                use super::super::super::golem::graph::errors::GraphError as V315;
                                let v315 = match l260 {
                                    0 => {
                                        let e315 = {
                                            let l261 = *ptr56.add(16).cast::<*mut u8>();
                                            let l262 = *ptr56.add(20).cast::<usize>();
                                            let len263 = l262;
                                            let bytes263 = _rt::Vec::from_raw_parts(
                                                l261.cast(),
                                                len263,
                                                len263,
                                            );
                                            _rt::string_lift(bytes263)
                                        };
                                        V315::UnsupportedOperation(e315)
                                    }
                                    1 => {
                                        let e315 = {
                                            let l264 = *ptr56.add(16).cast::<*mut u8>();
                                            let l265 = *ptr56.add(20).cast::<usize>();
                                            let len266 = l265;
                                            let bytes266 = _rt::Vec::from_raw_parts(
                                                l264.cast(),
                                                len266,
                                                len266,
                                            );
                                            _rt::string_lift(bytes266)
                                        };
                                        V315::ConnectionFailed(e315)
                                    }
                                    2 => {
                                        let e315 = {
                                            let l267 = *ptr56.add(16).cast::<*mut u8>();
                                            let l268 = *ptr56.add(20).cast::<usize>();
                                            let len269 = l268;
                                            let bytes269 = _rt::Vec::from_raw_parts(
                                                l267.cast(),
                                                len269,
                                                len269,
                                            );
                                            _rt::string_lift(bytes269)
                                        };
                                        V315::AuthenticationFailed(e315)
                                    }
                                    3 => {
                                        let e315 = {
                                            let l270 = *ptr56.add(16).cast::<*mut u8>();
                                            let l271 = *ptr56.add(20).cast::<usize>();
                                            let len272 = l271;
                                            let bytes272 = _rt::Vec::from_raw_parts(
                                                l270.cast(),
                                                len272,
                                                len272,
                                            );
                                            _rt::string_lift(bytes272)
                                        };
                                        V315::AuthorizationFailed(e315)
                                    }
                                    4 => {
                                        let e315 = {
                                            let l273 = i32::from(*ptr56.add(16).cast::<u8>());
                                            use super::super::super::golem::graph::types::ElementId as V281;
                                            let v281 = match l273 {
                                                0 => {
                                                    let e281 = {
                                                        let l274 = *ptr56.add(24).cast::<*mut u8>();
                                                        let l275 = *ptr56.add(28).cast::<usize>();
                                                        let len276 = l275;
                                                        let bytes276 = _rt::Vec::from_raw_parts(
                                                            l274.cast(),
                                                            len276,
                                                            len276,
                                                        );
                                                        _rt::string_lift(bytes276)
                                                    };
                                                    V281::StringValue(e281)
                                                }
                                                1 => {
                                                    let e281 = {
                                                        let l277 = *ptr56.add(24).cast::<i64>();
                                                        l277
                                                    };
                                                    V281::Int64(e281)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                    let e281 = {
                                                        let l278 = *ptr56.add(24).cast::<*mut u8>();
                                                        let l279 = *ptr56.add(28).cast::<usize>();
                                                        let len280 = l279;
                                                        let bytes280 = _rt::Vec::from_raw_parts(
                                                            l278.cast(),
                                                            len280,
                                                            len280,
                                                        );
                                                        _rt::string_lift(bytes280)
                                                    };
                                                    V281::Uuid(e281)
                                                }
                                            };
                                            v281
                                        };
                                        V315::ElementNotFound(e315)
                                    }
                                    5 => {
                                        let e315 = {
                                            let l282 = i32::from(*ptr56.add(16).cast::<u8>());
                                            use super::super::super::golem::graph::types::ElementId as V290;
                                            let v290 = match l282 {
                                                0 => {
                                                    let e290 = {
                                                        let l283 = *ptr56.add(24).cast::<*mut u8>();
                                                        let l284 = *ptr56.add(28).cast::<usize>();
                                                        let len285 = l284;
                                                        let bytes285 = _rt::Vec::from_raw_parts(
                                                            l283.cast(),
                                                            len285,
                                                            len285,
                                                        );
                                                        _rt::string_lift(bytes285)
                                                    };
                                                    V290::StringValue(e290)
                                                }
                                                1 => {
                                                    let e290 = {
                                                        let l286 = *ptr56.add(24).cast::<i64>();
                                                        l286
                                                    };
                                                    V290::Int64(e290)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                    let e290 = {
                                                        let l287 = *ptr56.add(24).cast::<*mut u8>();
                                                        let l288 = *ptr56.add(28).cast::<usize>();
                                                        let len289 = l288;
                                                        let bytes289 = _rt::Vec::from_raw_parts(
                                                            l287.cast(),
                                                            len289,
                                                            len289,
                                                        );
                                                        _rt::string_lift(bytes289)
                                                    };
                                                    V290::Uuid(e290)
                                                }
                                            };
                                            v290
                                        };
                                        V315::DuplicateElement(e315)
                                    }
                                    6 => {
                                        let e315 = {
                                            let l291 = *ptr56.add(16).cast::<*mut u8>();
                                            let l292 = *ptr56.add(20).cast::<usize>();
                                            let len293 = l292;
                                            let bytes293 = _rt::Vec::from_raw_parts(
                                                l291.cast(),
                                                len293,
                                                len293,
                                            );
                                            _rt::string_lift(bytes293)
                                        };
                                        V315::SchemaViolation(e315)
                                    }
                                    7 => {
                                        let e315 = {
                                            let l294 = *ptr56.add(16).cast::<*mut u8>();
                                            let l295 = *ptr56.add(20).cast::<usize>();
                                            let len296 = l295;
                                            let bytes296 = _rt::Vec::from_raw_parts(
                                                l294.cast(),
                                                len296,
                                                len296,
                                            );
                                            _rt::string_lift(bytes296)
                                        };
                                        V315::ConstraintViolation(e315)
                                    }
                                    8 => {
                                        let e315 = {
                                            let l297 = *ptr56.add(16).cast::<*mut u8>();
                                            let l298 = *ptr56.add(20).cast::<usize>();
                                            let len299 = l298;
                                            let bytes299 = _rt::Vec::from_raw_parts(
                                                l297.cast(),
                                                len299,
                                                len299,
                                            );
                                            _rt::string_lift(bytes299)
                                        };
                                        V315::InvalidPropertyType(e315)
                                    }
                                    9 => {
                                        let e315 = {
                                            let l300 = *ptr56.add(16).cast::<*mut u8>();
                                            let l301 = *ptr56.add(20).cast::<usize>();
                                            let len302 = l301;
                                            let bytes302 = _rt::Vec::from_raw_parts(
                                                l300.cast(),
                                                len302,
                                                len302,
                                            );
                                            _rt::string_lift(bytes302)
                                        };
                                        V315::InvalidQuery(e315)
                                    }
                                    10 => {
                                        let e315 = {
                                            let l303 = *ptr56.add(16).cast::<*mut u8>();
                                            let l304 = *ptr56.add(20).cast::<usize>();
                                            let len305 = l304;
                                            let bytes305 = _rt::Vec::from_raw_parts(
                                                l303.cast(),
                                                len305,
                                                len305,
                                            );
                                            _rt::string_lift(bytes305)
                                        };
                                        V315::TransactionFailed(e315)
                                    }
                                    11 => V315::TransactionConflict,
                                    12 => V315::TransactionTimeout,
                                    13 => V315::DeadlockDetected,
                                    14 => V315::Timeout,
                                    15 => {
                                        let e315 = {
                                            let l306 = *ptr56.add(16).cast::<*mut u8>();
                                            let l307 = *ptr56.add(20).cast::<usize>();
                                            let len308 = l307;
                                            let bytes308 = _rt::Vec::from_raw_parts(
                                                l306.cast(),
                                                len308,
                                                len308,
                                            );
                                            _rt::string_lift(bytes308)
                                        };
                                        V315::ResourceExhausted(e315)
                                    }
                                    16 => {
                                        let e315 = {
                                            let l309 = *ptr56.add(16).cast::<*mut u8>();
                                            let l310 = *ptr56.add(20).cast::<usize>();
                                            let len311 = l310;
                                            let bytes311 = _rt::Vec::from_raw_parts(
                                                l309.cast(),
                                                len311,
                                                len311,
                                            );
                                            _rt::string_lift(bytes311)
                                        };
                                        V315::InternalError(e315)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 17, "invalid enum discriminant");
                                        let e315 = {
                                            let l312 = *ptr56.add(16).cast::<*mut u8>();
                                            let l313 = *ptr56.add(20).cast::<usize>();
                                            let len314 = l313;
                                            let bytes314 = _rt::Vec::from_raw_parts(
                                                l312.cast(),
                                                len314,
                                                len314,
                                            );
                                            _rt::string_lift(bytes314)
                                        };
                                        V315::ServiceUnavailable(e315)
                                    }
                                };
                                v315
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Get k-hop neighborhood around a vertex
            pub fn get_neighborhood(
                transaction: &Transaction,
                center: &ElementId,
                options: &NeighborhoodOptions,
            ) -> Result<Subgraph, GraphError> {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 32]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 32]);
                    use super::super::super::golem::graph::types::ElementId as V2;
                    let (result3_0, result3_1, result3_2) = match center {
                        V2::StringValue(e) => {
                            let vec0 = e;
                            let ptr0 = vec0.as_ptr().cast::<u8>();
                            let len0 = vec0.len();
                            (
                                0i32,
                                {
                                    let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                    t.as_mut_ptr().cast::<*mut u8>().write(ptr0.cast_mut());
                                    t
                                },
                                len0,
                            )
                        }
                        V2::Int64(e) => {
                            (
                                1i32,
                                ::core::mem::MaybeUninit::new(_rt::as_i64(e) as u64),
                                0usize,
                            )
                        }
                        V2::Uuid(e) => {
                            let vec1 = e;
                            let ptr1 = vec1.as_ptr().cast::<u8>();
                            let len1 = vec1.len();
                            (
                                2i32,
                                {
                                    let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                    t.as_mut_ptr().cast::<*mut u8>().write(ptr1.cast_mut());
                                    t
                                },
                                len1,
                            )
                        }
                    };
                    let NeighborhoodOptions {
                        depth: depth4,
                        direction: direction4,
                        edge_types: edge_types4,
                        max_vertices: max_vertices4,
                    } = options;
                    let (result7_0, result7_1, result7_2) = match edge_types4 {
                        Some(e) => {
                            let vec6 = e;
                            let len6 = vec6.len();
                            let layout6 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec6.len() * 8,
                                4,
                            );
                            let result6 = if layout6.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout6).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout6);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec6.into_iter().enumerate() {
                                let base = result6.add(i * 8);
                                {
                                    let vec5 = e;
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    *base.add(4).cast::<usize>() = len5;
                                    *base.add(0).cast::<*mut u8>() = ptr5.cast_mut();
                                }
                            }
                            cleanup_list.extend_from_slice(&[(result6, layout6)]);
                            (1i32, result6, len6)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let (result8_0, result8_1) = match max_vertices4 {
                        Some(e) => (1i32, _rt::as_i32(e)),
                        None => (0i32, 0i32),
                    };
                    let ptr9 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:graph/traversal@1.0.0")]
                    extern "C" {
                        #[link_name = "get-neighborhood"]
                        fn wit_import(
                            _: i32,
                            _: i32,
                            _: ::core::mem::MaybeUninit<u64>,
                            _: usize,
                            _: i32,
                            _: i32,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: i32,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(
                        _: i32,
                        _: i32,
                        _: ::core::mem::MaybeUninit<u64>,
                        _: usize,
                        _: i32,
                        _: i32,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: i32,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    wit_import(
                        (transaction).handle() as i32,
                        result3_0,
                        result3_1,
                        result3_2,
                        _rt::as_i32(depth4),
                        direction4.clone() as i32,
                        result7_0,
                        result7_1,
                        result7_2,
                        result8_0,
                        result8_1,
                        ptr9,
                    );
                    let l10 = i32::from(*ptr9.add(0).cast::<u8>());
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                    match l10 {
                        0 => {
                            let e = {
                                let l11 = *ptr9.add(8).cast::<*mut u8>();
                                let l12 = *ptr9.add(12).cast::<usize>();
                                let base103 = l11;
                                let len103 = l12;
                                let mut result103 = _rt::Vec::with_capacity(len103);
                                for i in 0..len103 {
                                    let base = base103.add(i * 40);
                                    let e103 = {
                                        let l13 = i32::from(*base.add(0).cast::<u8>());
                                        use super::super::super::golem::graph::types::ElementId as V21;
                                        let v21 = match l13 {
                                            0 => {
                                                let e21 = {
                                                    let l14 = *base.add(8).cast::<*mut u8>();
                                                    let l15 = *base.add(12).cast::<usize>();
                                                    let len16 = l15;
                                                    let bytes16 = _rt::Vec::from_raw_parts(
                                                        l14.cast(),
                                                        len16,
                                                        len16,
                                                    );
                                                    _rt::string_lift(bytes16)
                                                };
                                                V21::StringValue(e21)
                                            }
                                            1 => {
                                                let e21 = {
                                                    let l17 = *base.add(8).cast::<i64>();
                                                    l17
                                                };
                                                V21::Int64(e21)
                                            }
                                            n => {
                                                debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                let e21 = {
                                                    let l18 = *base.add(8).cast::<*mut u8>();
                                                    let l19 = *base.add(12).cast::<usize>();
                                                    let len20 = l19;
                                                    let bytes20 = _rt::Vec::from_raw_parts(
                                                        l18.cast(),
                                                        len20,
                                                        len20,
                                                    );
                                                    _rt::string_lift(bytes20)
                                                };
                                                V21::Uuid(e21)
                                            }
                                        };
                                        let l22 = *base.add(16).cast::<*mut u8>();
                                        let l23 = *base.add(20).cast::<usize>();
                                        let len24 = l23;
                                        let bytes24 = _rt::Vec::from_raw_parts(
                                            l22.cast(),
                                            len24,
                                            len24,
                                        );
                                        let l25 = *base.add(24).cast::<*mut u8>();
                                        let l26 = *base.add(28).cast::<usize>();
                                        let base30 = l25;
                                        let len30 = l26;
                                        let mut result30 = _rt::Vec::with_capacity(len30);
                                        for i in 0..len30 {
                                            let base = base30.add(i * 8);
                                            let e30 = {
                                                let l27 = *base.add(0).cast::<*mut u8>();
                                                let l28 = *base.add(4).cast::<usize>();
                                                let len29 = l28;
                                                let bytes29 = _rt::Vec::from_raw_parts(
                                                    l27.cast(),
                                                    len29,
                                                    len29,
                                                );
                                                _rt::string_lift(bytes29)
                                            };
                                            result30.push(e30);
                                        }
                                        _rt::cabi_dealloc(base30, len30 * 8, 4);
                                        let l31 = *base.add(32).cast::<*mut u8>();
                                        let l32 = *base.add(36).cast::<usize>();
                                        let base102 = l31;
                                        let len102 = l32;
                                        let mut result102 = _rt::Vec::with_capacity(len102);
                                        for i in 0..len102 {
                                            let base = base102.add(i * 48);
                                            let e102 = {
                                                let l33 = *base.add(0).cast::<*mut u8>();
                                                let l34 = *base.add(4).cast::<usize>();
                                                let len35 = l34;
                                                let bytes35 = _rt::Vec::from_raw_parts(
                                                    l33.cast(),
                                                    len35,
                                                    len35,
                                                );
                                                let l36 = i32::from(*base.add(8).cast::<u8>());
                                                use super::super::super::golem::graph::types::PropertyValue as V101;
                                                let v101 = match l36 {
                                                    0 => V101::NullValue,
                                                    1 => {
                                                        let e101 = {
                                                            let l37 = i32::from(*base.add(16).cast::<u8>());
                                                            _rt::bool_lift(l37 as u8)
                                                        };
                                                        V101::Boolean(e101)
                                                    }
                                                    2 => {
                                                        let e101 = {
                                                            let l38 = i32::from(*base.add(16).cast::<i8>());
                                                            l38 as i8
                                                        };
                                                        V101::Int8(e101)
                                                    }
                                                    3 => {
                                                        let e101 = {
                                                            let l39 = i32::from(*base.add(16).cast::<i16>());
                                                            l39 as i16
                                                        };
                                                        V101::Int16(e101)
                                                    }
                                                    4 => {
                                                        let e101 = {
                                                            let l40 = *base.add(16).cast::<i32>();
                                                            l40
                                                        };
                                                        V101::Int32(e101)
                                                    }
                                                    5 => {
                                                        let e101 = {
                                                            let l41 = *base.add(16).cast::<i64>();
                                                            l41
                                                        };
                                                        V101::Int64(e101)
                                                    }
                                                    6 => {
                                                        let e101 = {
                                                            let l42 = i32::from(*base.add(16).cast::<u8>());
                                                            l42 as u8
                                                        };
                                                        V101::Uint8(e101)
                                                    }
                                                    7 => {
                                                        let e101 = {
                                                            let l43 = i32::from(*base.add(16).cast::<u16>());
                                                            l43 as u16
                                                        };
                                                        V101::Uint16(e101)
                                                    }
                                                    8 => {
                                                        let e101 = {
                                                            let l44 = *base.add(16).cast::<i32>();
                                                            l44 as u32
                                                        };
                                                        V101::Uint32(e101)
                                                    }
                                                    9 => {
                                                        let e101 = {
                                                            let l45 = *base.add(16).cast::<i64>();
                                                            l45 as u64
                                                        };
                                                        V101::Uint64(e101)
                                                    }
                                                    10 => {
                                                        let e101 = {
                                                            let l46 = *base.add(16).cast::<f32>();
                                                            l46
                                                        };
                                                        V101::Float32Value(e101)
                                                    }
                                                    11 => {
                                                        let e101 = {
                                                            let l47 = *base.add(16).cast::<f64>();
                                                            l47
                                                        };
                                                        V101::Float64Value(e101)
                                                    }
                                                    12 => {
                                                        let e101 = {
                                                            let l48 = *base.add(16).cast::<*mut u8>();
                                                            let l49 = *base.add(20).cast::<usize>();
                                                            let len50 = l49;
                                                            let bytes50 = _rt::Vec::from_raw_parts(
                                                                l48.cast(),
                                                                len50,
                                                                len50,
                                                            );
                                                            _rt::string_lift(bytes50)
                                                        };
                                                        V101::StringValue(e101)
                                                    }
                                                    13 => {
                                                        let e101 = {
                                                            let l51 = *base.add(16).cast::<*mut u8>();
                                                            let l52 = *base.add(20).cast::<usize>();
                                                            let len53 = l52;
                                                            _rt::Vec::from_raw_parts(l51.cast(), len53, len53)
                                                        };
                                                        V101::Bytes(e101)
                                                    }
                                                    14 => {
                                                        let e101 = {
                                                            let l54 = *base.add(16).cast::<i32>();
                                                            let l55 = i32::from(*base.add(20).cast::<u8>());
                                                            let l56 = i32::from(*base.add(21).cast::<u8>());
                                                            super::super::super::golem::graph::types::Date {
                                                                year: l54 as u32,
                                                                month: l55 as u8,
                                                                day: l56 as u8,
                                                            }
                                                        };
                                                        V101::Date(e101)
                                                    }
                                                    15 => {
                                                        let e101 = {
                                                            let l57 = i32::from(*base.add(16).cast::<u8>());
                                                            let l58 = i32::from(*base.add(17).cast::<u8>());
                                                            let l59 = i32::from(*base.add(18).cast::<u8>());
                                                            let l60 = *base.add(20).cast::<i32>();
                                                            super::super::super::golem::graph::types::Time {
                                                                hour: l57 as u8,
                                                                minute: l58 as u8,
                                                                second: l59 as u8,
                                                                nanosecond: l60 as u32,
                                                            }
                                                        };
                                                        V101::Time(e101)
                                                    }
                                                    16 => {
                                                        let e101 = {
                                                            let l61 = *base.add(16).cast::<i32>();
                                                            let l62 = i32::from(*base.add(20).cast::<u8>());
                                                            let l63 = i32::from(*base.add(21).cast::<u8>());
                                                            let l64 = i32::from(*base.add(24).cast::<u8>());
                                                            let l65 = i32::from(*base.add(25).cast::<u8>());
                                                            let l66 = i32::from(*base.add(26).cast::<u8>());
                                                            let l67 = *base.add(28).cast::<i32>();
                                                            let l68 = i32::from(*base.add(32).cast::<u8>());
                                                            super::super::super::golem::graph::types::Datetime {
                                                                date: super::super::super::golem::graph::types::Date {
                                                                    year: l61 as u32,
                                                                    month: l62 as u8,
                                                                    day: l63 as u8,
                                                                },
                                                                time: super::super::super::golem::graph::types::Time {
                                                                    hour: l64 as u8,
                                                                    minute: l65 as u8,
                                                                    second: l66 as u8,
                                                                    nanosecond: l67 as u32,
                                                                },
                                                                timezone_offset_minutes: match l68 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l69 = i32::from(*base.add(34).cast::<i16>());
                                                                            l69 as i16
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                            }
                                                        };
                                                        V101::Datetime(e101)
                                                    }
                                                    17 => {
                                                        let e101 = {
                                                            let l70 = *base.add(16).cast::<i64>();
                                                            let l71 = *base.add(24).cast::<i32>();
                                                            super::super::super::golem::graph::types::Duration {
                                                                seconds: l70,
                                                                nanoseconds: l71 as u32,
                                                            }
                                                        };
                                                        V101::Duration(e101)
                                                    }
                                                    18 => {
                                                        let e101 = {
                                                            let l72 = *base.add(16).cast::<f64>();
                                                            let l73 = *base.add(24).cast::<f64>();
                                                            let l74 = i32::from(*base.add(32).cast::<u8>());
                                                            super::super::super::golem::graph::types::Point {
                                                                longitude: l72,
                                                                latitude: l73,
                                                                altitude: match l74 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l75 = *base.add(40).cast::<f64>();
                                                                            l75
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                            }
                                                        };
                                                        V101::Point(e101)
                                                    }
                                                    19 => {
                                                        let e101 = {
                                                            let l76 = *base.add(16).cast::<*mut u8>();
                                                            let l77 = *base.add(20).cast::<usize>();
                                                            let base82 = l76;
                                                            let len82 = l77;
                                                            let mut result82 = _rt::Vec::with_capacity(len82);
                                                            for i in 0..len82 {
                                                                let base = base82.add(i * 32);
                                                                let e82 = {
                                                                    let l78 = *base.add(0).cast::<f64>();
                                                                    let l79 = *base.add(8).cast::<f64>();
                                                                    let l80 = i32::from(*base.add(16).cast::<u8>());
                                                                    super::super::super::golem::graph::types::Point {
                                                                        longitude: l78,
                                                                        latitude: l79,
                                                                        altitude: match l80 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l81 = *base.add(24).cast::<f64>();
                                                                                    l81
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                result82.push(e82);
                                                            }
                                                            _rt::cabi_dealloc(base82, len82 * 32, 8);
                                                            super::super::super::golem::graph::types::Linestring {
                                                                coordinates: result82,
                                                            }
                                                        };
                                                        V101::Linestring(e101)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 20, "invalid enum discriminant");
                                                        let e101 = {
                                                            let l83 = *base.add(16).cast::<*mut u8>();
                                                            let l84 = *base.add(20).cast::<usize>();
                                                            let base89 = l83;
                                                            let len89 = l84;
                                                            let mut result89 = _rt::Vec::with_capacity(len89);
                                                            for i in 0..len89 {
                                                                let base = base89.add(i * 32);
                                                                let e89 = {
                                                                    let l85 = *base.add(0).cast::<f64>();
                                                                    let l86 = *base.add(8).cast::<f64>();
                                                                    let l87 = i32::from(*base.add(16).cast::<u8>());
                                                                    super::super::super::golem::graph::types::Point {
                                                                        longitude: l85,
                                                                        latitude: l86,
                                                                        altitude: match l87 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l88 = *base.add(24).cast::<f64>();
                                                                                    l88
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                result89.push(e89);
                                                            }
                                                            _rt::cabi_dealloc(base89, len89 * 32, 8);
                                                            let l90 = i32::from(*base.add(24).cast::<u8>());
                                                            super::super::super::golem::graph::types::Polygon {
                                                                exterior: result89,
                                                                holes: match l90 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l91 = *base.add(28).cast::<*mut u8>();
                                                                            let l92 = *base.add(32).cast::<usize>();
                                                                            let base100 = l91;
                                                                            let len100 = l92;
                                                                            let mut result100 = _rt::Vec::with_capacity(len100);
                                                                            for i in 0..len100 {
                                                                                let base = base100.add(i * 8);
                                                                                let e100 = {
                                                                                    let l93 = *base.add(0).cast::<*mut u8>();
                                                                                    let l94 = *base.add(4).cast::<usize>();
                                                                                    let base99 = l93;
                                                                                    let len99 = l94;
                                                                                    let mut result99 = _rt::Vec::with_capacity(len99);
                                                                                    for i in 0..len99 {
                                                                                        let base = base99.add(i * 32);
                                                                                        let e99 = {
                                                                                            let l95 = *base.add(0).cast::<f64>();
                                                                                            let l96 = *base.add(8).cast::<f64>();
                                                                                            let l97 = i32::from(*base.add(16).cast::<u8>());
                                                                                            super::super::super::golem::graph::types::Point {
                                                                                                longitude: l95,
                                                                                                latitude: l96,
                                                                                                altitude: match l97 {
                                                                                                    0 => None,
                                                                                                    1 => {
                                                                                                        let e = {
                                                                                                            let l98 = *base.add(24).cast::<f64>();
                                                                                                            l98
                                                                                                        };
                                                                                                        Some(e)
                                                                                                    }
                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                },
                                                                                            }
                                                                                        };
                                                                                        result99.push(e99);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base99, len99 * 32, 8);
                                                                                    result99
                                                                                };
                                                                                result100.push(e100);
                                                                            }
                                                                            _rt::cabi_dealloc(base100, len100 * 8, 4);
                                                                            result100
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                            }
                                                        };
                                                        V101::Polygon(e101)
                                                    }
                                                };
                                                (_rt::string_lift(bytes35), v101)
                                            };
                                            result102.push(e102);
                                        }
                                        _rt::cabi_dealloc(base102, len102 * 48, 8);
                                        super::super::super::golem::graph::types::Vertex {
                                            id: v21,
                                            vertex_type: _rt::string_lift(bytes24),
                                            additional_labels: result30,
                                            properties: result102,
                                        }
                                    };
                                    result103.push(e103);
                                }
                                _rt::cabi_dealloc(base103, len103 * 40, 8);
                                let l104 = *ptr9.add(16).cast::<*mut u8>();
                                let l105 = *ptr9.add(20).cast::<usize>();
                                let base208 = l104;
                                let len208 = l105;
                                let mut result208 = _rt::Vec::with_capacity(len208);
                                for i in 0..len208 {
                                    let base = base208.add(i * 64);
                                    let e208 = {
                                        let l106 = i32::from(*base.add(0).cast::<u8>());
                                        use super::super::super::golem::graph::types::ElementId as V114;
                                        let v114 = match l106 {
                                            0 => {
                                                let e114 = {
                                                    let l107 = *base.add(8).cast::<*mut u8>();
                                                    let l108 = *base.add(12).cast::<usize>();
                                                    let len109 = l108;
                                                    let bytes109 = _rt::Vec::from_raw_parts(
                                                        l107.cast(),
                                                        len109,
                                                        len109,
                                                    );
                                                    _rt::string_lift(bytes109)
                                                };
                                                V114::StringValue(e114)
                                            }
                                            1 => {
                                                let e114 = {
                                                    let l110 = *base.add(8).cast::<i64>();
                                                    l110
                                                };
                                                V114::Int64(e114)
                                            }
                                            n => {
                                                debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                let e114 = {
                                                    let l111 = *base.add(8).cast::<*mut u8>();
                                                    let l112 = *base.add(12).cast::<usize>();
                                                    let len113 = l112;
                                                    let bytes113 = _rt::Vec::from_raw_parts(
                                                        l111.cast(),
                                                        len113,
                                                        len113,
                                                    );
                                                    _rt::string_lift(bytes113)
                                                };
                                                V114::Uuid(e114)
                                            }
                                        };
                                        let l115 = *base.add(16).cast::<*mut u8>();
                                        let l116 = *base.add(20).cast::<usize>();
                                        let len117 = l116;
                                        let bytes117 = _rt::Vec::from_raw_parts(
                                            l115.cast(),
                                            len117,
                                            len117,
                                        );
                                        let l118 = i32::from(*base.add(24).cast::<u8>());
                                        use super::super::super::golem::graph::types::ElementId as V126;
                                        let v126 = match l118 {
                                            0 => {
                                                let e126 = {
                                                    let l119 = *base.add(32).cast::<*mut u8>();
                                                    let l120 = *base.add(36).cast::<usize>();
                                                    let len121 = l120;
                                                    let bytes121 = _rt::Vec::from_raw_parts(
                                                        l119.cast(),
                                                        len121,
                                                        len121,
                                                    );
                                                    _rt::string_lift(bytes121)
                                                };
                                                V126::StringValue(e126)
                                            }
                                            1 => {
                                                let e126 = {
                                                    let l122 = *base.add(32).cast::<i64>();
                                                    l122
                                                };
                                                V126::Int64(e126)
                                            }
                                            n => {
                                                debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                let e126 = {
                                                    let l123 = *base.add(32).cast::<*mut u8>();
                                                    let l124 = *base.add(36).cast::<usize>();
                                                    let len125 = l124;
                                                    let bytes125 = _rt::Vec::from_raw_parts(
                                                        l123.cast(),
                                                        len125,
                                                        len125,
                                                    );
                                                    _rt::string_lift(bytes125)
                                                };
                                                V126::Uuid(e126)
                                            }
                                        };
                                        let l127 = i32::from(*base.add(40).cast::<u8>());
                                        use super::super::super::golem::graph::types::ElementId as V135;
                                        let v135 = match l127 {
                                            0 => {
                                                let e135 = {
                                                    let l128 = *base.add(48).cast::<*mut u8>();
                                                    let l129 = *base.add(52).cast::<usize>();
                                                    let len130 = l129;
                                                    let bytes130 = _rt::Vec::from_raw_parts(
                                                        l128.cast(),
                                                        len130,
                                                        len130,
                                                    );
                                                    _rt::string_lift(bytes130)
                                                };
                                                V135::StringValue(e135)
                                            }
                                            1 => {
                                                let e135 = {
                                                    let l131 = *base.add(48).cast::<i64>();
                                                    l131
                                                };
                                                V135::Int64(e135)
                                            }
                                            n => {
                                                debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                let e135 = {
                                                    let l132 = *base.add(48).cast::<*mut u8>();
                                                    let l133 = *base.add(52).cast::<usize>();
                                                    let len134 = l133;
                                                    let bytes134 = _rt::Vec::from_raw_parts(
                                                        l132.cast(),
                                                        len134,
                                                        len134,
                                                    );
                                                    _rt::string_lift(bytes134)
                                                };
                                                V135::Uuid(e135)
                                            }
                                        };
                                        let l136 = *base.add(56).cast::<*mut u8>();
                                        let l137 = *base.add(60).cast::<usize>();
                                        let base207 = l136;
                                        let len207 = l137;
                                        let mut result207 = _rt::Vec::with_capacity(len207);
                                        for i in 0..len207 {
                                            let base = base207.add(i * 48);
                                            let e207 = {
                                                let l138 = *base.add(0).cast::<*mut u8>();
                                                let l139 = *base.add(4).cast::<usize>();
                                                let len140 = l139;
                                                let bytes140 = _rt::Vec::from_raw_parts(
                                                    l138.cast(),
                                                    len140,
                                                    len140,
                                                );
                                                let l141 = i32::from(*base.add(8).cast::<u8>());
                                                use super::super::super::golem::graph::types::PropertyValue as V206;
                                                let v206 = match l141 {
                                                    0 => V206::NullValue,
                                                    1 => {
                                                        let e206 = {
                                                            let l142 = i32::from(*base.add(16).cast::<u8>());
                                                            _rt::bool_lift(l142 as u8)
                                                        };
                                                        V206::Boolean(e206)
                                                    }
                                                    2 => {
                                                        let e206 = {
                                                            let l143 = i32::from(*base.add(16).cast::<i8>());
                                                            l143 as i8
                                                        };
                                                        V206::Int8(e206)
                                                    }
                                                    3 => {
                                                        let e206 = {
                                                            let l144 = i32::from(*base.add(16).cast::<i16>());
                                                            l144 as i16
                                                        };
                                                        V206::Int16(e206)
                                                    }
                                                    4 => {
                                                        let e206 = {
                                                            let l145 = *base.add(16).cast::<i32>();
                                                            l145
                                                        };
                                                        V206::Int32(e206)
                                                    }
                                                    5 => {
                                                        let e206 = {
                                                            let l146 = *base.add(16).cast::<i64>();
                                                            l146
                                                        };
                                                        V206::Int64(e206)
                                                    }
                                                    6 => {
                                                        let e206 = {
                                                            let l147 = i32::from(*base.add(16).cast::<u8>());
                                                            l147 as u8
                                                        };
                                                        V206::Uint8(e206)
                                                    }
                                                    7 => {
                                                        let e206 = {
                                                            let l148 = i32::from(*base.add(16).cast::<u16>());
                                                            l148 as u16
                                                        };
                                                        V206::Uint16(e206)
                                                    }
                                                    8 => {
                                                        let e206 = {
                                                            let l149 = *base.add(16).cast::<i32>();
                                                            l149 as u32
                                                        };
                                                        V206::Uint32(e206)
                                                    }
                                                    9 => {
                                                        let e206 = {
                                                            let l150 = *base.add(16).cast::<i64>();
                                                            l150 as u64
                                                        };
                                                        V206::Uint64(e206)
                                                    }
                                                    10 => {
                                                        let e206 = {
                                                            let l151 = *base.add(16).cast::<f32>();
                                                            l151
                                                        };
                                                        V206::Float32Value(e206)
                                                    }
                                                    11 => {
                                                        let e206 = {
                                                            let l152 = *base.add(16).cast::<f64>();
                                                            l152
                                                        };
                                                        V206::Float64Value(e206)
                                                    }
                                                    12 => {
                                                        let e206 = {
                                                            let l153 = *base.add(16).cast::<*mut u8>();
                                                            let l154 = *base.add(20).cast::<usize>();
                                                            let len155 = l154;
                                                            let bytes155 = _rt::Vec::from_raw_parts(
                                                                l153.cast(),
                                                                len155,
                                                                len155,
                                                            );
                                                            _rt::string_lift(bytes155)
                                                        };
                                                        V206::StringValue(e206)
                                                    }
                                                    13 => {
                                                        let e206 = {
                                                            let l156 = *base.add(16).cast::<*mut u8>();
                                                            let l157 = *base.add(20).cast::<usize>();
                                                            let len158 = l157;
                                                            _rt::Vec::from_raw_parts(l156.cast(), len158, len158)
                                                        };
                                                        V206::Bytes(e206)
                                                    }
                                                    14 => {
                                                        let e206 = {
                                                            let l159 = *base.add(16).cast::<i32>();
                                                            let l160 = i32::from(*base.add(20).cast::<u8>());
                                                            let l161 = i32::from(*base.add(21).cast::<u8>());
                                                            super::super::super::golem::graph::types::Date {
                                                                year: l159 as u32,
                                                                month: l160 as u8,
                                                                day: l161 as u8,
                                                            }
                                                        };
                                                        V206::Date(e206)
                                                    }
                                                    15 => {
                                                        let e206 = {
                                                            let l162 = i32::from(*base.add(16).cast::<u8>());
                                                            let l163 = i32::from(*base.add(17).cast::<u8>());
                                                            let l164 = i32::from(*base.add(18).cast::<u8>());
                                                            let l165 = *base.add(20).cast::<i32>();
                                                            super::super::super::golem::graph::types::Time {
                                                                hour: l162 as u8,
                                                                minute: l163 as u8,
                                                                second: l164 as u8,
                                                                nanosecond: l165 as u32,
                                                            }
                                                        };
                                                        V206::Time(e206)
                                                    }
                                                    16 => {
                                                        let e206 = {
                                                            let l166 = *base.add(16).cast::<i32>();
                                                            let l167 = i32::from(*base.add(20).cast::<u8>());
                                                            let l168 = i32::from(*base.add(21).cast::<u8>());
                                                            let l169 = i32::from(*base.add(24).cast::<u8>());
                                                            let l170 = i32::from(*base.add(25).cast::<u8>());
                                                            let l171 = i32::from(*base.add(26).cast::<u8>());
                                                            let l172 = *base.add(28).cast::<i32>();
                                                            let l173 = i32::from(*base.add(32).cast::<u8>());
                                                            super::super::super::golem::graph::types::Datetime {
                                                                date: super::super::super::golem::graph::types::Date {
                                                                    year: l166 as u32,
                                                                    month: l167 as u8,
                                                                    day: l168 as u8,
                                                                },
                                                                time: super::super::super::golem::graph::types::Time {
                                                                    hour: l169 as u8,
                                                                    minute: l170 as u8,
                                                                    second: l171 as u8,
                                                                    nanosecond: l172 as u32,
                                                                },
                                                                timezone_offset_minutes: match l173 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l174 = i32::from(*base.add(34).cast::<i16>());
                                                                            l174 as i16
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                            }
                                                        };
                                                        V206::Datetime(e206)
                                                    }
                                                    17 => {
                                                        let e206 = {
                                                            let l175 = *base.add(16).cast::<i64>();
                                                            let l176 = *base.add(24).cast::<i32>();
                                                            super::super::super::golem::graph::types::Duration {
                                                                seconds: l175,
                                                                nanoseconds: l176 as u32,
                                                            }
                                                        };
                                                        V206::Duration(e206)
                                                    }
                                                    18 => {
                                                        let e206 = {
                                                            let l177 = *base.add(16).cast::<f64>();
                                                            let l178 = *base.add(24).cast::<f64>();
                                                            let l179 = i32::from(*base.add(32).cast::<u8>());
                                                            super::super::super::golem::graph::types::Point {
                                                                longitude: l177,
                                                                latitude: l178,
                                                                altitude: match l179 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l180 = *base.add(40).cast::<f64>();
                                                                            l180
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                            }
                                                        };
                                                        V206::Point(e206)
                                                    }
                                                    19 => {
                                                        let e206 = {
                                                            let l181 = *base.add(16).cast::<*mut u8>();
                                                            let l182 = *base.add(20).cast::<usize>();
                                                            let base187 = l181;
                                                            let len187 = l182;
                                                            let mut result187 = _rt::Vec::with_capacity(len187);
                                                            for i in 0..len187 {
                                                                let base = base187.add(i * 32);
                                                                let e187 = {
                                                                    let l183 = *base.add(0).cast::<f64>();
                                                                    let l184 = *base.add(8).cast::<f64>();
                                                                    let l185 = i32::from(*base.add(16).cast::<u8>());
                                                                    super::super::super::golem::graph::types::Point {
                                                                        longitude: l183,
                                                                        latitude: l184,
                                                                        altitude: match l185 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l186 = *base.add(24).cast::<f64>();
                                                                                    l186
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                result187.push(e187);
                                                            }
                                                            _rt::cabi_dealloc(base187, len187 * 32, 8);
                                                            super::super::super::golem::graph::types::Linestring {
                                                                coordinates: result187,
                                                            }
                                                        };
                                                        V206::Linestring(e206)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 20, "invalid enum discriminant");
                                                        let e206 = {
                                                            let l188 = *base.add(16).cast::<*mut u8>();
                                                            let l189 = *base.add(20).cast::<usize>();
                                                            let base194 = l188;
                                                            let len194 = l189;
                                                            let mut result194 = _rt::Vec::with_capacity(len194);
                                                            for i in 0..len194 {
                                                                let base = base194.add(i * 32);
                                                                let e194 = {
                                                                    let l190 = *base.add(0).cast::<f64>();
                                                                    let l191 = *base.add(8).cast::<f64>();
                                                                    let l192 = i32::from(*base.add(16).cast::<u8>());
                                                                    super::super::super::golem::graph::types::Point {
                                                                        longitude: l190,
                                                                        latitude: l191,
                                                                        altitude: match l192 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l193 = *base.add(24).cast::<f64>();
                                                                                    l193
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                result194.push(e194);
                                                            }
                                                            _rt::cabi_dealloc(base194, len194 * 32, 8);
                                                            let l195 = i32::from(*base.add(24).cast::<u8>());
                                                            super::super::super::golem::graph::types::Polygon {
                                                                exterior: result194,
                                                                holes: match l195 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l196 = *base.add(28).cast::<*mut u8>();
                                                                            let l197 = *base.add(32).cast::<usize>();
                                                                            let base205 = l196;
                                                                            let len205 = l197;
                                                                            let mut result205 = _rt::Vec::with_capacity(len205);
                                                                            for i in 0..len205 {
                                                                                let base = base205.add(i * 8);
                                                                                let e205 = {
                                                                                    let l198 = *base.add(0).cast::<*mut u8>();
                                                                                    let l199 = *base.add(4).cast::<usize>();
                                                                                    let base204 = l198;
                                                                                    let len204 = l199;
                                                                                    let mut result204 = _rt::Vec::with_capacity(len204);
                                                                                    for i in 0..len204 {
                                                                                        let base = base204.add(i * 32);
                                                                                        let e204 = {
                                                                                            let l200 = *base.add(0).cast::<f64>();
                                                                                            let l201 = *base.add(8).cast::<f64>();
                                                                                            let l202 = i32::from(*base.add(16).cast::<u8>());
                                                                                            super::super::super::golem::graph::types::Point {
                                                                                                longitude: l200,
                                                                                                latitude: l201,
                                                                                                altitude: match l202 {
                                                                                                    0 => None,
                                                                                                    1 => {
                                                                                                        let e = {
                                                                                                            let l203 = *base.add(24).cast::<f64>();
                                                                                                            l203
                                                                                                        };
                                                                                                        Some(e)
                                                                                                    }
                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                },
                                                                                            }
                                                                                        };
                                                                                        result204.push(e204);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base204, len204 * 32, 8);
                                                                                    result204
                                                                                };
                                                                                result205.push(e205);
                                                                            }
                                                                            _rt::cabi_dealloc(base205, len205 * 8, 4);
                                                                            result205
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                            }
                                                        };
                                                        V206::Polygon(e206)
                                                    }
                                                };
                                                (_rt::string_lift(bytes140), v206)
                                            };
                                            result207.push(e207);
                                        }
                                        _rt::cabi_dealloc(base207, len207 * 48, 8);
                                        super::super::super::golem::graph::types::Edge {
                                            id: v114,
                                            edge_type: _rt::string_lift(bytes117),
                                            from_vertex: v126,
                                            to_vertex: v135,
                                            properties: result207,
                                        }
                                    };
                                    result208.push(e208);
                                }
                                _rt::cabi_dealloc(base208, len208 * 64, 8);
                                Subgraph {
                                    vertices: result103,
                                    edges: result208,
                                }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l209 = i32::from(*ptr9.add(8).cast::<u8>());
                                use super::super::super::golem::graph::errors::GraphError as V264;
                                let v264 = match l209 {
                                    0 => {
                                        let e264 = {
                                            let l210 = *ptr9.add(16).cast::<*mut u8>();
                                            let l211 = *ptr9.add(20).cast::<usize>();
                                            let len212 = l211;
                                            let bytes212 = _rt::Vec::from_raw_parts(
                                                l210.cast(),
                                                len212,
                                                len212,
                                            );
                                            _rt::string_lift(bytes212)
                                        };
                                        V264::UnsupportedOperation(e264)
                                    }
                                    1 => {
                                        let e264 = {
                                            let l213 = *ptr9.add(16).cast::<*mut u8>();
                                            let l214 = *ptr9.add(20).cast::<usize>();
                                            let len215 = l214;
                                            let bytes215 = _rt::Vec::from_raw_parts(
                                                l213.cast(),
                                                len215,
                                                len215,
                                            );
                                            _rt::string_lift(bytes215)
                                        };
                                        V264::ConnectionFailed(e264)
                                    }
                                    2 => {
                                        let e264 = {
                                            let l216 = *ptr9.add(16).cast::<*mut u8>();
                                            let l217 = *ptr9.add(20).cast::<usize>();
                                            let len218 = l217;
                                            let bytes218 = _rt::Vec::from_raw_parts(
                                                l216.cast(),
                                                len218,
                                                len218,
                                            );
                                            _rt::string_lift(bytes218)
                                        };
                                        V264::AuthenticationFailed(e264)
                                    }
                                    3 => {
                                        let e264 = {
                                            let l219 = *ptr9.add(16).cast::<*mut u8>();
                                            let l220 = *ptr9.add(20).cast::<usize>();
                                            let len221 = l220;
                                            let bytes221 = _rt::Vec::from_raw_parts(
                                                l219.cast(),
                                                len221,
                                                len221,
                                            );
                                            _rt::string_lift(bytes221)
                                        };
                                        V264::AuthorizationFailed(e264)
                                    }
                                    4 => {
                                        let e264 = {
                                            let l222 = i32::from(*ptr9.add(16).cast::<u8>());
                                            use super::super::super::golem::graph::types::ElementId as V230;
                                            let v230 = match l222 {
                                                0 => {
                                                    let e230 = {
                                                        let l223 = *ptr9.add(24).cast::<*mut u8>();
                                                        let l224 = *ptr9.add(28).cast::<usize>();
                                                        let len225 = l224;
                                                        let bytes225 = _rt::Vec::from_raw_parts(
                                                            l223.cast(),
                                                            len225,
                                                            len225,
                                                        );
                                                        _rt::string_lift(bytes225)
                                                    };
                                                    V230::StringValue(e230)
                                                }
                                                1 => {
                                                    let e230 = {
                                                        let l226 = *ptr9.add(24).cast::<i64>();
                                                        l226
                                                    };
                                                    V230::Int64(e230)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                    let e230 = {
                                                        let l227 = *ptr9.add(24).cast::<*mut u8>();
                                                        let l228 = *ptr9.add(28).cast::<usize>();
                                                        let len229 = l228;
                                                        let bytes229 = _rt::Vec::from_raw_parts(
                                                            l227.cast(),
                                                            len229,
                                                            len229,
                                                        );
                                                        _rt::string_lift(bytes229)
                                                    };
                                                    V230::Uuid(e230)
                                                }
                                            };
                                            v230
                                        };
                                        V264::ElementNotFound(e264)
                                    }
                                    5 => {
                                        let e264 = {
                                            let l231 = i32::from(*ptr9.add(16).cast::<u8>());
                                            use super::super::super::golem::graph::types::ElementId as V239;
                                            let v239 = match l231 {
                                                0 => {
                                                    let e239 = {
                                                        let l232 = *ptr9.add(24).cast::<*mut u8>();
                                                        let l233 = *ptr9.add(28).cast::<usize>();
                                                        let len234 = l233;
                                                        let bytes234 = _rt::Vec::from_raw_parts(
                                                            l232.cast(),
                                                            len234,
                                                            len234,
                                                        );
                                                        _rt::string_lift(bytes234)
                                                    };
                                                    V239::StringValue(e239)
                                                }
                                                1 => {
                                                    let e239 = {
                                                        let l235 = *ptr9.add(24).cast::<i64>();
                                                        l235
                                                    };
                                                    V239::Int64(e239)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                    let e239 = {
                                                        let l236 = *ptr9.add(24).cast::<*mut u8>();
                                                        let l237 = *ptr9.add(28).cast::<usize>();
                                                        let len238 = l237;
                                                        let bytes238 = _rt::Vec::from_raw_parts(
                                                            l236.cast(),
                                                            len238,
                                                            len238,
                                                        );
                                                        _rt::string_lift(bytes238)
                                                    };
                                                    V239::Uuid(e239)
                                                }
                                            };
                                            v239
                                        };
                                        V264::DuplicateElement(e264)
                                    }
                                    6 => {
                                        let e264 = {
                                            let l240 = *ptr9.add(16).cast::<*mut u8>();
                                            let l241 = *ptr9.add(20).cast::<usize>();
                                            let len242 = l241;
                                            let bytes242 = _rt::Vec::from_raw_parts(
                                                l240.cast(),
                                                len242,
                                                len242,
                                            );
                                            _rt::string_lift(bytes242)
                                        };
                                        V264::SchemaViolation(e264)
                                    }
                                    7 => {
                                        let e264 = {
                                            let l243 = *ptr9.add(16).cast::<*mut u8>();
                                            let l244 = *ptr9.add(20).cast::<usize>();
                                            let len245 = l244;
                                            let bytes245 = _rt::Vec::from_raw_parts(
                                                l243.cast(),
                                                len245,
                                                len245,
                                            );
                                            _rt::string_lift(bytes245)
                                        };
                                        V264::ConstraintViolation(e264)
                                    }
                                    8 => {
                                        let e264 = {
                                            let l246 = *ptr9.add(16).cast::<*mut u8>();
                                            let l247 = *ptr9.add(20).cast::<usize>();
                                            let len248 = l247;
                                            let bytes248 = _rt::Vec::from_raw_parts(
                                                l246.cast(),
                                                len248,
                                                len248,
                                            );
                                            _rt::string_lift(bytes248)
                                        };
                                        V264::InvalidPropertyType(e264)
                                    }
                                    9 => {
                                        let e264 = {
                                            let l249 = *ptr9.add(16).cast::<*mut u8>();
                                            let l250 = *ptr9.add(20).cast::<usize>();
                                            let len251 = l250;
                                            let bytes251 = _rt::Vec::from_raw_parts(
                                                l249.cast(),
                                                len251,
                                                len251,
                                            );
                                            _rt::string_lift(bytes251)
                                        };
                                        V264::InvalidQuery(e264)
                                    }
                                    10 => {
                                        let e264 = {
                                            let l252 = *ptr9.add(16).cast::<*mut u8>();
                                            let l253 = *ptr9.add(20).cast::<usize>();
                                            let len254 = l253;
                                            let bytes254 = _rt::Vec::from_raw_parts(
                                                l252.cast(),
                                                len254,
                                                len254,
                                            );
                                            _rt::string_lift(bytes254)
                                        };
                                        V264::TransactionFailed(e264)
                                    }
                                    11 => V264::TransactionConflict,
                                    12 => V264::TransactionTimeout,
                                    13 => V264::DeadlockDetected,
                                    14 => V264::Timeout,
                                    15 => {
                                        let e264 = {
                                            let l255 = *ptr9.add(16).cast::<*mut u8>();
                                            let l256 = *ptr9.add(20).cast::<usize>();
                                            let len257 = l256;
                                            let bytes257 = _rt::Vec::from_raw_parts(
                                                l255.cast(),
                                                len257,
                                                len257,
                                            );
                                            _rt::string_lift(bytes257)
                                        };
                                        V264::ResourceExhausted(e264)
                                    }
                                    16 => {
                                        let e264 = {
                                            let l258 = *ptr9.add(16).cast::<*mut u8>();
                                            let l259 = *ptr9.add(20).cast::<usize>();
                                            let len260 = l259;
                                            let bytes260 = _rt::Vec::from_raw_parts(
                                                l258.cast(),
                                                len260,
                                                len260,
                                            );
                                            _rt::string_lift(bytes260)
                                        };
                                        V264::InternalError(e264)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 17, "invalid enum discriminant");
                                        let e264 = {
                                            let l261 = *ptr9.add(16).cast::<*mut u8>();
                                            let l262 = *ptr9.add(20).cast::<usize>();
                                            let len263 = l262;
                                            let bytes263 = _rt::Vec::from_raw_parts(
                                                l261.cast(),
                                                len263,
                                                len263,
                                            );
                                            _rt::string_lift(bytes263)
                                        };
                                        V264::ServiceUnavailable(e264)
                                    }
                                };
                                v264
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Check if path exists between vertices
            pub fn path_exists(
                transaction: &Transaction,
                from_vertex: &ElementId,
                to_vertex: &ElementId,
                options: Option<&PathOptions>,
            ) -> Result<bool, GraphError> {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 104]);
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 104],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    *ptr0.add(0).cast::<i32>() = (transaction).handle() as i32;
                    use super::super::super::golem::graph::types::ElementId as V3;
                    match from_vertex {
                        V3::StringValue(e) => {
                            *ptr0.add(8).cast::<u8>() = (0i32) as u8;
                            let vec1 = e;
                            let ptr1 = vec1.as_ptr().cast::<u8>();
                            let len1 = vec1.len();
                            *ptr0.add(20).cast::<usize>() = len1;
                            *ptr0.add(16).cast::<*mut u8>() = ptr1.cast_mut();
                        }
                        V3::Int64(e) => {
                            *ptr0.add(8).cast::<u8>() = (1i32) as u8;
                            *ptr0.add(16).cast::<i64>() = _rt::as_i64(e);
                        }
                        V3::Uuid(e) => {
                            *ptr0.add(8).cast::<u8>() = (2i32) as u8;
                            let vec2 = e;
                            let ptr2 = vec2.as_ptr().cast::<u8>();
                            let len2 = vec2.len();
                            *ptr0.add(20).cast::<usize>() = len2;
                            *ptr0.add(16).cast::<*mut u8>() = ptr2.cast_mut();
                        }
                    }
                    use super::super::super::golem::graph::types::ElementId as V6;
                    match to_vertex {
                        V6::StringValue(e) => {
                            *ptr0.add(24).cast::<u8>() = (0i32) as u8;
                            let vec4 = e;
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            *ptr0.add(36).cast::<usize>() = len4;
                            *ptr0.add(32).cast::<*mut u8>() = ptr4.cast_mut();
                        }
                        V6::Int64(e) => {
                            *ptr0.add(24).cast::<u8>() = (1i32) as u8;
                            *ptr0.add(32).cast::<i64>() = _rt::as_i64(e);
                        }
                        V6::Uuid(e) => {
                            *ptr0.add(24).cast::<u8>() = (2i32) as u8;
                            let vec5 = e;
                            let ptr5 = vec5.as_ptr().cast::<u8>();
                            let len5 = vec5.len();
                            *ptr0.add(36).cast::<usize>() = len5;
                            *ptr0.add(32).cast::<*mut u8>() = ptr5.cast_mut();
                        }
                    }
                    match options {
                        Some(e) => {
                            *ptr0.add(40).cast::<u8>() = (1i32) as u8;
                            let PathOptions {
                                max_depth: max_depth7,
                                edge_types: edge_types7,
                                vertex_types: vertex_types7,
                                vertex_filters: vertex_filters7,
                                edge_filters: edge_filters7,
                            } = e;
                            match max_depth7 {
                                Some(e) => {
                                    *ptr0.add(44).cast::<u8>() = (1i32) as u8;
                                    *ptr0.add(48).cast::<i32>() = _rt::as_i32(e);
                                }
                                None => {
                                    *ptr0.add(44).cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match edge_types7 {
                                Some(e) => {
                                    *ptr0.add(52).cast::<u8>() = (1i32) as u8;
                                    let vec9 = e;
                                    let len9 = vec9.len();
                                    let layout9 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec9.len() * 8,
                                        4,
                                    );
                                    let result9 = if layout9.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout9).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout9);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec9.into_iter().enumerate() {
                                        let base = result9.add(i * 8);
                                        {
                                            let vec8 = e;
                                            let ptr8 = vec8.as_ptr().cast::<u8>();
                                            let len8 = vec8.len();
                                            *base.add(4).cast::<usize>() = len8;
                                            *base.add(0).cast::<*mut u8>() = ptr8.cast_mut();
                                        }
                                    }
                                    *ptr0.add(60).cast::<usize>() = len9;
                                    *ptr0.add(56).cast::<*mut u8>() = result9;
                                    cleanup_list.extend_from_slice(&[(result9, layout9)]);
                                }
                                None => {
                                    *ptr0.add(52).cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match vertex_types7 {
                                Some(e) => {
                                    *ptr0.add(64).cast::<u8>() = (1i32) as u8;
                                    let vec11 = e;
                                    let len11 = vec11.len();
                                    let layout11 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec11.len() * 8,
                                        4,
                                    );
                                    let result11 = if layout11.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout11).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout11);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec11.into_iter().enumerate() {
                                        let base = result11.add(i * 8);
                                        {
                                            let vec10 = e;
                                            let ptr10 = vec10.as_ptr().cast::<u8>();
                                            let len10 = vec10.len();
                                            *base.add(4).cast::<usize>() = len10;
                                            *base.add(0).cast::<*mut u8>() = ptr10.cast_mut();
                                        }
                                    }
                                    *ptr0.add(72).cast::<usize>() = len11;
                                    *ptr0.add(68).cast::<*mut u8>() = result11;
                                    cleanup_list.extend_from_slice(&[(result11, layout11)]);
                                }
                                None => {
                                    *ptr0.add(64).cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match vertex_filters7 {
                                Some(e) => {
                                    *ptr0.add(76).cast::<u8>() = (1i32) as u8;
                                    let vec33 = e;
                                    let len33 = vec33.len();
                                    let layout33 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec33.len() * 56,
                                        8,
                                    );
                                    let result33 = if layout33.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout33).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout33);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec33.into_iter().enumerate() {
                                        let base = result33.add(i * 56);
                                        {
                                            let super::super::super::golem::graph::types::FilterCondition {
                                                property: property12,
                                                operator: operator12,
                                                value: value12,
                                            } = e;
                                            let vec13 = property12;
                                            let ptr13 = vec13.as_ptr().cast::<u8>();
                                            let len13 = vec13.len();
                                            *base.add(4).cast::<usize>() = len13;
                                            *base.add(0).cast::<*mut u8>() = ptr13.cast_mut();
                                            *base.add(8).cast::<u8>() = (operator12.clone() as i32)
                                                as u8;
                                            use super::super::super::golem::graph::types::PropertyValue as V32;
                                            match value12 {
                                                V32::NullValue => {
                                                    *base.add(16).cast::<u8>() = (0i32) as u8;
                                                }
                                                V32::Boolean(e) => {
                                                    *base.add(16).cast::<u8>() = (1i32) as u8;
                                                    *base.add(24).cast::<u8>() = (match e {
                                                        true => 1,
                                                        false => 0,
                                                    }) as u8;
                                                }
                                                V32::Int8(e) => {
                                                    *base.add(16).cast::<u8>() = (2i32) as u8;
                                                    *base.add(24).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                                }
                                                V32::Int16(e) => {
                                                    *base.add(16).cast::<u8>() = (3i32) as u8;
                                                    *base.add(24).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                                }
                                                V32::Int32(e) => {
                                                    *base.add(16).cast::<u8>() = (4i32) as u8;
                                                    *base.add(24).cast::<i32>() = _rt::as_i32(e);
                                                }
                                                V32::Int64(e) => {
                                                    *base.add(16).cast::<u8>() = (5i32) as u8;
                                                    *base.add(24).cast::<i64>() = _rt::as_i64(e);
                                                }
                                                V32::Uint8(e) => {
                                                    *base.add(16).cast::<u8>() = (6i32) as u8;
                                                    *base.add(24).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                                }
                                                V32::Uint16(e) => {
                                                    *base.add(16).cast::<u8>() = (7i32) as u8;
                                                    *base.add(24).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                                }
                                                V32::Uint32(e) => {
                                                    *base.add(16).cast::<u8>() = (8i32) as u8;
                                                    *base.add(24).cast::<i32>() = _rt::as_i32(e);
                                                }
                                                V32::Uint64(e) => {
                                                    *base.add(16).cast::<u8>() = (9i32) as u8;
                                                    *base.add(24).cast::<i64>() = _rt::as_i64(e);
                                                }
                                                V32::Float32Value(e) => {
                                                    *base.add(16).cast::<u8>() = (10i32) as u8;
                                                    *base.add(24).cast::<f32>() = _rt::as_f32(e);
                                                }
                                                V32::Float64Value(e) => {
                                                    *base.add(16).cast::<u8>() = (11i32) as u8;
                                                    *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                }
                                                V32::StringValue(e) => {
                                                    *base.add(16).cast::<u8>() = (12i32) as u8;
                                                    let vec14 = e;
                                                    let ptr14 = vec14.as_ptr().cast::<u8>();
                                                    let len14 = vec14.len();
                                                    *base.add(28).cast::<usize>() = len14;
                                                    *base.add(24).cast::<*mut u8>() = ptr14.cast_mut();
                                                }
                                                V32::Bytes(e) => {
                                                    *base.add(16).cast::<u8>() = (13i32) as u8;
                                                    let vec15 = e;
                                                    let ptr15 = vec15.as_ptr().cast::<u8>();
                                                    let len15 = vec15.len();
                                                    *base.add(28).cast::<usize>() = len15;
                                                    *base.add(24).cast::<*mut u8>() = ptr15.cast_mut();
                                                }
                                                V32::Date(e) => {
                                                    *base.add(16).cast::<u8>() = (14i32) as u8;
                                                    let super::super::super::golem::graph::types::Date {
                                                        year: year16,
                                                        month: month16,
                                                        day: day16,
                                                    } = e;
                                                    *base.add(24).cast::<i32>() = _rt::as_i32(year16);
                                                    *base.add(28).cast::<u8>() = (_rt::as_i32(month16)) as u8;
                                                    *base.add(29).cast::<u8>() = (_rt::as_i32(day16)) as u8;
                                                }
                                                V32::Time(e) => {
                                                    *base.add(16).cast::<u8>() = (15i32) as u8;
                                                    let super::super::super::golem::graph::types::Time {
                                                        hour: hour17,
                                                        minute: minute17,
                                                        second: second17,
                                                        nanosecond: nanosecond17,
                                                    } = e;
                                                    *base.add(24).cast::<u8>() = (_rt::as_i32(hour17)) as u8;
                                                    *base.add(25).cast::<u8>() = (_rt::as_i32(minute17)) as u8;
                                                    *base.add(26).cast::<u8>() = (_rt::as_i32(second17)) as u8;
                                                    *base.add(28).cast::<i32>() = _rt::as_i32(nanosecond17);
                                                }
                                                V32::Datetime(e) => {
                                                    *base.add(16).cast::<u8>() = (16i32) as u8;
                                                    let super::super::super::golem::graph::types::Datetime {
                                                        date: date18,
                                                        time: time18,
                                                        timezone_offset_minutes: timezone_offset_minutes18,
                                                    } = e;
                                                    let super::super::super::golem::graph::types::Date {
                                                        year: year19,
                                                        month: month19,
                                                        day: day19,
                                                    } = date18;
                                                    *base.add(24).cast::<i32>() = _rt::as_i32(year19);
                                                    *base.add(28).cast::<u8>() = (_rt::as_i32(month19)) as u8;
                                                    *base.add(29).cast::<u8>() = (_rt::as_i32(day19)) as u8;
                                                    let super::super::super::golem::graph::types::Time {
                                                        hour: hour20,
                                                        minute: minute20,
                                                        second: second20,
                                                        nanosecond: nanosecond20,
                                                    } = time18;
                                                    *base.add(32).cast::<u8>() = (_rt::as_i32(hour20)) as u8;
                                                    *base.add(33).cast::<u8>() = (_rt::as_i32(minute20)) as u8;
                                                    *base.add(34).cast::<u8>() = (_rt::as_i32(second20)) as u8;
                                                    *base.add(36).cast::<i32>() = _rt::as_i32(nanosecond20);
                                                    match timezone_offset_minutes18 {
                                                        Some(e) => {
                                                            *base.add(40).cast::<u8>() = (1i32) as u8;
                                                            *base.add(42).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                                        }
                                                        None => {
                                                            *base.add(40).cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                                V32::Duration(e) => {
                                                    *base.add(16).cast::<u8>() = (17i32) as u8;
                                                    let super::super::super::golem::graph::types::Duration {
                                                        seconds: seconds21,
                                                        nanoseconds: nanoseconds21,
                                                    } = e;
                                                    *base.add(24).cast::<i64>() = _rt::as_i64(seconds21);
                                                    *base.add(32).cast::<i32>() = _rt::as_i32(nanoseconds21);
                                                }
                                                V32::Point(e) => {
                                                    *base.add(16).cast::<u8>() = (18i32) as u8;
                                                    let super::super::super::golem::graph::types::Point {
                                                        longitude: longitude22,
                                                        latitude: latitude22,
                                                        altitude: altitude22,
                                                    } = e;
                                                    *base.add(24).cast::<f64>() = _rt::as_f64(longitude22);
                                                    *base.add(32).cast::<f64>() = _rt::as_f64(latitude22);
                                                    match altitude22 {
                                                        Some(e) => {
                                                            *base.add(40).cast::<u8>() = (1i32) as u8;
                                                            *base.add(48).cast::<f64>() = _rt::as_f64(e);
                                                        }
                                                        None => {
                                                            *base.add(40).cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                                V32::Linestring(e) => {
                                                    *base.add(16).cast::<u8>() = (19i32) as u8;
                                                    let super::super::super::golem::graph::types::Linestring {
                                                        coordinates: coordinates23,
                                                    } = e;
                                                    let vec25 = coordinates23;
                                                    let len25 = vec25.len();
                                                    let layout25 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec25.len() * 32,
                                                        8,
                                                    );
                                                    let result25 = if layout25.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout25).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout25);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec25.into_iter().enumerate() {
                                                        let base = result25.add(i * 32);
                                                        {
                                                            let super::super::super::golem::graph::types::Point {
                                                                longitude: longitude24,
                                                                latitude: latitude24,
                                                                altitude: altitude24,
                                                            } = e;
                                                            *base.add(0).cast::<f64>() = _rt::as_f64(longitude24);
                                                            *base.add(8).cast::<f64>() = _rt::as_f64(latitude24);
                                                            match altitude24 {
                                                                Some(e) => {
                                                                    *base.add(16).cast::<u8>() = (1i32) as u8;
                                                                    *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                                }
                                                                None => {
                                                                    *base.add(16).cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                    }
                                                    *base.add(28).cast::<usize>() = len25;
                                                    *base.add(24).cast::<*mut u8>() = result25;
                                                    cleanup_list.extend_from_slice(&[(result25, layout25)]);
                                                }
                                                V32::Polygon(e) => {
                                                    *base.add(16).cast::<u8>() = (20i32) as u8;
                                                    let super::super::super::golem::graph::types::Polygon {
                                                        exterior: exterior26,
                                                        holes: holes26,
                                                    } = e;
                                                    let vec28 = exterior26;
                                                    let len28 = vec28.len();
                                                    let layout28 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec28.len() * 32,
                                                        8,
                                                    );
                                                    let result28 = if layout28.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout28).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout28);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec28.into_iter().enumerate() {
                                                        let base = result28.add(i * 32);
                                                        {
                                                            let super::super::super::golem::graph::types::Point {
                                                                longitude: longitude27,
                                                                latitude: latitude27,
                                                                altitude: altitude27,
                                                            } = e;
                                                            *base.add(0).cast::<f64>() = _rt::as_f64(longitude27);
                                                            *base.add(8).cast::<f64>() = _rt::as_f64(latitude27);
                                                            match altitude27 {
                                                                Some(e) => {
                                                                    *base.add(16).cast::<u8>() = (1i32) as u8;
                                                                    *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                                }
                                                                None => {
                                                                    *base.add(16).cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                    }
                                                    *base.add(28).cast::<usize>() = len28;
                                                    *base.add(24).cast::<*mut u8>() = result28;
                                                    match holes26 {
                                                        Some(e) => {
                                                            *base.add(32).cast::<u8>() = (1i32) as u8;
                                                            let vec31 = e;
                                                            let len31 = vec31.len();
                                                            let layout31 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec31.len() * 8,
                                                                4,
                                                            );
                                                            let result31 = if layout31.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout31).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout31);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec31.into_iter().enumerate() {
                                                                let base = result31.add(i * 8);
                                                                {
                                                                    let vec30 = e;
                                                                    let len30 = vec30.len();
                                                                    let layout30 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec30.len() * 32,
                                                                        8,
                                                                    );
                                                                    let result30 = if layout30.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout30).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout30);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec30.into_iter().enumerate() {
                                                                        let base = result30.add(i * 32);
                                                                        {
                                                                            let super::super::super::golem::graph::types::Point {
                                                                                longitude: longitude29,
                                                                                latitude: latitude29,
                                                                                altitude: altitude29,
                                                                            } = e;
                                                                            *base.add(0).cast::<f64>() = _rt::as_f64(longitude29);
                                                                            *base.add(8).cast::<f64>() = _rt::as_f64(latitude29);
                                                                            match altitude29 {
                                                                                Some(e) => {
                                                                                    *base.add(16).cast::<u8>() = (1i32) as u8;
                                                                                    *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                                                }
                                                                                None => {
                                                                                    *base.add(16).cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                        }
                                                                    }
                                                                    *base.add(4).cast::<usize>() = len30;
                                                                    *base.add(0).cast::<*mut u8>() = result30;
                                                                    cleanup_list.extend_from_slice(&[(result30, layout30)]);
                                                                }
                                                            }
                                                            *base.add(40).cast::<usize>() = len31;
                                                            *base.add(36).cast::<*mut u8>() = result31;
                                                            cleanup_list.extend_from_slice(&[(result31, layout31)]);
                                                        }
                                                        None => {
                                                            *base.add(32).cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    cleanup_list.extend_from_slice(&[(result28, layout28)]);
                                                }
                                            }
                                        }
                                    }
                                    *ptr0.add(84).cast::<usize>() = len33;
                                    *ptr0.add(80).cast::<*mut u8>() = result33;
                                    cleanup_list.extend_from_slice(&[(result33, layout33)]);
                                }
                                None => {
                                    *ptr0.add(76).cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match edge_filters7 {
                                Some(e) => {
                                    *ptr0.add(88).cast::<u8>() = (1i32) as u8;
                                    let vec55 = e;
                                    let len55 = vec55.len();
                                    let layout55 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec55.len() * 56,
                                        8,
                                    );
                                    let result55 = if layout55.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout55).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout55);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec55.into_iter().enumerate() {
                                        let base = result55.add(i * 56);
                                        {
                                            let super::super::super::golem::graph::types::FilterCondition {
                                                property: property34,
                                                operator: operator34,
                                                value: value34,
                                            } = e;
                                            let vec35 = property34;
                                            let ptr35 = vec35.as_ptr().cast::<u8>();
                                            let len35 = vec35.len();
                                            *base.add(4).cast::<usize>() = len35;
                                            *base.add(0).cast::<*mut u8>() = ptr35.cast_mut();
                                            *base.add(8).cast::<u8>() = (operator34.clone() as i32)
                                                as u8;
                                            use super::super::super::golem::graph::types::PropertyValue as V54;
                                            match value34 {
                                                V54::NullValue => {
                                                    *base.add(16).cast::<u8>() = (0i32) as u8;
                                                }
                                                V54::Boolean(e) => {
                                                    *base.add(16).cast::<u8>() = (1i32) as u8;
                                                    *base.add(24).cast::<u8>() = (match e {
                                                        true => 1,
                                                        false => 0,
                                                    }) as u8;
                                                }
                                                V54::Int8(e) => {
                                                    *base.add(16).cast::<u8>() = (2i32) as u8;
                                                    *base.add(24).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                                }
                                                V54::Int16(e) => {
                                                    *base.add(16).cast::<u8>() = (3i32) as u8;
                                                    *base.add(24).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                                }
                                                V54::Int32(e) => {
                                                    *base.add(16).cast::<u8>() = (4i32) as u8;
                                                    *base.add(24).cast::<i32>() = _rt::as_i32(e);
                                                }
                                                V54::Int64(e) => {
                                                    *base.add(16).cast::<u8>() = (5i32) as u8;
                                                    *base.add(24).cast::<i64>() = _rt::as_i64(e);
                                                }
                                                V54::Uint8(e) => {
                                                    *base.add(16).cast::<u8>() = (6i32) as u8;
                                                    *base.add(24).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                                }
                                                V54::Uint16(e) => {
                                                    *base.add(16).cast::<u8>() = (7i32) as u8;
                                                    *base.add(24).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                                }
                                                V54::Uint32(e) => {
                                                    *base.add(16).cast::<u8>() = (8i32) as u8;
                                                    *base.add(24).cast::<i32>() = _rt::as_i32(e);
                                                }
                                                V54::Uint64(e) => {
                                                    *base.add(16).cast::<u8>() = (9i32) as u8;
                                                    *base.add(24).cast::<i64>() = _rt::as_i64(e);
                                                }
                                                V54::Float32Value(e) => {
                                                    *base.add(16).cast::<u8>() = (10i32) as u8;
                                                    *base.add(24).cast::<f32>() = _rt::as_f32(e);
                                                }
                                                V54::Float64Value(e) => {
                                                    *base.add(16).cast::<u8>() = (11i32) as u8;
                                                    *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                }
                                                V54::StringValue(e) => {
                                                    *base.add(16).cast::<u8>() = (12i32) as u8;
                                                    let vec36 = e;
                                                    let ptr36 = vec36.as_ptr().cast::<u8>();
                                                    let len36 = vec36.len();
                                                    *base.add(28).cast::<usize>() = len36;
                                                    *base.add(24).cast::<*mut u8>() = ptr36.cast_mut();
                                                }
                                                V54::Bytes(e) => {
                                                    *base.add(16).cast::<u8>() = (13i32) as u8;
                                                    let vec37 = e;
                                                    let ptr37 = vec37.as_ptr().cast::<u8>();
                                                    let len37 = vec37.len();
                                                    *base.add(28).cast::<usize>() = len37;
                                                    *base.add(24).cast::<*mut u8>() = ptr37.cast_mut();
                                                }
                                                V54::Date(e) => {
                                                    *base.add(16).cast::<u8>() = (14i32) as u8;
                                                    let super::super::super::golem::graph::types::Date {
                                                        year: year38,
                                                        month: month38,
                                                        day: day38,
                                                    } = e;
                                                    *base.add(24).cast::<i32>() = _rt::as_i32(year38);
                                                    *base.add(28).cast::<u8>() = (_rt::as_i32(month38)) as u8;
                                                    *base.add(29).cast::<u8>() = (_rt::as_i32(day38)) as u8;
                                                }
                                                V54::Time(e) => {
                                                    *base.add(16).cast::<u8>() = (15i32) as u8;
                                                    let super::super::super::golem::graph::types::Time {
                                                        hour: hour39,
                                                        minute: minute39,
                                                        second: second39,
                                                        nanosecond: nanosecond39,
                                                    } = e;
                                                    *base.add(24).cast::<u8>() = (_rt::as_i32(hour39)) as u8;
                                                    *base.add(25).cast::<u8>() = (_rt::as_i32(minute39)) as u8;
                                                    *base.add(26).cast::<u8>() = (_rt::as_i32(second39)) as u8;
                                                    *base.add(28).cast::<i32>() = _rt::as_i32(nanosecond39);
                                                }
                                                V54::Datetime(e) => {
                                                    *base.add(16).cast::<u8>() = (16i32) as u8;
                                                    let super::super::super::golem::graph::types::Datetime {
                                                        date: date40,
                                                        time: time40,
                                                        timezone_offset_minutes: timezone_offset_minutes40,
                                                    } = e;
                                                    let super::super::super::golem::graph::types::Date {
                                                        year: year41,
                                                        month: month41,
                                                        day: day41,
                                                    } = date40;
                                                    *base.add(24).cast::<i32>() = _rt::as_i32(year41);
                                                    *base.add(28).cast::<u8>() = (_rt::as_i32(month41)) as u8;
                                                    *base.add(29).cast::<u8>() = (_rt::as_i32(day41)) as u8;
                                                    let super::super::super::golem::graph::types::Time {
                                                        hour: hour42,
                                                        minute: minute42,
                                                        second: second42,
                                                        nanosecond: nanosecond42,
                                                    } = time40;
                                                    *base.add(32).cast::<u8>() = (_rt::as_i32(hour42)) as u8;
                                                    *base.add(33).cast::<u8>() = (_rt::as_i32(minute42)) as u8;
                                                    *base.add(34).cast::<u8>() = (_rt::as_i32(second42)) as u8;
                                                    *base.add(36).cast::<i32>() = _rt::as_i32(nanosecond42);
                                                    match timezone_offset_minutes40 {
                                                        Some(e) => {
                                                            *base.add(40).cast::<u8>() = (1i32) as u8;
                                                            *base.add(42).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                                        }
                                                        None => {
                                                            *base.add(40).cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                                V54::Duration(e) => {
                                                    *base.add(16).cast::<u8>() = (17i32) as u8;
                                                    let super::super::super::golem::graph::types::Duration {
                                                        seconds: seconds43,
                                                        nanoseconds: nanoseconds43,
                                                    } = e;
                                                    *base.add(24).cast::<i64>() = _rt::as_i64(seconds43);
                                                    *base.add(32).cast::<i32>() = _rt::as_i32(nanoseconds43);
                                                }
                                                V54::Point(e) => {
                                                    *base.add(16).cast::<u8>() = (18i32) as u8;
                                                    let super::super::super::golem::graph::types::Point {
                                                        longitude: longitude44,
                                                        latitude: latitude44,
                                                        altitude: altitude44,
                                                    } = e;
                                                    *base.add(24).cast::<f64>() = _rt::as_f64(longitude44);
                                                    *base.add(32).cast::<f64>() = _rt::as_f64(latitude44);
                                                    match altitude44 {
                                                        Some(e) => {
                                                            *base.add(40).cast::<u8>() = (1i32) as u8;
                                                            *base.add(48).cast::<f64>() = _rt::as_f64(e);
                                                        }
                                                        None => {
                                                            *base.add(40).cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                                V54::Linestring(e) => {
                                                    *base.add(16).cast::<u8>() = (19i32) as u8;
                                                    let super::super::super::golem::graph::types::Linestring {
                                                        coordinates: coordinates45,
                                                    } = e;
                                                    let vec47 = coordinates45;
                                                    let len47 = vec47.len();
                                                    let layout47 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec47.len() * 32,
                                                        8,
                                                    );
                                                    let result47 = if layout47.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout47).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout47);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec47.into_iter().enumerate() {
                                                        let base = result47.add(i * 32);
                                                        {
                                                            let super::super::super::golem::graph::types::Point {
                                                                longitude: longitude46,
                                                                latitude: latitude46,
                                                                altitude: altitude46,
                                                            } = e;
                                                            *base.add(0).cast::<f64>() = _rt::as_f64(longitude46);
                                                            *base.add(8).cast::<f64>() = _rt::as_f64(latitude46);
                                                            match altitude46 {
                                                                Some(e) => {
                                                                    *base.add(16).cast::<u8>() = (1i32) as u8;
                                                                    *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                                }
                                                                None => {
                                                                    *base.add(16).cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                    }
                                                    *base.add(28).cast::<usize>() = len47;
                                                    *base.add(24).cast::<*mut u8>() = result47;
                                                    cleanup_list.extend_from_slice(&[(result47, layout47)]);
                                                }
                                                V54::Polygon(e) => {
                                                    *base.add(16).cast::<u8>() = (20i32) as u8;
                                                    let super::super::super::golem::graph::types::Polygon {
                                                        exterior: exterior48,
                                                        holes: holes48,
                                                    } = e;
                                                    let vec50 = exterior48;
                                                    let len50 = vec50.len();
                                                    let layout50 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec50.len() * 32,
                                                        8,
                                                    );
                                                    let result50 = if layout50.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout50).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout50);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec50.into_iter().enumerate() {
                                                        let base = result50.add(i * 32);
                                                        {
                                                            let super::super::super::golem::graph::types::Point {
                                                                longitude: longitude49,
                                                                latitude: latitude49,
                                                                altitude: altitude49,
                                                            } = e;
                                                            *base.add(0).cast::<f64>() = _rt::as_f64(longitude49);
                                                            *base.add(8).cast::<f64>() = _rt::as_f64(latitude49);
                                                            match altitude49 {
                                                                Some(e) => {
                                                                    *base.add(16).cast::<u8>() = (1i32) as u8;
                                                                    *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                                }
                                                                None => {
                                                                    *base.add(16).cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                    }
                                                    *base.add(28).cast::<usize>() = len50;
                                                    *base.add(24).cast::<*mut u8>() = result50;
                                                    match holes48 {
                                                        Some(e) => {
                                                            *base.add(32).cast::<u8>() = (1i32) as u8;
                                                            let vec53 = e;
                                                            let len53 = vec53.len();
                                                            let layout53 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec53.len() * 8,
                                                                4,
                                                            );
                                                            let result53 = if layout53.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout53).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout53);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec53.into_iter().enumerate() {
                                                                let base = result53.add(i * 8);
                                                                {
                                                                    let vec52 = e;
                                                                    let len52 = vec52.len();
                                                                    let layout52 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec52.len() * 32,
                                                                        8,
                                                                    );
                                                                    let result52 = if layout52.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout52).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout52);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec52.into_iter().enumerate() {
                                                                        let base = result52.add(i * 32);
                                                                        {
                                                                            let super::super::super::golem::graph::types::Point {
                                                                                longitude: longitude51,
                                                                                latitude: latitude51,
                                                                                altitude: altitude51,
                                                                            } = e;
                                                                            *base.add(0).cast::<f64>() = _rt::as_f64(longitude51);
                                                                            *base.add(8).cast::<f64>() = _rt::as_f64(latitude51);
                                                                            match altitude51 {
                                                                                Some(e) => {
                                                                                    *base.add(16).cast::<u8>() = (1i32) as u8;
                                                                                    *base.add(24).cast::<f64>() = _rt::as_f64(e);
                                                                                }
                                                                                None => {
                                                                                    *base.add(16).cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                        }
                                                                    }
                                                                    *base.add(4).cast::<usize>() = len52;
                                                                    *base.add(0).cast::<*mut u8>() = result52;
                                                                    cleanup_list.extend_from_slice(&[(result52, layout52)]);
                                                                }
                                                            }
                                                            *base.add(40).cast::<usize>() = len53;
                                                            *base.add(36).cast::<*mut u8>() = result53;
                                                            cleanup_list.extend_from_slice(&[(result53, layout53)]);
                                                        }
                                                        None => {
                                                            *base.add(32).cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    cleanup_list.extend_from_slice(&[(result50, layout50)]);
                                                }
                                            }
                                        }
                                    }
                                    *ptr0.add(96).cast::<usize>() = len55;
                                    *ptr0.add(92).cast::<*mut u8>() = result55;
                                    cleanup_list.extend_from_slice(&[(result55, layout55)]);
                                }
                                None => {
                                    *ptr0.add(88).cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        None => {
                            *ptr0.add(40).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    let ptr56 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:graph/traversal@1.0.0")]
                    extern "C" {
                        #[link_name = "path-exists"]
                        fn wit_import(_: *mut u8, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0, ptr56);
                    let l57 = i32::from(*ptr56.add(0).cast::<u8>());
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                    match l57 {
                        0 => {
                            let e = {
                                let l58 = i32::from(*ptr56.add(8).cast::<u8>());
                                _rt::bool_lift(l58 as u8)
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l59 = i32::from(*ptr56.add(8).cast::<u8>());
                                use super::super::super::golem::graph::errors::GraphError as V114;
                                let v114 = match l59 {
                                    0 => {
                                        let e114 = {
                                            let l60 = *ptr56.add(16).cast::<*mut u8>();
                                            let l61 = *ptr56.add(20).cast::<usize>();
                                            let len62 = l61;
                                            let bytes62 = _rt::Vec::from_raw_parts(
                                                l60.cast(),
                                                len62,
                                                len62,
                                            );
                                            _rt::string_lift(bytes62)
                                        };
                                        V114::UnsupportedOperation(e114)
                                    }
                                    1 => {
                                        let e114 = {
                                            let l63 = *ptr56.add(16).cast::<*mut u8>();
                                            let l64 = *ptr56.add(20).cast::<usize>();
                                            let len65 = l64;
                                            let bytes65 = _rt::Vec::from_raw_parts(
                                                l63.cast(),
                                                len65,
                                                len65,
                                            );
                                            _rt::string_lift(bytes65)
                                        };
                                        V114::ConnectionFailed(e114)
                                    }
                                    2 => {
                                        let e114 = {
                                            let l66 = *ptr56.add(16).cast::<*mut u8>();
                                            let l67 = *ptr56.add(20).cast::<usize>();
                                            let len68 = l67;
                                            let bytes68 = _rt::Vec::from_raw_parts(
                                                l66.cast(),
                                                len68,
                                                len68,
                                            );
                                            _rt::string_lift(bytes68)
                                        };
                                        V114::AuthenticationFailed(e114)
                                    }
                                    3 => {
                                        let e114 = {
                                            let l69 = *ptr56.add(16).cast::<*mut u8>();
                                            let l70 = *ptr56.add(20).cast::<usize>();
                                            let len71 = l70;
                                            let bytes71 = _rt::Vec::from_raw_parts(
                                                l69.cast(),
                                                len71,
                                                len71,
                                            );
                                            _rt::string_lift(bytes71)
                                        };
                                        V114::AuthorizationFailed(e114)
                                    }
                                    4 => {
                                        let e114 = {
                                            let l72 = i32::from(*ptr56.add(16).cast::<u8>());
                                            use super::super::super::golem::graph::types::ElementId as V80;
                                            let v80 = match l72 {
                                                0 => {
                                                    let e80 = {
                                                        let l73 = *ptr56.add(24).cast::<*mut u8>();
                                                        let l74 = *ptr56.add(28).cast::<usize>();
                                                        let len75 = l74;
                                                        let bytes75 = _rt::Vec::from_raw_parts(
                                                            l73.cast(),
                                                            len75,
                                                            len75,
                                                        );
                                                        _rt::string_lift(bytes75)
                                                    };
                                                    V80::StringValue(e80)
                                                }
                                                1 => {
                                                    let e80 = {
                                                        let l76 = *ptr56.add(24).cast::<i64>();
                                                        l76
                                                    };
                                                    V80::Int64(e80)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                    let e80 = {
                                                        let l77 = *ptr56.add(24).cast::<*mut u8>();
                                                        let l78 = *ptr56.add(28).cast::<usize>();
                                                        let len79 = l78;
                                                        let bytes79 = _rt::Vec::from_raw_parts(
                                                            l77.cast(),
                                                            len79,
                                                            len79,
                                                        );
                                                        _rt::string_lift(bytes79)
                                                    };
                                                    V80::Uuid(e80)
                                                }
                                            };
                                            v80
                                        };
                                        V114::ElementNotFound(e114)
                                    }
                                    5 => {
                                        let e114 = {
                                            let l81 = i32::from(*ptr56.add(16).cast::<u8>());
                                            use super::super::super::golem::graph::types::ElementId as V89;
                                            let v89 = match l81 {
                                                0 => {
                                                    let e89 = {
                                                        let l82 = *ptr56.add(24).cast::<*mut u8>();
                                                        let l83 = *ptr56.add(28).cast::<usize>();
                                                        let len84 = l83;
                                                        let bytes84 = _rt::Vec::from_raw_parts(
                                                            l82.cast(),
                                                            len84,
                                                            len84,
                                                        );
                                                        _rt::string_lift(bytes84)
                                                    };
                                                    V89::StringValue(e89)
                                                }
                                                1 => {
                                                    let e89 = {
                                                        let l85 = *ptr56.add(24).cast::<i64>();
                                                        l85
                                                    };
                                                    V89::Int64(e89)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                    let e89 = {
                                                        let l86 = *ptr56.add(24).cast::<*mut u8>();
                                                        let l87 = *ptr56.add(28).cast::<usize>();
                                                        let len88 = l87;
                                                        let bytes88 = _rt::Vec::from_raw_parts(
                                                            l86.cast(),
                                                            len88,
                                                            len88,
                                                        );
                                                        _rt::string_lift(bytes88)
                                                    };
                                                    V89::Uuid(e89)
                                                }
                                            };
                                            v89
                                        };
                                        V114::DuplicateElement(e114)
                                    }
                                    6 => {
                                        let e114 = {
                                            let l90 = *ptr56.add(16).cast::<*mut u8>();
                                            let l91 = *ptr56.add(20).cast::<usize>();
                                            let len92 = l91;
                                            let bytes92 = _rt::Vec::from_raw_parts(
                                                l90.cast(),
                                                len92,
                                                len92,
                                            );
                                            _rt::string_lift(bytes92)
                                        };
                                        V114::SchemaViolation(e114)
                                    }
                                    7 => {
                                        let e114 = {
                                            let l93 = *ptr56.add(16).cast::<*mut u8>();
                                            let l94 = *ptr56.add(20).cast::<usize>();
                                            let len95 = l94;
                                            let bytes95 = _rt::Vec::from_raw_parts(
                                                l93.cast(),
                                                len95,
                                                len95,
                                            );
                                            _rt::string_lift(bytes95)
                                        };
                                        V114::ConstraintViolation(e114)
                                    }
                                    8 => {
                                        let e114 = {
                                            let l96 = *ptr56.add(16).cast::<*mut u8>();
                                            let l97 = *ptr56.add(20).cast::<usize>();
                                            let len98 = l97;
                                            let bytes98 = _rt::Vec::from_raw_parts(
                                                l96.cast(),
                                                len98,
                                                len98,
                                            );
                                            _rt::string_lift(bytes98)
                                        };
                                        V114::InvalidPropertyType(e114)
                                    }
                                    9 => {
                                        let e114 = {
                                            let l99 = *ptr56.add(16).cast::<*mut u8>();
                                            let l100 = *ptr56.add(20).cast::<usize>();
                                            let len101 = l100;
                                            let bytes101 = _rt::Vec::from_raw_parts(
                                                l99.cast(),
                                                len101,
                                                len101,
                                            );
                                            _rt::string_lift(bytes101)
                                        };
                                        V114::InvalidQuery(e114)
                                    }
                                    10 => {
                                        let e114 = {
                                            let l102 = *ptr56.add(16).cast::<*mut u8>();
                                            let l103 = *ptr56.add(20).cast::<usize>();
                                            let len104 = l103;
                                            let bytes104 = _rt::Vec::from_raw_parts(
                                                l102.cast(),
                                                len104,
                                                len104,
                                            );
                                            _rt::string_lift(bytes104)
                                        };
                                        V114::TransactionFailed(e114)
                                    }
                                    11 => V114::TransactionConflict,
                                    12 => V114::TransactionTimeout,
                                    13 => V114::DeadlockDetected,
                                    14 => V114::Timeout,
                                    15 => {
                                        let e114 = {
                                            let l105 = *ptr56.add(16).cast::<*mut u8>();
                                            let l106 = *ptr56.add(20).cast::<usize>();
                                            let len107 = l106;
                                            let bytes107 = _rt::Vec::from_raw_parts(
                                                l105.cast(),
                                                len107,
                                                len107,
                                            );
                                            _rt::string_lift(bytes107)
                                        };
                                        V114::ResourceExhausted(e114)
                                    }
                                    16 => {
                                        let e114 = {
                                            let l108 = *ptr56.add(16).cast::<*mut u8>();
                                            let l109 = *ptr56.add(20).cast::<usize>();
                                            let len110 = l109;
                                            let bytes110 = _rt::Vec::from_raw_parts(
                                                l108.cast(),
                                                len110,
                                                len110,
                                            );
                                            _rt::string_lift(bytes110)
                                        };
                                        V114::InternalError(e114)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 17, "invalid enum discriminant");
                                        let e114 = {
                                            let l111 = *ptr56.add(16).cast::<*mut u8>();
                                            let l112 = *ptr56.add(20).cast::<usize>();
                                            let len113 = l112;
                                            let bytes113 = _rt::Vec::from_raw_parts(
                                                l111.cast(),
                                                len113,
                                                len113,
                                            );
                                            _rt::string_lift(bytes113)
                                        };
                                        V114::ServiceUnavailable(e114)
                                    }
                                };
                                v114
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Get vertices at specific distance from source
            pub fn get_vertices_at_distance(
                transaction: &Transaction,
                source: &ElementId,
                distance: u32,
                direction: Direction,
                edge_types: Option<&[_rt::String]>,
            ) -> Result<_rt::Vec<Vertex>, GraphError> {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 32]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 32]);
                    use super::super::super::golem::graph::types::ElementId as V2;
                    let (result3_0, result3_1, result3_2) = match source {
                        V2::StringValue(e) => {
                            let vec0 = e;
                            let ptr0 = vec0.as_ptr().cast::<u8>();
                            let len0 = vec0.len();
                            (
                                0i32,
                                {
                                    let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                    t.as_mut_ptr().cast::<*mut u8>().write(ptr0.cast_mut());
                                    t
                                },
                                len0,
                            )
                        }
                        V2::Int64(e) => {
                            (
                                1i32,
                                ::core::mem::MaybeUninit::new(_rt::as_i64(e) as u64),
                                0usize,
                            )
                        }
                        V2::Uuid(e) => {
                            let vec1 = e;
                            let ptr1 = vec1.as_ptr().cast::<u8>();
                            let len1 = vec1.len();
                            (
                                2i32,
                                {
                                    let mut t = ::core::mem::MaybeUninit::<u64>::uninit();
                                    t.as_mut_ptr().cast::<*mut u8>().write(ptr1.cast_mut());
                                    t
                                },
                                len1,
                            )
                        }
                    };
                    let (result6_0, result6_1, result6_2) = match edge_types {
                        Some(e) => {
                            let vec5 = e;
                            let len5 = vec5.len();
                            let layout5 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec5.len() * 8,
                                4,
                            );
                            let result5 = if layout5.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout5).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout5);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec5.into_iter().enumerate() {
                                let base = result5.add(i * 8);
                                {
                                    let vec4 = e;
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    *base.add(4).cast::<usize>() = len4;
                                    *base.add(0).cast::<*mut u8>() = ptr4.cast_mut();
                                }
                            }
                            cleanup_list.extend_from_slice(&[(result5, layout5)]);
                            (1i32, result5, len5)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let ptr7 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:graph/traversal@1.0.0")]
                    extern "C" {
                        #[link_name = "get-vertices-at-distance"]
                        fn wit_import(
                            _: i32,
                            _: i32,
                            _: ::core::mem::MaybeUninit<u64>,
                            _: usize,
                            _: i32,
                            _: i32,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(
                        _: i32,
                        _: i32,
                        _: ::core::mem::MaybeUninit<u64>,
                        _: usize,
                        _: i32,
                        _: i32,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    wit_import(
                        (transaction).handle() as i32,
                        result3_0,
                        result3_1,
                        result3_2,
                        _rt::as_i32(&distance),
                        direction.clone() as i32,
                        result6_0,
                        result6_1,
                        result6_2,
                        ptr7,
                    );
                    let l8 = i32::from(*ptr7.add(0).cast::<u8>());
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                    match l8 {
                        0 => {
                            let e = {
                                let l9 = *ptr7.add(8).cast::<*mut u8>();
                                let l10 = *ptr7.add(12).cast::<usize>();
                                let base101 = l9;
                                let len101 = l10;
                                let mut result101 = _rt::Vec::with_capacity(len101);
                                for i in 0..len101 {
                                    let base = base101.add(i * 40);
                                    let e101 = {
                                        let l11 = i32::from(*base.add(0).cast::<u8>());
                                        use super::super::super::golem::graph::types::ElementId as V19;
                                        let v19 = match l11 {
                                            0 => {
                                                let e19 = {
                                                    let l12 = *base.add(8).cast::<*mut u8>();
                                                    let l13 = *base.add(12).cast::<usize>();
                                                    let len14 = l13;
                                                    let bytes14 = _rt::Vec::from_raw_parts(
                                                        l12.cast(),
                                                        len14,
                                                        len14,
                                                    );
                                                    _rt::string_lift(bytes14)
                                                };
                                                V19::StringValue(e19)
                                            }
                                            1 => {
                                                let e19 = {
                                                    let l15 = *base.add(8).cast::<i64>();
                                                    l15
                                                };
                                                V19::Int64(e19)
                                            }
                                            n => {
                                                debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                let e19 = {
                                                    let l16 = *base.add(8).cast::<*mut u8>();
                                                    let l17 = *base.add(12).cast::<usize>();
                                                    let len18 = l17;
                                                    let bytes18 = _rt::Vec::from_raw_parts(
                                                        l16.cast(),
                                                        len18,
                                                        len18,
                                                    );
                                                    _rt::string_lift(bytes18)
                                                };
                                                V19::Uuid(e19)
                                            }
                                        };
                                        let l20 = *base.add(16).cast::<*mut u8>();
                                        let l21 = *base.add(20).cast::<usize>();
                                        let len22 = l21;
                                        let bytes22 = _rt::Vec::from_raw_parts(
                                            l20.cast(),
                                            len22,
                                            len22,
                                        );
                                        let l23 = *base.add(24).cast::<*mut u8>();
                                        let l24 = *base.add(28).cast::<usize>();
                                        let base28 = l23;
                                        let len28 = l24;
                                        let mut result28 = _rt::Vec::with_capacity(len28);
                                        for i in 0..len28 {
                                            let base = base28.add(i * 8);
                                            let e28 = {
                                                let l25 = *base.add(0).cast::<*mut u8>();
                                                let l26 = *base.add(4).cast::<usize>();
                                                let len27 = l26;
                                                let bytes27 = _rt::Vec::from_raw_parts(
                                                    l25.cast(),
                                                    len27,
                                                    len27,
                                                );
                                                _rt::string_lift(bytes27)
                                            };
                                            result28.push(e28);
                                        }
                                        _rt::cabi_dealloc(base28, len28 * 8, 4);
                                        let l29 = *base.add(32).cast::<*mut u8>();
                                        let l30 = *base.add(36).cast::<usize>();
                                        let base100 = l29;
                                        let len100 = l30;
                                        let mut result100 = _rt::Vec::with_capacity(len100);
                                        for i in 0..len100 {
                                            let base = base100.add(i * 48);
                                            let e100 = {
                                                let l31 = *base.add(0).cast::<*mut u8>();
                                                let l32 = *base.add(4).cast::<usize>();
                                                let len33 = l32;
                                                let bytes33 = _rt::Vec::from_raw_parts(
                                                    l31.cast(),
                                                    len33,
                                                    len33,
                                                );
                                                let l34 = i32::from(*base.add(8).cast::<u8>());
                                                use super::super::super::golem::graph::types::PropertyValue as V99;
                                                let v99 = match l34 {
                                                    0 => V99::NullValue,
                                                    1 => {
                                                        let e99 = {
                                                            let l35 = i32::from(*base.add(16).cast::<u8>());
                                                            _rt::bool_lift(l35 as u8)
                                                        };
                                                        V99::Boolean(e99)
                                                    }
                                                    2 => {
                                                        let e99 = {
                                                            let l36 = i32::from(*base.add(16).cast::<i8>());
                                                            l36 as i8
                                                        };
                                                        V99::Int8(e99)
                                                    }
                                                    3 => {
                                                        let e99 = {
                                                            let l37 = i32::from(*base.add(16).cast::<i16>());
                                                            l37 as i16
                                                        };
                                                        V99::Int16(e99)
                                                    }
                                                    4 => {
                                                        let e99 = {
                                                            let l38 = *base.add(16).cast::<i32>();
                                                            l38
                                                        };
                                                        V99::Int32(e99)
                                                    }
                                                    5 => {
                                                        let e99 = {
                                                            let l39 = *base.add(16).cast::<i64>();
                                                            l39
                                                        };
                                                        V99::Int64(e99)
                                                    }
                                                    6 => {
                                                        let e99 = {
                                                            let l40 = i32::from(*base.add(16).cast::<u8>());
                                                            l40 as u8
                                                        };
                                                        V99::Uint8(e99)
                                                    }
                                                    7 => {
                                                        let e99 = {
                                                            let l41 = i32::from(*base.add(16).cast::<u16>());
                                                            l41 as u16
                                                        };
                                                        V99::Uint16(e99)
                                                    }
                                                    8 => {
                                                        let e99 = {
                                                            let l42 = *base.add(16).cast::<i32>();
                                                            l42 as u32
                                                        };
                                                        V99::Uint32(e99)
                                                    }
                                                    9 => {
                                                        let e99 = {
                                                            let l43 = *base.add(16).cast::<i64>();
                                                            l43 as u64
                                                        };
                                                        V99::Uint64(e99)
                                                    }
                                                    10 => {
                                                        let e99 = {
                                                            let l44 = *base.add(16).cast::<f32>();
                                                            l44
                                                        };
                                                        V99::Float32Value(e99)
                                                    }
                                                    11 => {
                                                        let e99 = {
                                                            let l45 = *base.add(16).cast::<f64>();
                                                            l45
                                                        };
                                                        V99::Float64Value(e99)
                                                    }
                                                    12 => {
                                                        let e99 = {
                                                            let l46 = *base.add(16).cast::<*mut u8>();
                                                            let l47 = *base.add(20).cast::<usize>();
                                                            let len48 = l47;
                                                            let bytes48 = _rt::Vec::from_raw_parts(
                                                                l46.cast(),
                                                                len48,
                                                                len48,
                                                            );
                                                            _rt::string_lift(bytes48)
                                                        };
                                                        V99::StringValue(e99)
                                                    }
                                                    13 => {
                                                        let e99 = {
                                                            let l49 = *base.add(16).cast::<*mut u8>();
                                                            let l50 = *base.add(20).cast::<usize>();
                                                            let len51 = l50;
                                                            _rt::Vec::from_raw_parts(l49.cast(), len51, len51)
                                                        };
                                                        V99::Bytes(e99)
                                                    }
                                                    14 => {
                                                        let e99 = {
                                                            let l52 = *base.add(16).cast::<i32>();
                                                            let l53 = i32::from(*base.add(20).cast::<u8>());
                                                            let l54 = i32::from(*base.add(21).cast::<u8>());
                                                            super::super::super::golem::graph::types::Date {
                                                                year: l52 as u32,
                                                                month: l53 as u8,
                                                                day: l54 as u8,
                                                            }
                                                        };
                                                        V99::Date(e99)
                                                    }
                                                    15 => {
                                                        let e99 = {
                                                            let l55 = i32::from(*base.add(16).cast::<u8>());
                                                            let l56 = i32::from(*base.add(17).cast::<u8>());
                                                            let l57 = i32::from(*base.add(18).cast::<u8>());
                                                            let l58 = *base.add(20).cast::<i32>();
                                                            super::super::super::golem::graph::types::Time {
                                                                hour: l55 as u8,
                                                                minute: l56 as u8,
                                                                second: l57 as u8,
                                                                nanosecond: l58 as u32,
                                                            }
                                                        };
                                                        V99::Time(e99)
                                                    }
                                                    16 => {
                                                        let e99 = {
                                                            let l59 = *base.add(16).cast::<i32>();
                                                            let l60 = i32::from(*base.add(20).cast::<u8>());
                                                            let l61 = i32::from(*base.add(21).cast::<u8>());
                                                            let l62 = i32::from(*base.add(24).cast::<u8>());
                                                            let l63 = i32::from(*base.add(25).cast::<u8>());
                                                            let l64 = i32::from(*base.add(26).cast::<u8>());
                                                            let l65 = *base.add(28).cast::<i32>();
                                                            let l66 = i32::from(*base.add(32).cast::<u8>());
                                                            super::super::super::golem::graph::types::Datetime {
                                                                date: super::super::super::golem::graph::types::Date {
                                                                    year: l59 as u32,
                                                                    month: l60 as u8,
                                                                    day: l61 as u8,
                                                                },
                                                                time: super::super::super::golem::graph::types::Time {
                                                                    hour: l62 as u8,
                                                                    minute: l63 as u8,
                                                                    second: l64 as u8,
                                                                    nanosecond: l65 as u32,
                                                                },
                                                                timezone_offset_minutes: match l66 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l67 = i32::from(*base.add(34).cast::<i16>());
                                                                            l67 as i16
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                            }
                                                        };
                                                        V99::Datetime(e99)
                                                    }
                                                    17 => {
                                                        let e99 = {
                                                            let l68 = *base.add(16).cast::<i64>();
                                                            let l69 = *base.add(24).cast::<i32>();
                                                            super::super::super::golem::graph::types::Duration {
                                                                seconds: l68,
                                                                nanoseconds: l69 as u32,
                                                            }
                                                        };
                                                        V99::Duration(e99)
                                                    }
                                                    18 => {
                                                        let e99 = {
                                                            let l70 = *base.add(16).cast::<f64>();
                                                            let l71 = *base.add(24).cast::<f64>();
                                                            let l72 = i32::from(*base.add(32).cast::<u8>());
                                                            super::super::super::golem::graph::types::Point {
                                                                longitude: l70,
                                                                latitude: l71,
                                                                altitude: match l72 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l73 = *base.add(40).cast::<f64>();
                                                                            l73
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                            }
                                                        };
                                                        V99::Point(e99)
                                                    }
                                                    19 => {
                                                        let e99 = {
                                                            let l74 = *base.add(16).cast::<*mut u8>();
                                                            let l75 = *base.add(20).cast::<usize>();
                                                            let base80 = l74;
                                                            let len80 = l75;
                                                            let mut result80 = _rt::Vec::with_capacity(len80);
                                                            for i in 0..len80 {
                                                                let base = base80.add(i * 32);
                                                                let e80 = {
                                                                    let l76 = *base.add(0).cast::<f64>();
                                                                    let l77 = *base.add(8).cast::<f64>();
                                                                    let l78 = i32::from(*base.add(16).cast::<u8>());
                                                                    super::super::super::golem::graph::types::Point {
                                                                        longitude: l76,
                                                                        latitude: l77,
                                                                        altitude: match l78 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l79 = *base.add(24).cast::<f64>();
                                                                                    l79
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                result80.push(e80);
                                                            }
                                                            _rt::cabi_dealloc(base80, len80 * 32, 8);
                                                            super::super::super::golem::graph::types::Linestring {
                                                                coordinates: result80,
                                                            }
                                                        };
                                                        V99::Linestring(e99)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 20, "invalid enum discriminant");
                                                        let e99 = {
                                                            let l81 = *base.add(16).cast::<*mut u8>();
                                                            let l82 = *base.add(20).cast::<usize>();
                                                            let base87 = l81;
                                                            let len87 = l82;
                                                            let mut result87 = _rt::Vec::with_capacity(len87);
                                                            for i in 0..len87 {
                                                                let base = base87.add(i * 32);
                                                                let e87 = {
                                                                    let l83 = *base.add(0).cast::<f64>();
                                                                    let l84 = *base.add(8).cast::<f64>();
                                                                    let l85 = i32::from(*base.add(16).cast::<u8>());
                                                                    super::super::super::golem::graph::types::Point {
                                                                        longitude: l83,
                                                                        latitude: l84,
                                                                        altitude: match l85 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l86 = *base.add(24).cast::<f64>();
                                                                                    l86
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    }
                                                                };
                                                                result87.push(e87);
                                                            }
                                                            _rt::cabi_dealloc(base87, len87 * 32, 8);
                                                            let l88 = i32::from(*base.add(24).cast::<u8>());
                                                            super::super::super::golem::graph::types::Polygon {
                                                                exterior: result87,
                                                                holes: match l88 {
                                                                    0 => None,
                                                                    1 => {
                                                                        let e = {
                                                                            let l89 = *base.add(28).cast::<*mut u8>();
                                                                            let l90 = *base.add(32).cast::<usize>();
                                                                            let base98 = l89;
                                                                            let len98 = l90;
                                                                            let mut result98 = _rt::Vec::with_capacity(len98);
                                                                            for i in 0..len98 {
                                                                                let base = base98.add(i * 8);
                                                                                let e98 = {
                                                                                    let l91 = *base.add(0).cast::<*mut u8>();
                                                                                    let l92 = *base.add(4).cast::<usize>();
                                                                                    let base97 = l91;
                                                                                    let len97 = l92;
                                                                                    let mut result97 = _rt::Vec::with_capacity(len97);
                                                                                    for i in 0..len97 {
                                                                                        let base = base97.add(i * 32);
                                                                                        let e97 = {
                                                                                            let l93 = *base.add(0).cast::<f64>();
                                                                                            let l94 = *base.add(8).cast::<f64>();
                                                                                            let l95 = i32::from(*base.add(16).cast::<u8>());
                                                                                            super::super::super::golem::graph::types::Point {
                                                                                                longitude: l93,
                                                                                                latitude: l94,
                                                                                                altitude: match l95 {
                                                                                                    0 => None,
                                                                                                    1 => {
                                                                                                        let e = {
                                                                                                            let l96 = *base.add(24).cast::<f64>();
                                                                                                            l96
                                                                                                        };
                                                                                                        Some(e)
                                                                                                    }
                                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                                },
                                                                                            }
                                                                                        };
                                                                                        result97.push(e97);
                                                                                    }
                                                                                    _rt::cabi_dealloc(base97, len97 * 32, 8);
                                                                                    result97
                                                                                };
                                                                                result98.push(e98);
                                                                            }
                                                                            _rt::cabi_dealloc(base98, len98 * 8, 4);
                                                                            result98
                                                                        };
                                                                        Some(e)
                                                                    }
                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                },
                                                            }
                                                        };
                                                        V99::Polygon(e99)
                                                    }
                                                };
                                                (_rt::string_lift(bytes33), v99)
                                            };
                                            result100.push(e100);
                                        }
                                        _rt::cabi_dealloc(base100, len100 * 48, 8);
                                        super::super::super::golem::graph::types::Vertex {
                                            id: v19,
                                            vertex_type: _rt::string_lift(bytes22),
                                            additional_labels: result28,
                                            properties: result100,
                                        }
                                    };
                                    result101.push(e101);
                                }
                                _rt::cabi_dealloc(base101, len101 * 40, 8);
                                result101
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l102 = i32::from(*ptr7.add(8).cast::<u8>());
                                use super::super::super::golem::graph::errors::GraphError as V157;
                                let v157 = match l102 {
                                    0 => {
                                        let e157 = {
                                            let l103 = *ptr7.add(16).cast::<*mut u8>();
                                            let l104 = *ptr7.add(20).cast::<usize>();
                                            let len105 = l104;
                                            let bytes105 = _rt::Vec::from_raw_parts(
                                                l103.cast(),
                                                len105,
                                                len105,
                                            );
                                            _rt::string_lift(bytes105)
                                        };
                                        V157::UnsupportedOperation(e157)
                                    }
                                    1 => {
                                        let e157 = {
                                            let l106 = *ptr7.add(16).cast::<*mut u8>();
                                            let l107 = *ptr7.add(20).cast::<usize>();
                                            let len108 = l107;
                                            let bytes108 = _rt::Vec::from_raw_parts(
                                                l106.cast(),
                                                len108,
                                                len108,
                                            );
                                            _rt::string_lift(bytes108)
                                        };
                                        V157::ConnectionFailed(e157)
                                    }
                                    2 => {
                                        let e157 = {
                                            let l109 = *ptr7.add(16).cast::<*mut u8>();
                                            let l110 = *ptr7.add(20).cast::<usize>();
                                            let len111 = l110;
                                            let bytes111 = _rt::Vec::from_raw_parts(
                                                l109.cast(),
                                                len111,
                                                len111,
                                            );
                                            _rt::string_lift(bytes111)
                                        };
                                        V157::AuthenticationFailed(e157)
                                    }
                                    3 => {
                                        let e157 = {
                                            let l112 = *ptr7.add(16).cast::<*mut u8>();
                                            let l113 = *ptr7.add(20).cast::<usize>();
                                            let len114 = l113;
                                            let bytes114 = _rt::Vec::from_raw_parts(
                                                l112.cast(),
                                                len114,
                                                len114,
                                            );
                                            _rt::string_lift(bytes114)
                                        };
                                        V157::AuthorizationFailed(e157)
                                    }
                                    4 => {
                                        let e157 = {
                                            let l115 = i32::from(*ptr7.add(16).cast::<u8>());
                                            use super::super::super::golem::graph::types::ElementId as V123;
                                            let v123 = match l115 {
                                                0 => {
                                                    let e123 = {
                                                        let l116 = *ptr7.add(24).cast::<*mut u8>();
                                                        let l117 = *ptr7.add(28).cast::<usize>();
                                                        let len118 = l117;
                                                        let bytes118 = _rt::Vec::from_raw_parts(
                                                            l116.cast(),
                                                            len118,
                                                            len118,
                                                        );
                                                        _rt::string_lift(bytes118)
                                                    };
                                                    V123::StringValue(e123)
                                                }
                                                1 => {
                                                    let e123 = {
                                                        let l119 = *ptr7.add(24).cast::<i64>();
                                                        l119
                                                    };
                                                    V123::Int64(e123)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                    let e123 = {
                                                        let l120 = *ptr7.add(24).cast::<*mut u8>();
                                                        let l121 = *ptr7.add(28).cast::<usize>();
                                                        let len122 = l121;
                                                        let bytes122 = _rt::Vec::from_raw_parts(
                                                            l120.cast(),
                                                            len122,
                                                            len122,
                                                        );
                                                        _rt::string_lift(bytes122)
                                                    };
                                                    V123::Uuid(e123)
                                                }
                                            };
                                            v123
                                        };
                                        V157::ElementNotFound(e157)
                                    }
                                    5 => {
                                        let e157 = {
                                            let l124 = i32::from(*ptr7.add(16).cast::<u8>());
                                            use super::super::super::golem::graph::types::ElementId as V132;
                                            let v132 = match l124 {
                                                0 => {
                                                    let e132 = {
                                                        let l125 = *ptr7.add(24).cast::<*mut u8>();
                                                        let l126 = *ptr7.add(28).cast::<usize>();
                                                        let len127 = l126;
                                                        let bytes127 = _rt::Vec::from_raw_parts(
                                                            l125.cast(),
                                                            len127,
                                                            len127,
                                                        );
                                                        _rt::string_lift(bytes127)
                                                    };
                                                    V132::StringValue(e132)
                                                }
                                                1 => {
                                                    let e132 = {
                                                        let l128 = *ptr7.add(24).cast::<i64>();
                                                        l128
                                                    };
                                                    V132::Int64(e132)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                    let e132 = {
                                                        let l129 = *ptr7.add(24).cast::<*mut u8>();
                                                        let l130 = *ptr7.add(28).cast::<usize>();
                                                        let len131 = l130;
                                                        let bytes131 = _rt::Vec::from_raw_parts(
                                                            l129.cast(),
                                                            len131,
                                                            len131,
                                                        );
                                                        _rt::string_lift(bytes131)
                                                    };
                                                    V132::Uuid(e132)
                                                }
                                            };
                                            v132
                                        };
                                        V157::DuplicateElement(e157)
                                    }
                                    6 => {
                                        let e157 = {
                                            let l133 = *ptr7.add(16).cast::<*mut u8>();
                                            let l134 = *ptr7.add(20).cast::<usize>();
                                            let len135 = l134;
                                            let bytes135 = _rt::Vec::from_raw_parts(
                                                l133.cast(),
                                                len135,
                                                len135,
                                            );
                                            _rt::string_lift(bytes135)
                                        };
                                        V157::SchemaViolation(e157)
                                    }
                                    7 => {
                                        let e157 = {
                                            let l136 = *ptr7.add(16).cast::<*mut u8>();
                                            let l137 = *ptr7.add(20).cast::<usize>();
                                            let len138 = l137;
                                            let bytes138 = _rt::Vec::from_raw_parts(
                                                l136.cast(),
                                                len138,
                                                len138,
                                            );
                                            _rt::string_lift(bytes138)
                                        };
                                        V157::ConstraintViolation(e157)
                                    }
                                    8 => {
                                        let e157 = {
                                            let l139 = *ptr7.add(16).cast::<*mut u8>();
                                            let l140 = *ptr7.add(20).cast::<usize>();
                                            let len141 = l140;
                                            let bytes141 = _rt::Vec::from_raw_parts(
                                                l139.cast(),
                                                len141,
                                                len141,
                                            );
                                            _rt::string_lift(bytes141)
                                        };
                                        V157::InvalidPropertyType(e157)
                                    }
                                    9 => {
                                        let e157 = {
                                            let l142 = *ptr7.add(16).cast::<*mut u8>();
                                            let l143 = *ptr7.add(20).cast::<usize>();
                                            let len144 = l143;
                                            let bytes144 = _rt::Vec::from_raw_parts(
                                                l142.cast(),
                                                len144,
                                                len144,
                                            );
                                            _rt::string_lift(bytes144)
                                        };
                                        V157::InvalidQuery(e157)
                                    }
                                    10 => {
                                        let e157 = {
                                            let l145 = *ptr7.add(16).cast::<*mut u8>();
                                            let l146 = *ptr7.add(20).cast::<usize>();
                                            let len147 = l146;
                                            let bytes147 = _rt::Vec::from_raw_parts(
                                                l145.cast(),
                                                len147,
                                                len147,
                                            );
                                            _rt::string_lift(bytes147)
                                        };
                                        V157::TransactionFailed(e157)
                                    }
                                    11 => V157::TransactionConflict,
                                    12 => V157::TransactionTimeout,
                                    13 => V157::DeadlockDetected,
                                    14 => V157::Timeout,
                                    15 => {
                                        let e157 = {
                                            let l148 = *ptr7.add(16).cast::<*mut u8>();
                                            let l149 = *ptr7.add(20).cast::<usize>();
                                            let len150 = l149;
                                            let bytes150 = _rt::Vec::from_raw_parts(
                                                l148.cast(),
                                                len150,
                                                len150,
                                            );
                                            _rt::string_lift(bytes150)
                                        };
                                        V157::ResourceExhausted(e157)
                                    }
                                    16 => {
                                        let e157 = {
                                            let l151 = *ptr7.add(16).cast::<*mut u8>();
                                            let l152 = *ptr7.add(20).cast::<usize>();
                                            let len153 = l152;
                                            let bytes153 = _rt::Vec::from_raw_parts(
                                                l151.cast(),
                                                len153,
                                                len153,
                                            );
                                            _rt::string_lift(bytes153)
                                        };
                                        V157::InternalError(e157)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 17, "invalid enum discriminant");
                                        let e157 = {
                                            let l154 = *ptr7.add(16).cast::<*mut u8>();
                                            let l155 = *ptr7.add(20).cast::<usize>();
                                            let len156 = l155;
                                            let bytes156 = _rt::Vec::from_raw_parts(
                                                l154.cast(),
                                                len156,
                                                len156,
                                            );
                                            _rt::string_lift(bytes156)
                                        };
                                        V157::ServiceUnavailable(e157)
                                    }
                                };
                                v157
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    }
                }
            }
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod test {
    pub mod helper_client {
        #[allow(dead_code, clippy::all)]
        pub mod test_helper_client {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type WasiIoPollable = super::super::super::__with_name0::Pollable;
            pub type WasiClocksDatetime = super::super::super::__with_name1::Datetime;
            pub type GolemRpcWorkerId = super::super::super::__with_name2::WorkerId;
            pub type GolemRpcCancellationToken = super::super::super::__with_name2::CancellationToken;
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct FutureIncAndGetResult {
                handle: _rt::Resource<FutureIncAndGetResult>,
            }
            impl FutureIncAndGetResult {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for FutureIncAndGetResult {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(
                            wasm_import_module = "test:helper-client/test-helper-client"
                        )]
                        extern "C" {
                            #[link_name = "[resource-drop]future-inc-and-get-result"]
                            fn drop(_: u32);
                        }
                        drop(_handle);
                    }
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct TestHelperApi {
                handle: _rt::Resource<TestHelperApi>,
            }
            impl TestHelperApi {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for TestHelperApi {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(
                            wasm_import_module = "test:helper-client/test-helper-client"
                        )]
                        extern "C" {
                            #[link_name = "[resource-drop]test-helper-api"]
                            fn drop(_: u32);
                        }
                        drop(_handle);
                    }
                }
            }
            impl FutureIncAndGetResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn subscribe(&self) -> WasiIoPollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "test:helper-client/test-helper-client"
                        )]
                        extern "C" {
                            #[link_name = "[method]future-inc-and-get-result.subscribe"]
                            fn wit_import(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        super::super::super::__with_name0::Pollable::from_handle(
                            ret as u32,
                        )
                    }
                }
            }
            impl FutureIncAndGetResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get(&self) -> Option<u64> {
                    unsafe {
                        #[repr(align(8))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 16],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "test:helper-client/test-helper-client"
                        )]
                        extern "C" {
                            #[link_name = "[method]future-inc-and-get-result.get"]
                            fn wit_import(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l2 = *ptr0.add(8).cast::<i64>();
                                    l2 as u64
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl TestHelperApi {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(worker_name: &str) -> Self {
                    unsafe {
                        let vec0 = worker_name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "test:helper-client/test-helper-client"
                        )]
                        extern "C" {
                            #[link_name = "[constructor]test-helper-api"]
                            fn wit_import(_: *mut u8, _: usize) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: *mut u8, _: usize) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(ptr0.cast_mut(), len0);
                        TestHelperApi::from_handle(ret as u32)
                    }
                }
            }
            impl TestHelperApi {
                #[allow(unused_unsafe, clippy::all)]
                pub fn custom(worker_id: &GolemRpcWorkerId) -> TestHelperApi {
                    unsafe {
                        let super::super::super::__with_name2::WorkerId {
                            component_id: component_id0,
                            worker_name: worker_name0,
                        } = worker_id;
                        let super::super::super::__with_name2::ComponentId {
                            uuid: uuid1,
                        } = component_id0;
                        let super::super::super::__with_name2::Uuid {
                            high_bits: high_bits2,
                            low_bits: low_bits2,
                        } = uuid1;
                        let vec3 = worker_name0;
                        let ptr3 = vec3.as_ptr().cast::<u8>();
                        let len3 = vec3.len();
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "test:helper-client/test-helper-client"
                        )]
                        extern "C" {
                            #[link_name = "[static]test-helper-api.custom"]
                            fn wit_import(_: i64, _: i64, _: *mut u8, _: usize) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i64, _: i64, _: *mut u8, _: usize) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            _rt::as_i64(high_bits2),
                            _rt::as_i64(low_bits2),
                            ptr3.cast_mut(),
                            len3,
                        );
                        TestHelperApi::from_handle(ret as u32)
                    }
                }
            }
            impl TestHelperApi {
                #[allow(unused_unsafe, clippy::all)]
                pub fn blocking_inc_and_get(&self) -> u64 {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "test:helper-client/test-helper-client"
                        )]
                        extern "C" {
                            #[link_name = "[method]test-helper-api.blocking-inc-and-get"]
                            fn wit_import(_: i32) -> i64;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i64 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        ret as u64
                    }
                }
            }
            impl TestHelperApi {
                #[allow(unused_unsafe, clippy::all)]
                pub fn inc_and_get(&self) -> FutureIncAndGetResult {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "test:helper-client/test-helper-client"
                        )]
                        extern "C" {
                            #[link_name = "[method]test-helper-api.inc-and-get"]
                            fn wit_import(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        FutureIncAndGetResult::from_handle(ret as u32)
                    }
                }
            }
            impl TestHelperApi {
                #[allow(unused_unsafe, clippy::all)]
                pub fn schedule_inc_and_get(
                    &self,
                    scheduled_for: WasiClocksDatetime,
                ) -> GolemRpcCancellationToken {
                    unsafe {
                        let super::super::super::__with_name1::Datetime {
                            seconds: seconds0,
                            nanoseconds: nanoseconds0,
                        } = scheduled_for;
                        #[cfg(target_arch = "wasm32")]
                        #[link(
                            wasm_import_module = "test:helper-client/test-helper-client"
                        )]
                        extern "C" {
                            #[link_name = "[method]test-helper-api.schedule-inc-and-get"]
                            fn wit_import(_: i32, _: i64, _: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i64, _: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import(
                            (self).handle() as i32,
                            _rt::as_i64(seconds0),
                            _rt::as_i32(nanoseconds0),
                        );
                        super::super::super::__with_name2::CancellationToken::from_handle(
                            ret as u32,
                        )
                    }
                }
            }
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod test {
        pub mod graph_exports {
            #[allow(dead_code, clippy::all)]
            pub mod test_graph_api {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_test1_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::test1();
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let vec2 = (result0.into_bytes()).into_boxed_slice();
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    ::core::mem::forget(vec2);
                    *ptr1.add(4).cast::<usize>() = len2;
                    *ptr1.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_test1<T: Guest>(arg0: *mut u8) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0.add(4).cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_test2_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::test2();
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let vec2 = (result0.into_bytes()).into_boxed_slice();
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    ::core::mem::forget(vec2);
                    *ptr1.add(4).cast::<usize>() = len2;
                    *ptr1.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_test2<T: Guest>(arg0: *mut u8) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0.add(4).cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_test3_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::test3();
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let vec2 = (result0.into_bytes()).into_boxed_slice();
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    ::core::mem::forget(vec2);
                    *ptr1.add(4).cast::<usize>() = len2;
                    *ptr1.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_test3<T: Guest>(arg0: *mut u8) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0.add(4).cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_test4_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::test4();
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let vec2 = (result0.into_bytes()).into_boxed_slice();
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    ::core::mem::forget(vec2);
                    *ptr1.add(4).cast::<usize>() = len2;
                    *ptr1.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_test4<T: Guest>(arg0: *mut u8) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0.add(4).cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_test5_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::test5();
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let vec2 = (result0.into_bytes()).into_boxed_slice();
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    ::core::mem::forget(vec2);
                    *ptr1.add(4).cast::<usize>() = len2;
                    *ptr1.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_test5<T: Guest>(arg0: *mut u8) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0.add(4).cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_test6_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::test6();
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let vec2 = (result0.into_bytes()).into_boxed_slice();
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    ::core::mem::forget(vec2);
                    *ptr1.add(4).cast::<usize>() = len2;
                    *ptr1.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_test6<T: Guest>(arg0: *mut u8) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0.add(4).cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_test7_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::test7();
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let vec2 = (result0.into_bytes()).into_boxed_slice();
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    ::core::mem::forget(vec2);
                    *ptr1.add(4).cast::<usize>() = len2;
                    *ptr1.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_test7<T: Guest>(arg0: *mut u8) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0.add(4).cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_test8_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::test8();
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let vec2 = (result0.into_bytes()).into_boxed_slice();
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    ::core::mem::forget(vec2);
                    *ptr1.add(4).cast::<usize>() = len2;
                    *ptr1.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_test8<T: Guest>(arg0: *mut u8) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0.add(4).cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                }
                pub trait Guest {
                    fn test1() -> _rt::String;
                    fn test2() -> _rt::String;
                    fn test3() -> _rt::String;
                    fn test4() -> _rt::String;
                    fn test5() -> _rt::String;
                    fn test6() -> _rt::String;
                    fn test7() -> _rt::String;
                    fn test8() -> _rt::String;
                }
                #[doc(hidden)]
                macro_rules! __export_test_graph_exports_test_graph_api_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[export_name =
                        "test:graph-exports/test-graph-api#test1"] unsafe extern "C" fn
                        export_test1() -> * mut u8 { $($path_to_types)*::
                        _export_test1_cabi::<$ty > () } #[export_name =
                        "cabi_post_test:graph-exports/test-graph-api#test1"] unsafe
                        extern "C" fn _post_return_test1(arg0 : * mut u8,) {
                        $($path_to_types)*:: __post_return_test1::<$ty > (arg0) }
                        #[export_name = "test:graph-exports/test-graph-api#test2"] unsafe
                        extern "C" fn export_test2() -> * mut u8 { $($path_to_types)*::
                        _export_test2_cabi::<$ty > () } #[export_name =
                        "cabi_post_test:graph-exports/test-graph-api#test2"] unsafe
                        extern "C" fn _post_return_test2(arg0 : * mut u8,) {
                        $($path_to_types)*:: __post_return_test2::<$ty > (arg0) }
                        #[export_name = "test:graph-exports/test-graph-api#test3"] unsafe
                        extern "C" fn export_test3() -> * mut u8 { $($path_to_types)*::
                        _export_test3_cabi::<$ty > () } #[export_name =
                        "cabi_post_test:graph-exports/test-graph-api#test3"] unsafe
                        extern "C" fn _post_return_test3(arg0 : * mut u8,) {
                        $($path_to_types)*:: __post_return_test3::<$ty > (arg0) }
                        #[export_name = "test:graph-exports/test-graph-api#test4"] unsafe
                        extern "C" fn export_test4() -> * mut u8 { $($path_to_types)*::
                        _export_test4_cabi::<$ty > () } #[export_name =
                        "cabi_post_test:graph-exports/test-graph-api#test4"] unsafe
                        extern "C" fn _post_return_test4(arg0 : * mut u8,) {
                        $($path_to_types)*:: __post_return_test4::<$ty > (arg0) }
                        #[export_name = "test:graph-exports/test-graph-api#test5"] unsafe
                        extern "C" fn export_test5() -> * mut u8 { $($path_to_types)*::
                        _export_test5_cabi::<$ty > () } #[export_name =
                        "cabi_post_test:graph-exports/test-graph-api#test5"] unsafe
                        extern "C" fn _post_return_test5(arg0 : * mut u8,) {
                        $($path_to_types)*:: __post_return_test5::<$ty > (arg0) }
                        #[export_name = "test:graph-exports/test-graph-api#test6"] unsafe
                        extern "C" fn export_test6() -> * mut u8 { $($path_to_types)*::
                        _export_test6_cabi::<$ty > () } #[export_name =
                        "cabi_post_test:graph-exports/test-graph-api#test6"] unsafe
                        extern "C" fn _post_return_test6(arg0 : * mut u8,) {
                        $($path_to_types)*:: __post_return_test6::<$ty > (arg0) }
                        #[export_name = "test:graph-exports/test-graph-api#test7"] unsafe
                        extern "C" fn export_test7() -> * mut u8 { $($path_to_types)*::
                        _export_test7_cabi::<$ty > () } #[export_name =
                        "cabi_post_test:graph-exports/test-graph-api#test7"] unsafe
                        extern "C" fn _post_return_test7(arg0 : * mut u8,) {
                        $($path_to_types)*:: __post_return_test7::<$ty > (arg0) }
                        #[export_name = "test:graph-exports/test-graph-api#test8"] unsafe
                        extern "C" fn export_test8() -> * mut u8 { $($path_to_types)*::
                        _export_test8_cabi::<$ty > () } #[export_name =
                        "cabi_post_test:graph-exports/test-graph-api#test8"] unsafe
                        extern "C" fn _post_return_test8(arg0 : * mut u8,) {
                        $($path_to_types)*:: __post_return_test8::<$ty > (arg0) } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_test_graph_exports_test_graph_api_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 8]);
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 8],
                );
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    pub use alloc_crate::vec::Vec;
    pub use alloc_crate::string::String;
    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};
    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }
    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }
    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }
        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }
        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }
    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource").field("handle", &self.handle).finish()
        }
    }
    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    u32::MAX => {}
                    other => T::drop(other),
                }
            }
        }
    }
    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }
    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }
    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }
    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }
    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }
    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }
    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    pub fn as_f32<T: AsF32>(t: T) -> f32 {
        t.as_f32()
    }
    pub trait AsF32 {
        fn as_f32(self) -> f32;
    }
    impl<'a, T: Copy + AsF32> AsF32 for &'a T {
        fn as_f32(self) -> f32 {
            (*self).as_f32()
        }
    }
    impl AsF32 for f32 {
        #[inline]
        fn as_f32(self) -> f32 {
            self as f32
        }
    }
    pub fn as_f64<T: AsF64>(t: T) -> f64 {
        t.as_f64()
    }
    pub trait AsF64 {
        fn as_f64(self) -> f64;
    }
    impl<'a, T: Copy + AsF64> AsF64 for &'a T {
        fn as_f64(self) -> f64 {
            (*self).as_f64()
        }
    }
    impl AsF64 for f64 {
        #[inline]
        fn as_f64(self) -> f64 {
            self as f64
        }
    }
    pub use alloc_crate::alloc;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            val != 0
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            core::hint::unreachable_unchecked()
        }
    }
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    extern crate alloc as alloc_crate;
}
/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_test_graph_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::test::graph_exports::test_graph_api::__export_test_graph_exports_test_graph_api_cabi!($ty
        with_types_in $($path_to_types_root)*::
        exports::test::graph_exports::test_graph_api);
    };
}
#[doc(inline)]
pub(crate) use __export_test_graph_impl as export;
#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.36.0:test:graph:test-graph:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 10787] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xa2S\x01A\x02\x01A(\x01\
B,\x01r\x03\x04yeary\x05month}\x03day}\x04\0\x04date\x03\0\0\x01r\x04\x04hour}\x06\
minute}\x06second}\x0ananosecondy\x04\0\x04time\x03\0\x02\x01k|\x01r\x03\x04date\
\x01\x04time\x03\x17timezone-offset-minutes\x04\x04\0\x08datetime\x03\0\x05\x01r\
\x02\x07secondsx\x0bnanosecondsy\x04\0\x08duration\x03\0\x07\x01ku\x01r\x03\x09l\
ongitudeu\x08latitudeu\x08altitude\x09\x04\0\x05point\x03\0\x0a\x01p\x0b\x01r\x01\
\x0bcoordinates\x0c\x04\0\x0alinestring\x03\0\x0d\x01p\x0c\x01k\x0f\x01r\x02\x08\
exterior\x0c\x05holes\x10\x04\0\x07polygon\x03\0\x11\x01p}\x01q\x15\x0anull-valu\
e\0\0\x07boolean\x01\x7f\0\x04int8\x01~\0\x05int16\x01|\0\x05int32\x01z\0\x05int\
64\x01x\0\x05uint8\x01}\0\x06uint16\x01{\0\x06uint32\x01y\0\x06uint64\x01w\0\x0d\
float32-value\x01v\0\x0dfloat64-value\x01u\0\x0cstring-value\x01s\0\x05bytes\x01\
\x13\0\x04date\x01\x01\0\x04time\x01\x03\0\x08datetime\x01\x06\0\x08duration\x01\
\x08\0\x05point\x01\x0b\0\x0alinestring\x01\x0e\0\x07polygon\x01\x12\0\x04\0\x0e\
property-value\x03\0\x14\x01q\x03\x0cstring-value\x01s\0\x05int64\x01x\0\x04uuid\
\x01s\0\x04\0\x0aelement-id\x03\0\x16\x01o\x02s\x15\x01p\x18\x04\0\x0cproperty-m\
ap\x03\0\x19\x01ps\x01r\x04\x02id\x17\x0bvertex-types\x11additional-labels\x1b\x0a\
properties\x1a\x04\0\x06vertex\x03\0\x1c\x01r\x05\x02id\x17\x09edge-types\x0bfro\
m-vertex\x17\x09to-vertex\x17\x0aproperties\x1a\x04\0\x04edge\x03\0\x1e\x01p\x1d\
\x01p\x1f\x01r\x03\x08vertices\x20\x05edges!\x06lengthy\x04\0\x04path\x03\0\"\x01\
m\x03\x08outgoing\x08incoming\x04both\x04\0\x09direction\x03\0$\x01m\x0c\x05equa\
l\x09not-equal\x09less-than\x12less-than-or-equal\x0cgreater-than\x15greater-tha\
n-or-equal\x08contains\x0bstarts-with\x09ends-with\x0bregex-match\x07in-list\x0b\
not-in-list\x04\0\x13comparison-operator\x03\0&\x01r\x03\x08propertys\x08operato\
r'\x05value\x15\x04\0\x10filter-condition\x03\0(\x01r\x02\x08propertys\x09ascend\
ing\x7f\x04\0\x09sort-spec\x03\0*\x03\0\x17golem:graph/types@1.0.0\x05\0\x02\x03\
\0\0\x0aelement-id\x01B\x04\x02\x03\x02\x01\x01\x04\0\x0aelement-id\x03\0\0\x01q\
\x12\x15unsupported-operation\x01s\0\x11connection-failed\x01s\0\x15authenticati\
on-failed\x01s\0\x14authorization-failed\x01s\0\x11element-not-found\x01\x01\0\x11\
duplicate-element\x01\x01\0\x10schema-violation\x01s\0\x14constraint-violation\x01\
s\0\x15invalid-property-type\x01s\0\x0dinvalid-query\x01s\0\x12transaction-faile\
d\x01s\0\x14transaction-conflict\0\0\x13transaction-timeout\0\0\x11deadlock-dete\
cted\0\0\x07timeout\0\0\x12resource-exhausted\x01s\0\x0einternal-error\x01s\0\x13\
service-unavailable\x01s\0\x04\0\x0bgraph-error\x03\0\x02\x03\0\x18golem:graph/e\
rrors@1.0.0\x05\x02\x02\x03\0\0\x06vertex\x02\x03\0\0\x04edge\x02\x03\0\0\x04pat\
h\x02\x03\0\0\x0cproperty-map\x02\x03\0\0\x0eproperty-value\x02\x03\0\0\x10filte\
r-condition\x02\x03\0\0\x09sort-spec\x02\x03\0\0\x09direction\x02\x03\0\x01\x0bg\
raph-error\x01B[\x02\x03\x02\x01\x03\x04\0\x06vertex\x03\0\0\x02\x03\x02\x01\x04\
\x04\0\x04edge\x03\0\x02\x02\x03\x02\x01\x05\x04\0\x04path\x03\0\x04\x02\x03\x02\
\x01\x01\x04\0\x0aelement-id\x03\0\x06\x02\x03\x02\x01\x06\x04\0\x0cproperty-map\
\x03\0\x08\x02\x03\x02\x01\x07\x04\0\x0eproperty-value\x03\0\x0a\x02\x03\x02\x01\
\x08\x04\0\x10filter-condition\x03\0\x0c\x02\x03\x02\x01\x09\x04\0\x09sort-spec\x03\
\0\x0e\x02\x03\x02\x01\x0a\x04\0\x09direction\x03\0\x10\x02\x03\x02\x01\x0b\x04\0\
\x0bgraph-error\x03\0\x12\x04\0\x0btransaction\x03\x01\x01ps\x01k\x15\x01r\x03\x0b\
vertex-types\x11additional-labels\x16\x0aproperties\x09\x04\0\x0bvertex-spec\x03\
\0\x17\x01r\x04\x09edge-types\x0bfrom-vertex\x07\x09to-vertex\x07\x0aproperties\x09\
\x04\0\x09edge-spec\x03\0\x19\x01h\x14\x01j\x01\x01\x01\x13\x01@\x03\x04self\x1b\
\x0bvertex-types\x0aproperties\x09\0\x1c\x04\0![method]transaction.create-vertex\
\x01\x1d\x01@\x04\x04self\x1b\x0bvertex-types\x11additional-labels\x15\x0aproper\
ties\x09\0\x1c\x04\0-[method]transaction.create-vertex-with-labels\x01\x1e\x01k\x01\
\x01j\x01\x1f\x01\x13\x01@\x02\x04self\x1b\x02id\x07\0\x20\x04\0\x1e[method]tran\
saction.get-vertex\x01!\x01@\x03\x04self\x1b\x02id\x07\x0aproperties\x09\0\x1c\x04\
\0![method]transaction.update-vertex\x01\"\x01@\x03\x04self\x1b\x02id\x07\x07upd\
ates\x09\0\x1c\x04\0,[method]transaction.update-vertex-properties\x01#\x01j\0\x01\
\x13\x01@\x03\x04self\x1b\x02id\x07\x0cdelete-edges\x7f\0$\x04\0![method]transac\
tion.delete-vertex\x01%\x01ks\x01p\x0d\x01k'\x01p\x0f\x01k)\x01ky\x01p\x01\x01j\x01\
,\x01\x13\x01@\x06\x04self\x1b\x0bvertex-type&\x07filters(\x04sort*\x05limit+\x06\
offset+\0-\x04\0![method]transaction.find-vertices\x01.\x01j\x01\x03\x01\x13\x01\
@\x05\x04self\x1b\x09edge-types\x0bfrom-vertex\x07\x09to-vertex\x07\x0apropertie\
s\x09\0/\x04\0\x1f[method]transaction.create-edge\x010\x01k\x03\x01j\x011\x01\x13\
\x01@\x02\x04self\x1b\x02id\x07\02\x04\0\x1c[method]transaction.get-edge\x013\x01\
@\x03\x04self\x1b\x02id\x07\x0aproperties\x09\0/\x04\0\x1f[method]transaction.up\
date-edge\x014\x01@\x03\x04self\x1b\x02id\x07\x07updates\x09\0/\x04\0*[method]tr\
ansaction.update-edge-properties\x015\x01@\x02\x04self\x1b\x02id\x07\0$\x04\0\x1f\
[method]transaction.delete-edge\x016\x01p\x03\x01j\x017\x01\x13\x01@\x06\x04self\
\x1b\x0aedge-types\x16\x07filters(\x04sort*\x05limit+\x06offset+\08\x04\0\x1e[me\
thod]transaction.find-edges\x019\x01@\x05\x04self\x1b\x09vertex-id\x07\x09direct\
ion\x11\x0aedge-types\x16\x05limit+\0-\x04\0)[method]transaction.get-adjacent-ve\
rtices\x01:\x01@\x05\x04self\x1b\x09vertex-id\x07\x09direction\x11\x0aedge-types\
\x16\x05limit+\08\x04\0'[method]transaction.get-connected-edges\x01;\x01p\x18\x01\
@\x02\x04self\x1b\x08vertices<\0-\x04\0#[method]transaction.create-vertices\x01=\
\x01p\x1a\x01@\x02\x04self\x1b\x05edges>\08\x04\0\x20[method]transaction.create-\
edges\x01?\x01k\x07\x01@\x04\x04self\x1b\x02id\xc0\0\x0bvertex-types\x0aproperti\
es\x09\0\x1c\x04\0![method]transaction.upsert-vertex\x01A\x01@\x06\x04self\x1b\x02\
id\xc0\0\x09edge-types\x0bfrom-vertex\x07\x09to-vertex\x07\x0aproperties\x09\0/\x04\
\0\x1f[method]transaction.upsert-edge\x01B\x01@\x01\x04self\x1b\0$\x04\0\x1a[met\
hod]transaction.commit\x01C\x04\0\x1c[method]transaction.rollback\x01C\x01@\x01\x04\
self\x1b\0\x7f\x04\0\x1d[method]transaction.is-active\x01D\x03\0\x1egolem:graph/\
transactions@1.0.0\x05\x0c\x02\x03\0\x02\x0btransaction\x01B!\x02\x03\x02\x01\x0b\
\x04\0\x0bgraph-error\x03\0\0\x02\x03\x02\x01\x0d\x04\0\x0btransaction\x03\0\x02\
\x01ps\x01k{\x01ks\x01ky\x01o\x02ss\x01p\x08\x01r\x08\x05hosts\x04\x04port\x05\x0d\
database-name\x06\x08username\x06\x08password\x06\x0ftimeout-seconds\x07\x0fmax-\
connections\x07\x0fprovider-config\x09\x04\0\x11connection-config\x03\0\x0a\x04\0\
\x05graph\x03\x01\x01kw\x01r\x04\x0cvertex-count\x0d\x0aedge-count\x0d\x0blabel-\
count\x07\x0eproperty-count\x0d\x04\0\x10graph-statistics\x03\0\x0e\x01h\x0c\x01\
i\x03\x01j\x01\x11\x01\x01\x01@\x01\x04self\x10\0\x12\x04\0\x1f[method]graph.beg\
in-transaction\x01\x13\x04\0$[method]graph.begin-read-transaction\x01\x13\x01j\0\
\x01\x01\x01@\x01\x04self\x10\0\x14\x04\0\x12[method]graph.ping\x01\x15\x04\0\x13\
[method]graph.close\x01\x15\x01j\x01\x0f\x01\x01\x01@\x01\x04self\x10\0\x16\x04\0\
\x1c[method]graph.get-statistics\x01\x17\x01i\x0c\x01j\x01\x18\x01\x01\x01@\x01\x06\
config\x0b\0\x19\x04\0\x07connect\x01\x1a\x03\0\x1cgolem:graph/connection@1.0.0\x05\
\x0e\x01B#\x02\x03\x02\x01\x03\x04\0\x06vertex\x03\0\0\x02\x03\x02\x01\x04\x04\0\
\x04edge\x03\0\x02\x02\x03\x02\x01\x05\x04\0\x04path\x03\0\x04\x02\x03\x02\x01\x07\
\x04\0\x0eproperty-value\x03\0\x06\x02\x03\x02\x01\x0b\x04\0\x0bgraph-error\x03\0\
\x08\x02\x03\x02\x01\x0d\x04\0\x0btransaction\x03\0\x0a\x01p\x01\x01p\x03\x01p\x05\
\x01p\x07\x01o\x02s\x07\x01p\x10\x01p\x11\x01q\x05\x08vertices\x01\x0c\0\x05edge\
s\x01\x0d\0\x05paths\x01\x0e\0\x06values\x01\x0f\0\x04maps\x01\x12\0\x04\0\x0cqu\
ery-result\x03\0\x13\x01p\x10\x04\0\x10query-parameters\x03\0\x15\x01ky\x01r\x04\
\x0ftimeout-seconds\x17\x0bmax-results\x17\x07explain\x7f\x07profile\x7f\x04\0\x0d\
query-options\x03\0\x18\x01ks\x01r\x05\x12query-result-value\x14\x11execution-ti\
me-ms\x17\x0drows-affected\x17\x0bexplanation\x1a\x0cprofile-data\x1a\x04\0\x16q\
uery-execution-result\x03\0\x1b\x01h\x0b\x01k\x16\x01k\x19\x01j\x01\x1c\x01\x09\x01\
@\x04\x0btransaction\x1d\x05querys\x0aparameters\x1e\x07options\x1f\0\x20\x04\0\x0d\
execute-query\x01!\x03\0\x17golem:graph/query@1.0.0\x05\x0f\x01BK\x02\x03\x02\x01\
\x07\x04\0\x0eproperty-value\x03\0\0\x02\x03\x02\x01\x0b\x04\0\x0bgraph-error\x03\
\0\x02\x01m\x0c\x07boolean\x05int32\x05int64\x0cfloat32-type\x0cfloat64-type\x0b\
string-type\x05bytes\x04date\x08datetime\x05point\x09list-type\x08map-type\x04\0\
\x0dproperty-type\x03\0\x04\x01m\x04\x05exact\x05range\x04text\x0ageospatial\x04\
\0\x0aindex-type\x03\0\x06\x01k\x01\x01r\x05\x04names\x0dproperty-type\x05\x08re\
quired\x7f\x06unique\x7f\x0ddefault-value\x08\x04\0\x13property-definition\x03\0\
\x09\x01p\x0a\x01ks\x01r\x03\x05labels\x0aproperties\x0b\x09container\x0c\x04\0\x13\
vertex-label-schema\x03\0\x0d\x01ps\x01k\x0f\x01r\x05\x05labels\x0aproperties\x0b\
\x0bfrom-labels\x10\x09to-labels\x10\x09container\x0c\x04\0\x11edge-label-schema\
\x03\0\x11\x01r\x06\x04names\x05labels\x0aproperties\x0f\x0aindex-type\x07\x06un\
ique\x7f\x09container\x0c\x04\0\x10index-definition\x03\0\x13\x01r\x03\x0acollec\
tions\x10from-collections\x0f\x0eto-collections\x0f\x04\0\x14edge-type-definitio\
n\x03\0\x15\x04\0\x0eschema-manager\x03\x01\x01m\x02\x10vertex-container\x0eedge\
-container\x04\0\x0econtainer-type\x03\0\x18\x01kw\x01r\x03\x04names\x0econtaine\
r-type\x19\x0delement-count\x1a\x04\0\x0econtainer-info\x03\0\x1b\x01h\x17\x01j\0\
\x01\x03\x01@\x02\x04self\x1d\x06schema\x0e\0\x1e\x04\0*[method]schema-manager.d\
efine-vertex-label\x01\x1f\x01@\x02\x04self\x1d\x06schema\x12\0\x1e\x04\0([metho\
d]schema-manager.define-edge-label\x01\x20\x01k\x0e\x01j\x01!\x01\x03\x01@\x02\x04\
self\x1d\x05labels\0\"\x04\0.[method]schema-manager.get-vertex-label-schema\x01#\
\x01k\x12\x01j\x01$\x01\x03\x01@\x02\x04self\x1d\x05labels\0%\x04\0,[method]sche\
ma-manager.get-edge-label-schema\x01&\x01j\x01\x0f\x01\x03\x01@\x01\x04self\x1d\0\
'\x04\0)[method]schema-manager.list-vertex-labels\x01(\x04\0'[method]schema-mana\
ger.list-edge-labels\x01(\x01@\x02\x04self\x1d\x05index\x14\0\x1e\x04\0#[method]\
schema-manager.create-index\x01)\x01@\x02\x04self\x1d\x04names\0\x1e\x04\0![meth\
od]schema-manager.drop-index\x01*\x01p\x14\x01j\x01+\x01\x03\x01@\x01\x04self\x1d\
\0,\x04\0#[method]schema-manager.list-indexes\x01-\x01k\x14\x01j\x01.\x01\x03\x01\
@\x02\x04self\x1d\x04names\0/\x04\0\x20[method]schema-manager.get-index\x010\x01\
@\x02\x04self\x1d\x0adefinition\x16\0\x1e\x04\0'[method]schema-manager.define-ed\
ge-type\x011\x01p\x16\x01j\x012\x01\x03\x01@\x01\x04self\x1d\03\x04\0&[method]sc\
hema-manager.list-edge-types\x014\x01@\x03\x04self\x1d\x04names\x0econtainer-typ\
e\x19\0\x1e\x04\0'[method]schema-manager.create-container\x015\x01p\x1c\x01j\x01\
6\x01\x03\x01@\x01\x04self\x1d\07\x04\0&[method]schema-manager.list-containers\x01\
8\x01i\x17\x01j\x019\x01\x03\x01@\0\0:\x04\0\x12get-schema-manager\x01;\x03\0\x18\
golem:graph/schema@1.0.0\x05\x10\x01B0\x02\x03\x02\x01\x03\x04\0\x06vertex\x03\0\
\0\x02\x03\x02\x01\x04\x04\0\x04edge\x03\0\x02\x02\x03\x02\x01\x05\x04\0\x04path\
\x03\0\x04\x02\x03\x02\x01\x01\x04\0\x0aelement-id\x03\0\x06\x02\x03\x02\x01\x0a\
\x04\0\x09direction\x03\0\x08\x02\x03\x02\x01\x08\x04\0\x10filter-condition\x03\0\
\x0a\x02\x03\x02\x01\x0b\x04\0\x0bgraph-error\x03\0\x0c\x02\x03\x02\x01\x0d\x04\0\
\x0btransaction\x03\0\x0e\x01ky\x01ps\x01k\x11\x01p\x0b\x01k\x13\x01r\x05\x09max\
-depth\x10\x0aedge-types\x12\x0cvertex-types\x12\x0evertex-filters\x14\x0cedge-f\
ilters\x14\x04\0\x0cpath-options\x03\0\x15\x01r\x04\x05depthy\x09direction\x09\x0a\
edge-types\x12\x0cmax-vertices\x10\x04\0\x14neighborhood-options\x03\0\x17\x01p\x01\
\x01p\x03\x01r\x02\x08vertices\x19\x05edges\x1a\x04\0\x08subgraph\x03\0\x1b\x01h\
\x0f\x01k\x16\x01k\x05\x01j\x01\x1f\x01\x0d\x01@\x04\x0btransaction\x1d\x0bfrom-\
vertex\x07\x09to-vertex\x07\x07options\x1e\0\x20\x04\0\x12find-shortest-path\x01\
!\x01p\x05\x01j\x01\"\x01\x0d\x01@\x05\x0btransaction\x1d\x0bfrom-vertex\x07\x09\
to-vertex\x07\x07options\x1e\x05limit\x10\0#\x04\0\x0efind-all-paths\x01$\x01j\x01\
\x1c\x01\x0d\x01@\x03\x0btransaction\x1d\x06center\x07\x07options\x18\0%\x04\0\x10\
get-neighborhood\x01&\x01j\x01\x7f\x01\x0d\x01@\x04\x0btransaction\x1d\x0bfrom-v\
ertex\x07\x09to-vertex\x07\x07options\x1e\0'\x04\0\x0bpath-exists\x01(\x01j\x01\x19\
\x01\x0d\x01@\x05\x0btransaction\x1d\x06source\x07\x08distancey\x09direction\x09\
\x0aedge-types\x12\0)\x04\0\x18get-vertices-at-distance\x01*\x03\0\x1bgolem:grap\
h/traversal@1.0.0\x05\x11\x01B\x0a\x04\0\x08pollable\x03\x01\x01h\0\x01@\x01\x04\
self\x01\0\x7f\x04\0\x16[method]pollable.ready\x01\x02\x01@\x01\x04self\x01\x01\0\
\x04\0\x16[method]pollable.block\x01\x03\x01p\x01\x01py\x01@\x01\x02in\x04\0\x05\
\x04\0\x04poll\x01\x06\x03\0\x12wasi:io/poll@0.2.0\x05\x12\x01B\x05\x01r\x02\x07\
secondsw\x0bnanosecondsy\x04\0\x08datetime\x03\0\0\x01@\0\0\x01\x04\0\x03now\x01\
\x02\x04\0\x0aresolution\x01\x02\x03\0\x1cwasi:clocks/wall-clock@0.2.0\x05\x13\x02\
\x03\0\x08\x08datetime\x02\x03\0\x07\x08pollable\x01BX\x02\x03\x02\x01\x14\x04\0\
\x08datetime\x03\0\0\x02\x03\x02\x01\x15\x04\0\x08pollable\x03\0\x02\x01r\x02\x09\
high-bitsw\x08low-bitsw\x04\0\x04uuid\x03\0\x04\x01r\x01\x04uuid\x05\x04\0\x0cco\
mponent-id\x03\0\x06\x01r\x02\x0ccomponent-id\x07\x0bworker-names\x04\0\x09worke\
r-id\x03\0\x08\x01z\x04\0\x0anode-index\x03\0\x0a\x01w\x04\0\x0bresource-id\x03\0\
\x0c\x01m\x02\x05owned\x08borrowed\x04\0\x0dresource-mode\x03\0\x0e\x01o\x02s\x0b\
\x01p\x10\x01k\x0b\x01o\x02s\x12\x01p\x13\x01ps\x01p\x0b\x01o\x02\x12\x12\x01o\x02\
\x0d\x0f\x01q\x16\x0brecord-type\x01\x11\0\x0cvariant-type\x01\x14\0\x09enum-typ\
e\x01\x15\0\x0aflags-type\x01\x15\0\x0atuple-type\x01\x16\0\x09list-type\x01\x0b\
\0\x0boption-type\x01\x0b\0\x0bresult-type\x01\x17\0\x0cprim-u8-type\0\0\x0dprim\
-u16-type\0\0\x0dprim-u32-type\0\0\x0dprim-u64-type\0\0\x0cprim-s8-type\0\0\x0dp\
rim-s16-type\0\0\x0dprim-s32-type\0\0\x0dprim-s64-type\0\0\x0dprim-f32-type\0\0\x0d\
prim-f64-type\0\0\x0eprim-char-type\0\0\x0eprim-bool-type\0\0\x10prim-string-typ\
e\0\0\x0bhandle-type\x01\x18\0\x04\0\x0dwit-type-node\x03\0\x19\x01p\x1a\x01r\x01\
\x05nodes\x1b\x04\0\x08wit-type\x03\0\x1c\x01r\x01\x05values\x04\0\x03uri\x03\0\x1e\
\x01o\x02y\x12\x01p\x7f\x01j\x01\x12\x01\x12\x01o\x02\x1fw\x01q\x16\x0crecord-va\
lue\x01\x16\0\x0dvariant-value\x01\x20\0\x0aenum-value\x01y\0\x0bflags-value\x01\
!\0\x0btuple-value\x01\x16\0\x0alist-value\x01\x16\0\x0coption-value\x01\x12\0\x0c\
result-value\x01\"\0\x07prim-u8\x01}\0\x08prim-u16\x01{\0\x08prim-u32\x01y\0\x08\
prim-u64\x01w\0\x07prim-s8\x01~\0\x08prim-s16\x01|\0\x08prim-s32\x01z\0\x08prim-\
s64\x01x\0\x0cprim-float32\x01v\0\x0cprim-float64\x01u\0\x09prim-char\x01t\0\x09\
prim-bool\x01\x7f\0\x0bprim-string\x01s\0\x06handle\x01#\0\x04\0\x08wit-node\x03\
\0$\x01p%\x01r\x01\x05nodes&\x04\0\x09wit-value\x03\0'\x01r\x02\x05value(\x03typ\
\x1d\x04\0\x0evalue-and-type\x03\0)\x01q\x04\x0eprotocol-error\x01s\0\x06denied\x01\
s\0\x09not-found\x01s\0\x15remote-internal-error\x01s\0\x04\0\x09rpc-error\x03\0\
+\x04\0\x08wasm-rpc\x03\x01\x04\0\x14future-invoke-result\x03\x01\x04\0\x12cance\
llation-token\x03\x01\x01i-\x01@\x01\x09worker-id\x09\00\x04\0\x15[constructor]w\
asm-rpc\x011\x01@\x01\x0ccomponent-id\x07\00\x04\0\x1a[static]wasm-rpc.ephemeral\
\x012\x01h-\x01p(\x01j\x01(\x01,\x01@\x03\x04self3\x0dfunction-names\x0ffunction\
-params4\05\x04\0![method]wasm-rpc.invoke-and-await\x016\x01j\0\x01,\x01@\x03\x04\
self3\x0dfunction-names\x0ffunction-params4\07\x04\0\x17[method]wasm-rpc.invoke\x01\
8\x01i.\x01@\x03\x04self3\x0dfunction-names\x0ffunction-params4\09\x04\0'[method\
]wasm-rpc.async-invoke-and-await\x01:\x01@\x04\x04self3\x0escheduled-time\x01\x0d\
function-names\x0ffunction-params4\x01\0\x04\0$[method]wasm-rpc.schedule-invocat\
ion\x01;\x01i/\x01@\x04\x04self3\x0escheduled-time\x01\x0dfunction-names\x0ffunc\
tion-params4\0<\x04\0/[method]wasm-rpc.schedule-cancelable-invocation\x01=\x01h.\
\x01i\x03\x01@\x01\x04self>\0?\x04\0&[method]future-invoke-result.subscribe\x01@\
\x01k5\x01@\x01\x04self>\0\xc1\0\x04\0\x20[method]future-invoke-result.get\x01B\x01\
h/\x01@\x01\x04self\xc3\0\x01\0\x04\0![method]cancellation-token.cancel\x01D\x01\
j\x01\x05\x01s\x01@\x01\x04uuids\0\xc5\0\x04\0\x0aparse-uuid\x01F\x01@\x01\x04uu\
id\x05\0s\x04\0\x0euuid-to-string\x01G\x01@\x01\x03vnt*\0(\x04\0\x0dextract-valu\
e\x01H\x01@\x01\x03vnt*\0\x1d\x04\0\x0cextract-type\x01I\x03\0\x15golem:rpc/type\
s@0.2.0\x05\x16\x02\x03\0\x09\x0ccomponent-id\x02\x03\0\x09\x09worker-id\x02\x03\
\0\x09\x12cancellation-token\x01B!\x02\x03\x02\x01\x15\x04\0\x10wasi-io-pollable\
\x03\0\0\x02\x03\x02\x01\x14\x04\0\x14wasi-clocks-datetime\x03\0\x02\x02\x03\x02\
\x01\x17\x04\0\x16golem-rpc-component-id\x03\0\x04\x02\x03\x02\x01\x18\x04\0\x13\
golem-rpc-worker-id\x03\0\x06\x02\x03\x02\x01\x19\x04\0\x1cgolem-rpc-cancellatio\
n-token\x03\0\x08\x04\0\x19future-inc-and-get-result\x03\x01\x04\0\x0ftest-helpe\
r-api\x03\x01\x01h\x0a\x01i\x01\x01@\x01\x04self\x0c\0\x0d\x04\0+[method]future-\
inc-and-get-result.subscribe\x01\x0e\x01kw\x01@\x01\x04self\x0c\0\x0f\x04\0%[met\
hod]future-inc-and-get-result.get\x01\x10\x01i\x0b\x01@\x01\x0bworker-names\0\x11\
\x04\0\x1c[constructor]test-helper-api\x01\x12\x01@\x01\x09worker-id\x07\0\x11\x04\
\0\x1e[static]test-helper-api.custom\x01\x13\x01h\x0b\x01@\x01\x04self\x14\0w\x04\
\0,[method]test-helper-api.blocking-inc-and-get\x01\x15\x01i\x0a\x01@\x01\x04sel\
f\x14\0\x16\x04\0#[method]test-helper-api.inc-and-get\x01\x17\x01i\x09\x01@\x02\x04\
self\x14\x0dscheduled-for\x03\0\x18\x04\0,[method]test-helper-api.schedule-inc-a\
nd-get\x01\x19\x03\0%test:helper-client/test-helper-client\x05\x1a\x01B\x09\x01@\
\0\0s\x04\0\x05test1\x01\0\x04\0\x05test2\x01\0\x04\0\x05test3\x01\0\x04\0\x05te\
st4\x01\0\x04\0\x05test5\x01\0\x04\0\x05test6\x01\0\x04\0\x05test7\x01\0\x04\0\x05\
test8\x01\0\x04\0!test:graph-exports/test-graph-api\x05\x1b\x04\0\x15test:graph/\
test-graph\x04\0\x0b\x10\x01\0\x0atest-graph\x03\0\0\0G\x09producers\x01\x0cproc\
essed-by\x02\x0dwit-component\x070.220.1\x10wit-bindgen-rust\x060.36.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
