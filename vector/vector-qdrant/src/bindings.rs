// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
//   * generate_unused_types
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod golem {
    pub mod vector {
        /// Core types and fundamental data structures for vector operations
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            /// Unique identifier for vectors and collections
            pub type Id = _rt::String;
            /// Standard dense vector representation
            pub type DenseVector = _rt::Vec<f32>;
            /// Sparse vector with explicit indices
            #[derive(Clone)]
            pub struct SparseVector {
                /// Zero-based indices of non-zero elements
                pub indices: _rt::Vec<u32>,
                /// Values corresponding to the indices
                pub values: _rt::Vec<f32>,
                /// Total dimensionality of the vector space
                pub total_dimensions: u32,
            }
            impl ::core::fmt::Debug for SparseVector {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("SparseVector")
                        .field("indices", &self.indices)
                        .field("values", &self.values)
                        .field("total-dimensions", &self.total_dimensions)
                        .finish()
                }
            }
            /// Binary vector representation
            #[derive(Clone)]
            pub struct BinaryVector {
                /// Packed binary data
                pub data: _rt::Vec<u8>,
                /// Number of bits/dimensions
                pub dimensions: u32,
            }
            impl ::core::fmt::Debug for BinaryVector {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("BinaryVector")
                        .field("data", &self.data)
                        .field("dimensions", &self.dimensions)
                        .finish()
                }
            }
            /// Half-precision vector (16-bit floats)
            #[derive(Clone)]
            pub struct HalfVector {
                /// Half-precision values (represented as f32 for compatibility)
                pub data: _rt::Vec<f32>,
                /// Number of dimensions
                pub dimensions: u32,
            }
            impl ::core::fmt::Debug for HalfVector {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("HalfVector")
                        .field("data", &self.data)
                        .field("dimensions", &self.dimensions)
                        .finish()
                }
            }
            /// Vector data supporting multiple representations
            #[derive(Clone)]
            pub enum VectorData {
                /// Standard 32-bit floating point vector
                Dense(DenseVector),
                /// Sparse vector representation
                Sparse(SparseVector),
                /// Binary/bit vector
                Binary(BinaryVector),
                /// Half-precision vector
                Half(HalfVector),
                /// Named vectors for multi-vector collections
                Named(_rt::Vec<(_rt::String, DenseVector)>),
                /// Hybrid dense + sparse combination
                Hybrid((DenseVector, SparseVector)),
            }
            impl ::core::fmt::Debug for VectorData {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        VectorData::Dense(e) => {
                            f.debug_tuple("VectorData::Dense").field(e).finish()
                        }
                        VectorData::Sparse(e) => {
                            f.debug_tuple("VectorData::Sparse").field(e).finish()
                        }
                        VectorData::Binary(e) => {
                            f.debug_tuple("VectorData::Binary").field(e).finish()
                        }
                        VectorData::Half(e) => {
                            f.debug_tuple("VectorData::Half").field(e).finish()
                        }
                        VectorData::Named(e) => {
                            f.debug_tuple("VectorData::Named").field(e).finish()
                        }
                        VectorData::Hybrid(e) => {
                            f.debug_tuple("VectorData::Hybrid").field(e).finish()
                        }
                    }
                }
            }
            /// Supported distance metrics
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum DistanceMetric {
                /// Cosine similarity (1 - cosine distance)
                Cosine,
                /// Euclidean (L2) distance
                Euclidean,
                /// Dot product / inner product
                DotProduct,
                /// Manhattan (L1) distance
                Manhattan,
                /// Hamming distance (for binary vectors)
                Hamming,
                /// Jaccard distance (for binary/sparse vectors)
                Jaccard,
            }
            impl ::core::fmt::Debug for DistanceMetric {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        DistanceMetric::Cosine => {
                            f.debug_tuple("DistanceMetric::Cosine").finish()
                        }
                        DistanceMetric::Euclidean => {
                            f.debug_tuple("DistanceMetric::Euclidean").finish()
                        }
                        DistanceMetric::DotProduct => {
                            f.debug_tuple("DistanceMetric::DotProduct").finish()
                        }
                        DistanceMetric::Manhattan => {
                            f.debug_tuple("DistanceMetric::Manhattan").finish()
                        }
                        DistanceMetric::Hamming => {
                            f.debug_tuple("DistanceMetric::Hamming").finish()
                        }
                        DistanceMetric::Jaccard => {
                            f.debug_tuple("DistanceMetric::Jaccard").finish()
                        }
                    }
                }
            }
            impl DistanceMetric {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> DistanceMetric {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => DistanceMetric::Cosine,
                        1 => DistanceMetric::Euclidean,
                        2 => DistanceMetric::DotProduct,
                        3 => DistanceMetric::Manhattan,
                        4 => DistanceMetric::Hamming,
                        5 => DistanceMetric::Jaccard,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            /// Geographic coordinates
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct GeoCoordinates {
                pub latitude: f64,
                pub longitude: f64,
            }
            impl ::core::fmt::Debug for GeoCoordinates {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("GeoCoordinates")
                        .field("latitude", &self.latitude)
                        .field("longitude", &self.longitude)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub enum FlatMetadataLeaf {
                StringVal(_rt::String),
                NumberVal(f64),
                IntegerVal(i64),
                BooleanVal(bool),
                NullVal,
                DatetimeVal(_rt::String),
                GeoVal(GeoCoordinates),
                BlobVal(_rt::Vec<u8>),
            }
            impl ::core::fmt::Debug for FlatMetadataLeaf {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        FlatMetadataLeaf::StringVal(e) => {
                            f.debug_tuple("FlatMetadataLeaf::StringVal")
                                .field(e)
                                .finish()
                        }
                        FlatMetadataLeaf::NumberVal(e) => {
                            f.debug_tuple("FlatMetadataLeaf::NumberVal")
                                .field(e)
                                .finish()
                        }
                        FlatMetadataLeaf::IntegerVal(e) => {
                            f.debug_tuple("FlatMetadataLeaf::IntegerVal")
                                .field(e)
                                .finish()
                        }
                        FlatMetadataLeaf::BooleanVal(e) => {
                            f.debug_tuple("FlatMetadataLeaf::BooleanVal")
                                .field(e)
                                .finish()
                        }
                        FlatMetadataLeaf::NullVal => {
                            f.debug_tuple("FlatMetadataLeaf::NullVal").finish()
                        }
                        FlatMetadataLeaf::DatetimeVal(e) => {
                            f.debug_tuple("FlatMetadataLeaf::DatetimeVal")
                                .field(e)
                                .finish()
                        }
                        FlatMetadataLeaf::GeoVal(e) => {
                            f.debug_tuple("FlatMetadataLeaf::GeoVal").field(e).finish()
                        }
                        FlatMetadataLeaf::BlobVal(e) => {
                            f.debug_tuple("FlatMetadataLeaf::BlobVal").field(e).finish()
                        }
                    }
                }
            }
            /// Metadata value types
            pub type FlatMetadataObject = _rt::Vec<(_rt::String, FlatMetadataLeaf)>;
            #[derive(Clone)]
            pub enum FlatMetadataValue {
                StringVal(_rt::String),
                NumberVal(f64),
                IntegerVal(i64),
                BooleanVal(bool),
                ArrayVal(_rt::Vec<FlatMetadataLeaf>),
                ObjectVal(FlatMetadataObject),
                NullVal,
                GeoVal(GeoCoordinates),
                DatetimeVal(_rt::String),
                BlobVal(_rt::Vec<u8>),
            }
            impl ::core::fmt::Debug for FlatMetadataValue {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        FlatMetadataValue::StringVal(e) => {
                            f.debug_tuple("FlatMetadataValue::StringVal")
                                .field(e)
                                .finish()
                        }
                        FlatMetadataValue::NumberVal(e) => {
                            f.debug_tuple("FlatMetadataValue::NumberVal")
                                .field(e)
                                .finish()
                        }
                        FlatMetadataValue::IntegerVal(e) => {
                            f.debug_tuple("FlatMetadataValue::IntegerVal")
                                .field(e)
                                .finish()
                        }
                        FlatMetadataValue::BooleanVal(e) => {
                            f.debug_tuple("FlatMetadataValue::BooleanVal")
                                .field(e)
                                .finish()
                        }
                        FlatMetadataValue::ArrayVal(e) => {
                            f.debug_tuple("FlatMetadataValue::ArrayVal")
                                .field(e)
                                .finish()
                        }
                        FlatMetadataValue::ObjectVal(e) => {
                            f.debug_tuple("FlatMetadataValue::ObjectVal")
                                .field(e)
                                .finish()
                        }
                        FlatMetadataValue::NullVal => {
                            f.debug_tuple("FlatMetadataValue::NullVal").finish()
                        }
                        FlatMetadataValue::GeoVal(e) => {
                            f.debug_tuple("FlatMetadataValue::GeoVal").field(e).finish()
                        }
                        FlatMetadataValue::DatetimeVal(e) => {
                            f.debug_tuple("FlatMetadataValue::DatetimeVal")
                                .field(e)
                                .finish()
                        }
                        FlatMetadataValue::BlobVal(e) => {
                            f.debug_tuple("FlatMetadataValue::BlobVal").field(e).finish()
                        }
                    }
                }
            }
            /// Key-value metadata
            pub type Metadata = _rt::Vec<(_rt::String, FlatMetadataValue)>;
            /// Filter operators for metadata queries
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum FilterOperator {
                /// Equal to
                Eq,
                /// Not equal to
                Ne,
                /// Greater than
                Gt,
                /// Greater than or equal
                Gte,
                /// Less than
                Lt,
                /// Less than or equal
                Lte,
                /// Value is in list
                In,
                /// Value is not in list
                Nin,
                /// Text contains substring (case insensitive)
                Contains,
                /// Text doesn't contain substring
                NotContains,
                /// Regular expression match
                Regex,
                /// Geographic distance within radius
                GeoWithin,
                /// Geographic bounding box
                GeoBbox,
            }
            impl ::core::fmt::Debug for FilterOperator {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        FilterOperator::Eq => {
                            f.debug_tuple("FilterOperator::Eq").finish()
                        }
                        FilterOperator::Ne => {
                            f.debug_tuple("FilterOperator::Ne").finish()
                        }
                        FilterOperator::Gt => {
                            f.debug_tuple("FilterOperator::Gt").finish()
                        }
                        FilterOperator::Gte => {
                            f.debug_tuple("FilterOperator::Gte").finish()
                        }
                        FilterOperator::Lt => {
                            f.debug_tuple("FilterOperator::Lt").finish()
                        }
                        FilterOperator::Lte => {
                            f.debug_tuple("FilterOperator::Lte").finish()
                        }
                        FilterOperator::In => {
                            f.debug_tuple("FilterOperator::In").finish()
                        }
                        FilterOperator::Nin => {
                            f.debug_tuple("FilterOperator::Nin").finish()
                        }
                        FilterOperator::Contains => {
                            f.debug_tuple("FilterOperator::Contains").finish()
                        }
                        FilterOperator::NotContains => {
                            f.debug_tuple("FilterOperator::NotContains").finish()
                        }
                        FilterOperator::Regex => {
                            f.debug_tuple("FilterOperator::Regex").finish()
                        }
                        FilterOperator::GeoWithin => {
                            f.debug_tuple("FilterOperator::GeoWithin").finish()
                        }
                        FilterOperator::GeoBbox => {
                            f.debug_tuple("FilterOperator::GeoBbox").finish()
                        }
                    }
                }
            }
            impl FilterOperator {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> FilterOperator {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => FilterOperator::Eq,
                        1 => FilterOperator::Ne,
                        2 => FilterOperator::Gt,
                        3 => FilterOperator::Gte,
                        4 => FilterOperator::Lt,
                        5 => FilterOperator::Lte,
                        6 => FilterOperator::In,
                        7 => FilterOperator::Nin,
                        8 => FilterOperator::Contains,
                        9 => FilterOperator::NotContains,
                        10 => FilterOperator::Regex,
                        11 => FilterOperator::GeoWithin,
                        12 => FilterOperator::GeoBbox,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            /// Basic filter condition
            #[derive(Clone)]
            pub struct FilterCondition {
                /// Field path (supports nested fields with dot notation)
                pub field: _rt::String,
                /// Filter operator
                pub operator: FilterOperator,
                /// Value to compare against
                pub value: FlatMetadataValue,
            }
            impl ::core::fmt::Debug for FilterCondition {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("FilterCondition")
                        .field("field", &self.field)
                        .field("operator", &self.operator)
                        .field("value", &self.value)
                        .finish()
                }
            }
            /// Complex filter expressions with boolean logic
            /// Supported filter operations
            #[derive(Clone, Copy)]
            pub enum FilterOp {
                Condition,
                And,
                Or,
                Not,
            }
            impl ::core::fmt::Debug for FilterOp {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        FilterOp::Condition => {
                            f.debug_tuple("FilterOp::Condition").finish()
                        }
                        FilterOp::And => f.debug_tuple("FilterOp::And").finish(),
                        FilterOp::Or => f.debug_tuple("FilterOp::Or").finish(),
                        FilterOp::Not => f.debug_tuple("FilterOp::Not").finish(),
                    }
                }
            }
            /// Each expression is a node in a flat list
            #[derive(Clone)]
            pub struct FilterNode {
                pub id: u32,
                /// unique node ID
                pub op: FilterOp,
                pub condition: Option<FilterCondition>,
                pub inputs: _rt::Vec<u32>,
            }
            impl ::core::fmt::Debug for FilterNode {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("FilterNode")
                        .field("id", &self.id)
                        .field("op", &self.op)
                        .field("condition", &self.condition)
                        .field("inputs", &self.inputs)
                        .finish()
                }
            }
            /// Top-level flat filter expression
            #[derive(Clone)]
            pub struct FilterExpression {
                pub nodes: _rt::Vec<FilterNode>,
                pub root_id: u32,
            }
            impl ::core::fmt::Debug for FilterExpression {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("FilterExpression")
                        .field("nodes", &self.nodes)
                        .field("root-id", &self.root_id)
                        .finish()
                }
            }
            /// Vector record for storage operations
            #[derive(Clone)]
            pub struct VectorRecord {
                /// Unique identifier
                pub id: Id,
                /// Vector data
                pub vector: VectorData,
                /// Associated metadata
                pub metadata: Option<Metadata>,
            }
            impl ::core::fmt::Debug for VectorRecord {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("VectorRecord")
                        .field("id", &self.id)
                        .field("vector", &self.vector)
                        .field("metadata", &self.metadata)
                        .finish()
                }
            }
            /// Search result with similarity score
            #[derive(Clone)]
            pub struct SearchResult {
                /// Vector identifier
                pub id: Id,
                /// Similarity score (higher = more similar)
                pub score: f32,
                /// Distance from query vector (lower = more similar)
                pub distance: f32,
                /// Vector data (if requested)
                pub vector: Option<VectorData>,
                /// Associated metadata (if requested)
                pub metadata: Option<Metadata>,
            }
            impl ::core::fmt::Debug for SearchResult {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("SearchResult")
                        .field("id", &self.id)
                        .field("score", &self.score)
                        .field("distance", &self.distance)
                        .field("vector", &self.vector)
                        .field("metadata", &self.metadata)
                        .finish()
                }
            }
            /// Standard error types
            #[derive(Clone)]
            pub enum VectorError {
                /// Resource not found
                NotFound(_rt::String),
                /// Resource already exists
                AlreadyExists(_rt::String),
                /// Invalid parameters or configuration
                InvalidParams(_rt::String),
                /// Feature not supported by this provider
                UnsupportedFeature(_rt::String),
                /// Vector dimension mismatch
                DimensionMismatch(_rt::String),
                /// Invalid vector format or data
                InvalidVector(_rt::String),
                /// Authentication/authorization failure
                Unauthorized(_rt::String),
                /// Rate limit exceeded
                RateLimited(_rt::String),
                /// Internal provider error
                ProviderError(_rt::String),
                /// Network/connection issues
                ConnectionError(_rt::String),
            }
            impl ::core::fmt::Debug for VectorError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        VectorError::NotFound(e) => {
                            f.debug_tuple("VectorError::NotFound").field(e).finish()
                        }
                        VectorError::AlreadyExists(e) => {
                            f.debug_tuple("VectorError::AlreadyExists").field(e).finish()
                        }
                        VectorError::InvalidParams(e) => {
                            f.debug_tuple("VectorError::InvalidParams").field(e).finish()
                        }
                        VectorError::UnsupportedFeature(e) => {
                            f.debug_tuple("VectorError::UnsupportedFeature")
                                .field(e)
                                .finish()
                        }
                        VectorError::DimensionMismatch(e) => {
                            f.debug_tuple("VectorError::DimensionMismatch")
                                .field(e)
                                .finish()
                        }
                        VectorError::InvalidVector(e) => {
                            f.debug_tuple("VectorError::InvalidVector").field(e).finish()
                        }
                        VectorError::Unauthorized(e) => {
                            f.debug_tuple("VectorError::Unauthorized").field(e).finish()
                        }
                        VectorError::RateLimited(e) => {
                            f.debug_tuple("VectorError::RateLimited").field(e).finish()
                        }
                        VectorError::ProviderError(e) => {
                            f.debug_tuple("VectorError::ProviderError").field(e).finish()
                        }
                        VectorError::ConnectionError(e) => {
                            f.debug_tuple("VectorError::ConnectionError")
                                .field(e)
                                .finish()
                        }
                    }
                }
            }
            impl ::core::fmt::Display for VectorError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }
            impl std::error::Error for VectorError {}
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod golem {
        pub mod vector {
            /// Connection and configuration management
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod connection {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type VectorError = super::super::super::super::golem::vector::types::VectorError;
                pub type Metadata = super::super::super::super::golem::vector::types::Metadata;
                #[derive(Clone)]
                pub struct OauthConfig {
                    pub client_id: _rt::String,
                    pub client_secret: Option<_rt::String>,
                    pub token_url: _rt::String,
                    pub scope: Option<_rt::String>,
                }
                impl ::core::fmt::Debug for OauthConfig {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("OauthConfig")
                            .field("client-id", &self.client_id)
                            .field("client-secret", &self.client_secret)
                            .field("token-url", &self.token_url)
                            .field("scope", &self.scope)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub enum Credentials {
                    ApiKey(_rt::String),
                    UsernamePassword((_rt::String, _rt::String)),
                    Token(_rt::String),
                    Certificate(_rt::Vec<u8>),
                    Oauth(OauthConfig),
                }
                impl ::core::fmt::Debug for Credentials {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        match self {
                            Credentials::ApiKey(e) => {
                                f.debug_tuple("Credentials::ApiKey").field(e).finish()
                            }
                            Credentials::UsernamePassword(e) => {
                                f.debug_tuple("Credentials::UsernamePassword")
                                    .field(e)
                                    .finish()
                            }
                            Credentials::Token(e) => {
                                f.debug_tuple("Credentials::Token").field(e).finish()
                            }
                            Credentials::Certificate(e) => {
                                f.debug_tuple("Credentials::Certificate").field(e).finish()
                            }
                            Credentials::Oauth(e) => {
                                f.debug_tuple("Credentials::Oauth").field(e).finish()
                            }
                        }
                    }
                }
                /// Connection status
                #[derive(Clone)]
                pub struct ConnectionStatus {
                    pub connected: bool,
                    pub provider: Option<_rt::String>,
                    pub endpoint: Option<_rt::String>,
                    pub last_activity: Option<u64>,
                    pub connection_id: Option<_rt::String>,
                }
                impl ::core::fmt::Debug for ConnectionStatus {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("ConnectionStatus")
                            .field("connected", &self.connected)
                            .field("provider", &self.provider)
                            .field("endpoint", &self.endpoint)
                            .field("last-activity", &self.last_activity)
                            .field("connection-id", &self.connection_id)
                            .finish()
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_connect_cabi<T: Guest>(arg0: *mut u8) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len2 = l1;
                    let bytes2 = _rt::Vec::from_raw_parts(l0.cast(), len2, len2);
                    let l3 = i32::from(
                        *arg0.add(2 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    let l35 = i32::from(
                        *arg0.add(14 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    let l37 = i32::from(
                        *arg0
                            .add(8 + 14 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    let result101 = T::connect(
                        _rt::string_lift(bytes2),
                        match l3 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l4 = i32::from(
                                        *arg0
                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    let v34 = match l4 {
                                        0 => {
                                            let e34 = {
                                                let l5 = *arg0
                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l6 = *arg0
                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len7 = l6;
                                                let bytes7 = _rt::Vec::from_raw_parts(
                                                    l5.cast(),
                                                    len7,
                                                    len7,
                                                );
                                                _rt::string_lift(bytes7)
                                            };
                                            Credentials::ApiKey(e34)
                                        }
                                        1 => {
                                            let e34 = {
                                                let l8 = *arg0
                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l9 = *arg0
                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len10 = l9;
                                                let bytes10 = _rt::Vec::from_raw_parts(
                                                    l8.cast(),
                                                    len10,
                                                    len10,
                                                );
                                                let l11 = *arg0
                                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l12 = *arg0
                                                    .add(7 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len13 = l12;
                                                let bytes13 = _rt::Vec::from_raw_parts(
                                                    l11.cast(),
                                                    len13,
                                                    len13,
                                                );
                                                (_rt::string_lift(bytes10), _rt::string_lift(bytes13))
                                            };
                                            Credentials::UsernamePassword(e34)
                                        }
                                        2 => {
                                            let e34 = {
                                                let l14 = *arg0
                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l15 = *arg0
                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len16 = l15;
                                                let bytes16 = _rt::Vec::from_raw_parts(
                                                    l14.cast(),
                                                    len16,
                                                    len16,
                                                );
                                                _rt::string_lift(bytes16)
                                            };
                                            Credentials::Token(e34)
                                        }
                                        3 => {
                                            let e34 = {
                                                let l17 = *arg0
                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l18 = *arg0
                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len19 = l18;
                                                _rt::Vec::from_raw_parts(l17.cast(), len19, len19)
                                            };
                                            Credentials::Certificate(e34)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 4, "invalid enum discriminant");
                                            let e34 = {
                                                let l20 = *arg0
                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l21 = *arg0
                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len22 = l21;
                                                let bytes22 = _rt::Vec::from_raw_parts(
                                                    l20.cast(),
                                                    len22,
                                                    len22,
                                                );
                                                let l23 = i32::from(
                                                    *arg0
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>(),
                                                );
                                                let l27 = *arg0
                                                    .add(9 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l28 = *arg0
                                                    .add(10 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len29 = l28;
                                                let bytes29 = _rt::Vec::from_raw_parts(
                                                    l27.cast(),
                                                    len29,
                                                    len29,
                                                );
                                                let l30 = i32::from(
                                                    *arg0
                                                        .add(11 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>(),
                                                );
                                                OauthConfig {
                                                    client_id: _rt::string_lift(bytes22),
                                                    client_secret: match l23 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l24 = *arg0
                                                                    .add(7 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l25 = *arg0
                                                                    .add(8 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len26 = l25;
                                                                let bytes26 = _rt::Vec::from_raw_parts(
                                                                    l24.cast(),
                                                                    len26,
                                                                    len26,
                                                                );
                                                                _rt::string_lift(bytes26)
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                    token_url: _rt::string_lift(bytes29),
                                                    scope: match l30 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l31 = *arg0
                                                                    .add(12 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l32 = *arg0
                                                                    .add(13 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len33 = l32;
                                                                let bytes33 = _rt::Vec::from_raw_parts(
                                                                    l31.cast(),
                                                                    len33,
                                                                    len33,
                                                                );
                                                                _rt::string_lift(bytes33)
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                }
                                            };
                                            Credentials::Oauth(e34)
                                        }
                                    };
                                    v34
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        match l35 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l36 = *arg0
                                        .add(4 + 14 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i32>();
                                    l36 as u32
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        match l37 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l38 = *arg0
                                        .add(8 + 15 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l39 = *arg0
                                        .add(8 + 16 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base100 = l38;
                                    let len100 = l39;
                                    let mut result100 = _rt::Vec::with_capacity(len100);
                                    for i in 0..len100 {
                                        let base = base100
                                            .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                        let e100 = {
                                            let l40 = *base.add(0).cast::<*mut u8>();
                                            let l41 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len42 = l41;
                                            let bytes42 = _rt::Vec::from_raw_parts(
                                                l40.cast(),
                                                len42,
                                                len42,
                                            );
                                            let l43 = i32::from(
                                                *base
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            use super::super::super::super::golem::vector::types::FlatMetadataValue as V99;
                                            let v99 = match l43 {
                                                0 => {
                                                    let e99 = {
                                                        let l44 = *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l45 = *base
                                                            .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len46 = l45;
                                                        let bytes46 = _rt::Vec::from_raw_parts(
                                                            l44.cast(),
                                                            len46,
                                                            len46,
                                                        );
                                                        _rt::string_lift(bytes46)
                                                    };
                                                    V99::StringVal(e99)
                                                }
                                                1 => {
                                                    let e99 = {
                                                        let l47 = *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<f64>();
                                                        l47
                                                    };
                                                    V99::NumberVal(e99)
                                                }
                                                2 => {
                                                    let e99 = {
                                                        let l48 = *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i64>();
                                                        l48
                                                    };
                                                    V99::IntegerVal(e99)
                                                }
                                                3 => {
                                                    let e99 = {
                                                        let l49 = i32::from(
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        _rt::bool_lift(l49 as u8)
                                                    };
                                                    V99::BooleanVal(e99)
                                                }
                                                4 => {
                                                    let e99 = {
                                                        let l50 = *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l51 = *base
                                                            .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base68 = l50;
                                                        let len68 = l51;
                                                        let mut result68 = _rt::Vec::with_capacity(len68);
                                                        for i in 0..len68 {
                                                            let base = base68.add(i * 24);
                                                            let e68 = {
                                                                let l52 = i32::from(*base.add(0).cast::<u8>());
                                                                use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V67;
                                                                let v67 = match l52 {
                                                                    0 => {
                                                                        let e67 = {
                                                                            let l53 = *base.add(8).cast::<*mut u8>();
                                                                            let l54 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len55 = l54;
                                                                            let bytes55 = _rt::Vec::from_raw_parts(
                                                                                l53.cast(),
                                                                                len55,
                                                                                len55,
                                                                            );
                                                                            _rt::string_lift(bytes55)
                                                                        };
                                                                        V67::StringVal(e67)
                                                                    }
                                                                    1 => {
                                                                        let e67 = {
                                                                            let l56 = *base.add(8).cast::<f64>();
                                                                            l56
                                                                        };
                                                                        V67::NumberVal(e67)
                                                                    }
                                                                    2 => {
                                                                        let e67 = {
                                                                            let l57 = *base.add(8).cast::<i64>();
                                                                            l57
                                                                        };
                                                                        V67::IntegerVal(e67)
                                                                    }
                                                                    3 => {
                                                                        let e67 = {
                                                                            let l58 = i32::from(*base.add(8).cast::<u8>());
                                                                            _rt::bool_lift(l58 as u8)
                                                                        };
                                                                        V67::BooleanVal(e67)
                                                                    }
                                                                    4 => V67::NullVal,
                                                                    5 => {
                                                                        let e67 = {
                                                                            let l59 = *base.add(8).cast::<*mut u8>();
                                                                            let l60 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len61 = l60;
                                                                            let bytes61 = _rt::Vec::from_raw_parts(
                                                                                l59.cast(),
                                                                                len61,
                                                                                len61,
                                                                            );
                                                                            _rt::string_lift(bytes61)
                                                                        };
                                                                        V67::DatetimeVal(e67)
                                                                    }
                                                                    6 => {
                                                                        let e67 = {
                                                                            let l62 = *base.add(8).cast::<f64>();
                                                                            let l63 = *base.add(16).cast::<f64>();
                                                                            super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                                latitude: l62,
                                                                                longitude: l63,
                                                                            }
                                                                        };
                                                                        V67::GeoVal(e67)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 7, "invalid enum discriminant");
                                                                        let e67 = {
                                                                            let l64 = *base.add(8).cast::<*mut u8>();
                                                                            let l65 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len66 = l65;
                                                                            _rt::Vec::from_raw_parts(l64.cast(), len66, len66)
                                                                        };
                                                                        V67::BlobVal(e67)
                                                                    }
                                                                };
                                                                v67
                                                            };
                                                            result68.push(e68);
                                                        }
                                                        _rt::cabi_dealloc(base68, len68 * 24, 8);
                                                        result68
                                                    };
                                                    V99::ArrayVal(e99)
                                                }
                                                5 => {
                                                    let e99 = {
                                                        let l69 = *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l70 = *base
                                                            .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base90 = l69;
                                                        let len90 = l70;
                                                        let mut result90 = _rt::Vec::with_capacity(len90);
                                                        for i in 0..len90 {
                                                            let base = base90
                                                                .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                            let e90 = {
                                                                let l71 = *base.add(0).cast::<*mut u8>();
                                                                let l72 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len73 = l72;
                                                                let bytes73 = _rt::Vec::from_raw_parts(
                                                                    l71.cast(),
                                                                    len73,
                                                                    len73,
                                                                );
                                                                let l74 = i32::from(
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V89;
                                                                let v89 = match l74 {
                                                                    0 => {
                                                                        let e89 = {
                                                                            let l75 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l76 = *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len77 = l76;
                                                                            let bytes77 = _rt::Vec::from_raw_parts(
                                                                                l75.cast(),
                                                                                len77,
                                                                                len77,
                                                                            );
                                                                            _rt::string_lift(bytes77)
                                                                        };
                                                                        V89::StringVal(e89)
                                                                    }
                                                                    1 => {
                                                                        let e89 = {
                                                                            let l78 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<f64>();
                                                                            l78
                                                                        };
                                                                        V89::NumberVal(e89)
                                                                    }
                                                                    2 => {
                                                                        let e89 = {
                                                                            let l79 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i64>();
                                                                            l79
                                                                        };
                                                                        V89::IntegerVal(e89)
                                                                    }
                                                                    3 => {
                                                                        let e89 = {
                                                                            let l80 = i32::from(
                                                                                *base
                                                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            _rt::bool_lift(l80 as u8)
                                                                        };
                                                                        V89::BooleanVal(e89)
                                                                    }
                                                                    4 => V89::NullVal,
                                                                    5 => {
                                                                        let e89 = {
                                                                            let l81 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l82 = *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len83 = l82;
                                                                            let bytes83 = _rt::Vec::from_raw_parts(
                                                                                l81.cast(),
                                                                                len83,
                                                                                len83,
                                                                            );
                                                                            _rt::string_lift(bytes83)
                                                                        };
                                                                        V89::DatetimeVal(e89)
                                                                    }
                                                                    6 => {
                                                                        let e89 = {
                                                                            let l84 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<f64>();
                                                                            let l85 = *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<f64>();
                                                                            super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                                latitude: l84,
                                                                                longitude: l85,
                                                                            }
                                                                        };
                                                                        V89::GeoVal(e89)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 7, "invalid enum discriminant");
                                                                        let e89 = {
                                                                            let l86 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l87 = *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len88 = l87;
                                                                            _rt::Vec::from_raw_parts(l86.cast(), len88, len88)
                                                                        };
                                                                        V89::BlobVal(e89)
                                                                    }
                                                                };
                                                                (_rt::string_lift(bytes73), v89)
                                                            };
                                                            result90.push(e90);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base90,
                                                            len90 * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                            8,
                                                        );
                                                        result90
                                                    };
                                                    V99::ObjectVal(e99)
                                                }
                                                6 => V99::NullVal,
                                                7 => {
                                                    let e99 = {
                                                        let l91 = *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<f64>();
                                                        let l92 = *base
                                                            .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<f64>();
                                                        super::super::super::super::golem::vector::types::GeoCoordinates {
                                                            latitude: l91,
                                                            longitude: l92,
                                                        }
                                                    };
                                                    V99::GeoVal(e99)
                                                }
                                                8 => {
                                                    let e99 = {
                                                        let l93 = *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l94 = *base
                                                            .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len95 = l94;
                                                        let bytes95 = _rt::Vec::from_raw_parts(
                                                            l93.cast(),
                                                            len95,
                                                            len95,
                                                        );
                                                        _rt::string_lift(bytes95)
                                                    };
                                                    V99::DatetimeVal(e99)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 9, "invalid enum discriminant");
                                                    let e99 = {
                                                        let l96 = *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l97 = *base
                                                            .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len98 = l97;
                                                        _rt::Vec::from_raw_parts(l96.cast(), len98, len98)
                                                    };
                                                    V99::BlobVal(e99)
                                                }
                                            };
                                            (_rt::string_lift(bytes42), v99)
                                        };
                                        result100.push(e100);
                                    }
                                    _rt::cabi_dealloc(
                                        base100,
                                        len100 * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                        8,
                                    );
                                    result100
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    );
                    _rt::cabi_dealloc(
                        arg0,
                        8 + 17 * ::core::mem::size_of::<*const u8>(),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let ptr102 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result101 {
                        Ok(_) => {
                            *ptr102.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr102.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::golem::vector::types::VectorError as V113;
                            match e {
                                V113::NotFound(e) => {
                                    *ptr102
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                    let vec103 = (e.into_bytes()).into_boxed_slice();
                                    let ptr103 = vec103.as_ptr().cast::<u8>();
                                    let len103 = vec103.len();
                                    ::core::mem::forget(vec103);
                                    *ptr102
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len103;
                                    *ptr102
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr103.cast_mut();
                                }
                                V113::AlreadyExists(e) => {
                                    *ptr102
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec104 = (e.into_bytes()).into_boxed_slice();
                                    let ptr104 = vec104.as_ptr().cast::<u8>();
                                    let len104 = vec104.len();
                                    ::core::mem::forget(vec104);
                                    *ptr102
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len104;
                                    *ptr102
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr104.cast_mut();
                                }
                                V113::InvalidParams(e) => {
                                    *ptr102
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                    let vec105 = (e.into_bytes()).into_boxed_slice();
                                    let ptr105 = vec105.as_ptr().cast::<u8>();
                                    let len105 = vec105.len();
                                    ::core::mem::forget(vec105);
                                    *ptr102
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len105;
                                    *ptr102
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr105.cast_mut();
                                }
                                V113::UnsupportedFeature(e) => {
                                    *ptr102
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                    let vec106 = (e.into_bytes()).into_boxed_slice();
                                    let ptr106 = vec106.as_ptr().cast::<u8>();
                                    let len106 = vec106.len();
                                    ::core::mem::forget(vec106);
                                    *ptr102
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len106;
                                    *ptr102
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr106.cast_mut();
                                }
                                V113::DimensionMismatch(e) => {
                                    *ptr102
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (4i32) as u8;
                                    let vec107 = (e.into_bytes()).into_boxed_slice();
                                    let ptr107 = vec107.as_ptr().cast::<u8>();
                                    let len107 = vec107.len();
                                    ::core::mem::forget(vec107);
                                    *ptr102
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len107;
                                    *ptr102
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr107.cast_mut();
                                }
                                V113::InvalidVector(e) => {
                                    *ptr102
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (5i32) as u8;
                                    let vec108 = (e.into_bytes()).into_boxed_slice();
                                    let ptr108 = vec108.as_ptr().cast::<u8>();
                                    let len108 = vec108.len();
                                    ::core::mem::forget(vec108);
                                    *ptr102
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len108;
                                    *ptr102
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr108.cast_mut();
                                }
                                V113::Unauthorized(e) => {
                                    *ptr102
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (6i32) as u8;
                                    let vec109 = (e.into_bytes()).into_boxed_slice();
                                    let ptr109 = vec109.as_ptr().cast::<u8>();
                                    let len109 = vec109.len();
                                    ::core::mem::forget(vec109);
                                    *ptr102
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len109;
                                    *ptr102
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr109.cast_mut();
                                }
                                V113::RateLimited(e) => {
                                    *ptr102
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (7i32) as u8;
                                    let vec110 = (e.into_bytes()).into_boxed_slice();
                                    let ptr110 = vec110.as_ptr().cast::<u8>();
                                    let len110 = vec110.len();
                                    ::core::mem::forget(vec110);
                                    *ptr102
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len110;
                                    *ptr102
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr110.cast_mut();
                                }
                                V113::ProviderError(e) => {
                                    *ptr102
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (8i32) as u8;
                                    let vec111 = (e.into_bytes()).into_boxed_slice();
                                    let ptr111 = vec111.as_ptr().cast::<u8>();
                                    let len111 = vec111.len();
                                    ::core::mem::forget(vec111);
                                    *ptr102
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len111;
                                    *ptr102
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr111.cast_mut();
                                }
                                V113::ConnectionError(e) => {
                                    *ptr102
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (9i32) as u8;
                                    let vec112 = (e.into_bytes()).into_boxed_slice();
                                    let ptr112 = vec112.as_ptr().cast::<u8>();
                                    let len112 = vec112.len();
                                    ::core::mem::forget(vec112);
                                    *ptr102
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len112;
                                    *ptr102
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr112.cast_mut();
                                }
                            }
                        }
                    };
                    ptr102
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_connect<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l1 {
                                0 => {
                                    let l2 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l3 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                }
                                1 => {
                                    let l4 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l5 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                                2 => {
                                    let l6 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l7 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l6, l7, 1);
                                }
                                3 => {
                                    let l8 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l9 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l8, l9, 1);
                                }
                                4 => {
                                    let l10 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l11 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l10, l11, 1);
                                }
                                5 => {
                                    let l12 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l13 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l12, l13, 1);
                                }
                                6 => {
                                    let l14 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l15 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l14, l15, 1);
                                }
                                7 => {
                                    let l16 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l17 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l16, l17, 1);
                                }
                                8 => {
                                    let l18 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l19 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l18, l19, 1);
                                }
                                _ => {
                                    let l20 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l21 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l20, l21, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_disconnect_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::disconnect();
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result0 {
                        Ok(_) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::golem::vector::types::VectorError as V12;
                            match e {
                                V12::NotFound(e) => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                    let vec2 = (e.into_bytes()).into_boxed_slice();
                                    let ptr2 = vec2.as_ptr().cast::<u8>();
                                    let len2 = vec2.len();
                                    ::core::mem::forget(vec2);
                                    *ptr1
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len2;
                                    *ptr1
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr2.cast_mut();
                                }
                                V12::AlreadyExists(e) => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec3 = (e.into_bytes()).into_boxed_slice();
                                    let ptr3 = vec3.as_ptr().cast::<u8>();
                                    let len3 = vec3.len();
                                    ::core::mem::forget(vec3);
                                    *ptr1
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len3;
                                    *ptr1
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr3.cast_mut();
                                }
                                V12::InvalidParams(e) => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                    let vec4 = (e.into_bytes()).into_boxed_slice();
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    ::core::mem::forget(vec4);
                                    *ptr1
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len4;
                                    *ptr1
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr4.cast_mut();
                                }
                                V12::UnsupportedFeature(e) => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                    let vec5 = (e.into_bytes()).into_boxed_slice();
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    ::core::mem::forget(vec5);
                                    *ptr1
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len5;
                                    *ptr1
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr5.cast_mut();
                                }
                                V12::DimensionMismatch(e) => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (4i32) as u8;
                                    let vec6 = (e.into_bytes()).into_boxed_slice();
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    ::core::mem::forget(vec6);
                                    *ptr1
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len6;
                                    *ptr1
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr6.cast_mut();
                                }
                                V12::InvalidVector(e) => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (5i32) as u8;
                                    let vec7 = (e.into_bytes()).into_boxed_slice();
                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                    let len7 = vec7.len();
                                    ::core::mem::forget(vec7);
                                    *ptr1
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len7;
                                    *ptr1
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr7.cast_mut();
                                }
                                V12::Unauthorized(e) => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (6i32) as u8;
                                    let vec8 = (e.into_bytes()).into_boxed_slice();
                                    let ptr8 = vec8.as_ptr().cast::<u8>();
                                    let len8 = vec8.len();
                                    ::core::mem::forget(vec8);
                                    *ptr1
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len8;
                                    *ptr1
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr8.cast_mut();
                                }
                                V12::RateLimited(e) => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (7i32) as u8;
                                    let vec9 = (e.into_bytes()).into_boxed_slice();
                                    let ptr9 = vec9.as_ptr().cast::<u8>();
                                    let len9 = vec9.len();
                                    ::core::mem::forget(vec9);
                                    *ptr1
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len9;
                                    *ptr1
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr9.cast_mut();
                                }
                                V12::ProviderError(e) => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (8i32) as u8;
                                    let vec10 = (e.into_bytes()).into_boxed_slice();
                                    let ptr10 = vec10.as_ptr().cast::<u8>();
                                    let len10 = vec10.len();
                                    ::core::mem::forget(vec10);
                                    *ptr1
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len10;
                                    *ptr1
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr10.cast_mut();
                                }
                                V12::ConnectionError(e) => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (9i32) as u8;
                                    let vec11 = (e.into_bytes()).into_boxed_slice();
                                    let ptr11 = vec11.as_ptr().cast::<u8>();
                                    let len11 = vec11.len();
                                    ::core::mem::forget(vec11);
                                    *ptr1
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len11;
                                    *ptr1
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr11.cast_mut();
                                }
                            }
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_disconnect<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l1 {
                                0 => {
                                    let l2 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l3 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                }
                                1 => {
                                    let l4 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l5 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                                2 => {
                                    let l6 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l7 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l6, l7, 1);
                                }
                                3 => {
                                    let l8 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l9 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l8, l9, 1);
                                }
                                4 => {
                                    let l10 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l11 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l10, l11, 1);
                                }
                                5 => {
                                    let l12 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l13 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l12, l13, 1);
                                }
                                6 => {
                                    let l14 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l15 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l14, l15, 1);
                                }
                                7 => {
                                    let l16 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l17 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l16, l17, 1);
                                }
                                8 => {
                                    let l18 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l19 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l18, l19, 1);
                                }
                                _ => {
                                    let l20 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l21 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l20, l21, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_get_connection_status_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::get_connection_status();
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result0 {
                        Ok(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            let ConnectionStatus {
                                connected: connected2,
                                provider: provider2,
                                endpoint: endpoint2,
                                last_activity: last_activity2,
                                connection_id: connection_id2,
                            } = e;
                            *ptr1.add(8).cast::<u8>() = (match connected2 {
                                true => 1,
                                false => 0,
                            }) as u8;
                            match provider2 {
                                Some(e) => {
                                    *ptr1
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec3 = (e.into_bytes()).into_boxed_slice();
                                    let ptr3 = vec3.as_ptr().cast::<u8>();
                                    let len3 = vec3.len();
                                    ::core::mem::forget(vec3);
                                    *ptr1
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len3;
                                    *ptr1
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr3.cast_mut();
                                }
                                None => {
                                    *ptr1
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match endpoint2 {
                                Some(e) => {
                                    *ptr1
                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec4 = (e.into_bytes()).into_boxed_slice();
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    ::core::mem::forget(vec4);
                                    *ptr1
                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len4;
                                    *ptr1
                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr4.cast_mut();
                                }
                                None => {
                                    *ptr1
                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match last_activity2 {
                                Some(e) => {
                                    *ptr1
                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    *ptr1
                                        .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i64>() = _rt::as_i64(e);
                                }
                                None => {
                                    *ptr1
                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match connection_id2 {
                                Some(e) => {
                                    *ptr1
                                        .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec5 = (e.into_bytes()).into_boxed_slice();
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    ::core::mem::forget(vec5);
                                    *ptr1
                                        .add(32 + 8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len5;
                                    *ptr1
                                        .add(32 + 7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr5.cast_mut();
                                }
                                None => {
                                    *ptr1
                                        .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::golem::vector::types::VectorError as V16;
                            match e {
                                V16::NotFound(e) => {
                                    *ptr1.add(8).cast::<u8>() = (0i32) as u8;
                                    let vec6 = (e.into_bytes()).into_boxed_slice();
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    ::core::mem::forget(vec6);
                                    *ptr1
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len6;
                                    *ptr1
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr6.cast_mut();
                                }
                                V16::AlreadyExists(e) => {
                                    *ptr1.add(8).cast::<u8>() = (1i32) as u8;
                                    let vec7 = (e.into_bytes()).into_boxed_slice();
                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                    let len7 = vec7.len();
                                    ::core::mem::forget(vec7);
                                    *ptr1
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len7;
                                    *ptr1
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr7.cast_mut();
                                }
                                V16::InvalidParams(e) => {
                                    *ptr1.add(8).cast::<u8>() = (2i32) as u8;
                                    let vec8 = (e.into_bytes()).into_boxed_slice();
                                    let ptr8 = vec8.as_ptr().cast::<u8>();
                                    let len8 = vec8.len();
                                    ::core::mem::forget(vec8);
                                    *ptr1
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len8;
                                    *ptr1
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr8.cast_mut();
                                }
                                V16::UnsupportedFeature(e) => {
                                    *ptr1.add(8).cast::<u8>() = (3i32) as u8;
                                    let vec9 = (e.into_bytes()).into_boxed_slice();
                                    let ptr9 = vec9.as_ptr().cast::<u8>();
                                    let len9 = vec9.len();
                                    ::core::mem::forget(vec9);
                                    *ptr1
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len9;
                                    *ptr1
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr9.cast_mut();
                                }
                                V16::DimensionMismatch(e) => {
                                    *ptr1.add(8).cast::<u8>() = (4i32) as u8;
                                    let vec10 = (e.into_bytes()).into_boxed_slice();
                                    let ptr10 = vec10.as_ptr().cast::<u8>();
                                    let len10 = vec10.len();
                                    ::core::mem::forget(vec10);
                                    *ptr1
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len10;
                                    *ptr1
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr10.cast_mut();
                                }
                                V16::InvalidVector(e) => {
                                    *ptr1.add(8).cast::<u8>() = (5i32) as u8;
                                    let vec11 = (e.into_bytes()).into_boxed_slice();
                                    let ptr11 = vec11.as_ptr().cast::<u8>();
                                    let len11 = vec11.len();
                                    ::core::mem::forget(vec11);
                                    *ptr1
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len11;
                                    *ptr1
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr11.cast_mut();
                                }
                                V16::Unauthorized(e) => {
                                    *ptr1.add(8).cast::<u8>() = (6i32) as u8;
                                    let vec12 = (e.into_bytes()).into_boxed_slice();
                                    let ptr12 = vec12.as_ptr().cast::<u8>();
                                    let len12 = vec12.len();
                                    ::core::mem::forget(vec12);
                                    *ptr1
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len12;
                                    *ptr1
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr12.cast_mut();
                                }
                                V16::RateLimited(e) => {
                                    *ptr1.add(8).cast::<u8>() = (7i32) as u8;
                                    let vec13 = (e.into_bytes()).into_boxed_slice();
                                    let ptr13 = vec13.as_ptr().cast::<u8>();
                                    let len13 = vec13.len();
                                    ::core::mem::forget(vec13);
                                    *ptr1
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len13;
                                    *ptr1
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr13.cast_mut();
                                }
                                V16::ProviderError(e) => {
                                    *ptr1.add(8).cast::<u8>() = (8i32) as u8;
                                    let vec14 = (e.into_bytes()).into_boxed_slice();
                                    let ptr14 = vec14.as_ptr().cast::<u8>();
                                    let len14 = vec14.len();
                                    ::core::mem::forget(vec14);
                                    *ptr1
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len14;
                                    *ptr1
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr14.cast_mut();
                                }
                                V16::ConnectionError(e) => {
                                    *ptr1.add(8).cast::<u8>() = (9i32) as u8;
                                    let vec15 = (e.into_bytes()).into_boxed_slice();
                                    let ptr15 = vec15.as_ptr().cast::<u8>();
                                    let len15 = vec15.len();
                                    ::core::mem::forget(vec15);
                                    *ptr1
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len15;
                                    *ptr1
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr15.cast_mut();
                                }
                            }
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_get_connection_status<T: Guest>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = i32::from(
                                *arg0
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l1 {
                                0 => {}
                                _ => {
                                    let l2 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l3 = *arg0
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                }
                            }
                            let l4 = i32::from(
                                *arg0
                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l4 {
                                0 => {}
                                _ => {
                                    let l5 = *arg0
                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l6 = *arg0
                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l5, l6, 1);
                                }
                            }
                            let l7 = i32::from(
                                *arg0
                                    .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l7 {
                                0 => {}
                                _ => {
                                    let l8 = *arg0
                                        .add(32 + 7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l9 = *arg0
                                        .add(32 + 8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l8, l9, 1);
                                }
                            }
                        }
                        _ => {
                            let l10 = i32::from(*arg0.add(8).cast::<u8>());
                            match l10 {
                                0 => {
                                    let l11 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l12 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l11, l12, 1);
                                }
                                1 => {
                                    let l13 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l14 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l13, l14, 1);
                                }
                                2 => {
                                    let l15 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l16 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l15, l16, 1);
                                }
                                3 => {
                                    let l17 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l18 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l17, l18, 1);
                                }
                                4 => {
                                    let l19 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l20 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l19, l20, 1);
                                }
                                5 => {
                                    let l21 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l22 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l21, l22, 1);
                                }
                                6 => {
                                    let l23 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l24 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l23, l24, 1);
                                }
                                7 => {
                                    let l25 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l26 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l25, l26, 1);
                                }
                                8 => {
                                    let l27 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l28 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l27, l28, 1);
                                }
                                _ => {
                                    let l29 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l30 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l29, l30, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_test_connection_cabi<T: Guest>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len2 = l1;
                    let bytes2 = _rt::Vec::from_raw_parts(l0.cast(), len2, len2);
                    let l3 = i32::from(
                        *arg0.add(2 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    let l35 = i32::from(
                        *arg0.add(14 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    let l37 = i32::from(
                        *arg0
                            .add(8 + 14 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    let result101 = T::test_connection(
                        _rt::string_lift(bytes2),
                        match l3 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l4 = i32::from(
                                        *arg0
                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    let v34 = match l4 {
                                        0 => {
                                            let e34 = {
                                                let l5 = *arg0
                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l6 = *arg0
                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len7 = l6;
                                                let bytes7 = _rt::Vec::from_raw_parts(
                                                    l5.cast(),
                                                    len7,
                                                    len7,
                                                );
                                                _rt::string_lift(bytes7)
                                            };
                                            Credentials::ApiKey(e34)
                                        }
                                        1 => {
                                            let e34 = {
                                                let l8 = *arg0
                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l9 = *arg0
                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len10 = l9;
                                                let bytes10 = _rt::Vec::from_raw_parts(
                                                    l8.cast(),
                                                    len10,
                                                    len10,
                                                );
                                                let l11 = *arg0
                                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l12 = *arg0
                                                    .add(7 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len13 = l12;
                                                let bytes13 = _rt::Vec::from_raw_parts(
                                                    l11.cast(),
                                                    len13,
                                                    len13,
                                                );
                                                (_rt::string_lift(bytes10), _rt::string_lift(bytes13))
                                            };
                                            Credentials::UsernamePassword(e34)
                                        }
                                        2 => {
                                            let e34 = {
                                                let l14 = *arg0
                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l15 = *arg0
                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len16 = l15;
                                                let bytes16 = _rt::Vec::from_raw_parts(
                                                    l14.cast(),
                                                    len16,
                                                    len16,
                                                );
                                                _rt::string_lift(bytes16)
                                            };
                                            Credentials::Token(e34)
                                        }
                                        3 => {
                                            let e34 = {
                                                let l17 = *arg0
                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l18 = *arg0
                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len19 = l18;
                                                _rt::Vec::from_raw_parts(l17.cast(), len19, len19)
                                            };
                                            Credentials::Certificate(e34)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 4, "invalid enum discriminant");
                                            let e34 = {
                                                let l20 = *arg0
                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l21 = *arg0
                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len22 = l21;
                                                let bytes22 = _rt::Vec::from_raw_parts(
                                                    l20.cast(),
                                                    len22,
                                                    len22,
                                                );
                                                let l23 = i32::from(
                                                    *arg0
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>(),
                                                );
                                                let l27 = *arg0
                                                    .add(9 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l28 = *arg0
                                                    .add(10 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len29 = l28;
                                                let bytes29 = _rt::Vec::from_raw_parts(
                                                    l27.cast(),
                                                    len29,
                                                    len29,
                                                );
                                                let l30 = i32::from(
                                                    *arg0
                                                        .add(11 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>(),
                                                );
                                                OauthConfig {
                                                    client_id: _rt::string_lift(bytes22),
                                                    client_secret: match l23 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l24 = *arg0
                                                                    .add(7 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l25 = *arg0
                                                                    .add(8 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len26 = l25;
                                                                let bytes26 = _rt::Vec::from_raw_parts(
                                                                    l24.cast(),
                                                                    len26,
                                                                    len26,
                                                                );
                                                                _rt::string_lift(bytes26)
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                    token_url: _rt::string_lift(bytes29),
                                                    scope: match l30 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l31 = *arg0
                                                                    .add(12 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l32 = *arg0
                                                                    .add(13 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len33 = l32;
                                                                let bytes33 = _rt::Vec::from_raw_parts(
                                                                    l31.cast(),
                                                                    len33,
                                                                    len33,
                                                                );
                                                                _rt::string_lift(bytes33)
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                }
                                            };
                                            Credentials::Oauth(e34)
                                        }
                                    };
                                    v34
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        match l35 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l36 = *arg0
                                        .add(4 + 14 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i32>();
                                    l36 as u32
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        match l37 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l38 = *arg0
                                        .add(8 + 15 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l39 = *arg0
                                        .add(8 + 16 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base100 = l38;
                                    let len100 = l39;
                                    let mut result100 = _rt::Vec::with_capacity(len100);
                                    for i in 0..len100 {
                                        let base = base100
                                            .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                        let e100 = {
                                            let l40 = *base.add(0).cast::<*mut u8>();
                                            let l41 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len42 = l41;
                                            let bytes42 = _rt::Vec::from_raw_parts(
                                                l40.cast(),
                                                len42,
                                                len42,
                                            );
                                            let l43 = i32::from(
                                                *base
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            use super::super::super::super::golem::vector::types::FlatMetadataValue as V99;
                                            let v99 = match l43 {
                                                0 => {
                                                    let e99 = {
                                                        let l44 = *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l45 = *base
                                                            .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len46 = l45;
                                                        let bytes46 = _rt::Vec::from_raw_parts(
                                                            l44.cast(),
                                                            len46,
                                                            len46,
                                                        );
                                                        _rt::string_lift(bytes46)
                                                    };
                                                    V99::StringVal(e99)
                                                }
                                                1 => {
                                                    let e99 = {
                                                        let l47 = *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<f64>();
                                                        l47
                                                    };
                                                    V99::NumberVal(e99)
                                                }
                                                2 => {
                                                    let e99 = {
                                                        let l48 = *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i64>();
                                                        l48
                                                    };
                                                    V99::IntegerVal(e99)
                                                }
                                                3 => {
                                                    let e99 = {
                                                        let l49 = i32::from(
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        _rt::bool_lift(l49 as u8)
                                                    };
                                                    V99::BooleanVal(e99)
                                                }
                                                4 => {
                                                    let e99 = {
                                                        let l50 = *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l51 = *base
                                                            .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base68 = l50;
                                                        let len68 = l51;
                                                        let mut result68 = _rt::Vec::with_capacity(len68);
                                                        for i in 0..len68 {
                                                            let base = base68.add(i * 24);
                                                            let e68 = {
                                                                let l52 = i32::from(*base.add(0).cast::<u8>());
                                                                use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V67;
                                                                let v67 = match l52 {
                                                                    0 => {
                                                                        let e67 = {
                                                                            let l53 = *base.add(8).cast::<*mut u8>();
                                                                            let l54 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len55 = l54;
                                                                            let bytes55 = _rt::Vec::from_raw_parts(
                                                                                l53.cast(),
                                                                                len55,
                                                                                len55,
                                                                            );
                                                                            _rt::string_lift(bytes55)
                                                                        };
                                                                        V67::StringVal(e67)
                                                                    }
                                                                    1 => {
                                                                        let e67 = {
                                                                            let l56 = *base.add(8).cast::<f64>();
                                                                            l56
                                                                        };
                                                                        V67::NumberVal(e67)
                                                                    }
                                                                    2 => {
                                                                        let e67 = {
                                                                            let l57 = *base.add(8).cast::<i64>();
                                                                            l57
                                                                        };
                                                                        V67::IntegerVal(e67)
                                                                    }
                                                                    3 => {
                                                                        let e67 = {
                                                                            let l58 = i32::from(*base.add(8).cast::<u8>());
                                                                            _rt::bool_lift(l58 as u8)
                                                                        };
                                                                        V67::BooleanVal(e67)
                                                                    }
                                                                    4 => V67::NullVal,
                                                                    5 => {
                                                                        let e67 = {
                                                                            let l59 = *base.add(8).cast::<*mut u8>();
                                                                            let l60 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len61 = l60;
                                                                            let bytes61 = _rt::Vec::from_raw_parts(
                                                                                l59.cast(),
                                                                                len61,
                                                                                len61,
                                                                            );
                                                                            _rt::string_lift(bytes61)
                                                                        };
                                                                        V67::DatetimeVal(e67)
                                                                    }
                                                                    6 => {
                                                                        let e67 = {
                                                                            let l62 = *base.add(8).cast::<f64>();
                                                                            let l63 = *base.add(16).cast::<f64>();
                                                                            super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                                latitude: l62,
                                                                                longitude: l63,
                                                                            }
                                                                        };
                                                                        V67::GeoVal(e67)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 7, "invalid enum discriminant");
                                                                        let e67 = {
                                                                            let l64 = *base.add(8).cast::<*mut u8>();
                                                                            let l65 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len66 = l65;
                                                                            _rt::Vec::from_raw_parts(l64.cast(), len66, len66)
                                                                        };
                                                                        V67::BlobVal(e67)
                                                                    }
                                                                };
                                                                v67
                                                            };
                                                            result68.push(e68);
                                                        }
                                                        _rt::cabi_dealloc(base68, len68 * 24, 8);
                                                        result68
                                                    };
                                                    V99::ArrayVal(e99)
                                                }
                                                5 => {
                                                    let e99 = {
                                                        let l69 = *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l70 = *base
                                                            .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base90 = l69;
                                                        let len90 = l70;
                                                        let mut result90 = _rt::Vec::with_capacity(len90);
                                                        for i in 0..len90 {
                                                            let base = base90
                                                                .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                            let e90 = {
                                                                let l71 = *base.add(0).cast::<*mut u8>();
                                                                let l72 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len73 = l72;
                                                                let bytes73 = _rt::Vec::from_raw_parts(
                                                                    l71.cast(),
                                                                    len73,
                                                                    len73,
                                                                );
                                                                let l74 = i32::from(
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V89;
                                                                let v89 = match l74 {
                                                                    0 => {
                                                                        let e89 = {
                                                                            let l75 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l76 = *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len77 = l76;
                                                                            let bytes77 = _rt::Vec::from_raw_parts(
                                                                                l75.cast(),
                                                                                len77,
                                                                                len77,
                                                                            );
                                                                            _rt::string_lift(bytes77)
                                                                        };
                                                                        V89::StringVal(e89)
                                                                    }
                                                                    1 => {
                                                                        let e89 = {
                                                                            let l78 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<f64>();
                                                                            l78
                                                                        };
                                                                        V89::NumberVal(e89)
                                                                    }
                                                                    2 => {
                                                                        let e89 = {
                                                                            let l79 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i64>();
                                                                            l79
                                                                        };
                                                                        V89::IntegerVal(e89)
                                                                    }
                                                                    3 => {
                                                                        let e89 = {
                                                                            let l80 = i32::from(
                                                                                *base
                                                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            _rt::bool_lift(l80 as u8)
                                                                        };
                                                                        V89::BooleanVal(e89)
                                                                    }
                                                                    4 => V89::NullVal,
                                                                    5 => {
                                                                        let e89 = {
                                                                            let l81 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l82 = *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len83 = l82;
                                                                            let bytes83 = _rt::Vec::from_raw_parts(
                                                                                l81.cast(),
                                                                                len83,
                                                                                len83,
                                                                            );
                                                                            _rt::string_lift(bytes83)
                                                                        };
                                                                        V89::DatetimeVal(e89)
                                                                    }
                                                                    6 => {
                                                                        let e89 = {
                                                                            let l84 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<f64>();
                                                                            let l85 = *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<f64>();
                                                                            super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                                latitude: l84,
                                                                                longitude: l85,
                                                                            }
                                                                        };
                                                                        V89::GeoVal(e89)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 7, "invalid enum discriminant");
                                                                        let e89 = {
                                                                            let l86 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l87 = *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len88 = l87;
                                                                            _rt::Vec::from_raw_parts(l86.cast(), len88, len88)
                                                                        };
                                                                        V89::BlobVal(e89)
                                                                    }
                                                                };
                                                                (_rt::string_lift(bytes73), v89)
                                                            };
                                                            result90.push(e90);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base90,
                                                            len90 * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                            8,
                                                        );
                                                        result90
                                                    };
                                                    V99::ObjectVal(e99)
                                                }
                                                6 => V99::NullVal,
                                                7 => {
                                                    let e99 = {
                                                        let l91 = *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<f64>();
                                                        let l92 = *base
                                                            .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<f64>();
                                                        super::super::super::super::golem::vector::types::GeoCoordinates {
                                                            latitude: l91,
                                                            longitude: l92,
                                                        }
                                                    };
                                                    V99::GeoVal(e99)
                                                }
                                                8 => {
                                                    let e99 = {
                                                        let l93 = *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l94 = *base
                                                            .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len95 = l94;
                                                        let bytes95 = _rt::Vec::from_raw_parts(
                                                            l93.cast(),
                                                            len95,
                                                            len95,
                                                        );
                                                        _rt::string_lift(bytes95)
                                                    };
                                                    V99::DatetimeVal(e99)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 9, "invalid enum discriminant");
                                                    let e99 = {
                                                        let l96 = *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l97 = *base
                                                            .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len98 = l97;
                                                        _rt::Vec::from_raw_parts(l96.cast(), len98, len98)
                                                    };
                                                    V99::BlobVal(e99)
                                                }
                                            };
                                            (_rt::string_lift(bytes42), v99)
                                        };
                                        result100.push(e100);
                                    }
                                    _rt::cabi_dealloc(
                                        base100,
                                        len100 * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                        8,
                                    );
                                    result100
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    );
                    _rt::cabi_dealloc(
                        arg0,
                        8 + 17 * ::core::mem::size_of::<*const u8>(),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let ptr102 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result101 {
                        Ok(e) => {
                            *ptr102.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr102
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (match e {
                                true => 1,
                                false => 0,
                            }) as u8;
                        }
                        Err(e) => {
                            *ptr102.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::golem::vector::types::VectorError as V113;
                            match e {
                                V113::NotFound(e) => {
                                    *ptr102
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                    let vec103 = (e.into_bytes()).into_boxed_slice();
                                    let ptr103 = vec103.as_ptr().cast::<u8>();
                                    let len103 = vec103.len();
                                    ::core::mem::forget(vec103);
                                    *ptr102
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len103;
                                    *ptr102
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr103.cast_mut();
                                }
                                V113::AlreadyExists(e) => {
                                    *ptr102
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec104 = (e.into_bytes()).into_boxed_slice();
                                    let ptr104 = vec104.as_ptr().cast::<u8>();
                                    let len104 = vec104.len();
                                    ::core::mem::forget(vec104);
                                    *ptr102
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len104;
                                    *ptr102
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr104.cast_mut();
                                }
                                V113::InvalidParams(e) => {
                                    *ptr102
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                    let vec105 = (e.into_bytes()).into_boxed_slice();
                                    let ptr105 = vec105.as_ptr().cast::<u8>();
                                    let len105 = vec105.len();
                                    ::core::mem::forget(vec105);
                                    *ptr102
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len105;
                                    *ptr102
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr105.cast_mut();
                                }
                                V113::UnsupportedFeature(e) => {
                                    *ptr102
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                    let vec106 = (e.into_bytes()).into_boxed_slice();
                                    let ptr106 = vec106.as_ptr().cast::<u8>();
                                    let len106 = vec106.len();
                                    ::core::mem::forget(vec106);
                                    *ptr102
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len106;
                                    *ptr102
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr106.cast_mut();
                                }
                                V113::DimensionMismatch(e) => {
                                    *ptr102
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (4i32) as u8;
                                    let vec107 = (e.into_bytes()).into_boxed_slice();
                                    let ptr107 = vec107.as_ptr().cast::<u8>();
                                    let len107 = vec107.len();
                                    ::core::mem::forget(vec107);
                                    *ptr102
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len107;
                                    *ptr102
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr107.cast_mut();
                                }
                                V113::InvalidVector(e) => {
                                    *ptr102
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (5i32) as u8;
                                    let vec108 = (e.into_bytes()).into_boxed_slice();
                                    let ptr108 = vec108.as_ptr().cast::<u8>();
                                    let len108 = vec108.len();
                                    ::core::mem::forget(vec108);
                                    *ptr102
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len108;
                                    *ptr102
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr108.cast_mut();
                                }
                                V113::Unauthorized(e) => {
                                    *ptr102
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (6i32) as u8;
                                    let vec109 = (e.into_bytes()).into_boxed_slice();
                                    let ptr109 = vec109.as_ptr().cast::<u8>();
                                    let len109 = vec109.len();
                                    ::core::mem::forget(vec109);
                                    *ptr102
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len109;
                                    *ptr102
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr109.cast_mut();
                                }
                                V113::RateLimited(e) => {
                                    *ptr102
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (7i32) as u8;
                                    let vec110 = (e.into_bytes()).into_boxed_slice();
                                    let ptr110 = vec110.as_ptr().cast::<u8>();
                                    let len110 = vec110.len();
                                    ::core::mem::forget(vec110);
                                    *ptr102
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len110;
                                    *ptr102
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr110.cast_mut();
                                }
                                V113::ProviderError(e) => {
                                    *ptr102
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (8i32) as u8;
                                    let vec111 = (e.into_bytes()).into_boxed_slice();
                                    let ptr111 = vec111.as_ptr().cast::<u8>();
                                    let len111 = vec111.len();
                                    ::core::mem::forget(vec111);
                                    *ptr102
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len111;
                                    *ptr102
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr111.cast_mut();
                                }
                                V113::ConnectionError(e) => {
                                    *ptr102
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (9i32) as u8;
                                    let vec112 = (e.into_bytes()).into_boxed_slice();
                                    let ptr112 = vec112.as_ptr().cast::<u8>();
                                    let len112 = vec112.len();
                                    ::core::mem::forget(vec112);
                                    *ptr102
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len112;
                                    *ptr102
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr112.cast_mut();
                                }
                            }
                        }
                    };
                    ptr102
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_test_connection<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l1 {
                                0 => {
                                    let l2 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l3 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                }
                                1 => {
                                    let l4 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l5 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                                2 => {
                                    let l6 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l7 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l6, l7, 1);
                                }
                                3 => {
                                    let l8 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l9 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l8, l9, 1);
                                }
                                4 => {
                                    let l10 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l11 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l10, l11, 1);
                                }
                                5 => {
                                    let l12 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l13 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l12, l13, 1);
                                }
                                6 => {
                                    let l14 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l15 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l14, l15, 1);
                                }
                                7 => {
                                    let l16 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l17 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l16, l17, 1);
                                }
                                8 => {
                                    let l18 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l19 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l18, l19, 1);
                                }
                                _ => {
                                    let l20 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l21 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l20, l21, 1);
                                }
                            }
                        }
                    }
                }
                pub trait Guest {
                    /// Establish connection to vector database
                    fn connect(
                        endpoint: _rt::String,
                        credentials: Option<Credentials>,
                        timeout_ms: Option<u32>,
                        options: Option<Metadata>,
                    ) -> Result<(), VectorError>;
                    /// Close connection
                    fn disconnect() -> Result<(), VectorError>;
                    /// Get current connection status
                    fn get_connection_status() -> Result<ConnectionStatus, VectorError>;
                    /// Test connection without modifying state
                    fn test_connection(
                        endpoint: _rt::String,
                        credentials: Option<Credentials>,
                        timeout_ms: Option<u32>,
                        options: Option<Metadata>,
                    ) -> Result<bool, VectorError>;
                }
                #[doc(hidden)]
                macro_rules! __export_golem_vector_connection_1_0_0_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "golem:vector/connection@1.0.0#connect")] unsafe extern "C" fn
                        export_connect(arg0 : * mut u8,) -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_connect_cabi::<$ty > (arg0) } }
                        #[unsafe (export_name =
                        "cabi_post_golem:vector/connection@1.0.0#connect")] unsafe extern
                        "C" fn _post_return_connect(arg0 : * mut u8,) { unsafe {
                        $($path_to_types)*:: __post_return_connect::<$ty > (arg0) } }
                        #[unsafe (export_name =
                        "golem:vector/connection@1.0.0#disconnect")] unsafe extern "C" fn
                        export_disconnect() -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_disconnect_cabi::<$ty > () } } #[unsafe (export_name =
                        "cabi_post_golem:vector/connection@1.0.0#disconnect")] unsafe
                        extern "C" fn _post_return_disconnect(arg0 : * mut u8,) { unsafe
                        { $($path_to_types)*:: __post_return_disconnect::<$ty > (arg0) }
                        } #[unsafe (export_name =
                        "golem:vector/connection@1.0.0#get-connection-status")] unsafe
                        extern "C" fn export_get_connection_status() -> * mut u8 { unsafe
                        { $($path_to_types)*:: _export_get_connection_status_cabi::<$ty >
                        () } } #[unsafe (export_name =
                        "cabi_post_golem:vector/connection@1.0.0#get-connection-status")]
                        unsafe extern "C" fn _post_return_get_connection_status(arg0 : *
                        mut u8,) { unsafe { $($path_to_types)*::
                        __post_return_get_connection_status::<$ty > (arg0) } } #[unsafe
                        (export_name = "golem:vector/connection@1.0.0#test-connection")]
                        unsafe extern "C" fn export_test_connection(arg0 : * mut u8,) ->
                        * mut u8 { unsafe { $($path_to_types)*::
                        _export_test_connection_cabi::<$ty > (arg0) } } #[unsafe
                        (export_name =
                        "cabi_post_golem:vector/connection@1.0.0#test-connection")]
                        unsafe extern "C" fn _post_return_test_connection(arg0 : * mut
                        u8,) { unsafe { $($path_to_types)*::
                        __post_return_test_connection::<$ty > (arg0) } } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_golem_vector_connection_1_0_0_cabi;
                #[repr(align(8))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<
                        u8,
                    >; 40 + 8 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 40
                        + 8 * ::core::mem::size_of::<*const u8>()],
                );
            }
            /// Collection/index management and configuration
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod collections {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type Id = super::super::super::super::golem::vector::types::Id;
                pub type DistanceMetric = super::super::super::super::golem::vector::types::DistanceMetric;
                pub type VectorError = super::super::super::super::golem::vector::types::VectorError;
                pub type Metadata = super::super::super::super::golem::vector::types::Metadata;
                /// Index configuration parameters
                #[derive(Clone)]
                pub struct IndexConfig {
                    pub index_type: Option<_rt::String>,
                    pub parameters: _rt::Vec<(_rt::String, _rt::String)>,
                }
                impl ::core::fmt::Debug for IndexConfig {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("IndexConfig")
                            .field("index-type", &self.index_type)
                            .field("parameters", &self.parameters)
                            .finish()
                    }
                }
                /// Collection information and statistics
                #[derive(Clone)]
                pub struct CollectionInfo {
                    pub name: _rt::String,
                    pub description: Option<_rt::String>,
                    pub dimension: u32,
                    pub metric: DistanceMetric,
                    pub vector_count: u64,
                    pub size_bytes: Option<u64>,
                    pub index_ready: bool,
                    pub created_at: Option<u64>,
                    pub updated_at: Option<u64>,
                    pub provider_stats: Option<Metadata>,
                }
                impl ::core::fmt::Debug for CollectionInfo {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("CollectionInfo")
                            .field("name", &self.name)
                            .field("description", &self.description)
                            .field("dimension", &self.dimension)
                            .field("metric", &self.metric)
                            .field("vector-count", &self.vector_count)
                            .field("size-bytes", &self.size_bytes)
                            .field("index-ready", &self.index_ready)
                            .field("created-at", &self.created_at)
                            .field("updated-at", &self.updated_at)
                            .field("provider-stats", &self.provider_stats)
                            .finish()
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_upsert_collection_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: i32,
                    arg3: *mut u8,
                    arg4: usize,
                    arg5: i32,
                    arg6: i32,
                    arg7: i32,
                    arg8: i32,
                    arg9: *mut u8,
                    arg10: usize,
                    arg11: *mut u8,
                    arg12: usize,
                    arg13: i32,
                    arg14: *mut u8,
                    arg15: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let result71 = T::upsert_collection(
                        _rt::string_lift(bytes0),
                        match arg2 {
                            0 => None,
                            1 => {
                                let e = {
                                    let len1 = arg4;
                                    let bytes1 = _rt::Vec::from_raw_parts(
                                        arg3.cast(),
                                        len1,
                                        len1,
                                    );
                                    _rt::string_lift(bytes1)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        arg5 as u32,
                        super::super::super::super::golem::vector::types::DistanceMetric::_lift(
                            arg6 as u8,
                        ),
                        match arg7 {
                            0 => None,
                            1 => {
                                let e = {
                                    let base9 = arg11;
                                    let len9 = arg12;
                                    let mut result9 = _rt::Vec::with_capacity(len9);
                                    for i in 0..len9 {
                                        let base = base9
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        let e9 = {
                                            let l3 = *base.add(0).cast::<*mut u8>();
                                            let l4 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len5 = l4;
                                            let bytes5 = _rt::Vec::from_raw_parts(
                                                l3.cast(),
                                                len5,
                                                len5,
                                            );
                                            let l6 = *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l7 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len8 = l7;
                                            let bytes8 = _rt::Vec::from_raw_parts(
                                                l6.cast(),
                                                len8,
                                                len8,
                                            );
                                            (_rt::string_lift(bytes5), _rt::string_lift(bytes8))
                                        };
                                        result9.push(e9);
                                    }
                                    _rt::cabi_dealloc(
                                        base9,
                                        len9 * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    IndexConfig {
                                        index_type: match arg8 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let len2 = arg10;
                                                    let bytes2 = _rt::Vec::from_raw_parts(
                                                        arg9.cast(),
                                                        len2,
                                                        len2,
                                                    );
                                                    _rt::string_lift(bytes2)
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        parameters: result9,
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        match arg13 {
                            0 => None,
                            1 => {
                                let e = {
                                    let base70 = arg14;
                                    let len70 = arg15;
                                    let mut result70 = _rt::Vec::with_capacity(len70);
                                    for i in 0..len70 {
                                        let base = base70
                                            .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                        let e70 = {
                                            let l10 = *base.add(0).cast::<*mut u8>();
                                            let l11 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len12 = l11;
                                            let bytes12 = _rt::Vec::from_raw_parts(
                                                l10.cast(),
                                                len12,
                                                len12,
                                            );
                                            let l13 = i32::from(
                                                *base
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            use super::super::super::super::golem::vector::types::FlatMetadataValue as V69;
                                            let v69 = match l13 {
                                                0 => {
                                                    let e69 = {
                                                        let l14 = *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l15 = *base
                                                            .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len16 = l15;
                                                        let bytes16 = _rt::Vec::from_raw_parts(
                                                            l14.cast(),
                                                            len16,
                                                            len16,
                                                        );
                                                        _rt::string_lift(bytes16)
                                                    };
                                                    V69::StringVal(e69)
                                                }
                                                1 => {
                                                    let e69 = {
                                                        let l17 = *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<f64>();
                                                        l17
                                                    };
                                                    V69::NumberVal(e69)
                                                }
                                                2 => {
                                                    let e69 = {
                                                        let l18 = *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i64>();
                                                        l18
                                                    };
                                                    V69::IntegerVal(e69)
                                                }
                                                3 => {
                                                    let e69 = {
                                                        let l19 = i32::from(
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        _rt::bool_lift(l19 as u8)
                                                    };
                                                    V69::BooleanVal(e69)
                                                }
                                                4 => {
                                                    let e69 = {
                                                        let l20 = *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l21 = *base
                                                            .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base38 = l20;
                                                        let len38 = l21;
                                                        let mut result38 = _rt::Vec::with_capacity(len38);
                                                        for i in 0..len38 {
                                                            let base = base38.add(i * 24);
                                                            let e38 = {
                                                                let l22 = i32::from(*base.add(0).cast::<u8>());
                                                                use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V37;
                                                                let v37 = match l22 {
                                                                    0 => {
                                                                        let e37 = {
                                                                            let l23 = *base.add(8).cast::<*mut u8>();
                                                                            let l24 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len25 = l24;
                                                                            let bytes25 = _rt::Vec::from_raw_parts(
                                                                                l23.cast(),
                                                                                len25,
                                                                                len25,
                                                                            );
                                                                            _rt::string_lift(bytes25)
                                                                        };
                                                                        V37::StringVal(e37)
                                                                    }
                                                                    1 => {
                                                                        let e37 = {
                                                                            let l26 = *base.add(8).cast::<f64>();
                                                                            l26
                                                                        };
                                                                        V37::NumberVal(e37)
                                                                    }
                                                                    2 => {
                                                                        let e37 = {
                                                                            let l27 = *base.add(8).cast::<i64>();
                                                                            l27
                                                                        };
                                                                        V37::IntegerVal(e37)
                                                                    }
                                                                    3 => {
                                                                        let e37 = {
                                                                            let l28 = i32::from(*base.add(8).cast::<u8>());
                                                                            _rt::bool_lift(l28 as u8)
                                                                        };
                                                                        V37::BooleanVal(e37)
                                                                    }
                                                                    4 => V37::NullVal,
                                                                    5 => {
                                                                        let e37 = {
                                                                            let l29 = *base.add(8).cast::<*mut u8>();
                                                                            let l30 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len31 = l30;
                                                                            let bytes31 = _rt::Vec::from_raw_parts(
                                                                                l29.cast(),
                                                                                len31,
                                                                                len31,
                                                                            );
                                                                            _rt::string_lift(bytes31)
                                                                        };
                                                                        V37::DatetimeVal(e37)
                                                                    }
                                                                    6 => {
                                                                        let e37 = {
                                                                            let l32 = *base.add(8).cast::<f64>();
                                                                            let l33 = *base.add(16).cast::<f64>();
                                                                            super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                                latitude: l32,
                                                                                longitude: l33,
                                                                            }
                                                                        };
                                                                        V37::GeoVal(e37)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 7, "invalid enum discriminant");
                                                                        let e37 = {
                                                                            let l34 = *base.add(8).cast::<*mut u8>();
                                                                            let l35 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len36 = l35;
                                                                            _rt::Vec::from_raw_parts(l34.cast(), len36, len36)
                                                                        };
                                                                        V37::BlobVal(e37)
                                                                    }
                                                                };
                                                                v37
                                                            };
                                                            result38.push(e38);
                                                        }
                                                        _rt::cabi_dealloc(base38, len38 * 24, 8);
                                                        result38
                                                    };
                                                    V69::ArrayVal(e69)
                                                }
                                                5 => {
                                                    let e69 = {
                                                        let l39 = *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l40 = *base
                                                            .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base60 = l39;
                                                        let len60 = l40;
                                                        let mut result60 = _rt::Vec::with_capacity(len60);
                                                        for i in 0..len60 {
                                                            let base = base60
                                                                .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                            let e60 = {
                                                                let l41 = *base.add(0).cast::<*mut u8>();
                                                                let l42 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len43 = l42;
                                                                let bytes43 = _rt::Vec::from_raw_parts(
                                                                    l41.cast(),
                                                                    len43,
                                                                    len43,
                                                                );
                                                                let l44 = i32::from(
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V59;
                                                                let v59 = match l44 {
                                                                    0 => {
                                                                        let e59 = {
                                                                            let l45 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l46 = *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len47 = l46;
                                                                            let bytes47 = _rt::Vec::from_raw_parts(
                                                                                l45.cast(),
                                                                                len47,
                                                                                len47,
                                                                            );
                                                                            _rt::string_lift(bytes47)
                                                                        };
                                                                        V59::StringVal(e59)
                                                                    }
                                                                    1 => {
                                                                        let e59 = {
                                                                            let l48 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<f64>();
                                                                            l48
                                                                        };
                                                                        V59::NumberVal(e59)
                                                                    }
                                                                    2 => {
                                                                        let e59 = {
                                                                            let l49 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i64>();
                                                                            l49
                                                                        };
                                                                        V59::IntegerVal(e59)
                                                                    }
                                                                    3 => {
                                                                        let e59 = {
                                                                            let l50 = i32::from(
                                                                                *base
                                                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            _rt::bool_lift(l50 as u8)
                                                                        };
                                                                        V59::BooleanVal(e59)
                                                                    }
                                                                    4 => V59::NullVal,
                                                                    5 => {
                                                                        let e59 = {
                                                                            let l51 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l52 = *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len53 = l52;
                                                                            let bytes53 = _rt::Vec::from_raw_parts(
                                                                                l51.cast(),
                                                                                len53,
                                                                                len53,
                                                                            );
                                                                            _rt::string_lift(bytes53)
                                                                        };
                                                                        V59::DatetimeVal(e59)
                                                                    }
                                                                    6 => {
                                                                        let e59 = {
                                                                            let l54 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<f64>();
                                                                            let l55 = *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<f64>();
                                                                            super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                                latitude: l54,
                                                                                longitude: l55,
                                                                            }
                                                                        };
                                                                        V59::GeoVal(e59)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 7, "invalid enum discriminant");
                                                                        let e59 = {
                                                                            let l56 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l57 = *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len58 = l57;
                                                                            _rt::Vec::from_raw_parts(l56.cast(), len58, len58)
                                                                        };
                                                                        V59::BlobVal(e59)
                                                                    }
                                                                };
                                                                (_rt::string_lift(bytes43), v59)
                                                            };
                                                            result60.push(e60);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base60,
                                                            len60 * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                            8,
                                                        );
                                                        result60
                                                    };
                                                    V69::ObjectVal(e69)
                                                }
                                                6 => V69::NullVal,
                                                7 => {
                                                    let e69 = {
                                                        let l61 = *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<f64>();
                                                        let l62 = *base
                                                            .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<f64>();
                                                        super::super::super::super::golem::vector::types::GeoCoordinates {
                                                            latitude: l61,
                                                            longitude: l62,
                                                        }
                                                    };
                                                    V69::GeoVal(e69)
                                                }
                                                8 => {
                                                    let e69 = {
                                                        let l63 = *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l64 = *base
                                                            .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len65 = l64;
                                                        let bytes65 = _rt::Vec::from_raw_parts(
                                                            l63.cast(),
                                                            len65,
                                                            len65,
                                                        );
                                                        _rt::string_lift(bytes65)
                                                    };
                                                    V69::DatetimeVal(e69)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 9, "invalid enum discriminant");
                                                    let e69 = {
                                                        let l66 = *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l67 = *base
                                                            .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len68 = l67;
                                                        _rt::Vec::from_raw_parts(l66.cast(), len68, len68)
                                                    };
                                                    V69::BlobVal(e69)
                                                }
                                            };
                                            (_rt::string_lift(bytes12), v69)
                                        };
                                        result70.push(e70);
                                    }
                                    _rt::cabi_dealloc(
                                        base70,
                                        len70 * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                        8,
                                    );
                                    result70
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    );
                    let ptr72 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result71 {
                        Ok(e) => {
                            *ptr72.add(0).cast::<u8>() = (0i32) as u8;
                            let CollectionInfo {
                                name: name73,
                                description: description73,
                                dimension: dimension73,
                                metric: metric73,
                                vector_count: vector_count73,
                                size_bytes: size_bytes73,
                                index_ready: index_ready73,
                                created_at: created_at73,
                                updated_at: updated_at73,
                                provider_stats: provider_stats73,
                            } = e;
                            let vec74 = (name73.into_bytes()).into_boxed_slice();
                            let ptr74 = vec74.as_ptr().cast::<u8>();
                            let len74 = vec74.len();
                            ::core::mem::forget(vec74);
                            *ptr72
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len74;
                            *ptr72.add(8).cast::<*mut u8>() = ptr74.cast_mut();
                            match description73 {
                                Some(e) => {
                                    *ptr72
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec75 = (e.into_bytes()).into_boxed_slice();
                                    let ptr75 = vec75.as_ptr().cast::<u8>();
                                    let len75 = vec75.len();
                                    ::core::mem::forget(vec75);
                                    *ptr72
                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len75;
                                    *ptr72
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr75.cast_mut();
                                }
                                None => {
                                    *ptr72
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            *ptr72
                                .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                .cast::<i32>() = _rt::as_i32(dimension73);
                            *ptr72
                                .add(12 + 5 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (metric73.clone() as i32) as u8;
                            *ptr72
                                .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                .cast::<i64>() = _rt::as_i64(vector_count73);
                            match size_bytes73 {
                                Some(e) => {
                                    *ptr72
                                        .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    *ptr72
                                        .add(40 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i64>() = _rt::as_i64(e);
                                }
                                None => {
                                    *ptr72
                                        .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            *ptr72
                                .add(48 + 4 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (match index_ready73 {
                                true => 1,
                                false => 0,
                            }) as u8;
                            match created_at73 {
                                Some(e) => {
                                    *ptr72
                                        .add(56 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    *ptr72
                                        .add(64 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i64>() = _rt::as_i64(e);
                                }
                                None => {
                                    *ptr72
                                        .add(56 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match updated_at73 {
                                Some(e) => {
                                    *ptr72
                                        .add(72 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    *ptr72
                                        .add(80 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i64>() = _rt::as_i64(e);
                                }
                                None => {
                                    *ptr72
                                        .add(72 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match provider_stats73 {
                                Some(e) => {
                                    *ptr72
                                        .add(88 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec97 = e;
                                    let len97 = vec97.len();
                                    let layout97 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec97.len()
                                            * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                        8,
                                    );
                                    let result97 = if layout97.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout97).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout97);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec97.into_iter().enumerate() {
                                        let base = result97
                                            .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t76_0, t76_1) = e;
                                            let vec77 = (t76_0.into_bytes()).into_boxed_slice();
                                            let ptr77 = vec77.as_ptr().cast::<u8>();
                                            let len77 = vec77.len();
                                            ::core::mem::forget(vec77);
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len77;
                                            *base.add(0).cast::<*mut u8>() = ptr77.cast_mut();
                                            use super::super::super::super::golem::vector::types::FlatMetadataValue as V96;
                                            match t76_1 {
                                                V96::StringVal(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                    let vec78 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr78 = vec78.as_ptr().cast::<u8>();
                                                    let len78 = vec78.len();
                                                    ::core::mem::forget(vec78);
                                                    *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len78;
                                                    *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr78.cast_mut();
                                                }
                                                V96::NumberVal(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<f64>() = _rt::as_f64(e);
                                                }
                                                V96::IntegerVal(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (2i32) as u8;
                                                    *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i64>() = _rt::as_i64(e);
                                                }
                                                V96::BooleanVal(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (3i32) as u8;
                                                    *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (match e {
                                                        true => 1,
                                                        false => 0,
                                                    }) as u8;
                                                }
                                                V96::ArrayVal(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (4i32) as u8;
                                                    let vec84 = e;
                                                    let len84 = vec84.len();
                                                    let layout84 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec84.len() * 24,
                                                        8,
                                                    );
                                                    let result84 = if layout84.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout84).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout84);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec84.into_iter().enumerate() {
                                                        let base = result84.add(i * 24);
                                                        {
                                                            use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V83;
                                                            match e {
                                                                V83::StringVal(e) => {
                                                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                    let vec79 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr79 = vec79.as_ptr().cast::<u8>();
                                                                    let len79 = vec79.len();
                                                                    ::core::mem::forget(vec79);
                                                                    *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len79;
                                                                    *base.add(8).cast::<*mut u8>() = ptr79.cast_mut();
                                                                }
                                                                V83::NumberVal(e) => {
                                                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                    *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                                                }
                                                                V83::IntegerVal(e) => {
                                                                    *base.add(0).cast::<u8>() = (2i32) as u8;
                                                                    *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                                }
                                                                V83::BooleanVal(e) => {
                                                                    *base.add(0).cast::<u8>() = (3i32) as u8;
                                                                    *base.add(8).cast::<u8>() = (match e {
                                                                        true => 1,
                                                                        false => 0,
                                                                    }) as u8;
                                                                }
                                                                V83::NullVal => {
                                                                    *base.add(0).cast::<u8>() = (4i32) as u8;
                                                                }
                                                                V83::DatetimeVal(e) => {
                                                                    *base.add(0).cast::<u8>() = (5i32) as u8;
                                                                    let vec80 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr80 = vec80.as_ptr().cast::<u8>();
                                                                    let len80 = vec80.len();
                                                                    ::core::mem::forget(vec80);
                                                                    *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len80;
                                                                    *base.add(8).cast::<*mut u8>() = ptr80.cast_mut();
                                                                }
                                                                V83::GeoVal(e) => {
                                                                    *base.add(0).cast::<u8>() = (6i32) as u8;
                                                                    let super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                        latitude: latitude81,
                                                                        longitude: longitude81,
                                                                    } = e;
                                                                    *base.add(8).cast::<f64>() = _rt::as_f64(latitude81);
                                                                    *base.add(16).cast::<f64>() = _rt::as_f64(longitude81);
                                                                }
                                                                V83::BlobVal(e) => {
                                                                    *base.add(0).cast::<u8>() = (7i32) as u8;
                                                                    let vec82 = (e).into_boxed_slice();
                                                                    let ptr82 = vec82.as_ptr().cast::<u8>();
                                                                    let len82 = vec82.len();
                                                                    ::core::mem::forget(vec82);
                                                                    *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len82;
                                                                    *base.add(8).cast::<*mut u8>() = ptr82.cast_mut();
                                                                }
                                                            }
                                                        }
                                                    }
                                                    *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len84;
                                                    *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result84;
                                                }
                                                V96::ObjectVal(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (5i32) as u8;
                                                    let vec92 = e;
                                                    let len92 = vec92.len();
                                                    let layout92 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec92.len()
                                                            * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                        8,
                                                    );
                                                    let result92 = if layout92.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout92).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout92);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec92.into_iter().enumerate() {
                                                        let base = result92
                                                            .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let (t85_0, t85_1) = e;
                                                            let vec86 = (t85_0.into_bytes()).into_boxed_slice();
                                                            let ptr86 = vec86.as_ptr().cast::<u8>();
                                                            let len86 = vec86.len();
                                                            ::core::mem::forget(vec86);
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len86;
                                                            *base.add(0).cast::<*mut u8>() = ptr86.cast_mut();
                                                            use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V91;
                                                            match t85_1 {
                                                                V91::StringVal(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                    let vec87 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr87 = vec87.as_ptr().cast::<u8>();
                                                                    let len87 = vec87.len();
                                                                    ::core::mem::forget(vec87);
                                                                    *base
                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len87;
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr87.cast_mut();
                                                                }
                                                                V91::NumberVal(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<f64>() = _rt::as_f64(e);
                                                                }
                                                                V91::IntegerVal(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (2i32) as u8;
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i64>() = _rt::as_i64(e);
                                                                }
                                                                V91::BooleanVal(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (3i32) as u8;
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (match e {
                                                                        true => 1,
                                                                        false => 0,
                                                                    }) as u8;
                                                                }
                                                                V91::NullVal => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (4i32) as u8;
                                                                }
                                                                V91::DatetimeVal(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (5i32) as u8;
                                                                    let vec88 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr88 = vec88.as_ptr().cast::<u8>();
                                                                    let len88 = vec88.len();
                                                                    ::core::mem::forget(vec88);
                                                                    *base
                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len88;
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr88.cast_mut();
                                                                }
                                                                V91::GeoVal(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (6i32) as u8;
                                                                    let super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                        latitude: latitude89,
                                                                        longitude: longitude89,
                                                                    } = e;
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<f64>() = _rt::as_f64(latitude89);
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<f64>() = _rt::as_f64(longitude89);
                                                                }
                                                                V91::BlobVal(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (7i32) as u8;
                                                                    let vec90 = (e).into_boxed_slice();
                                                                    let ptr90 = vec90.as_ptr().cast::<u8>();
                                                                    let len90 = vec90.len();
                                                                    ::core::mem::forget(vec90);
                                                                    *base
                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len90;
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr90.cast_mut();
                                                                }
                                                            }
                                                        }
                                                    }
                                                    *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len92;
                                                    *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result92;
                                                }
                                                V96::NullVal => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (6i32) as u8;
                                                }
                                                V96::GeoVal(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (7i32) as u8;
                                                    let super::super::super::super::golem::vector::types::GeoCoordinates {
                                                        latitude: latitude93,
                                                        longitude: longitude93,
                                                    } = e;
                                                    *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<f64>() = _rt::as_f64(latitude93);
                                                    *base
                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<f64>() = _rt::as_f64(longitude93);
                                                }
                                                V96::DatetimeVal(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (8i32) as u8;
                                                    let vec94 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr94 = vec94.as_ptr().cast::<u8>();
                                                    let len94 = vec94.len();
                                                    ::core::mem::forget(vec94);
                                                    *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len94;
                                                    *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr94.cast_mut();
                                                }
                                                V96::BlobVal(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (9i32) as u8;
                                                    let vec95 = (e).into_boxed_slice();
                                                    let ptr95 = vec95.as_ptr().cast::<u8>();
                                                    let len95 = vec95.len();
                                                    ::core::mem::forget(vec95);
                                                    *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len95;
                                                    *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr95.cast_mut();
                                                }
                                            }
                                        }
                                    }
                                    *ptr72
                                        .add(88 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len97;
                                    *ptr72
                                        .add(88 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result97;
                                }
                                None => {
                                    *ptr72
                                        .add(88 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        Err(e) => {
                            *ptr72.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::golem::vector::types::VectorError as V108;
                            match e {
                                V108::NotFound(e) => {
                                    *ptr72.add(8).cast::<u8>() = (0i32) as u8;
                                    let vec98 = (e.into_bytes()).into_boxed_slice();
                                    let ptr98 = vec98.as_ptr().cast::<u8>();
                                    let len98 = vec98.len();
                                    ::core::mem::forget(vec98);
                                    *ptr72
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len98;
                                    *ptr72
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr98.cast_mut();
                                }
                                V108::AlreadyExists(e) => {
                                    *ptr72.add(8).cast::<u8>() = (1i32) as u8;
                                    let vec99 = (e.into_bytes()).into_boxed_slice();
                                    let ptr99 = vec99.as_ptr().cast::<u8>();
                                    let len99 = vec99.len();
                                    ::core::mem::forget(vec99);
                                    *ptr72
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len99;
                                    *ptr72
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr99.cast_mut();
                                }
                                V108::InvalidParams(e) => {
                                    *ptr72.add(8).cast::<u8>() = (2i32) as u8;
                                    let vec100 = (e.into_bytes()).into_boxed_slice();
                                    let ptr100 = vec100.as_ptr().cast::<u8>();
                                    let len100 = vec100.len();
                                    ::core::mem::forget(vec100);
                                    *ptr72
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len100;
                                    *ptr72
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr100.cast_mut();
                                }
                                V108::UnsupportedFeature(e) => {
                                    *ptr72.add(8).cast::<u8>() = (3i32) as u8;
                                    let vec101 = (e.into_bytes()).into_boxed_slice();
                                    let ptr101 = vec101.as_ptr().cast::<u8>();
                                    let len101 = vec101.len();
                                    ::core::mem::forget(vec101);
                                    *ptr72
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len101;
                                    *ptr72
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr101.cast_mut();
                                }
                                V108::DimensionMismatch(e) => {
                                    *ptr72.add(8).cast::<u8>() = (4i32) as u8;
                                    let vec102 = (e.into_bytes()).into_boxed_slice();
                                    let ptr102 = vec102.as_ptr().cast::<u8>();
                                    let len102 = vec102.len();
                                    ::core::mem::forget(vec102);
                                    *ptr72
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len102;
                                    *ptr72
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr102.cast_mut();
                                }
                                V108::InvalidVector(e) => {
                                    *ptr72.add(8).cast::<u8>() = (5i32) as u8;
                                    let vec103 = (e.into_bytes()).into_boxed_slice();
                                    let ptr103 = vec103.as_ptr().cast::<u8>();
                                    let len103 = vec103.len();
                                    ::core::mem::forget(vec103);
                                    *ptr72
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len103;
                                    *ptr72
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr103.cast_mut();
                                }
                                V108::Unauthorized(e) => {
                                    *ptr72.add(8).cast::<u8>() = (6i32) as u8;
                                    let vec104 = (e.into_bytes()).into_boxed_slice();
                                    let ptr104 = vec104.as_ptr().cast::<u8>();
                                    let len104 = vec104.len();
                                    ::core::mem::forget(vec104);
                                    *ptr72
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len104;
                                    *ptr72
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr104.cast_mut();
                                }
                                V108::RateLimited(e) => {
                                    *ptr72.add(8).cast::<u8>() = (7i32) as u8;
                                    let vec105 = (e.into_bytes()).into_boxed_slice();
                                    let ptr105 = vec105.as_ptr().cast::<u8>();
                                    let len105 = vec105.len();
                                    ::core::mem::forget(vec105);
                                    *ptr72
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len105;
                                    *ptr72
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr105.cast_mut();
                                }
                                V108::ProviderError(e) => {
                                    *ptr72.add(8).cast::<u8>() = (8i32) as u8;
                                    let vec106 = (e.into_bytes()).into_boxed_slice();
                                    let ptr106 = vec106.as_ptr().cast::<u8>();
                                    let len106 = vec106.len();
                                    ::core::mem::forget(vec106);
                                    *ptr72
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len106;
                                    *ptr72
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr106.cast_mut();
                                }
                                V108::ConnectionError(e) => {
                                    *ptr72.add(8).cast::<u8>() = (9i32) as u8;
                                    let vec107 = (e.into_bytes()).into_boxed_slice();
                                    let ptr107 = vec107.as_ptr().cast::<u8>();
                                    let len107 = vec107.len();
                                    ::core::mem::forget(vec107);
                                    *ptr72
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len107;
                                    *ptr72
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr107.cast_mut();
                                }
                            }
                        }
                    };
                    ptr72
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_upsert_collection<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(8).cast::<*mut u8>();
                            let l2 = *arg0
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                            let l3 = i32::from(
                                *arg0
                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l3 {
                                0 => {}
                                _ => {
                                    let l4 = *arg0
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l5 = *arg0
                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                            }
                            let l6 = i32::from(
                                *arg0
                                    .add(88 + 4 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l6 {
                                0 => {}
                                _ => {
                                    let l7 = *arg0
                                        .add(88 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l8 = *arg0
                                        .add(88 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base43 = l7;
                                    let len43 = l8;
                                    for i in 0..len43 {
                                        let base = base43
                                            .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let l9 = *base.add(0).cast::<*mut u8>();
                                            let l10 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l9, l10, 1);
                                            let l11 = i32::from(
                                                *base
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l11 {
                                                0 => {
                                                    let l12 = *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l13 = *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l12, l13, 1);
                                                }
                                                1 => {}
                                                2 => {}
                                                3 => {}
                                                4 => {
                                                    let l14 = *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l15 = *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base24 = l14;
                                                    let len24 = l15;
                                                    for i in 0..len24 {
                                                        let base = base24.add(i * 24);
                                                        {
                                                            let l16 = i32::from(*base.add(0).cast::<u8>());
                                                            match l16 {
                                                                0 => {
                                                                    let l17 = *base.add(8).cast::<*mut u8>();
                                                                    let l18 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l17, l18, 1);
                                                                }
                                                                1 => {}
                                                                2 => {}
                                                                3 => {}
                                                                4 => {}
                                                                5 => {
                                                                    let l19 = *base.add(8).cast::<*mut u8>();
                                                                    let l20 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l19, l20, 1);
                                                                }
                                                                6 => {}
                                                                _ => {
                                                                    let l21 = *base.add(8).cast::<*mut u8>();
                                                                    let l22 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base23 = l21;
                                                                    let len23 = l22;
                                                                    _rt::cabi_dealloc(base23, len23 * 1, 1);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(base24, len24 * 24, 8);
                                                }
                                                5 => {
                                                    let l25 = *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l26 = *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base37 = l25;
                                                    let len37 = l26;
                                                    for i in 0..len37 {
                                                        let base = base37
                                                            .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l27 = *base.add(0).cast::<*mut u8>();
                                                            let l28 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l27, l28, 1);
                                                            let l29 = i32::from(
                                                                *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l29 {
                                                                0 => {
                                                                    let l30 = *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l31 = *base
                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l30, l31, 1);
                                                                }
                                                                1 => {}
                                                                2 => {}
                                                                3 => {}
                                                                4 => {}
                                                                5 => {
                                                                    let l32 = *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l33 = *base
                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l32, l33, 1);
                                                                }
                                                                6 => {}
                                                                _ => {
                                                                    let l34 = *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l35 = *base
                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base36 = l34;
                                                                    let len36 = l35;
                                                                    _rt::cabi_dealloc(base36, len36 * 1, 1);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base37,
                                                        len37 * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                        8,
                                                    );
                                                }
                                                6 => {}
                                                7 => {}
                                                8 => {
                                                    let l38 = *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l39 = *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l38, l39, 1);
                                                }
                                                _ => {
                                                    let l40 = *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l41 = *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base42 = l40;
                                                    let len42 = l41;
                                                    _rt::cabi_dealloc(base42, len42 * 1, 1);
                                                }
                                            }
                                        }
                                    }
                                    _rt::cabi_dealloc(
                                        base43,
                                        len43 * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                        8,
                                    );
                                }
                            }
                        }
                        _ => {
                            let l44 = i32::from(*arg0.add(8).cast::<u8>());
                            match l44 {
                                0 => {
                                    let l45 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l46 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l45, l46, 1);
                                }
                                1 => {
                                    let l47 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l48 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l47, l48, 1);
                                }
                                2 => {
                                    let l49 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l50 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l49, l50, 1);
                                }
                                3 => {
                                    let l51 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l52 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l51, l52, 1);
                                }
                                4 => {
                                    let l53 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l54 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l53, l54, 1);
                                }
                                5 => {
                                    let l55 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l56 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l55, l56, 1);
                                }
                                6 => {
                                    let l57 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l58 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l57, l58, 1);
                                }
                                7 => {
                                    let l59 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l60 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l59, l60, 1);
                                }
                                8 => {
                                    let l61 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l62 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l61, l62, 1);
                                }
                                _ => {
                                    let l63 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l64 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l63, l64, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_list_collections_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::list_collections();
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result0 {
                        Ok(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            let vec27 = e;
                            let len27 = vec27.len();
                            let layout27 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec27.len()
                                    * (88 + 6 * ::core::mem::size_of::<*const u8>()),
                                8,
                            );
                            let result27 = if layout27.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout27).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout27);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec27.into_iter().enumerate() {
                                let base = result27
                                    .add(i * (88 + 6 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let CollectionInfo {
                                        name: name2,
                                        description: description2,
                                        dimension: dimension2,
                                        metric: metric2,
                                        vector_count: vector_count2,
                                        size_bytes: size_bytes2,
                                        index_ready: index_ready2,
                                        created_at: created_at2,
                                        updated_at: updated_at2,
                                        provider_stats: provider_stats2,
                                    } = e;
                                    let vec3 = (name2.into_bytes()).into_boxed_slice();
                                    let ptr3 = vec3.as_ptr().cast::<u8>();
                                    let len3 = vec3.len();
                                    ::core::mem::forget(vec3);
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len3;
                                    *base.add(0).cast::<*mut u8>() = ptr3.cast_mut();
                                    match description2 {
                                        Some(e) => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec4 = (e.into_bytes()).into_boxed_slice();
                                            let ptr4 = vec4.as_ptr().cast::<u8>();
                                            let len4 = vec4.len();
                                            ::core::mem::forget(vec4);
                                            *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len4;
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr4.cast_mut();
                                        }
                                        None => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    *base
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i32>() = _rt::as_i32(dimension2);
                                    *base
                                        .add(4 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (metric2.clone() as i32) as u8;
                                    *base
                                        .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i64>() = _rt::as_i64(vector_count2);
                                    match size_bytes2 {
                                        Some(e) => {
                                            *base
                                                .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            *base
                                                .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i64>() = _rt::as_i64(e);
                                        }
                                        None => {
                                            *base
                                                .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    *base
                                        .add(40 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (match index_ready2 {
                                        true => 1,
                                        false => 0,
                                    }) as u8;
                                    match created_at2 {
                                        Some(e) => {
                                            *base
                                                .add(48 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            *base
                                                .add(56 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i64>() = _rt::as_i64(e);
                                        }
                                        None => {
                                            *base
                                                .add(48 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match updated_at2 {
                                        Some(e) => {
                                            *base
                                                .add(64 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            *base
                                                .add(72 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i64>() = _rt::as_i64(e);
                                        }
                                        None => {
                                            *base
                                                .add(64 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match provider_stats2 {
                                        Some(e) => {
                                            *base
                                                .add(80 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec26 = e;
                                            let len26 = vec26.len();
                                            let layout26 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec26.len()
                                                    * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                8,
                                            );
                                            let result26 = if layout26.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout26).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout26);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec26.into_iter().enumerate() {
                                                let base = result26
                                                    .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let (t5_0, t5_1) = e;
                                                    let vec6 = (t5_0.into_bytes()).into_boxed_slice();
                                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                                    let len6 = vec6.len();
                                                    ::core::mem::forget(vec6);
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len6;
                                                    *base.add(0).cast::<*mut u8>() = ptr6.cast_mut();
                                                    use super::super::super::super::golem::vector::types::FlatMetadataValue as V25;
                                                    match t5_1 {
                                                        V25::StringVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                            let vec7 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr7 = vec7.as_ptr().cast::<u8>();
                                                            let len7 = vec7.len();
                                                            ::core::mem::forget(vec7);
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len7;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr7.cast_mut();
                                                        }
                                                        V25::NumberVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<f64>() = _rt::as_f64(e);
                                                        }
                                                        V25::IntegerVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (2i32) as u8;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<i64>() = _rt::as_i64(e);
                                                        }
                                                        V25::BooleanVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (3i32) as u8;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (match e {
                                                                true => 1,
                                                                false => 0,
                                                            }) as u8;
                                                        }
                                                        V25::ArrayVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (4i32) as u8;
                                                            let vec13 = e;
                                                            let len13 = vec13.len();
                                                            let layout13 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec13.len() * 24,
                                                                8,
                                                            );
                                                            let result13 = if layout13.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout13).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout13);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec13.into_iter().enumerate() {
                                                                let base = result13.add(i * 24);
                                                                {
                                                                    use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V12;
                                                                    match e {
                                                                        V12::StringVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                            let vec8 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr8 = vec8.as_ptr().cast::<u8>();
                                                                            let len8 = vec8.len();
                                                                            ::core::mem::forget(vec8);
                                                                            *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len8;
                                                                            *base.add(8).cast::<*mut u8>() = ptr8.cast_mut();
                                                                        }
                                                                        V12::NumberVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                            *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                                                        }
                                                                        V12::IntegerVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (2i32) as u8;
                                                                            *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                                        }
                                                                        V12::BooleanVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (3i32) as u8;
                                                                            *base.add(8).cast::<u8>() = (match e {
                                                                                true => 1,
                                                                                false => 0,
                                                                            }) as u8;
                                                                        }
                                                                        V12::NullVal => {
                                                                            *base.add(0).cast::<u8>() = (4i32) as u8;
                                                                        }
                                                                        V12::DatetimeVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (5i32) as u8;
                                                                            let vec9 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr9 = vec9.as_ptr().cast::<u8>();
                                                                            let len9 = vec9.len();
                                                                            ::core::mem::forget(vec9);
                                                                            *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len9;
                                                                            *base.add(8).cast::<*mut u8>() = ptr9.cast_mut();
                                                                        }
                                                                        V12::GeoVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (6i32) as u8;
                                                                            let super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                                latitude: latitude10,
                                                                                longitude: longitude10,
                                                                            } = e;
                                                                            *base.add(8).cast::<f64>() = _rt::as_f64(latitude10);
                                                                            *base.add(16).cast::<f64>() = _rt::as_f64(longitude10);
                                                                        }
                                                                        V12::BlobVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (7i32) as u8;
                                                                            let vec11 = (e).into_boxed_slice();
                                                                            let ptr11 = vec11.as_ptr().cast::<u8>();
                                                                            let len11 = vec11.len();
                                                                            ::core::mem::forget(vec11);
                                                                            *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len11;
                                                                            *base.add(8).cast::<*mut u8>() = ptr11.cast_mut();
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len13;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result13;
                                                        }
                                                        V25::ObjectVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (5i32) as u8;
                                                            let vec21 = e;
                                                            let len21 = vec21.len();
                                                            let layout21 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec21.len()
                                                                    * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                            let result21 = if layout21.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout21).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout21);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec21.into_iter().enumerate() {
                                                                let base = result21
                                                                    .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let (t14_0, t14_1) = e;
                                                                    let vec15 = (t14_0.into_bytes()).into_boxed_slice();
                                                                    let ptr15 = vec15.as_ptr().cast::<u8>();
                                                                    let len15 = vec15.len();
                                                                    ::core::mem::forget(vec15);
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len15;
                                                                    *base.add(0).cast::<*mut u8>() = ptr15.cast_mut();
                                                                    use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V20;
                                                                    match t14_1 {
                                                                        V20::StringVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                            let vec16 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr16 = vec16.as_ptr().cast::<u8>();
                                                                            let len16 = vec16.len();
                                                                            ::core::mem::forget(vec16);
                                                                            *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len16;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr16.cast_mut();
                                                                        }
                                                                        V20::NumberVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<f64>() = _rt::as_f64(e);
                                                                        }
                                                                        V20::IntegerVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (2i32) as u8;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i64>() = _rt::as_i64(e);
                                                                        }
                                                                        V20::BooleanVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (3i32) as u8;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (match e {
                                                                                true => 1,
                                                                                false => 0,
                                                                            }) as u8;
                                                                        }
                                                                        V20::NullVal => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (4i32) as u8;
                                                                        }
                                                                        V20::DatetimeVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (5i32) as u8;
                                                                            let vec17 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr17 = vec17.as_ptr().cast::<u8>();
                                                                            let len17 = vec17.len();
                                                                            ::core::mem::forget(vec17);
                                                                            *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len17;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr17.cast_mut();
                                                                        }
                                                                        V20::GeoVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (6i32) as u8;
                                                                            let super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                                latitude: latitude18,
                                                                                longitude: longitude18,
                                                                            } = e;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<f64>() = _rt::as_f64(latitude18);
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<f64>() = _rt::as_f64(longitude18);
                                                                        }
                                                                        V20::BlobVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (7i32) as u8;
                                                                            let vec19 = (e).into_boxed_slice();
                                                                            let ptr19 = vec19.as_ptr().cast::<u8>();
                                                                            let len19 = vec19.len();
                                                                            ::core::mem::forget(vec19);
                                                                            *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len19;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr19.cast_mut();
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len21;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result21;
                                                        }
                                                        V25::NullVal => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (6i32) as u8;
                                                        }
                                                        V25::GeoVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (7i32) as u8;
                                                            let super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                latitude: latitude22,
                                                                longitude: longitude22,
                                                            } = e;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<f64>() = _rt::as_f64(latitude22);
                                                            *base
                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<f64>() = _rt::as_f64(longitude22);
                                                        }
                                                        V25::DatetimeVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (8i32) as u8;
                                                            let vec23 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr23 = vec23.as_ptr().cast::<u8>();
                                                            let len23 = vec23.len();
                                                            ::core::mem::forget(vec23);
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len23;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr23.cast_mut();
                                                        }
                                                        V25::BlobVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (9i32) as u8;
                                                            let vec24 = (e).into_boxed_slice();
                                                            let ptr24 = vec24.as_ptr().cast::<u8>();
                                                            let len24 = vec24.len();
                                                            ::core::mem::forget(vec24);
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len24;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr24.cast_mut();
                                                        }
                                                    }
                                                }
                                            }
                                            *base
                                                .add(80 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len26;
                                            *base
                                                .add(80 + 5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result26;
                                        }
                                        None => {
                                            *base
                                                .add(80 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                            }
                            *ptr1
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len27;
                            *ptr1
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result27;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::golem::vector::types::VectorError as V38;
                            match e {
                                V38::NotFound(e) => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                    let vec28 = (e.into_bytes()).into_boxed_slice();
                                    let ptr28 = vec28.as_ptr().cast::<u8>();
                                    let len28 = vec28.len();
                                    ::core::mem::forget(vec28);
                                    *ptr1
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len28;
                                    *ptr1
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr28.cast_mut();
                                }
                                V38::AlreadyExists(e) => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec29 = (e.into_bytes()).into_boxed_slice();
                                    let ptr29 = vec29.as_ptr().cast::<u8>();
                                    let len29 = vec29.len();
                                    ::core::mem::forget(vec29);
                                    *ptr1
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len29;
                                    *ptr1
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr29.cast_mut();
                                }
                                V38::InvalidParams(e) => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                    let vec30 = (e.into_bytes()).into_boxed_slice();
                                    let ptr30 = vec30.as_ptr().cast::<u8>();
                                    let len30 = vec30.len();
                                    ::core::mem::forget(vec30);
                                    *ptr1
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len30;
                                    *ptr1
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr30.cast_mut();
                                }
                                V38::UnsupportedFeature(e) => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                    let vec31 = (e.into_bytes()).into_boxed_slice();
                                    let ptr31 = vec31.as_ptr().cast::<u8>();
                                    let len31 = vec31.len();
                                    ::core::mem::forget(vec31);
                                    *ptr1
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len31;
                                    *ptr1
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr31.cast_mut();
                                }
                                V38::DimensionMismatch(e) => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (4i32) as u8;
                                    let vec32 = (e.into_bytes()).into_boxed_slice();
                                    let ptr32 = vec32.as_ptr().cast::<u8>();
                                    let len32 = vec32.len();
                                    ::core::mem::forget(vec32);
                                    *ptr1
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len32;
                                    *ptr1
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr32.cast_mut();
                                }
                                V38::InvalidVector(e) => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (5i32) as u8;
                                    let vec33 = (e.into_bytes()).into_boxed_slice();
                                    let ptr33 = vec33.as_ptr().cast::<u8>();
                                    let len33 = vec33.len();
                                    ::core::mem::forget(vec33);
                                    *ptr1
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len33;
                                    *ptr1
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr33.cast_mut();
                                }
                                V38::Unauthorized(e) => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (6i32) as u8;
                                    let vec34 = (e.into_bytes()).into_boxed_slice();
                                    let ptr34 = vec34.as_ptr().cast::<u8>();
                                    let len34 = vec34.len();
                                    ::core::mem::forget(vec34);
                                    *ptr1
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len34;
                                    *ptr1
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr34.cast_mut();
                                }
                                V38::RateLimited(e) => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (7i32) as u8;
                                    let vec35 = (e.into_bytes()).into_boxed_slice();
                                    let ptr35 = vec35.as_ptr().cast::<u8>();
                                    let len35 = vec35.len();
                                    ::core::mem::forget(vec35);
                                    *ptr1
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len35;
                                    *ptr1
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr35.cast_mut();
                                }
                                V38::ProviderError(e) => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (8i32) as u8;
                                    let vec36 = (e.into_bytes()).into_boxed_slice();
                                    let ptr36 = vec36.as_ptr().cast::<u8>();
                                    let len36 = vec36.len();
                                    ::core::mem::forget(vec36);
                                    *ptr1
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len36;
                                    *ptr1
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr36.cast_mut();
                                }
                                V38::ConnectionError(e) => {
                                    *ptr1
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (9i32) as u8;
                                    let vec37 = (e.into_bytes()).into_boxed_slice();
                                    let ptr37 = vec37.as_ptr().cast::<u8>();
                                    let len37 = vec37.len();
                                    ::core::mem::forget(vec37);
                                    *ptr1
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len37;
                                    *ptr1
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr37.cast_mut();
                                }
                            }
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_list_collections<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let base46 = l1;
                            let len46 = l2;
                            for i in 0..len46 {
                                let base = base46
                                    .add(i * (88 + 6 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let l3 = *base.add(0).cast::<*mut u8>();
                                    let l4 = *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l3, l4, 1);
                                    let l5 = i32::from(
                                        *base
                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l5 {
                                        0 => {}
                                        _ => {
                                            let l6 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l7 = *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l6, l7, 1);
                                        }
                                    }
                                    let l8 = i32::from(
                                        *base
                                            .add(80 + 4 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l8 {
                                        0 => {}
                                        _ => {
                                            let l9 = *base
                                                .add(80 + 5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l10 = *base
                                                .add(80 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base45 = l9;
                                            let len45 = l10;
                                            for i in 0..len45 {
                                                let base = base45
                                                    .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let l11 = *base.add(0).cast::<*mut u8>();
                                                    let l12 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l11, l12, 1);
                                                    let l13 = i32::from(
                                                        *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l13 {
                                                        0 => {
                                                            let l14 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l15 = *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l14, l15, 1);
                                                        }
                                                        1 => {}
                                                        2 => {}
                                                        3 => {}
                                                        4 => {
                                                            let l16 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l17 = *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base26 = l16;
                                                            let len26 = l17;
                                                            for i in 0..len26 {
                                                                let base = base26.add(i * 24);
                                                                {
                                                                    let l18 = i32::from(*base.add(0).cast::<u8>());
                                                                    match l18 {
                                                                        0 => {
                                                                            let l19 = *base.add(8).cast::<*mut u8>();
                                                                            let l20 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l19, l20, 1);
                                                                        }
                                                                        1 => {}
                                                                        2 => {}
                                                                        3 => {}
                                                                        4 => {}
                                                                        5 => {
                                                                            let l21 = *base.add(8).cast::<*mut u8>();
                                                                            let l22 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l21, l22, 1);
                                                                        }
                                                                        6 => {}
                                                                        _ => {
                                                                            let l23 = *base.add(8).cast::<*mut u8>();
                                                                            let l24 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base25 = l23;
                                                                            let len25 = l24;
                                                                            _rt::cabi_dealloc(base25, len25 * 1, 1);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(base26, len26 * 24, 8);
                                                        }
                                                        5 => {
                                                            let l27 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l28 = *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base39 = l27;
                                                            let len39 = l28;
                                                            for i in 0..len39 {
                                                                let base = base39
                                                                    .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l29 = *base.add(0).cast::<*mut u8>();
                                                                    let l30 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l29, l30, 1);
                                                                    let l31 = i32::from(
                                                                        *base
                                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l31 {
                                                                        0 => {
                                                                            let l32 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l33 = *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l32, l33, 1);
                                                                        }
                                                                        1 => {}
                                                                        2 => {}
                                                                        3 => {}
                                                                        4 => {}
                                                                        5 => {
                                                                            let l34 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l35 = *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l34, l35, 1);
                                                                        }
                                                                        6 => {}
                                                                        _ => {
                                                                            let l36 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l37 = *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base38 = l36;
                                                                            let len38 = l37;
                                                                            _rt::cabi_dealloc(base38, len38 * 1, 1);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base39,
                                                                len39 * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                        }
                                                        6 => {}
                                                        7 => {}
                                                        8 => {
                                                            let l40 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l41 = *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l40, l41, 1);
                                                        }
                                                        _ => {
                                                            let l42 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l43 = *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base44 = l42;
                                                            let len44 = l43;
                                                            _rt::cabi_dealloc(base44, len44 * 1, 1);
                                                        }
                                                    }
                                                }
                                            }
                                            _rt::cabi_dealloc(
                                                base45,
                                                len45 * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                8,
                                            );
                                        }
                                    }
                                }
                            }
                            _rt::cabi_dealloc(
                                base46,
                                len46 * (88 + 6 * ::core::mem::size_of::<*const u8>()),
                                8,
                            );
                        }
                        _ => {
                            let l47 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l47 {
                                0 => {
                                    let l48 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l49 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l48, l49, 1);
                                }
                                1 => {
                                    let l50 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l51 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l50, l51, 1);
                                }
                                2 => {
                                    let l52 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l53 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l52, l53, 1);
                                }
                                3 => {
                                    let l54 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l55 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l54, l55, 1);
                                }
                                4 => {
                                    let l56 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l57 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l56, l57, 1);
                                }
                                5 => {
                                    let l58 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l59 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l58, l59, 1);
                                }
                                6 => {
                                    let l60 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l61 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l60, l61, 1);
                                }
                                7 => {
                                    let l62 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l63 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l62, l63, 1);
                                }
                                8 => {
                                    let l64 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l65 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l64, l65, 1);
                                }
                                _ => {
                                    let l66 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l67 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l66, l67, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_get_collection_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let result1 = T::get_collection(_rt::string_lift(bytes0));
                    let ptr2 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result1 {
                        Ok(e) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                            let CollectionInfo {
                                name: name3,
                                description: description3,
                                dimension: dimension3,
                                metric: metric3,
                                vector_count: vector_count3,
                                size_bytes: size_bytes3,
                                index_ready: index_ready3,
                                created_at: created_at3,
                                updated_at: updated_at3,
                                provider_stats: provider_stats3,
                            } = e;
                            let vec4 = (name3.into_bytes()).into_boxed_slice();
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            ::core::mem::forget(vec4);
                            *ptr2
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len4;
                            *ptr2.add(8).cast::<*mut u8>() = ptr4.cast_mut();
                            match description3 {
                                Some(e) => {
                                    *ptr2
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec5 = (e.into_bytes()).into_boxed_slice();
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    ::core::mem::forget(vec5);
                                    *ptr2
                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len5;
                                    *ptr2
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr5.cast_mut();
                                }
                                None => {
                                    *ptr2
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            *ptr2
                                .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                .cast::<i32>() = _rt::as_i32(dimension3);
                            *ptr2
                                .add(12 + 5 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (metric3.clone() as i32) as u8;
                            *ptr2
                                .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                .cast::<i64>() = _rt::as_i64(vector_count3);
                            match size_bytes3 {
                                Some(e) => {
                                    *ptr2
                                        .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    *ptr2
                                        .add(40 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i64>() = _rt::as_i64(e);
                                }
                                None => {
                                    *ptr2
                                        .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            *ptr2
                                .add(48 + 4 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (match index_ready3 {
                                true => 1,
                                false => 0,
                            }) as u8;
                            match created_at3 {
                                Some(e) => {
                                    *ptr2
                                        .add(56 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    *ptr2
                                        .add(64 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i64>() = _rt::as_i64(e);
                                }
                                None => {
                                    *ptr2
                                        .add(56 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match updated_at3 {
                                Some(e) => {
                                    *ptr2
                                        .add(72 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    *ptr2
                                        .add(80 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i64>() = _rt::as_i64(e);
                                }
                                None => {
                                    *ptr2
                                        .add(72 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match provider_stats3 {
                                Some(e) => {
                                    *ptr2
                                        .add(88 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec27 = e;
                                    let len27 = vec27.len();
                                    let layout27 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec27.len()
                                            * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                        8,
                                    );
                                    let result27 = if layout27.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout27).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout27);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec27.into_iter().enumerate() {
                                        let base = result27
                                            .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t6_0, t6_1) = e;
                                            let vec7 = (t6_0.into_bytes()).into_boxed_slice();
                                            let ptr7 = vec7.as_ptr().cast::<u8>();
                                            let len7 = vec7.len();
                                            ::core::mem::forget(vec7);
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len7;
                                            *base.add(0).cast::<*mut u8>() = ptr7.cast_mut();
                                            use super::super::super::super::golem::vector::types::FlatMetadataValue as V26;
                                            match t6_1 {
                                                V26::StringVal(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                    let vec8 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr8 = vec8.as_ptr().cast::<u8>();
                                                    let len8 = vec8.len();
                                                    ::core::mem::forget(vec8);
                                                    *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len8;
                                                    *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr8.cast_mut();
                                                }
                                                V26::NumberVal(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<f64>() = _rt::as_f64(e);
                                                }
                                                V26::IntegerVal(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (2i32) as u8;
                                                    *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i64>() = _rt::as_i64(e);
                                                }
                                                V26::BooleanVal(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (3i32) as u8;
                                                    *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (match e {
                                                        true => 1,
                                                        false => 0,
                                                    }) as u8;
                                                }
                                                V26::ArrayVal(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (4i32) as u8;
                                                    let vec14 = e;
                                                    let len14 = vec14.len();
                                                    let layout14 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec14.len() * 24,
                                                        8,
                                                    );
                                                    let result14 = if layout14.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout14).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout14);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec14.into_iter().enumerate() {
                                                        let base = result14.add(i * 24);
                                                        {
                                                            use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V13;
                                                            match e {
                                                                V13::StringVal(e) => {
                                                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                    let vec9 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr9 = vec9.as_ptr().cast::<u8>();
                                                                    let len9 = vec9.len();
                                                                    ::core::mem::forget(vec9);
                                                                    *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len9;
                                                                    *base.add(8).cast::<*mut u8>() = ptr9.cast_mut();
                                                                }
                                                                V13::NumberVal(e) => {
                                                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                    *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                                                }
                                                                V13::IntegerVal(e) => {
                                                                    *base.add(0).cast::<u8>() = (2i32) as u8;
                                                                    *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                                }
                                                                V13::BooleanVal(e) => {
                                                                    *base.add(0).cast::<u8>() = (3i32) as u8;
                                                                    *base.add(8).cast::<u8>() = (match e {
                                                                        true => 1,
                                                                        false => 0,
                                                                    }) as u8;
                                                                }
                                                                V13::NullVal => {
                                                                    *base.add(0).cast::<u8>() = (4i32) as u8;
                                                                }
                                                                V13::DatetimeVal(e) => {
                                                                    *base.add(0).cast::<u8>() = (5i32) as u8;
                                                                    let vec10 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr10 = vec10.as_ptr().cast::<u8>();
                                                                    let len10 = vec10.len();
                                                                    ::core::mem::forget(vec10);
                                                                    *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len10;
                                                                    *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                                                }
                                                                V13::GeoVal(e) => {
                                                                    *base.add(0).cast::<u8>() = (6i32) as u8;
                                                                    let super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                        latitude: latitude11,
                                                                        longitude: longitude11,
                                                                    } = e;
                                                                    *base.add(8).cast::<f64>() = _rt::as_f64(latitude11);
                                                                    *base.add(16).cast::<f64>() = _rt::as_f64(longitude11);
                                                                }
                                                                V13::BlobVal(e) => {
                                                                    *base.add(0).cast::<u8>() = (7i32) as u8;
                                                                    let vec12 = (e).into_boxed_slice();
                                                                    let ptr12 = vec12.as_ptr().cast::<u8>();
                                                                    let len12 = vec12.len();
                                                                    ::core::mem::forget(vec12);
                                                                    *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len12;
                                                                    *base.add(8).cast::<*mut u8>() = ptr12.cast_mut();
                                                                }
                                                            }
                                                        }
                                                    }
                                                    *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len14;
                                                    *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result14;
                                                }
                                                V26::ObjectVal(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (5i32) as u8;
                                                    let vec22 = e;
                                                    let len22 = vec22.len();
                                                    let layout22 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec22.len()
                                                            * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                        8,
                                                    );
                                                    let result22 = if layout22.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout22).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout22);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec22.into_iter().enumerate() {
                                                        let base = result22
                                                            .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let (t15_0, t15_1) = e;
                                                            let vec16 = (t15_0.into_bytes()).into_boxed_slice();
                                                            let ptr16 = vec16.as_ptr().cast::<u8>();
                                                            let len16 = vec16.len();
                                                            ::core::mem::forget(vec16);
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len16;
                                                            *base.add(0).cast::<*mut u8>() = ptr16.cast_mut();
                                                            use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V21;
                                                            match t15_1 {
                                                                V21::StringVal(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                    let vec17 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr17 = vec17.as_ptr().cast::<u8>();
                                                                    let len17 = vec17.len();
                                                                    ::core::mem::forget(vec17);
                                                                    *base
                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len17;
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr17.cast_mut();
                                                                }
                                                                V21::NumberVal(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<f64>() = _rt::as_f64(e);
                                                                }
                                                                V21::IntegerVal(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (2i32) as u8;
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i64>() = _rt::as_i64(e);
                                                                }
                                                                V21::BooleanVal(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (3i32) as u8;
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (match e {
                                                                        true => 1,
                                                                        false => 0,
                                                                    }) as u8;
                                                                }
                                                                V21::NullVal => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (4i32) as u8;
                                                                }
                                                                V21::DatetimeVal(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (5i32) as u8;
                                                                    let vec18 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr18 = vec18.as_ptr().cast::<u8>();
                                                                    let len18 = vec18.len();
                                                                    ::core::mem::forget(vec18);
                                                                    *base
                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len18;
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr18.cast_mut();
                                                                }
                                                                V21::GeoVal(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (6i32) as u8;
                                                                    let super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                        latitude: latitude19,
                                                                        longitude: longitude19,
                                                                    } = e;
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<f64>() = _rt::as_f64(latitude19);
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<f64>() = _rt::as_f64(longitude19);
                                                                }
                                                                V21::BlobVal(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (7i32) as u8;
                                                                    let vec20 = (e).into_boxed_slice();
                                                                    let ptr20 = vec20.as_ptr().cast::<u8>();
                                                                    let len20 = vec20.len();
                                                                    ::core::mem::forget(vec20);
                                                                    *base
                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len20;
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr20.cast_mut();
                                                                }
                                                            }
                                                        }
                                                    }
                                                    *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len22;
                                                    *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result22;
                                                }
                                                V26::NullVal => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (6i32) as u8;
                                                }
                                                V26::GeoVal(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (7i32) as u8;
                                                    let super::super::super::super::golem::vector::types::GeoCoordinates {
                                                        latitude: latitude23,
                                                        longitude: longitude23,
                                                    } = e;
                                                    *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<f64>() = _rt::as_f64(latitude23);
                                                    *base
                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<f64>() = _rt::as_f64(longitude23);
                                                }
                                                V26::DatetimeVal(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (8i32) as u8;
                                                    let vec24 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr24 = vec24.as_ptr().cast::<u8>();
                                                    let len24 = vec24.len();
                                                    ::core::mem::forget(vec24);
                                                    *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len24;
                                                    *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr24.cast_mut();
                                                }
                                                V26::BlobVal(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (9i32) as u8;
                                                    let vec25 = (e).into_boxed_slice();
                                                    let ptr25 = vec25.as_ptr().cast::<u8>();
                                                    let len25 = vec25.len();
                                                    ::core::mem::forget(vec25);
                                                    *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len25;
                                                    *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr25.cast_mut();
                                                }
                                            }
                                        }
                                    }
                                    *ptr2
                                        .add(88 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len27;
                                    *ptr2
                                        .add(88 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result27;
                                }
                                None => {
                                    *ptr2
                                        .add(88 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::golem::vector::types::VectorError as V38;
                            match e {
                                V38::NotFound(e) => {
                                    *ptr2.add(8).cast::<u8>() = (0i32) as u8;
                                    let vec28 = (e.into_bytes()).into_boxed_slice();
                                    let ptr28 = vec28.as_ptr().cast::<u8>();
                                    let len28 = vec28.len();
                                    ::core::mem::forget(vec28);
                                    *ptr2
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len28;
                                    *ptr2
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr28.cast_mut();
                                }
                                V38::AlreadyExists(e) => {
                                    *ptr2.add(8).cast::<u8>() = (1i32) as u8;
                                    let vec29 = (e.into_bytes()).into_boxed_slice();
                                    let ptr29 = vec29.as_ptr().cast::<u8>();
                                    let len29 = vec29.len();
                                    ::core::mem::forget(vec29);
                                    *ptr2
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len29;
                                    *ptr2
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr29.cast_mut();
                                }
                                V38::InvalidParams(e) => {
                                    *ptr2.add(8).cast::<u8>() = (2i32) as u8;
                                    let vec30 = (e.into_bytes()).into_boxed_slice();
                                    let ptr30 = vec30.as_ptr().cast::<u8>();
                                    let len30 = vec30.len();
                                    ::core::mem::forget(vec30);
                                    *ptr2
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len30;
                                    *ptr2
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr30.cast_mut();
                                }
                                V38::UnsupportedFeature(e) => {
                                    *ptr2.add(8).cast::<u8>() = (3i32) as u8;
                                    let vec31 = (e.into_bytes()).into_boxed_slice();
                                    let ptr31 = vec31.as_ptr().cast::<u8>();
                                    let len31 = vec31.len();
                                    ::core::mem::forget(vec31);
                                    *ptr2
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len31;
                                    *ptr2
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr31.cast_mut();
                                }
                                V38::DimensionMismatch(e) => {
                                    *ptr2.add(8).cast::<u8>() = (4i32) as u8;
                                    let vec32 = (e.into_bytes()).into_boxed_slice();
                                    let ptr32 = vec32.as_ptr().cast::<u8>();
                                    let len32 = vec32.len();
                                    ::core::mem::forget(vec32);
                                    *ptr2
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len32;
                                    *ptr2
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr32.cast_mut();
                                }
                                V38::InvalidVector(e) => {
                                    *ptr2.add(8).cast::<u8>() = (5i32) as u8;
                                    let vec33 = (e.into_bytes()).into_boxed_slice();
                                    let ptr33 = vec33.as_ptr().cast::<u8>();
                                    let len33 = vec33.len();
                                    ::core::mem::forget(vec33);
                                    *ptr2
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len33;
                                    *ptr2
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr33.cast_mut();
                                }
                                V38::Unauthorized(e) => {
                                    *ptr2.add(8).cast::<u8>() = (6i32) as u8;
                                    let vec34 = (e.into_bytes()).into_boxed_slice();
                                    let ptr34 = vec34.as_ptr().cast::<u8>();
                                    let len34 = vec34.len();
                                    ::core::mem::forget(vec34);
                                    *ptr2
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len34;
                                    *ptr2
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr34.cast_mut();
                                }
                                V38::RateLimited(e) => {
                                    *ptr2.add(8).cast::<u8>() = (7i32) as u8;
                                    let vec35 = (e.into_bytes()).into_boxed_slice();
                                    let ptr35 = vec35.as_ptr().cast::<u8>();
                                    let len35 = vec35.len();
                                    ::core::mem::forget(vec35);
                                    *ptr2
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len35;
                                    *ptr2
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr35.cast_mut();
                                }
                                V38::ProviderError(e) => {
                                    *ptr2.add(8).cast::<u8>() = (8i32) as u8;
                                    let vec36 = (e.into_bytes()).into_boxed_slice();
                                    let ptr36 = vec36.as_ptr().cast::<u8>();
                                    let len36 = vec36.len();
                                    ::core::mem::forget(vec36);
                                    *ptr2
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len36;
                                    *ptr2
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr36.cast_mut();
                                }
                                V38::ConnectionError(e) => {
                                    *ptr2.add(8).cast::<u8>() = (9i32) as u8;
                                    let vec37 = (e.into_bytes()).into_boxed_slice();
                                    let ptr37 = vec37.as_ptr().cast::<u8>();
                                    let len37 = vec37.len();
                                    ::core::mem::forget(vec37);
                                    *ptr2
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len37;
                                    *ptr2
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr37.cast_mut();
                                }
                            }
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_get_collection<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(8).cast::<*mut u8>();
                            let l2 = *arg0
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                            let l3 = i32::from(
                                *arg0
                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l3 {
                                0 => {}
                                _ => {
                                    let l4 = *arg0
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l5 = *arg0
                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                            }
                            let l6 = i32::from(
                                *arg0
                                    .add(88 + 4 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l6 {
                                0 => {}
                                _ => {
                                    let l7 = *arg0
                                        .add(88 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l8 = *arg0
                                        .add(88 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base43 = l7;
                                    let len43 = l8;
                                    for i in 0..len43 {
                                        let base = base43
                                            .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let l9 = *base.add(0).cast::<*mut u8>();
                                            let l10 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l9, l10, 1);
                                            let l11 = i32::from(
                                                *base
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l11 {
                                                0 => {
                                                    let l12 = *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l13 = *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l12, l13, 1);
                                                }
                                                1 => {}
                                                2 => {}
                                                3 => {}
                                                4 => {
                                                    let l14 = *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l15 = *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base24 = l14;
                                                    let len24 = l15;
                                                    for i in 0..len24 {
                                                        let base = base24.add(i * 24);
                                                        {
                                                            let l16 = i32::from(*base.add(0).cast::<u8>());
                                                            match l16 {
                                                                0 => {
                                                                    let l17 = *base.add(8).cast::<*mut u8>();
                                                                    let l18 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l17, l18, 1);
                                                                }
                                                                1 => {}
                                                                2 => {}
                                                                3 => {}
                                                                4 => {}
                                                                5 => {
                                                                    let l19 = *base.add(8).cast::<*mut u8>();
                                                                    let l20 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l19, l20, 1);
                                                                }
                                                                6 => {}
                                                                _ => {
                                                                    let l21 = *base.add(8).cast::<*mut u8>();
                                                                    let l22 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base23 = l21;
                                                                    let len23 = l22;
                                                                    _rt::cabi_dealloc(base23, len23 * 1, 1);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(base24, len24 * 24, 8);
                                                }
                                                5 => {
                                                    let l25 = *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l26 = *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base37 = l25;
                                                    let len37 = l26;
                                                    for i in 0..len37 {
                                                        let base = base37
                                                            .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l27 = *base.add(0).cast::<*mut u8>();
                                                            let l28 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l27, l28, 1);
                                                            let l29 = i32::from(
                                                                *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l29 {
                                                                0 => {
                                                                    let l30 = *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l31 = *base
                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l30, l31, 1);
                                                                }
                                                                1 => {}
                                                                2 => {}
                                                                3 => {}
                                                                4 => {}
                                                                5 => {
                                                                    let l32 = *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l33 = *base
                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l32, l33, 1);
                                                                }
                                                                6 => {}
                                                                _ => {
                                                                    let l34 = *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l35 = *base
                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base36 = l34;
                                                                    let len36 = l35;
                                                                    _rt::cabi_dealloc(base36, len36 * 1, 1);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base37,
                                                        len37 * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                        8,
                                                    );
                                                }
                                                6 => {}
                                                7 => {}
                                                8 => {
                                                    let l38 = *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l39 = *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l38, l39, 1);
                                                }
                                                _ => {
                                                    let l40 = *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l41 = *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base42 = l40;
                                                    let len42 = l41;
                                                    _rt::cabi_dealloc(base42, len42 * 1, 1);
                                                }
                                            }
                                        }
                                    }
                                    _rt::cabi_dealloc(
                                        base43,
                                        len43 * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                        8,
                                    );
                                }
                            }
                        }
                        _ => {
                            let l44 = i32::from(*arg0.add(8).cast::<u8>());
                            match l44 {
                                0 => {
                                    let l45 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l46 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l45, l46, 1);
                                }
                                1 => {
                                    let l47 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l48 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l47, l48, 1);
                                }
                                2 => {
                                    let l49 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l50 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l49, l50, 1);
                                }
                                3 => {
                                    let l51 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l52 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l51, l52, 1);
                                }
                                4 => {
                                    let l53 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l54 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l53, l54, 1);
                                }
                                5 => {
                                    let l55 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l56 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l55, l56, 1);
                                }
                                6 => {
                                    let l57 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l58 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l57, l58, 1);
                                }
                                7 => {
                                    let l59 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l60 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l59, l60, 1);
                                }
                                8 => {
                                    let l61 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l62 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l61, l62, 1);
                                }
                                _ => {
                                    let l63 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l64 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l63, l64, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_update_collection_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: i32,
                    arg3: *mut u8,
                    arg4: usize,
                    arg5: i32,
                    arg6: *mut u8,
                    arg7: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let result63 = T::update_collection(
                        _rt::string_lift(bytes0),
                        match arg2 {
                            0 => None,
                            1 => {
                                let e = {
                                    let len1 = arg4;
                                    let bytes1 = _rt::Vec::from_raw_parts(
                                        arg3.cast(),
                                        len1,
                                        len1,
                                    );
                                    _rt::string_lift(bytes1)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        match arg5 {
                            0 => None,
                            1 => {
                                let e = {
                                    let base62 = arg6;
                                    let len62 = arg7;
                                    let mut result62 = _rt::Vec::with_capacity(len62);
                                    for i in 0..len62 {
                                        let base = base62
                                            .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                        let e62 = {
                                            let l2 = *base.add(0).cast::<*mut u8>();
                                            let l3 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len4 = l3;
                                            let bytes4 = _rt::Vec::from_raw_parts(
                                                l2.cast(),
                                                len4,
                                                len4,
                                            );
                                            let l5 = i32::from(
                                                *base
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            use super::super::super::super::golem::vector::types::FlatMetadataValue as V61;
                                            let v61 = match l5 {
                                                0 => {
                                                    let e61 = {
                                                        let l6 = *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l7 = *base
                                                            .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len8 = l7;
                                                        let bytes8 = _rt::Vec::from_raw_parts(
                                                            l6.cast(),
                                                            len8,
                                                            len8,
                                                        );
                                                        _rt::string_lift(bytes8)
                                                    };
                                                    V61::StringVal(e61)
                                                }
                                                1 => {
                                                    let e61 = {
                                                        let l9 = *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<f64>();
                                                        l9
                                                    };
                                                    V61::NumberVal(e61)
                                                }
                                                2 => {
                                                    let e61 = {
                                                        let l10 = *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i64>();
                                                        l10
                                                    };
                                                    V61::IntegerVal(e61)
                                                }
                                                3 => {
                                                    let e61 = {
                                                        let l11 = i32::from(
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        _rt::bool_lift(l11 as u8)
                                                    };
                                                    V61::BooleanVal(e61)
                                                }
                                                4 => {
                                                    let e61 = {
                                                        let l12 = *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l13 = *base
                                                            .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base30 = l12;
                                                        let len30 = l13;
                                                        let mut result30 = _rt::Vec::with_capacity(len30);
                                                        for i in 0..len30 {
                                                            let base = base30.add(i * 24);
                                                            let e30 = {
                                                                let l14 = i32::from(*base.add(0).cast::<u8>());
                                                                use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V29;
                                                                let v29 = match l14 {
                                                                    0 => {
                                                                        let e29 = {
                                                                            let l15 = *base.add(8).cast::<*mut u8>();
                                                                            let l16 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len17 = l16;
                                                                            let bytes17 = _rt::Vec::from_raw_parts(
                                                                                l15.cast(),
                                                                                len17,
                                                                                len17,
                                                                            );
                                                                            _rt::string_lift(bytes17)
                                                                        };
                                                                        V29::StringVal(e29)
                                                                    }
                                                                    1 => {
                                                                        let e29 = {
                                                                            let l18 = *base.add(8).cast::<f64>();
                                                                            l18
                                                                        };
                                                                        V29::NumberVal(e29)
                                                                    }
                                                                    2 => {
                                                                        let e29 = {
                                                                            let l19 = *base.add(8).cast::<i64>();
                                                                            l19
                                                                        };
                                                                        V29::IntegerVal(e29)
                                                                    }
                                                                    3 => {
                                                                        let e29 = {
                                                                            let l20 = i32::from(*base.add(8).cast::<u8>());
                                                                            _rt::bool_lift(l20 as u8)
                                                                        };
                                                                        V29::BooleanVal(e29)
                                                                    }
                                                                    4 => V29::NullVal,
                                                                    5 => {
                                                                        let e29 = {
                                                                            let l21 = *base.add(8).cast::<*mut u8>();
                                                                            let l22 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len23 = l22;
                                                                            let bytes23 = _rt::Vec::from_raw_parts(
                                                                                l21.cast(),
                                                                                len23,
                                                                                len23,
                                                                            );
                                                                            _rt::string_lift(bytes23)
                                                                        };
                                                                        V29::DatetimeVal(e29)
                                                                    }
                                                                    6 => {
                                                                        let e29 = {
                                                                            let l24 = *base.add(8).cast::<f64>();
                                                                            let l25 = *base.add(16).cast::<f64>();
                                                                            super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                                latitude: l24,
                                                                                longitude: l25,
                                                                            }
                                                                        };
                                                                        V29::GeoVal(e29)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 7, "invalid enum discriminant");
                                                                        let e29 = {
                                                                            let l26 = *base.add(8).cast::<*mut u8>();
                                                                            let l27 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len28 = l27;
                                                                            _rt::Vec::from_raw_parts(l26.cast(), len28, len28)
                                                                        };
                                                                        V29::BlobVal(e29)
                                                                    }
                                                                };
                                                                v29
                                                            };
                                                            result30.push(e30);
                                                        }
                                                        _rt::cabi_dealloc(base30, len30 * 24, 8);
                                                        result30
                                                    };
                                                    V61::ArrayVal(e61)
                                                }
                                                5 => {
                                                    let e61 = {
                                                        let l31 = *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l32 = *base
                                                            .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base52 = l31;
                                                        let len52 = l32;
                                                        let mut result52 = _rt::Vec::with_capacity(len52);
                                                        for i in 0..len52 {
                                                            let base = base52
                                                                .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                            let e52 = {
                                                                let l33 = *base.add(0).cast::<*mut u8>();
                                                                let l34 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len35 = l34;
                                                                let bytes35 = _rt::Vec::from_raw_parts(
                                                                    l33.cast(),
                                                                    len35,
                                                                    len35,
                                                                );
                                                                let l36 = i32::from(
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V51;
                                                                let v51 = match l36 {
                                                                    0 => {
                                                                        let e51 = {
                                                                            let l37 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l38 = *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len39 = l38;
                                                                            let bytes39 = _rt::Vec::from_raw_parts(
                                                                                l37.cast(),
                                                                                len39,
                                                                                len39,
                                                                            );
                                                                            _rt::string_lift(bytes39)
                                                                        };
                                                                        V51::StringVal(e51)
                                                                    }
                                                                    1 => {
                                                                        let e51 = {
                                                                            let l40 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<f64>();
                                                                            l40
                                                                        };
                                                                        V51::NumberVal(e51)
                                                                    }
                                                                    2 => {
                                                                        let e51 = {
                                                                            let l41 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i64>();
                                                                            l41
                                                                        };
                                                                        V51::IntegerVal(e51)
                                                                    }
                                                                    3 => {
                                                                        let e51 = {
                                                                            let l42 = i32::from(
                                                                                *base
                                                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            _rt::bool_lift(l42 as u8)
                                                                        };
                                                                        V51::BooleanVal(e51)
                                                                    }
                                                                    4 => V51::NullVal,
                                                                    5 => {
                                                                        let e51 = {
                                                                            let l43 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l44 = *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len45 = l44;
                                                                            let bytes45 = _rt::Vec::from_raw_parts(
                                                                                l43.cast(),
                                                                                len45,
                                                                                len45,
                                                                            );
                                                                            _rt::string_lift(bytes45)
                                                                        };
                                                                        V51::DatetimeVal(e51)
                                                                    }
                                                                    6 => {
                                                                        let e51 = {
                                                                            let l46 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<f64>();
                                                                            let l47 = *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<f64>();
                                                                            super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                                latitude: l46,
                                                                                longitude: l47,
                                                                            }
                                                                        };
                                                                        V51::GeoVal(e51)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 7, "invalid enum discriminant");
                                                                        let e51 = {
                                                                            let l48 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l49 = *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len50 = l49;
                                                                            _rt::Vec::from_raw_parts(l48.cast(), len50, len50)
                                                                        };
                                                                        V51::BlobVal(e51)
                                                                    }
                                                                };
                                                                (_rt::string_lift(bytes35), v51)
                                                            };
                                                            result52.push(e52);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base52,
                                                            len52 * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                            8,
                                                        );
                                                        result52
                                                    };
                                                    V61::ObjectVal(e61)
                                                }
                                                6 => V61::NullVal,
                                                7 => {
                                                    let e61 = {
                                                        let l53 = *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<f64>();
                                                        let l54 = *base
                                                            .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<f64>();
                                                        super::super::super::super::golem::vector::types::GeoCoordinates {
                                                            latitude: l53,
                                                            longitude: l54,
                                                        }
                                                    };
                                                    V61::GeoVal(e61)
                                                }
                                                8 => {
                                                    let e61 = {
                                                        let l55 = *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l56 = *base
                                                            .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len57 = l56;
                                                        let bytes57 = _rt::Vec::from_raw_parts(
                                                            l55.cast(),
                                                            len57,
                                                            len57,
                                                        );
                                                        _rt::string_lift(bytes57)
                                                    };
                                                    V61::DatetimeVal(e61)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 9, "invalid enum discriminant");
                                                    let e61 = {
                                                        let l58 = *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l59 = *base
                                                            .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len60 = l59;
                                                        _rt::Vec::from_raw_parts(l58.cast(), len60, len60)
                                                    };
                                                    V61::BlobVal(e61)
                                                }
                                            };
                                            (_rt::string_lift(bytes4), v61)
                                        };
                                        result62.push(e62);
                                    }
                                    _rt::cabi_dealloc(
                                        base62,
                                        len62 * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                        8,
                                    );
                                    result62
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    );
                    let ptr64 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result63 {
                        Ok(e) => {
                            *ptr64.add(0).cast::<u8>() = (0i32) as u8;
                            let CollectionInfo {
                                name: name65,
                                description: description65,
                                dimension: dimension65,
                                metric: metric65,
                                vector_count: vector_count65,
                                size_bytes: size_bytes65,
                                index_ready: index_ready65,
                                created_at: created_at65,
                                updated_at: updated_at65,
                                provider_stats: provider_stats65,
                            } = e;
                            let vec66 = (name65.into_bytes()).into_boxed_slice();
                            let ptr66 = vec66.as_ptr().cast::<u8>();
                            let len66 = vec66.len();
                            ::core::mem::forget(vec66);
                            *ptr64
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len66;
                            *ptr64.add(8).cast::<*mut u8>() = ptr66.cast_mut();
                            match description65 {
                                Some(e) => {
                                    *ptr64
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec67 = (e.into_bytes()).into_boxed_slice();
                                    let ptr67 = vec67.as_ptr().cast::<u8>();
                                    let len67 = vec67.len();
                                    ::core::mem::forget(vec67);
                                    *ptr64
                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len67;
                                    *ptr64
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr67.cast_mut();
                                }
                                None => {
                                    *ptr64
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            *ptr64
                                .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                .cast::<i32>() = _rt::as_i32(dimension65);
                            *ptr64
                                .add(12 + 5 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (metric65.clone() as i32) as u8;
                            *ptr64
                                .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                .cast::<i64>() = _rt::as_i64(vector_count65);
                            match size_bytes65 {
                                Some(e) => {
                                    *ptr64
                                        .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    *ptr64
                                        .add(40 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i64>() = _rt::as_i64(e);
                                }
                                None => {
                                    *ptr64
                                        .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            *ptr64
                                .add(48 + 4 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (match index_ready65 {
                                true => 1,
                                false => 0,
                            }) as u8;
                            match created_at65 {
                                Some(e) => {
                                    *ptr64
                                        .add(56 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    *ptr64
                                        .add(64 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i64>() = _rt::as_i64(e);
                                }
                                None => {
                                    *ptr64
                                        .add(56 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match updated_at65 {
                                Some(e) => {
                                    *ptr64
                                        .add(72 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    *ptr64
                                        .add(80 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i64>() = _rt::as_i64(e);
                                }
                                None => {
                                    *ptr64
                                        .add(72 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match provider_stats65 {
                                Some(e) => {
                                    *ptr64
                                        .add(88 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec89 = e;
                                    let len89 = vec89.len();
                                    let layout89 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec89.len()
                                            * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                        8,
                                    );
                                    let result89 = if layout89.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout89).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout89);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec89.into_iter().enumerate() {
                                        let base = result89
                                            .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t68_0, t68_1) = e;
                                            let vec69 = (t68_0.into_bytes()).into_boxed_slice();
                                            let ptr69 = vec69.as_ptr().cast::<u8>();
                                            let len69 = vec69.len();
                                            ::core::mem::forget(vec69);
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len69;
                                            *base.add(0).cast::<*mut u8>() = ptr69.cast_mut();
                                            use super::super::super::super::golem::vector::types::FlatMetadataValue as V88;
                                            match t68_1 {
                                                V88::StringVal(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                    let vec70 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr70 = vec70.as_ptr().cast::<u8>();
                                                    let len70 = vec70.len();
                                                    ::core::mem::forget(vec70);
                                                    *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len70;
                                                    *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr70.cast_mut();
                                                }
                                                V88::NumberVal(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<f64>() = _rt::as_f64(e);
                                                }
                                                V88::IntegerVal(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (2i32) as u8;
                                                    *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i64>() = _rt::as_i64(e);
                                                }
                                                V88::BooleanVal(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (3i32) as u8;
                                                    *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (match e {
                                                        true => 1,
                                                        false => 0,
                                                    }) as u8;
                                                }
                                                V88::ArrayVal(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (4i32) as u8;
                                                    let vec76 = e;
                                                    let len76 = vec76.len();
                                                    let layout76 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec76.len() * 24,
                                                        8,
                                                    );
                                                    let result76 = if layout76.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout76).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout76);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec76.into_iter().enumerate() {
                                                        let base = result76.add(i * 24);
                                                        {
                                                            use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V75;
                                                            match e {
                                                                V75::StringVal(e) => {
                                                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                    let vec71 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr71 = vec71.as_ptr().cast::<u8>();
                                                                    let len71 = vec71.len();
                                                                    ::core::mem::forget(vec71);
                                                                    *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len71;
                                                                    *base.add(8).cast::<*mut u8>() = ptr71.cast_mut();
                                                                }
                                                                V75::NumberVal(e) => {
                                                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                    *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                                                }
                                                                V75::IntegerVal(e) => {
                                                                    *base.add(0).cast::<u8>() = (2i32) as u8;
                                                                    *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                                }
                                                                V75::BooleanVal(e) => {
                                                                    *base.add(0).cast::<u8>() = (3i32) as u8;
                                                                    *base.add(8).cast::<u8>() = (match e {
                                                                        true => 1,
                                                                        false => 0,
                                                                    }) as u8;
                                                                }
                                                                V75::NullVal => {
                                                                    *base.add(0).cast::<u8>() = (4i32) as u8;
                                                                }
                                                                V75::DatetimeVal(e) => {
                                                                    *base.add(0).cast::<u8>() = (5i32) as u8;
                                                                    let vec72 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr72 = vec72.as_ptr().cast::<u8>();
                                                                    let len72 = vec72.len();
                                                                    ::core::mem::forget(vec72);
                                                                    *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len72;
                                                                    *base.add(8).cast::<*mut u8>() = ptr72.cast_mut();
                                                                }
                                                                V75::GeoVal(e) => {
                                                                    *base.add(0).cast::<u8>() = (6i32) as u8;
                                                                    let super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                        latitude: latitude73,
                                                                        longitude: longitude73,
                                                                    } = e;
                                                                    *base.add(8).cast::<f64>() = _rt::as_f64(latitude73);
                                                                    *base.add(16).cast::<f64>() = _rt::as_f64(longitude73);
                                                                }
                                                                V75::BlobVal(e) => {
                                                                    *base.add(0).cast::<u8>() = (7i32) as u8;
                                                                    let vec74 = (e).into_boxed_slice();
                                                                    let ptr74 = vec74.as_ptr().cast::<u8>();
                                                                    let len74 = vec74.len();
                                                                    ::core::mem::forget(vec74);
                                                                    *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len74;
                                                                    *base.add(8).cast::<*mut u8>() = ptr74.cast_mut();
                                                                }
                                                            }
                                                        }
                                                    }
                                                    *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len76;
                                                    *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result76;
                                                }
                                                V88::ObjectVal(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (5i32) as u8;
                                                    let vec84 = e;
                                                    let len84 = vec84.len();
                                                    let layout84 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec84.len()
                                                            * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                        8,
                                                    );
                                                    let result84 = if layout84.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout84).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout84);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec84.into_iter().enumerate() {
                                                        let base = result84
                                                            .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let (t77_0, t77_1) = e;
                                                            let vec78 = (t77_0.into_bytes()).into_boxed_slice();
                                                            let ptr78 = vec78.as_ptr().cast::<u8>();
                                                            let len78 = vec78.len();
                                                            ::core::mem::forget(vec78);
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len78;
                                                            *base.add(0).cast::<*mut u8>() = ptr78.cast_mut();
                                                            use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V83;
                                                            match t77_1 {
                                                                V83::StringVal(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                    let vec79 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr79 = vec79.as_ptr().cast::<u8>();
                                                                    let len79 = vec79.len();
                                                                    ::core::mem::forget(vec79);
                                                                    *base
                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len79;
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr79.cast_mut();
                                                                }
                                                                V83::NumberVal(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<f64>() = _rt::as_f64(e);
                                                                }
                                                                V83::IntegerVal(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (2i32) as u8;
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i64>() = _rt::as_i64(e);
                                                                }
                                                                V83::BooleanVal(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (3i32) as u8;
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (match e {
                                                                        true => 1,
                                                                        false => 0,
                                                                    }) as u8;
                                                                }
                                                                V83::NullVal => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (4i32) as u8;
                                                                }
                                                                V83::DatetimeVal(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (5i32) as u8;
                                                                    let vec80 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr80 = vec80.as_ptr().cast::<u8>();
                                                                    let len80 = vec80.len();
                                                                    ::core::mem::forget(vec80);
                                                                    *base
                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len80;
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr80.cast_mut();
                                                                }
                                                                V83::GeoVal(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (6i32) as u8;
                                                                    let super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                        latitude: latitude81,
                                                                        longitude: longitude81,
                                                                    } = e;
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<f64>() = _rt::as_f64(latitude81);
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<f64>() = _rt::as_f64(longitude81);
                                                                }
                                                                V83::BlobVal(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (7i32) as u8;
                                                                    let vec82 = (e).into_boxed_slice();
                                                                    let ptr82 = vec82.as_ptr().cast::<u8>();
                                                                    let len82 = vec82.len();
                                                                    ::core::mem::forget(vec82);
                                                                    *base
                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len82;
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr82.cast_mut();
                                                                }
                                                            }
                                                        }
                                                    }
                                                    *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len84;
                                                    *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result84;
                                                }
                                                V88::NullVal => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (6i32) as u8;
                                                }
                                                V88::GeoVal(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (7i32) as u8;
                                                    let super::super::super::super::golem::vector::types::GeoCoordinates {
                                                        latitude: latitude85,
                                                        longitude: longitude85,
                                                    } = e;
                                                    *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<f64>() = _rt::as_f64(latitude85);
                                                    *base
                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<f64>() = _rt::as_f64(longitude85);
                                                }
                                                V88::DatetimeVal(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (8i32) as u8;
                                                    let vec86 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr86 = vec86.as_ptr().cast::<u8>();
                                                    let len86 = vec86.len();
                                                    ::core::mem::forget(vec86);
                                                    *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len86;
                                                    *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr86.cast_mut();
                                                }
                                                V88::BlobVal(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (9i32) as u8;
                                                    let vec87 = (e).into_boxed_slice();
                                                    let ptr87 = vec87.as_ptr().cast::<u8>();
                                                    let len87 = vec87.len();
                                                    ::core::mem::forget(vec87);
                                                    *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len87;
                                                    *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr87.cast_mut();
                                                }
                                            }
                                        }
                                    }
                                    *ptr64
                                        .add(88 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len89;
                                    *ptr64
                                        .add(88 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result89;
                                }
                                None => {
                                    *ptr64
                                        .add(88 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        Err(e) => {
                            *ptr64.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::golem::vector::types::VectorError as V100;
                            match e {
                                V100::NotFound(e) => {
                                    *ptr64.add(8).cast::<u8>() = (0i32) as u8;
                                    let vec90 = (e.into_bytes()).into_boxed_slice();
                                    let ptr90 = vec90.as_ptr().cast::<u8>();
                                    let len90 = vec90.len();
                                    ::core::mem::forget(vec90);
                                    *ptr64
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len90;
                                    *ptr64
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr90.cast_mut();
                                }
                                V100::AlreadyExists(e) => {
                                    *ptr64.add(8).cast::<u8>() = (1i32) as u8;
                                    let vec91 = (e.into_bytes()).into_boxed_slice();
                                    let ptr91 = vec91.as_ptr().cast::<u8>();
                                    let len91 = vec91.len();
                                    ::core::mem::forget(vec91);
                                    *ptr64
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len91;
                                    *ptr64
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr91.cast_mut();
                                }
                                V100::InvalidParams(e) => {
                                    *ptr64.add(8).cast::<u8>() = (2i32) as u8;
                                    let vec92 = (e.into_bytes()).into_boxed_slice();
                                    let ptr92 = vec92.as_ptr().cast::<u8>();
                                    let len92 = vec92.len();
                                    ::core::mem::forget(vec92);
                                    *ptr64
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len92;
                                    *ptr64
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr92.cast_mut();
                                }
                                V100::UnsupportedFeature(e) => {
                                    *ptr64.add(8).cast::<u8>() = (3i32) as u8;
                                    let vec93 = (e.into_bytes()).into_boxed_slice();
                                    let ptr93 = vec93.as_ptr().cast::<u8>();
                                    let len93 = vec93.len();
                                    ::core::mem::forget(vec93);
                                    *ptr64
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len93;
                                    *ptr64
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr93.cast_mut();
                                }
                                V100::DimensionMismatch(e) => {
                                    *ptr64.add(8).cast::<u8>() = (4i32) as u8;
                                    let vec94 = (e.into_bytes()).into_boxed_slice();
                                    let ptr94 = vec94.as_ptr().cast::<u8>();
                                    let len94 = vec94.len();
                                    ::core::mem::forget(vec94);
                                    *ptr64
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len94;
                                    *ptr64
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr94.cast_mut();
                                }
                                V100::InvalidVector(e) => {
                                    *ptr64.add(8).cast::<u8>() = (5i32) as u8;
                                    let vec95 = (e.into_bytes()).into_boxed_slice();
                                    let ptr95 = vec95.as_ptr().cast::<u8>();
                                    let len95 = vec95.len();
                                    ::core::mem::forget(vec95);
                                    *ptr64
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len95;
                                    *ptr64
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr95.cast_mut();
                                }
                                V100::Unauthorized(e) => {
                                    *ptr64.add(8).cast::<u8>() = (6i32) as u8;
                                    let vec96 = (e.into_bytes()).into_boxed_slice();
                                    let ptr96 = vec96.as_ptr().cast::<u8>();
                                    let len96 = vec96.len();
                                    ::core::mem::forget(vec96);
                                    *ptr64
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len96;
                                    *ptr64
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr96.cast_mut();
                                }
                                V100::RateLimited(e) => {
                                    *ptr64.add(8).cast::<u8>() = (7i32) as u8;
                                    let vec97 = (e.into_bytes()).into_boxed_slice();
                                    let ptr97 = vec97.as_ptr().cast::<u8>();
                                    let len97 = vec97.len();
                                    ::core::mem::forget(vec97);
                                    *ptr64
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len97;
                                    *ptr64
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr97.cast_mut();
                                }
                                V100::ProviderError(e) => {
                                    *ptr64.add(8).cast::<u8>() = (8i32) as u8;
                                    let vec98 = (e.into_bytes()).into_boxed_slice();
                                    let ptr98 = vec98.as_ptr().cast::<u8>();
                                    let len98 = vec98.len();
                                    ::core::mem::forget(vec98);
                                    *ptr64
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len98;
                                    *ptr64
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr98.cast_mut();
                                }
                                V100::ConnectionError(e) => {
                                    *ptr64.add(8).cast::<u8>() = (9i32) as u8;
                                    let vec99 = (e.into_bytes()).into_boxed_slice();
                                    let ptr99 = vec99.as_ptr().cast::<u8>();
                                    let len99 = vec99.len();
                                    ::core::mem::forget(vec99);
                                    *ptr64
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len99;
                                    *ptr64
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr99.cast_mut();
                                }
                            }
                        }
                    };
                    ptr64
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_update_collection<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(8).cast::<*mut u8>();
                            let l2 = *arg0
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                            let l3 = i32::from(
                                *arg0
                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l3 {
                                0 => {}
                                _ => {
                                    let l4 = *arg0
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l5 = *arg0
                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                            }
                            let l6 = i32::from(
                                *arg0
                                    .add(88 + 4 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l6 {
                                0 => {}
                                _ => {
                                    let l7 = *arg0
                                        .add(88 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l8 = *arg0
                                        .add(88 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base43 = l7;
                                    let len43 = l8;
                                    for i in 0..len43 {
                                        let base = base43
                                            .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let l9 = *base.add(0).cast::<*mut u8>();
                                            let l10 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l9, l10, 1);
                                            let l11 = i32::from(
                                                *base
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l11 {
                                                0 => {
                                                    let l12 = *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l13 = *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l12, l13, 1);
                                                }
                                                1 => {}
                                                2 => {}
                                                3 => {}
                                                4 => {
                                                    let l14 = *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l15 = *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base24 = l14;
                                                    let len24 = l15;
                                                    for i in 0..len24 {
                                                        let base = base24.add(i * 24);
                                                        {
                                                            let l16 = i32::from(*base.add(0).cast::<u8>());
                                                            match l16 {
                                                                0 => {
                                                                    let l17 = *base.add(8).cast::<*mut u8>();
                                                                    let l18 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l17, l18, 1);
                                                                }
                                                                1 => {}
                                                                2 => {}
                                                                3 => {}
                                                                4 => {}
                                                                5 => {
                                                                    let l19 = *base.add(8).cast::<*mut u8>();
                                                                    let l20 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l19, l20, 1);
                                                                }
                                                                6 => {}
                                                                _ => {
                                                                    let l21 = *base.add(8).cast::<*mut u8>();
                                                                    let l22 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base23 = l21;
                                                                    let len23 = l22;
                                                                    _rt::cabi_dealloc(base23, len23 * 1, 1);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(base24, len24 * 24, 8);
                                                }
                                                5 => {
                                                    let l25 = *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l26 = *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base37 = l25;
                                                    let len37 = l26;
                                                    for i in 0..len37 {
                                                        let base = base37
                                                            .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l27 = *base.add(0).cast::<*mut u8>();
                                                            let l28 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l27, l28, 1);
                                                            let l29 = i32::from(
                                                                *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l29 {
                                                                0 => {
                                                                    let l30 = *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l31 = *base
                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l30, l31, 1);
                                                                }
                                                                1 => {}
                                                                2 => {}
                                                                3 => {}
                                                                4 => {}
                                                                5 => {
                                                                    let l32 = *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l33 = *base
                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l32, l33, 1);
                                                                }
                                                                6 => {}
                                                                _ => {
                                                                    let l34 = *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l35 = *base
                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base36 = l34;
                                                                    let len36 = l35;
                                                                    _rt::cabi_dealloc(base36, len36 * 1, 1);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base37,
                                                        len37 * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                        8,
                                                    );
                                                }
                                                6 => {}
                                                7 => {}
                                                8 => {
                                                    let l38 = *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l39 = *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l38, l39, 1);
                                                }
                                                _ => {
                                                    let l40 = *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l41 = *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base42 = l40;
                                                    let len42 = l41;
                                                    _rt::cabi_dealloc(base42, len42 * 1, 1);
                                                }
                                            }
                                        }
                                    }
                                    _rt::cabi_dealloc(
                                        base43,
                                        len43 * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                        8,
                                    );
                                }
                            }
                        }
                        _ => {
                            let l44 = i32::from(*arg0.add(8).cast::<u8>());
                            match l44 {
                                0 => {
                                    let l45 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l46 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l45, l46, 1);
                                }
                                1 => {
                                    let l47 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l48 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l47, l48, 1);
                                }
                                2 => {
                                    let l49 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l50 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l49, l50, 1);
                                }
                                3 => {
                                    let l51 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l52 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l51, l52, 1);
                                }
                                4 => {
                                    let l53 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l54 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l53, l54, 1);
                                }
                                5 => {
                                    let l55 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l56 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l55, l56, 1);
                                }
                                6 => {
                                    let l57 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l58 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l57, l58, 1);
                                }
                                7 => {
                                    let l59 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l60 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l59, l60, 1);
                                }
                                8 => {
                                    let l61 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l62 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l61, l62, 1);
                                }
                                _ => {
                                    let l63 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l64 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l63, l64, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_delete_collection_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let result1 = T::delete_collection(_rt::string_lift(bytes0));
                    let ptr2 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result1 {
                        Ok(_) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::golem::vector::types::VectorError as V13;
                            match e {
                                V13::NotFound(e) => {
                                    *ptr2
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                    let vec3 = (e.into_bytes()).into_boxed_slice();
                                    let ptr3 = vec3.as_ptr().cast::<u8>();
                                    let len3 = vec3.len();
                                    ::core::mem::forget(vec3);
                                    *ptr2
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len3;
                                    *ptr2
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr3.cast_mut();
                                }
                                V13::AlreadyExists(e) => {
                                    *ptr2
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec4 = (e.into_bytes()).into_boxed_slice();
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    ::core::mem::forget(vec4);
                                    *ptr2
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len4;
                                    *ptr2
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr4.cast_mut();
                                }
                                V13::InvalidParams(e) => {
                                    *ptr2
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                    let vec5 = (e.into_bytes()).into_boxed_slice();
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    ::core::mem::forget(vec5);
                                    *ptr2
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len5;
                                    *ptr2
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr5.cast_mut();
                                }
                                V13::UnsupportedFeature(e) => {
                                    *ptr2
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                    let vec6 = (e.into_bytes()).into_boxed_slice();
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    ::core::mem::forget(vec6);
                                    *ptr2
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len6;
                                    *ptr2
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr6.cast_mut();
                                }
                                V13::DimensionMismatch(e) => {
                                    *ptr2
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (4i32) as u8;
                                    let vec7 = (e.into_bytes()).into_boxed_slice();
                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                    let len7 = vec7.len();
                                    ::core::mem::forget(vec7);
                                    *ptr2
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len7;
                                    *ptr2
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr7.cast_mut();
                                }
                                V13::InvalidVector(e) => {
                                    *ptr2
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (5i32) as u8;
                                    let vec8 = (e.into_bytes()).into_boxed_slice();
                                    let ptr8 = vec8.as_ptr().cast::<u8>();
                                    let len8 = vec8.len();
                                    ::core::mem::forget(vec8);
                                    *ptr2
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len8;
                                    *ptr2
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr8.cast_mut();
                                }
                                V13::Unauthorized(e) => {
                                    *ptr2
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (6i32) as u8;
                                    let vec9 = (e.into_bytes()).into_boxed_slice();
                                    let ptr9 = vec9.as_ptr().cast::<u8>();
                                    let len9 = vec9.len();
                                    ::core::mem::forget(vec9);
                                    *ptr2
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len9;
                                    *ptr2
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr9.cast_mut();
                                }
                                V13::RateLimited(e) => {
                                    *ptr2
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (7i32) as u8;
                                    let vec10 = (e.into_bytes()).into_boxed_slice();
                                    let ptr10 = vec10.as_ptr().cast::<u8>();
                                    let len10 = vec10.len();
                                    ::core::mem::forget(vec10);
                                    *ptr2
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len10;
                                    *ptr2
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr10.cast_mut();
                                }
                                V13::ProviderError(e) => {
                                    *ptr2
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (8i32) as u8;
                                    let vec11 = (e.into_bytes()).into_boxed_slice();
                                    let ptr11 = vec11.as_ptr().cast::<u8>();
                                    let len11 = vec11.len();
                                    ::core::mem::forget(vec11);
                                    *ptr2
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len11;
                                    *ptr2
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr11.cast_mut();
                                }
                                V13::ConnectionError(e) => {
                                    *ptr2
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (9i32) as u8;
                                    let vec12 = (e.into_bytes()).into_boxed_slice();
                                    let ptr12 = vec12.as_ptr().cast::<u8>();
                                    let len12 = vec12.len();
                                    ::core::mem::forget(vec12);
                                    *ptr2
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len12;
                                    *ptr2
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr12.cast_mut();
                                }
                            }
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_delete_collection<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l1 {
                                0 => {
                                    let l2 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l3 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                }
                                1 => {
                                    let l4 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l5 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                                2 => {
                                    let l6 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l7 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l6, l7, 1);
                                }
                                3 => {
                                    let l8 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l9 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l8, l9, 1);
                                }
                                4 => {
                                    let l10 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l11 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l10, l11, 1);
                                }
                                5 => {
                                    let l12 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l13 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l12, l13, 1);
                                }
                                6 => {
                                    let l14 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l15 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l14, l15, 1);
                                }
                                7 => {
                                    let l16 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l17 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l16, l17, 1);
                                }
                                8 => {
                                    let l18 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l19 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l18, l19, 1);
                                }
                                _ => {
                                    let l20 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l21 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l20, l21, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_collection_exists_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let result1 = T::collection_exists(_rt::string_lift(bytes0));
                    let ptr2 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result1 {
                        Ok(e) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr2
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (match e {
                                true => 1,
                                false => 0,
                            }) as u8;
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::golem::vector::types::VectorError as V13;
                            match e {
                                V13::NotFound(e) => {
                                    *ptr2
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                    let vec3 = (e.into_bytes()).into_boxed_slice();
                                    let ptr3 = vec3.as_ptr().cast::<u8>();
                                    let len3 = vec3.len();
                                    ::core::mem::forget(vec3);
                                    *ptr2
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len3;
                                    *ptr2
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr3.cast_mut();
                                }
                                V13::AlreadyExists(e) => {
                                    *ptr2
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec4 = (e.into_bytes()).into_boxed_slice();
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    ::core::mem::forget(vec4);
                                    *ptr2
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len4;
                                    *ptr2
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr4.cast_mut();
                                }
                                V13::InvalidParams(e) => {
                                    *ptr2
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                    let vec5 = (e.into_bytes()).into_boxed_slice();
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    ::core::mem::forget(vec5);
                                    *ptr2
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len5;
                                    *ptr2
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr5.cast_mut();
                                }
                                V13::UnsupportedFeature(e) => {
                                    *ptr2
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                    let vec6 = (e.into_bytes()).into_boxed_slice();
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    ::core::mem::forget(vec6);
                                    *ptr2
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len6;
                                    *ptr2
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr6.cast_mut();
                                }
                                V13::DimensionMismatch(e) => {
                                    *ptr2
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (4i32) as u8;
                                    let vec7 = (e.into_bytes()).into_boxed_slice();
                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                    let len7 = vec7.len();
                                    ::core::mem::forget(vec7);
                                    *ptr2
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len7;
                                    *ptr2
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr7.cast_mut();
                                }
                                V13::InvalidVector(e) => {
                                    *ptr2
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (5i32) as u8;
                                    let vec8 = (e.into_bytes()).into_boxed_slice();
                                    let ptr8 = vec8.as_ptr().cast::<u8>();
                                    let len8 = vec8.len();
                                    ::core::mem::forget(vec8);
                                    *ptr2
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len8;
                                    *ptr2
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr8.cast_mut();
                                }
                                V13::Unauthorized(e) => {
                                    *ptr2
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (6i32) as u8;
                                    let vec9 = (e.into_bytes()).into_boxed_slice();
                                    let ptr9 = vec9.as_ptr().cast::<u8>();
                                    let len9 = vec9.len();
                                    ::core::mem::forget(vec9);
                                    *ptr2
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len9;
                                    *ptr2
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr9.cast_mut();
                                }
                                V13::RateLimited(e) => {
                                    *ptr2
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (7i32) as u8;
                                    let vec10 = (e.into_bytes()).into_boxed_slice();
                                    let ptr10 = vec10.as_ptr().cast::<u8>();
                                    let len10 = vec10.len();
                                    ::core::mem::forget(vec10);
                                    *ptr2
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len10;
                                    *ptr2
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr10.cast_mut();
                                }
                                V13::ProviderError(e) => {
                                    *ptr2
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (8i32) as u8;
                                    let vec11 = (e.into_bytes()).into_boxed_slice();
                                    let ptr11 = vec11.as_ptr().cast::<u8>();
                                    let len11 = vec11.len();
                                    ::core::mem::forget(vec11);
                                    *ptr2
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len11;
                                    *ptr2
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr11.cast_mut();
                                }
                                V13::ConnectionError(e) => {
                                    *ptr2
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (9i32) as u8;
                                    let vec12 = (e.into_bytes()).into_boxed_slice();
                                    let ptr12 = vec12.as_ptr().cast::<u8>();
                                    let len12 = vec12.len();
                                    ::core::mem::forget(vec12);
                                    *ptr2
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len12;
                                    *ptr2
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr12.cast_mut();
                                }
                            }
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_collection_exists<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l1 {
                                0 => {
                                    let l2 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l3 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                }
                                1 => {
                                    let l4 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l5 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                                2 => {
                                    let l6 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l7 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l6, l7, 1);
                                }
                                3 => {
                                    let l8 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l9 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l8, l9, 1);
                                }
                                4 => {
                                    let l10 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l11 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l10, l11, 1);
                                }
                                5 => {
                                    let l12 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l13 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l12, l13, 1);
                                }
                                6 => {
                                    let l14 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l15 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l14, l15, 1);
                                }
                                7 => {
                                    let l16 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l17 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l16, l17, 1);
                                }
                                8 => {
                                    let l18 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l19 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l18, l19, 1);
                                }
                                _ => {
                                    let l20 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l21 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l20, l21, 1);
                                }
                            }
                        }
                    }
                }
                pub trait Guest {
                    /// Create or update collection (upsert)
                    fn upsert_collection(
                        name: _rt::String,
                        description: Option<_rt::String>,
                        dimension: u32,
                        metric: DistanceMetric,
                        index_config: Option<IndexConfig>,
                        metadata: Option<Metadata>,
                    ) -> Result<CollectionInfo, VectorError>;
                    /// List all collections
                    fn list_collections() -> Result<
                        _rt::Vec<CollectionInfo>,
                        VectorError,
                    >;
                    /// Get collection information
                    fn get_collection(
                        name: _rt::String,
                    ) -> Result<CollectionInfo, VectorError>;
                    /// Update collection metadata only
                    fn update_collection(
                        name: _rt::String,
                        description: Option<_rt::String>,
                        metadata: Option<Metadata>,
                    ) -> Result<CollectionInfo, VectorError>;
                    /// Delete collection and all vectors
                    fn delete_collection(name: _rt::String) -> Result<(), VectorError>;
                    /// Check if collection exists
                    fn collection_exists(name: _rt::String) -> Result<bool, VectorError>;
                }
                #[doc(hidden)]
                macro_rules! __export_golem_vector_collections_1_0_0_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "golem:vector/collections@1.0.0#upsert-collection")] unsafe
                        extern "C" fn export_upsert_collection(arg0 : * mut u8, arg1 :
                        usize, arg2 : i32, arg3 : * mut u8, arg4 : usize, arg5 : i32,
                        arg6 : i32, arg7 : i32, arg8 : i32, arg9 : * mut u8, arg10 :
                        usize, arg11 : * mut u8, arg12 : usize, arg13 : i32, arg14 : *
                        mut u8, arg15 : usize,) -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_upsert_collection_cabi::<$ty >
                        (arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9,
                        arg10, arg11, arg12, arg13, arg14, arg15) } } #[unsafe
                        (export_name =
                        "cabi_post_golem:vector/collections@1.0.0#upsert-collection")]
                        unsafe extern "C" fn _post_return_upsert_collection(arg0 : * mut
                        u8,) { unsafe { $($path_to_types)*::
                        __post_return_upsert_collection::<$ty > (arg0) } } #[unsafe
                        (export_name =
                        "golem:vector/collections@1.0.0#list-collections")] unsafe extern
                        "C" fn export_list_collections() -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_list_collections_cabi::<$ty > () } }
                        #[unsafe (export_name =
                        "cabi_post_golem:vector/collections@1.0.0#list-collections")]
                        unsafe extern "C" fn _post_return_list_collections(arg0 : * mut
                        u8,) { unsafe { $($path_to_types)*::
                        __post_return_list_collections::<$ty > (arg0) } } #[unsafe
                        (export_name = "golem:vector/collections@1.0.0#get-collection")]
                        unsafe extern "C" fn export_get_collection(arg0 : * mut u8, arg1
                        : usize,) -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_get_collection_cabi::<$ty > (arg0, arg1) } } #[unsafe
                        (export_name =
                        "cabi_post_golem:vector/collections@1.0.0#get-collection")]
                        unsafe extern "C" fn _post_return_get_collection(arg0 : * mut
                        u8,) { unsafe { $($path_to_types)*::
                        __post_return_get_collection::<$ty > (arg0) } } #[unsafe
                        (export_name =
                        "golem:vector/collections@1.0.0#update-collection")] unsafe
                        extern "C" fn export_update_collection(arg0 : * mut u8, arg1 :
                        usize, arg2 : i32, arg3 : * mut u8, arg4 : usize, arg5 : i32,
                        arg6 : * mut u8, arg7 : usize,) -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_update_collection_cabi::<$ty >
                        (arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7) } } #[unsafe
                        (export_name =
                        "cabi_post_golem:vector/collections@1.0.0#update-collection")]
                        unsafe extern "C" fn _post_return_update_collection(arg0 : * mut
                        u8,) { unsafe { $($path_to_types)*::
                        __post_return_update_collection::<$ty > (arg0) } } #[unsafe
                        (export_name =
                        "golem:vector/collections@1.0.0#delete-collection")] unsafe
                        extern "C" fn export_delete_collection(arg0 : * mut u8, arg1 :
                        usize,) -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_delete_collection_cabi::<$ty > (arg0, arg1) } } #[unsafe
                        (export_name =
                        "cabi_post_golem:vector/collections@1.0.0#delete-collection")]
                        unsafe extern "C" fn _post_return_delete_collection(arg0 : * mut
                        u8,) { unsafe { $($path_to_types)*::
                        __post_return_delete_collection::<$ty > (arg0) } } #[unsafe
                        (export_name =
                        "golem:vector/collections@1.0.0#collection-exists")] unsafe
                        extern "C" fn export_collection_exists(arg0 : * mut u8, arg1 :
                        usize,) -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_collection_exists_cabi::<$ty > (arg0, arg1) } } #[unsafe
                        (export_name =
                        "cabi_post_golem:vector/collections@1.0.0#collection-exists")]
                        unsafe extern "C" fn _post_return_collection_exists(arg0 : * mut
                        u8,) { unsafe { $($path_to_types)*::
                        __post_return_collection_exists::<$ty > (arg0) } } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_golem_vector_collections_1_0_0_cabi;
                #[repr(align(8))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<
                        u8,
                    >; 96 + 6 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 96
                        + 6 * ::core::mem::size_of::<*const u8>()],
                );
            }
            /// Core vector operations (CRUD)
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod vectors {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type Id = super::super::super::super::golem::vector::types::Id;
                pub type VectorRecord = super::super::super::super::golem::vector::types::VectorRecord;
                pub type VectorData = super::super::super::super::golem::vector::types::VectorData;
                pub type Metadata = super::super::super::super::golem::vector::types::Metadata;
                pub type FilterExpression = super::super::super::super::golem::vector::types::FilterExpression;
                pub type VectorError = super::super::super::super::golem::vector::types::VectorError;
                /// Batch operation result
                #[derive(Clone)]
                pub struct BatchResult {
                    pub success_count: u32,
                    pub failure_count: u32,
                    pub errors: _rt::Vec<(u32, VectorError)>,
                }
                impl ::core::fmt::Debug for BatchResult {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("BatchResult")
                            .field("success-count", &self.success_count)
                            .field("failure-count", &self.failure_count)
                            .field("errors", &self.errors)
                            .finish()
                    }
                }
                /// List response with pagination
                #[derive(Clone)]
                pub struct ListResponse {
                    pub vectors: _rt::Vec<VectorRecord>,
                    pub next_cursor: Option<_rt::String>,
                    pub total_count: Option<u64>,
                }
                impl ::core::fmt::Debug for ListResponse {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("ListResponse")
                            .field("vectors", &self.vectors)
                            .field("next-cursor", &self.next_cursor)
                            .field("total-count", &self.total_count)
                            .finish()
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_upsert_vectors_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                    arg4: i32,
                    arg5: *mut u8,
                    arg6: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let base107 = arg2;
                    let len107 = arg3;
                    let mut result107 = _rt::Vec::with_capacity(len107);
                    for i in 0..len107 {
                        let base = base107
                            .add(i * (13 * ::core::mem::size_of::<*const u8>()));
                        let e107 = {
                            let l1 = *base.add(0).cast::<*mut u8>();
                            let l2 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len3 = l2;
                            let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);
                            let l4 = i32::from(
                                *base
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            use super::super::super::super::golem::vector::types::VectorData as V42;
                            let v42 = match l4 {
                                0 => {
                                    let e42 = {
                                        let l5 = *base
                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l6 = *base
                                            .add(4 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len7 = l6;
                                        _rt::Vec::from_raw_parts(l5.cast(), len7, len7)
                                    };
                                    V42::Dense(e42)
                                }
                                1 => {
                                    let e42 = {
                                        let l8 = *base
                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l9 = *base
                                            .add(4 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len10 = l9;
                                        let l11 = *base
                                            .add(5 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l12 = *base
                                            .add(6 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len13 = l12;
                                        let l14 = *base
                                            .add(7 * ::core::mem::size_of::<*const u8>())
                                            .cast::<i32>();
                                        super::super::super::super::golem::vector::types::SparseVector {
                                            indices: _rt::Vec::from_raw_parts(l8.cast(), len10, len10),
                                            values: _rt::Vec::from_raw_parts(l11.cast(), len13, len13),
                                            total_dimensions: l14 as u32,
                                        }
                                    };
                                    V42::Sparse(e42)
                                }
                                2 => {
                                    let e42 = {
                                        let l15 = *base
                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l16 = *base
                                            .add(4 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len17 = l16;
                                        let l18 = *base
                                            .add(5 * ::core::mem::size_of::<*const u8>())
                                            .cast::<i32>();
                                        super::super::super::super::golem::vector::types::BinaryVector {
                                            data: _rt::Vec::from_raw_parts(l15.cast(), len17, len17),
                                            dimensions: l18 as u32,
                                        }
                                    };
                                    V42::Binary(e42)
                                }
                                3 => {
                                    let e42 = {
                                        let l19 = *base
                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l20 = *base
                                            .add(4 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len21 = l20;
                                        let l22 = *base
                                            .add(5 * ::core::mem::size_of::<*const u8>())
                                            .cast::<i32>();
                                        super::super::super::super::golem::vector::types::HalfVector {
                                            data: _rt::Vec::from_raw_parts(l19.cast(), len21, len21),
                                            dimensions: l22 as u32,
                                        }
                                    };
                                    V42::Half(e42)
                                }
                                4 => {
                                    let e42 = {
                                        let l23 = *base
                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l24 = *base
                                            .add(4 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let base31 = l23;
                                        let len31 = l24;
                                        let mut result31 = _rt::Vec::with_capacity(len31);
                                        for i in 0..len31 {
                                            let base = base31
                                                .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                            let e31 = {
                                                let l25 = *base.add(0).cast::<*mut u8>();
                                                let l26 = *base
                                                    .add(::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len27 = l26;
                                                let bytes27 = _rt::Vec::from_raw_parts(
                                                    l25.cast(),
                                                    len27,
                                                    len27,
                                                );
                                                let l28 = *base
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l29 = *base
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len30 = l29;
                                                (
                                                    _rt::string_lift(bytes27),
                                                    _rt::Vec::from_raw_parts(l28.cast(), len30, len30),
                                                )
                                            };
                                            result31.push(e31);
                                        }
                                        _rt::cabi_dealloc(
                                            base31,
                                            len31 * (4 * ::core::mem::size_of::<*const u8>()),
                                            ::core::mem::size_of::<*const u8>(),
                                        );
                                        result31
                                    };
                                    V42::Named(e42)
                                }
                                n => {
                                    debug_assert_eq!(n, 5, "invalid enum discriminant");
                                    let e42 = {
                                        let l32 = *base
                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l33 = *base
                                            .add(4 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len34 = l33;
                                        let l35 = *base
                                            .add(5 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l36 = *base
                                            .add(6 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len37 = l36;
                                        let l38 = *base
                                            .add(7 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l39 = *base
                                            .add(8 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len40 = l39;
                                        let l41 = *base
                                            .add(9 * ::core::mem::size_of::<*const u8>())
                                            .cast::<i32>();
                                        (
                                            _rt::Vec::from_raw_parts(l32.cast(), len34, len34),
                                            super::super::super::super::golem::vector::types::SparseVector {
                                                indices: _rt::Vec::from_raw_parts(l35.cast(), len37, len37),
                                                values: _rt::Vec::from_raw_parts(l38.cast(), len40, len40),
                                                total_dimensions: l41 as u32,
                                            },
                                        )
                                    };
                                    V42::Hybrid(e42)
                                }
                            };
                            let l43 = i32::from(
                                *base
                                    .add(10 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            super::super::super::super::golem::vector::types::VectorRecord {
                                id: _rt::string_lift(bytes3),
                                vector: v42,
                                metadata: match l43 {
                                    0 => None,
                                    1 => {
                                        let e = {
                                            let l44 = *base
                                                .add(11 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l45 = *base
                                                .add(12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base106 = l44;
                                            let len106 = l45;
                                            let mut result106 = _rt::Vec::with_capacity(len106);
                                            for i in 0..len106 {
                                                let base = base106
                                                    .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                let e106 = {
                                                    let l46 = *base.add(0).cast::<*mut u8>();
                                                    let l47 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len48 = l47;
                                                    let bytes48 = _rt::Vec::from_raw_parts(
                                                        l46.cast(),
                                                        len48,
                                                        len48,
                                                    );
                                                    let l49 = i32::from(
                                                        *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    use super::super::super::super::golem::vector::types::FlatMetadataValue as V105;
                                                    let v105 = match l49 {
                                                        0 => {
                                                            let e105 = {
                                                                let l50 = *base
                                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l51 = *base
                                                                    .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len52 = l51;
                                                                let bytes52 = _rt::Vec::from_raw_parts(
                                                                    l50.cast(),
                                                                    len52,
                                                                    len52,
                                                                );
                                                                _rt::string_lift(bytes52)
                                                            };
                                                            V105::StringVal(e105)
                                                        }
                                                        1 => {
                                                            let e105 = {
                                                                let l53 = *base
                                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<f64>();
                                                                l53
                                                            };
                                                            V105::NumberVal(e105)
                                                        }
                                                        2 => {
                                                            let e105 = {
                                                                let l54 = *base
                                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<i64>();
                                                                l54
                                                            };
                                                            V105::IntegerVal(e105)
                                                        }
                                                        3 => {
                                                            let e105 = {
                                                                let l55 = i32::from(
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                _rt::bool_lift(l55 as u8)
                                                            };
                                                            V105::BooleanVal(e105)
                                                        }
                                                        4 => {
                                                            let e105 = {
                                                                let l56 = *base
                                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l57 = *base
                                                                    .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let base74 = l56;
                                                                let len74 = l57;
                                                                let mut result74 = _rt::Vec::with_capacity(len74);
                                                                for i in 0..len74 {
                                                                    let base = base74.add(i * 24);
                                                                    let e74 = {
                                                                        let l58 = i32::from(*base.add(0).cast::<u8>());
                                                                        use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V73;
                                                                        let v73 = match l58 {
                                                                            0 => {
                                                                                let e73 = {
                                                                                    let l59 = *base.add(8).cast::<*mut u8>();
                                                                                    let l60 = *base
                                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len61 = l60;
                                                                                    let bytes61 = _rt::Vec::from_raw_parts(
                                                                                        l59.cast(),
                                                                                        len61,
                                                                                        len61,
                                                                                    );
                                                                                    _rt::string_lift(bytes61)
                                                                                };
                                                                                V73::StringVal(e73)
                                                                            }
                                                                            1 => {
                                                                                let e73 = {
                                                                                    let l62 = *base.add(8).cast::<f64>();
                                                                                    l62
                                                                                };
                                                                                V73::NumberVal(e73)
                                                                            }
                                                                            2 => {
                                                                                let e73 = {
                                                                                    let l63 = *base.add(8).cast::<i64>();
                                                                                    l63
                                                                                };
                                                                                V73::IntegerVal(e73)
                                                                            }
                                                                            3 => {
                                                                                let e73 = {
                                                                                    let l64 = i32::from(*base.add(8).cast::<u8>());
                                                                                    _rt::bool_lift(l64 as u8)
                                                                                };
                                                                                V73::BooleanVal(e73)
                                                                            }
                                                                            4 => V73::NullVal,
                                                                            5 => {
                                                                                let e73 = {
                                                                                    let l65 = *base.add(8).cast::<*mut u8>();
                                                                                    let l66 = *base
                                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len67 = l66;
                                                                                    let bytes67 = _rt::Vec::from_raw_parts(
                                                                                        l65.cast(),
                                                                                        len67,
                                                                                        len67,
                                                                                    );
                                                                                    _rt::string_lift(bytes67)
                                                                                };
                                                                                V73::DatetimeVal(e73)
                                                                            }
                                                                            6 => {
                                                                                let e73 = {
                                                                                    let l68 = *base.add(8).cast::<f64>();
                                                                                    let l69 = *base.add(16).cast::<f64>();
                                                                                    super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                                        latitude: l68,
                                                                                        longitude: l69,
                                                                                    }
                                                                                };
                                                                                V73::GeoVal(e73)
                                                                            }
                                                                            n => {
                                                                                debug_assert_eq!(n, 7, "invalid enum discriminant");
                                                                                let e73 = {
                                                                                    let l70 = *base.add(8).cast::<*mut u8>();
                                                                                    let l71 = *base
                                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len72 = l71;
                                                                                    _rt::Vec::from_raw_parts(l70.cast(), len72, len72)
                                                                                };
                                                                                V73::BlobVal(e73)
                                                                            }
                                                                        };
                                                                        v73
                                                                    };
                                                                    result74.push(e74);
                                                                }
                                                                _rt::cabi_dealloc(base74, len74 * 24, 8);
                                                                result74
                                                            };
                                                            V105::ArrayVal(e105)
                                                        }
                                                        5 => {
                                                            let e105 = {
                                                                let l75 = *base
                                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l76 = *base
                                                                    .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let base96 = l75;
                                                                let len96 = l76;
                                                                let mut result96 = _rt::Vec::with_capacity(len96);
                                                                for i in 0..len96 {
                                                                    let base = base96
                                                                        .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                    let e96 = {
                                                                        let l77 = *base.add(0).cast::<*mut u8>();
                                                                        let l78 = *base
                                                                            .add(::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len79 = l78;
                                                                        let bytes79 = _rt::Vec::from_raw_parts(
                                                                            l77.cast(),
                                                                            len79,
                                                                            len79,
                                                                        );
                                                                        let l80 = i32::from(
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>(),
                                                                        );
                                                                        use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V95;
                                                                        let v95 = match l80 {
                                                                            0 => {
                                                                                let e95 = {
                                                                                    let l81 = *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l82 = *base
                                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len83 = l82;
                                                                                    let bytes83 = _rt::Vec::from_raw_parts(
                                                                                        l81.cast(),
                                                                                        len83,
                                                                                        len83,
                                                                                    );
                                                                                    _rt::string_lift(bytes83)
                                                                                };
                                                                                V95::StringVal(e95)
                                                                            }
                                                                            1 => {
                                                                                let e95 = {
                                                                                    let l84 = *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<f64>();
                                                                                    l84
                                                                                };
                                                                                V95::NumberVal(e95)
                                                                            }
                                                                            2 => {
                                                                                let e95 = {
                                                                                    let l85 = *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i64>();
                                                                                    l85
                                                                                };
                                                                                V95::IntegerVal(e95)
                                                                            }
                                                                            3 => {
                                                                                let e95 = {
                                                                                    let l86 = i32::from(
                                                                                        *base
                                                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                            .cast::<u8>(),
                                                                                    );
                                                                                    _rt::bool_lift(l86 as u8)
                                                                                };
                                                                                V95::BooleanVal(e95)
                                                                            }
                                                                            4 => V95::NullVal,
                                                                            5 => {
                                                                                let e95 = {
                                                                                    let l87 = *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l88 = *base
                                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len89 = l88;
                                                                                    let bytes89 = _rt::Vec::from_raw_parts(
                                                                                        l87.cast(),
                                                                                        len89,
                                                                                        len89,
                                                                                    );
                                                                                    _rt::string_lift(bytes89)
                                                                                };
                                                                                V95::DatetimeVal(e95)
                                                                            }
                                                                            6 => {
                                                                                let e95 = {
                                                                                    let l90 = *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<f64>();
                                                                                    let l91 = *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<f64>();
                                                                                    super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                                        latitude: l90,
                                                                                        longitude: l91,
                                                                                    }
                                                                                };
                                                                                V95::GeoVal(e95)
                                                                            }
                                                                            n => {
                                                                                debug_assert_eq!(n, 7, "invalid enum discriminant");
                                                                                let e95 = {
                                                                                    let l92 = *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l93 = *base
                                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let len94 = l93;
                                                                                    _rt::Vec::from_raw_parts(l92.cast(), len94, len94)
                                                                                };
                                                                                V95::BlobVal(e95)
                                                                            }
                                                                        };
                                                                        (_rt::string_lift(bytes79), v95)
                                                                    };
                                                                    result96.push(e96);
                                                                }
                                                                _rt::cabi_dealloc(
                                                                    base96,
                                                                    len96 * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                    8,
                                                                );
                                                                result96
                                                            };
                                                            V105::ObjectVal(e105)
                                                        }
                                                        6 => V105::NullVal,
                                                        7 => {
                                                            let e105 = {
                                                                let l97 = *base
                                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<f64>();
                                                                let l98 = *base
                                                                    .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<f64>();
                                                                super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                    latitude: l97,
                                                                    longitude: l98,
                                                                }
                                                            };
                                                            V105::GeoVal(e105)
                                                        }
                                                        8 => {
                                                            let e105 = {
                                                                let l99 = *base
                                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l100 = *base
                                                                    .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len101 = l100;
                                                                let bytes101 = _rt::Vec::from_raw_parts(
                                                                    l99.cast(),
                                                                    len101,
                                                                    len101,
                                                                );
                                                                _rt::string_lift(bytes101)
                                                            };
                                                            V105::DatetimeVal(e105)
                                                        }
                                                        n => {
                                                            debug_assert_eq!(n, 9, "invalid enum discriminant");
                                                            let e105 = {
                                                                let l102 = *base
                                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l103 = *base
                                                                    .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len104 = l103;
                                                                _rt::Vec::from_raw_parts(l102.cast(), len104, len104)
                                                            };
                                                            V105::BlobVal(e105)
                                                        }
                                                    };
                                                    (_rt::string_lift(bytes48), v105)
                                                };
                                                result106.push(e106);
                                            }
                                            _rt::cabi_dealloc(
                                                base106,
                                                len106 * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                8,
                                            );
                                            result106
                                        };
                                        Some(e)
                                    }
                                    _ => _rt::invalid_enum_discriminant(),
                                },
                            }
                        };
                        result107.push(e107);
                    }
                    _rt::cabi_dealloc(
                        base107,
                        len107 * (13 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result109 = T::upsert_vectors(
                        _rt::string_lift(bytes0),
                        result107,
                        match arg4 {
                            0 => None,
                            1 => {
                                let e = {
                                    let len108 = arg6;
                                    let bytes108 = _rt::Vec::from_raw_parts(
                                        arg5.cast(),
                                        len108,
                                        len108,
                                    );
                                    _rt::string_lift(bytes108)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    );
                    let ptr110 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result109 {
                        Ok(e) => {
                            *ptr110.add(0).cast::<u8>() = (0i32) as u8;
                            let BatchResult {
                                success_count: success_count111,
                                failure_count: failure_count111,
                                errors: errors111,
                            } = e;
                            *ptr110
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<i32>() = _rt::as_i32(success_count111);
                            *ptr110
                                .add(4 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<i32>() = _rt::as_i32(failure_count111);
                            let vec124 = errors111;
                            let len124 = vec124.len();
                            let layout124 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec124.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result124 = if layout124.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout124).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout124);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec124.into_iter().enumerate() {
                                let base = result124
                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let (t112_0, t112_1) = e;
                                    *base.add(0).cast::<i32>() = _rt::as_i32(t112_0);
                                    use super::super::super::super::golem::vector::types::VectorError as V123;
                                    match t112_1 {
                                        V123::NotFound(e) => {
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                            let vec113 = (e.into_bytes()).into_boxed_slice();
                                            let ptr113 = vec113.as_ptr().cast::<u8>();
                                            let len113 = vec113.len();
                                            ::core::mem::forget(vec113);
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len113;
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr113.cast_mut();
                                        }
                                        V123::AlreadyExists(e) => {
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec114 = (e.into_bytes()).into_boxed_slice();
                                            let ptr114 = vec114.as_ptr().cast::<u8>();
                                            let len114 = vec114.len();
                                            ::core::mem::forget(vec114);
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len114;
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr114.cast_mut();
                                        }
                                        V123::InvalidParams(e) => {
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (2i32) as u8;
                                            let vec115 = (e.into_bytes()).into_boxed_slice();
                                            let ptr115 = vec115.as_ptr().cast::<u8>();
                                            let len115 = vec115.len();
                                            ::core::mem::forget(vec115);
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len115;
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr115.cast_mut();
                                        }
                                        V123::UnsupportedFeature(e) => {
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (3i32) as u8;
                                            let vec116 = (e.into_bytes()).into_boxed_slice();
                                            let ptr116 = vec116.as_ptr().cast::<u8>();
                                            let len116 = vec116.len();
                                            ::core::mem::forget(vec116);
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len116;
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr116.cast_mut();
                                        }
                                        V123::DimensionMismatch(e) => {
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (4i32) as u8;
                                            let vec117 = (e.into_bytes()).into_boxed_slice();
                                            let ptr117 = vec117.as_ptr().cast::<u8>();
                                            let len117 = vec117.len();
                                            ::core::mem::forget(vec117);
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len117;
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr117.cast_mut();
                                        }
                                        V123::InvalidVector(e) => {
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (5i32) as u8;
                                            let vec118 = (e.into_bytes()).into_boxed_slice();
                                            let ptr118 = vec118.as_ptr().cast::<u8>();
                                            let len118 = vec118.len();
                                            ::core::mem::forget(vec118);
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len118;
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr118.cast_mut();
                                        }
                                        V123::Unauthorized(e) => {
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (6i32) as u8;
                                            let vec119 = (e.into_bytes()).into_boxed_slice();
                                            let ptr119 = vec119.as_ptr().cast::<u8>();
                                            let len119 = vec119.len();
                                            ::core::mem::forget(vec119);
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len119;
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr119.cast_mut();
                                        }
                                        V123::RateLimited(e) => {
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (7i32) as u8;
                                            let vec120 = (e.into_bytes()).into_boxed_slice();
                                            let ptr120 = vec120.as_ptr().cast::<u8>();
                                            let len120 = vec120.len();
                                            ::core::mem::forget(vec120);
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len120;
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr120.cast_mut();
                                        }
                                        V123::ProviderError(e) => {
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (8i32) as u8;
                                            let vec121 = (e.into_bytes()).into_boxed_slice();
                                            let ptr121 = vec121.as_ptr().cast::<u8>();
                                            let len121 = vec121.len();
                                            ::core::mem::forget(vec121);
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len121;
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr121.cast_mut();
                                        }
                                        V123::ConnectionError(e) => {
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (9i32) as u8;
                                            let vec122 = (e.into_bytes()).into_boxed_slice();
                                            let ptr122 = vec122.as_ptr().cast::<u8>();
                                            let len122 = vec122.len();
                                            ::core::mem::forget(vec122);
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len122;
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr122.cast_mut();
                                        }
                                    }
                                }
                            }
                            *ptr110
                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len124;
                            *ptr110
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result124;
                        }
                        Err(e) => {
                            *ptr110.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::golem::vector::types::VectorError as V135;
                            match e {
                                V135::NotFound(e) => {
                                    *ptr110
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                    let vec125 = (e.into_bytes()).into_boxed_slice();
                                    let ptr125 = vec125.as_ptr().cast::<u8>();
                                    let len125 = vec125.len();
                                    ::core::mem::forget(vec125);
                                    *ptr110
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len125;
                                    *ptr110
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr125.cast_mut();
                                }
                                V135::AlreadyExists(e) => {
                                    *ptr110
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec126 = (e.into_bytes()).into_boxed_slice();
                                    let ptr126 = vec126.as_ptr().cast::<u8>();
                                    let len126 = vec126.len();
                                    ::core::mem::forget(vec126);
                                    *ptr110
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len126;
                                    *ptr110
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr126.cast_mut();
                                }
                                V135::InvalidParams(e) => {
                                    *ptr110
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                    let vec127 = (e.into_bytes()).into_boxed_slice();
                                    let ptr127 = vec127.as_ptr().cast::<u8>();
                                    let len127 = vec127.len();
                                    ::core::mem::forget(vec127);
                                    *ptr110
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len127;
                                    *ptr110
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr127.cast_mut();
                                }
                                V135::UnsupportedFeature(e) => {
                                    *ptr110
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                    let vec128 = (e.into_bytes()).into_boxed_slice();
                                    let ptr128 = vec128.as_ptr().cast::<u8>();
                                    let len128 = vec128.len();
                                    ::core::mem::forget(vec128);
                                    *ptr110
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len128;
                                    *ptr110
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr128.cast_mut();
                                }
                                V135::DimensionMismatch(e) => {
                                    *ptr110
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (4i32) as u8;
                                    let vec129 = (e.into_bytes()).into_boxed_slice();
                                    let ptr129 = vec129.as_ptr().cast::<u8>();
                                    let len129 = vec129.len();
                                    ::core::mem::forget(vec129);
                                    *ptr110
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len129;
                                    *ptr110
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr129.cast_mut();
                                }
                                V135::InvalidVector(e) => {
                                    *ptr110
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (5i32) as u8;
                                    let vec130 = (e.into_bytes()).into_boxed_slice();
                                    let ptr130 = vec130.as_ptr().cast::<u8>();
                                    let len130 = vec130.len();
                                    ::core::mem::forget(vec130);
                                    *ptr110
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len130;
                                    *ptr110
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr130.cast_mut();
                                }
                                V135::Unauthorized(e) => {
                                    *ptr110
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (6i32) as u8;
                                    let vec131 = (e.into_bytes()).into_boxed_slice();
                                    let ptr131 = vec131.as_ptr().cast::<u8>();
                                    let len131 = vec131.len();
                                    ::core::mem::forget(vec131);
                                    *ptr110
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len131;
                                    *ptr110
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr131.cast_mut();
                                }
                                V135::RateLimited(e) => {
                                    *ptr110
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (7i32) as u8;
                                    let vec132 = (e.into_bytes()).into_boxed_slice();
                                    let ptr132 = vec132.as_ptr().cast::<u8>();
                                    let len132 = vec132.len();
                                    ::core::mem::forget(vec132);
                                    *ptr110
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len132;
                                    *ptr110
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr132.cast_mut();
                                }
                                V135::ProviderError(e) => {
                                    *ptr110
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (8i32) as u8;
                                    let vec133 = (e.into_bytes()).into_boxed_slice();
                                    let ptr133 = vec133.as_ptr().cast::<u8>();
                                    let len133 = vec133.len();
                                    ::core::mem::forget(vec133);
                                    *ptr110
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len133;
                                    *ptr110
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr133.cast_mut();
                                }
                                V135::ConnectionError(e) => {
                                    *ptr110
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (9i32) as u8;
                                    let vec134 = (e.into_bytes()).into_boxed_slice();
                                    let ptr134 = vec134.as_ptr().cast::<u8>();
                                    let len134 = vec134.len();
                                    ::core::mem::forget(vec134);
                                    *ptr110
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len134;
                                    *ptr110
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr134.cast_mut();
                                }
                            }
                        }
                    };
                    ptr110
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_upsert_vectors<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let base24 = l1;
                            let len24 = l2;
                            for i in 0..len24 {
                                let base = base24
                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let l3 = i32::from(
                                        *base.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                    );
                                    match l3 {
                                        0 => {
                                            let l4 = *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l5 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l4, l5, 1);
                                        }
                                        1 => {
                                            let l6 = *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l7 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l6, l7, 1);
                                        }
                                        2 => {
                                            let l8 = *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l9 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l8, l9, 1);
                                        }
                                        3 => {
                                            let l10 = *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l11 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l10, l11, 1);
                                        }
                                        4 => {
                                            let l12 = *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l13 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l12, l13, 1);
                                        }
                                        5 => {
                                            let l14 = *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l15 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l14, l15, 1);
                                        }
                                        6 => {
                                            let l16 = *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l17 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l16, l17, 1);
                                        }
                                        7 => {
                                            let l18 = *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l19 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l18, l19, 1);
                                        }
                                        8 => {
                                            let l20 = *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l21 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l20, l21, 1);
                                        }
                                        _ => {
                                            let l22 = *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l23 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l22, l23, 1);
                                        }
                                    }
                                }
                            }
                            _rt::cabi_dealloc(
                                base24,
                                len24 * (4 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                        }
                        _ => {
                            let l25 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l25 {
                                0 => {
                                    let l26 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l27 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l26, l27, 1);
                                }
                                1 => {
                                    let l28 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l29 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l28, l29, 1);
                                }
                                2 => {
                                    let l30 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l31 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l30, l31, 1);
                                }
                                3 => {
                                    let l32 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l33 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l32, l33, 1);
                                }
                                4 => {
                                    let l34 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l35 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l34, l35, 1);
                                }
                                5 => {
                                    let l36 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l37 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l36, l37, 1);
                                }
                                6 => {
                                    let l38 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l39 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l38, l39, 1);
                                }
                                7 => {
                                    let l40 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l41 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l40, l41, 1);
                                }
                                8 => {
                                    let l42 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l43 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l42, l43, 1);
                                }
                                _ => {
                                    let l44 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l45 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l44, l45, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_upsert_vector_cabi<T: Guest>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len2 = l1;
                    let bytes2 = _rt::Vec::from_raw_parts(l0.cast(), len2, len2);
                    let l3 = *arg0
                        .add(2 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l4 = *arg0
                        .add(3 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len5 = l4;
                    let bytes5 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);
                    let l6 = i32::from(
                        *arg0.add(4 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    use super::super::super::super::golem::vector::types::VectorData as V44;
                    let v44 = match l6 {
                        0 => {
                            let e44 = {
                                let l7 = *arg0
                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l8 = *arg0
                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len9 = l8;
                                _rt::Vec::from_raw_parts(l7.cast(), len9, len9)
                            };
                            V44::Dense(e44)
                        }
                        1 => {
                            let e44 = {
                                let l10 = *arg0
                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l11 = *arg0
                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len12 = l11;
                                let l13 = *arg0
                                    .add(7 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l14 = *arg0
                                    .add(8 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len15 = l14;
                                let l16 = *arg0
                                    .add(9 * ::core::mem::size_of::<*const u8>())
                                    .cast::<i32>();
                                super::super::super::super::golem::vector::types::SparseVector {
                                    indices: _rt::Vec::from_raw_parts(l10.cast(), len12, len12),
                                    values: _rt::Vec::from_raw_parts(l13.cast(), len15, len15),
                                    total_dimensions: l16 as u32,
                                }
                            };
                            V44::Sparse(e44)
                        }
                        2 => {
                            let e44 = {
                                let l17 = *arg0
                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l18 = *arg0
                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len19 = l18;
                                let l20 = *arg0
                                    .add(7 * ::core::mem::size_of::<*const u8>())
                                    .cast::<i32>();
                                super::super::super::super::golem::vector::types::BinaryVector {
                                    data: _rt::Vec::from_raw_parts(l17.cast(), len19, len19),
                                    dimensions: l20 as u32,
                                }
                            };
                            V44::Binary(e44)
                        }
                        3 => {
                            let e44 = {
                                let l21 = *arg0
                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l22 = *arg0
                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len23 = l22;
                                let l24 = *arg0
                                    .add(7 * ::core::mem::size_of::<*const u8>())
                                    .cast::<i32>();
                                super::super::super::super::golem::vector::types::HalfVector {
                                    data: _rt::Vec::from_raw_parts(l21.cast(), len23, len23),
                                    dimensions: l24 as u32,
                                }
                            };
                            V44::Half(e44)
                        }
                        4 => {
                            let e44 = {
                                let l25 = *arg0
                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l26 = *arg0
                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let base33 = l25;
                                let len33 = l26;
                                let mut result33 = _rt::Vec::with_capacity(len33);
                                for i in 0..len33 {
                                    let base = base33
                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                    let e33 = {
                                        let l27 = *base.add(0).cast::<*mut u8>();
                                        let l28 = *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len29 = l28;
                                        let bytes29 = _rt::Vec::from_raw_parts(
                                            l27.cast(),
                                            len29,
                                            len29,
                                        );
                                        let l30 = *base
                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l31 = *base
                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len32 = l31;
                                        (
                                            _rt::string_lift(bytes29),
                                            _rt::Vec::from_raw_parts(l30.cast(), len32, len32),
                                        )
                                    };
                                    result33.push(e33);
                                }
                                _rt::cabi_dealloc(
                                    base33,
                                    len33 * (4 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                result33
                            };
                            V44::Named(e44)
                        }
                        n => {
                            debug_assert_eq!(n, 5, "invalid enum discriminant");
                            let e44 = {
                                let l34 = *arg0
                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l35 = *arg0
                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len36 = l35;
                                let l37 = *arg0
                                    .add(7 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l38 = *arg0
                                    .add(8 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len39 = l38;
                                let l40 = *arg0
                                    .add(9 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l41 = *arg0
                                    .add(10 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len42 = l41;
                                let l43 = *arg0
                                    .add(11 * ::core::mem::size_of::<*const u8>())
                                    .cast::<i32>();
                                (
                                    _rt::Vec::from_raw_parts(l34.cast(), len36, len36),
                                    super::super::super::super::golem::vector::types::SparseVector {
                                        indices: _rt::Vec::from_raw_parts(l37.cast(), len39, len39),
                                        values: _rt::Vec::from_raw_parts(l40.cast(), len42, len42),
                                        total_dimensions: l43 as u32,
                                    },
                                )
                            };
                            V44::Hybrid(e44)
                        }
                    };
                    let l45 = i32::from(
                        *arg0.add(12 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    let l109 = i32::from(
                        *arg0.add(15 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    let result113 = T::upsert_vector(
                        _rt::string_lift(bytes2),
                        _rt::string_lift(bytes5),
                        v44,
                        match l45 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l46 = *arg0
                                        .add(13 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l47 = *arg0
                                        .add(14 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base108 = l46;
                                    let len108 = l47;
                                    let mut result108 = _rt::Vec::with_capacity(len108);
                                    for i in 0..len108 {
                                        let base = base108
                                            .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                        let e108 = {
                                            let l48 = *base.add(0).cast::<*mut u8>();
                                            let l49 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len50 = l49;
                                            let bytes50 = _rt::Vec::from_raw_parts(
                                                l48.cast(),
                                                len50,
                                                len50,
                                            );
                                            let l51 = i32::from(
                                                *base
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            use super::super::super::super::golem::vector::types::FlatMetadataValue as V107;
                                            let v107 = match l51 {
                                                0 => {
                                                    let e107 = {
                                                        let l52 = *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l53 = *base
                                                            .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len54 = l53;
                                                        let bytes54 = _rt::Vec::from_raw_parts(
                                                            l52.cast(),
                                                            len54,
                                                            len54,
                                                        );
                                                        _rt::string_lift(bytes54)
                                                    };
                                                    V107::StringVal(e107)
                                                }
                                                1 => {
                                                    let e107 = {
                                                        let l55 = *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<f64>();
                                                        l55
                                                    };
                                                    V107::NumberVal(e107)
                                                }
                                                2 => {
                                                    let e107 = {
                                                        let l56 = *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i64>();
                                                        l56
                                                    };
                                                    V107::IntegerVal(e107)
                                                }
                                                3 => {
                                                    let e107 = {
                                                        let l57 = i32::from(
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        _rt::bool_lift(l57 as u8)
                                                    };
                                                    V107::BooleanVal(e107)
                                                }
                                                4 => {
                                                    let e107 = {
                                                        let l58 = *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l59 = *base
                                                            .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base76 = l58;
                                                        let len76 = l59;
                                                        let mut result76 = _rt::Vec::with_capacity(len76);
                                                        for i in 0..len76 {
                                                            let base = base76.add(i * 24);
                                                            let e76 = {
                                                                let l60 = i32::from(*base.add(0).cast::<u8>());
                                                                use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V75;
                                                                let v75 = match l60 {
                                                                    0 => {
                                                                        let e75 = {
                                                                            let l61 = *base.add(8).cast::<*mut u8>();
                                                                            let l62 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len63 = l62;
                                                                            let bytes63 = _rt::Vec::from_raw_parts(
                                                                                l61.cast(),
                                                                                len63,
                                                                                len63,
                                                                            );
                                                                            _rt::string_lift(bytes63)
                                                                        };
                                                                        V75::StringVal(e75)
                                                                    }
                                                                    1 => {
                                                                        let e75 = {
                                                                            let l64 = *base.add(8).cast::<f64>();
                                                                            l64
                                                                        };
                                                                        V75::NumberVal(e75)
                                                                    }
                                                                    2 => {
                                                                        let e75 = {
                                                                            let l65 = *base.add(8).cast::<i64>();
                                                                            l65
                                                                        };
                                                                        V75::IntegerVal(e75)
                                                                    }
                                                                    3 => {
                                                                        let e75 = {
                                                                            let l66 = i32::from(*base.add(8).cast::<u8>());
                                                                            _rt::bool_lift(l66 as u8)
                                                                        };
                                                                        V75::BooleanVal(e75)
                                                                    }
                                                                    4 => V75::NullVal,
                                                                    5 => {
                                                                        let e75 = {
                                                                            let l67 = *base.add(8).cast::<*mut u8>();
                                                                            let l68 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len69 = l68;
                                                                            let bytes69 = _rt::Vec::from_raw_parts(
                                                                                l67.cast(),
                                                                                len69,
                                                                                len69,
                                                                            );
                                                                            _rt::string_lift(bytes69)
                                                                        };
                                                                        V75::DatetimeVal(e75)
                                                                    }
                                                                    6 => {
                                                                        let e75 = {
                                                                            let l70 = *base.add(8).cast::<f64>();
                                                                            let l71 = *base.add(16).cast::<f64>();
                                                                            super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                                latitude: l70,
                                                                                longitude: l71,
                                                                            }
                                                                        };
                                                                        V75::GeoVal(e75)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 7, "invalid enum discriminant");
                                                                        let e75 = {
                                                                            let l72 = *base.add(8).cast::<*mut u8>();
                                                                            let l73 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len74 = l73;
                                                                            _rt::Vec::from_raw_parts(l72.cast(), len74, len74)
                                                                        };
                                                                        V75::BlobVal(e75)
                                                                    }
                                                                };
                                                                v75
                                                            };
                                                            result76.push(e76);
                                                        }
                                                        _rt::cabi_dealloc(base76, len76 * 24, 8);
                                                        result76
                                                    };
                                                    V107::ArrayVal(e107)
                                                }
                                                5 => {
                                                    let e107 = {
                                                        let l77 = *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l78 = *base
                                                            .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base98 = l77;
                                                        let len98 = l78;
                                                        let mut result98 = _rt::Vec::with_capacity(len98);
                                                        for i in 0..len98 {
                                                            let base = base98
                                                                .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                            let e98 = {
                                                                let l79 = *base.add(0).cast::<*mut u8>();
                                                                let l80 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len81 = l80;
                                                                let bytes81 = _rt::Vec::from_raw_parts(
                                                                    l79.cast(),
                                                                    len81,
                                                                    len81,
                                                                );
                                                                let l82 = i32::from(
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V97;
                                                                let v97 = match l82 {
                                                                    0 => {
                                                                        let e97 = {
                                                                            let l83 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l84 = *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len85 = l84;
                                                                            let bytes85 = _rt::Vec::from_raw_parts(
                                                                                l83.cast(),
                                                                                len85,
                                                                                len85,
                                                                            );
                                                                            _rt::string_lift(bytes85)
                                                                        };
                                                                        V97::StringVal(e97)
                                                                    }
                                                                    1 => {
                                                                        let e97 = {
                                                                            let l86 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<f64>();
                                                                            l86
                                                                        };
                                                                        V97::NumberVal(e97)
                                                                    }
                                                                    2 => {
                                                                        let e97 = {
                                                                            let l87 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i64>();
                                                                            l87
                                                                        };
                                                                        V97::IntegerVal(e97)
                                                                    }
                                                                    3 => {
                                                                        let e97 = {
                                                                            let l88 = i32::from(
                                                                                *base
                                                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            _rt::bool_lift(l88 as u8)
                                                                        };
                                                                        V97::BooleanVal(e97)
                                                                    }
                                                                    4 => V97::NullVal,
                                                                    5 => {
                                                                        let e97 = {
                                                                            let l89 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l90 = *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len91 = l90;
                                                                            let bytes91 = _rt::Vec::from_raw_parts(
                                                                                l89.cast(),
                                                                                len91,
                                                                                len91,
                                                                            );
                                                                            _rt::string_lift(bytes91)
                                                                        };
                                                                        V97::DatetimeVal(e97)
                                                                    }
                                                                    6 => {
                                                                        let e97 = {
                                                                            let l92 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<f64>();
                                                                            let l93 = *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<f64>();
                                                                            super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                                latitude: l92,
                                                                                longitude: l93,
                                                                            }
                                                                        };
                                                                        V97::GeoVal(e97)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 7, "invalid enum discriminant");
                                                                        let e97 = {
                                                                            let l94 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l95 = *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len96 = l95;
                                                                            _rt::Vec::from_raw_parts(l94.cast(), len96, len96)
                                                                        };
                                                                        V97::BlobVal(e97)
                                                                    }
                                                                };
                                                                (_rt::string_lift(bytes81), v97)
                                                            };
                                                            result98.push(e98);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base98,
                                                            len98 * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                            8,
                                                        );
                                                        result98
                                                    };
                                                    V107::ObjectVal(e107)
                                                }
                                                6 => V107::NullVal,
                                                7 => {
                                                    let e107 = {
                                                        let l99 = *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<f64>();
                                                        let l100 = *base
                                                            .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<f64>();
                                                        super::super::super::super::golem::vector::types::GeoCoordinates {
                                                            latitude: l99,
                                                            longitude: l100,
                                                        }
                                                    };
                                                    V107::GeoVal(e107)
                                                }
                                                8 => {
                                                    let e107 = {
                                                        let l101 = *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l102 = *base
                                                            .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len103 = l102;
                                                        let bytes103 = _rt::Vec::from_raw_parts(
                                                            l101.cast(),
                                                            len103,
                                                            len103,
                                                        );
                                                        _rt::string_lift(bytes103)
                                                    };
                                                    V107::DatetimeVal(e107)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 9, "invalid enum discriminant");
                                                    let e107 = {
                                                        let l104 = *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l105 = *base
                                                            .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len106 = l105;
                                                        _rt::Vec::from_raw_parts(l104.cast(), len106, len106)
                                                    };
                                                    V107::BlobVal(e107)
                                                }
                                            };
                                            (_rt::string_lift(bytes50), v107)
                                        };
                                        result108.push(e108);
                                    }
                                    _rt::cabi_dealloc(
                                        base108,
                                        len108 * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                        8,
                                    );
                                    result108
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        match l109 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l110 = *arg0
                                        .add(16 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l111 = *arg0
                                        .add(17 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let len112 = l111;
                                    let bytes112 = _rt::Vec::from_raw_parts(
                                        l110.cast(),
                                        len112,
                                        len112,
                                    );
                                    _rt::string_lift(bytes112)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    );
                    _rt::cabi_dealloc(
                        arg0,
                        18 * ::core::mem::size_of::<*const u8>(),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let ptr114 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result113 {
                        Ok(_) => {
                            *ptr114.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr114.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::golem::vector::types::VectorError as V125;
                            match e {
                                V125::NotFound(e) => {
                                    *ptr114
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                    let vec115 = (e.into_bytes()).into_boxed_slice();
                                    let ptr115 = vec115.as_ptr().cast::<u8>();
                                    let len115 = vec115.len();
                                    ::core::mem::forget(vec115);
                                    *ptr114
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len115;
                                    *ptr114
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr115.cast_mut();
                                }
                                V125::AlreadyExists(e) => {
                                    *ptr114
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec116 = (e.into_bytes()).into_boxed_slice();
                                    let ptr116 = vec116.as_ptr().cast::<u8>();
                                    let len116 = vec116.len();
                                    ::core::mem::forget(vec116);
                                    *ptr114
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len116;
                                    *ptr114
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr116.cast_mut();
                                }
                                V125::InvalidParams(e) => {
                                    *ptr114
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                    let vec117 = (e.into_bytes()).into_boxed_slice();
                                    let ptr117 = vec117.as_ptr().cast::<u8>();
                                    let len117 = vec117.len();
                                    ::core::mem::forget(vec117);
                                    *ptr114
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len117;
                                    *ptr114
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr117.cast_mut();
                                }
                                V125::UnsupportedFeature(e) => {
                                    *ptr114
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                    let vec118 = (e.into_bytes()).into_boxed_slice();
                                    let ptr118 = vec118.as_ptr().cast::<u8>();
                                    let len118 = vec118.len();
                                    ::core::mem::forget(vec118);
                                    *ptr114
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len118;
                                    *ptr114
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr118.cast_mut();
                                }
                                V125::DimensionMismatch(e) => {
                                    *ptr114
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (4i32) as u8;
                                    let vec119 = (e.into_bytes()).into_boxed_slice();
                                    let ptr119 = vec119.as_ptr().cast::<u8>();
                                    let len119 = vec119.len();
                                    ::core::mem::forget(vec119);
                                    *ptr114
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len119;
                                    *ptr114
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr119.cast_mut();
                                }
                                V125::InvalidVector(e) => {
                                    *ptr114
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (5i32) as u8;
                                    let vec120 = (e.into_bytes()).into_boxed_slice();
                                    let ptr120 = vec120.as_ptr().cast::<u8>();
                                    let len120 = vec120.len();
                                    ::core::mem::forget(vec120);
                                    *ptr114
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len120;
                                    *ptr114
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr120.cast_mut();
                                }
                                V125::Unauthorized(e) => {
                                    *ptr114
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (6i32) as u8;
                                    let vec121 = (e.into_bytes()).into_boxed_slice();
                                    let ptr121 = vec121.as_ptr().cast::<u8>();
                                    let len121 = vec121.len();
                                    ::core::mem::forget(vec121);
                                    *ptr114
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len121;
                                    *ptr114
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr121.cast_mut();
                                }
                                V125::RateLimited(e) => {
                                    *ptr114
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (7i32) as u8;
                                    let vec122 = (e.into_bytes()).into_boxed_slice();
                                    let ptr122 = vec122.as_ptr().cast::<u8>();
                                    let len122 = vec122.len();
                                    ::core::mem::forget(vec122);
                                    *ptr114
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len122;
                                    *ptr114
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr122.cast_mut();
                                }
                                V125::ProviderError(e) => {
                                    *ptr114
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (8i32) as u8;
                                    let vec123 = (e.into_bytes()).into_boxed_slice();
                                    let ptr123 = vec123.as_ptr().cast::<u8>();
                                    let len123 = vec123.len();
                                    ::core::mem::forget(vec123);
                                    *ptr114
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len123;
                                    *ptr114
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr123.cast_mut();
                                }
                                V125::ConnectionError(e) => {
                                    *ptr114
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (9i32) as u8;
                                    let vec124 = (e.into_bytes()).into_boxed_slice();
                                    let ptr124 = vec124.as_ptr().cast::<u8>();
                                    let len124 = vec124.len();
                                    ::core::mem::forget(vec124);
                                    *ptr114
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len124;
                                    *ptr114
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr124.cast_mut();
                                }
                            }
                        }
                    };
                    ptr114
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_upsert_vector<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l1 {
                                0 => {
                                    let l2 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l3 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                }
                                1 => {
                                    let l4 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l5 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                                2 => {
                                    let l6 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l7 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l6, l7, 1);
                                }
                                3 => {
                                    let l8 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l9 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l8, l9, 1);
                                }
                                4 => {
                                    let l10 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l11 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l10, l11, 1);
                                }
                                5 => {
                                    let l12 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l13 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l12, l13, 1);
                                }
                                6 => {
                                    let l14 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l15 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l14, l15, 1);
                                }
                                7 => {
                                    let l16 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l17 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l16, l17, 1);
                                }
                                8 => {
                                    let l18 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l19 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l18, l19, 1);
                                }
                                _ => {
                                    let l20 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l21 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l20, l21, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_get_vectors_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                    arg4: i32,
                    arg5: *mut u8,
                    arg6: usize,
                    arg7: i32,
                    arg8: i32,
                    arg9: i32,
                    arg10: i32,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let base4 = arg2;
                    let len4 = arg3;
                    let mut result4 = _rt::Vec::with_capacity(len4);
                    for i in 0..len4 {
                        let base = base4
                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                        let e4 = {
                            let l1 = *base.add(0).cast::<*mut u8>();
                            let l2 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len3 = l2;
                            let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);
                            _rt::string_lift(bytes3)
                        };
                        result4.push(e4);
                    }
                    _rt::cabi_dealloc(
                        base4,
                        len4 * (2 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result6 = T::get_vectors(
                        _rt::string_lift(bytes0),
                        result4,
                        match arg4 {
                            0 => None,
                            1 => {
                                let e = {
                                    let len5 = arg6;
                                    let bytes5 = _rt::Vec::from_raw_parts(
                                        arg5.cast(),
                                        len5,
                                        len5,
                                    );
                                    _rt::string_lift(bytes5)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        match arg7 {
                            0 => None,
                            1 => {
                                let e = _rt::bool_lift(arg8 as u8);
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        match arg9 {
                            0 => None,
                            1 => {
                                let e = _rt::bool_lift(arg10 as u8);
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    );
                    let ptr7 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result6 {
                        Ok(e) => {
                            *ptr7.add(0).cast::<u8>() = (0i32) as u8;
                            let vec50 = e;
                            let len50 = vec50.len();
                            let layout50 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec50.len() * (13 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result50 = if layout50.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout50).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout50);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec50.into_iter().enumerate() {
                                let base = result50
                                    .add(i * (13 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let super::super::super::super::golem::vector::types::VectorRecord {
                                        id: id8,
                                        vector: vector8,
                                        metadata: metadata8,
                                    } = e;
                                    let vec9 = (id8.into_bytes()).into_boxed_slice();
                                    let ptr9 = vec9.as_ptr().cast::<u8>();
                                    let len9 = vec9.len();
                                    ::core::mem::forget(vec9);
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len9;
                                    *base.add(0).cast::<*mut u8>() = ptr9.cast_mut();
                                    use super::super::super::super::golem::vector::types::VectorData as V27;
                                    match vector8 {
                                        V27::Dense(e) => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                            let vec10 = (e).into_boxed_slice();
                                            let ptr10 = vec10.as_ptr().cast::<u8>();
                                            let len10 = vec10.len();
                                            ::core::mem::forget(vec10);
                                            *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len10;
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr10.cast_mut();
                                        }
                                        V27::Sparse(e) => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let super::super::super::super::golem::vector::types::SparseVector {
                                                indices: indices11,
                                                values: values11,
                                                total_dimensions: total_dimensions11,
                                            } = e;
                                            let vec12 = (indices11).into_boxed_slice();
                                            let ptr12 = vec12.as_ptr().cast::<u8>();
                                            let len12 = vec12.len();
                                            ::core::mem::forget(vec12);
                                            *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len12;
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr12.cast_mut();
                                            let vec13 = (values11).into_boxed_slice();
                                            let ptr13 = vec13.as_ptr().cast::<u8>();
                                            let len13 = vec13.len();
                                            ::core::mem::forget(vec13);
                                            *base
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len13;
                                            *base
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr13.cast_mut();
                                            *base
                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>() = _rt::as_i32(total_dimensions11);
                                        }
                                        V27::Binary(e) => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (2i32) as u8;
                                            let super::super::super::super::golem::vector::types::BinaryVector {
                                                data: data14,
                                                dimensions: dimensions14,
                                            } = e;
                                            let vec15 = (data14).into_boxed_slice();
                                            let ptr15 = vec15.as_ptr().cast::<u8>();
                                            let len15 = vec15.len();
                                            ::core::mem::forget(vec15);
                                            *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len15;
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr15.cast_mut();
                                            *base
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>() = _rt::as_i32(dimensions14);
                                        }
                                        V27::Half(e) => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (3i32) as u8;
                                            let super::super::super::super::golem::vector::types::HalfVector {
                                                data: data16,
                                                dimensions: dimensions16,
                                            } = e;
                                            let vec17 = (data16).into_boxed_slice();
                                            let ptr17 = vec17.as_ptr().cast::<u8>();
                                            let len17 = vec17.len();
                                            ::core::mem::forget(vec17);
                                            *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len17;
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr17.cast_mut();
                                            *base
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>() = _rt::as_i32(dimensions16);
                                        }
                                        V27::Named(e) => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (4i32) as u8;
                                            let vec21 = e;
                                            let len21 = vec21.len();
                                            let layout21 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec21.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let result21 = if layout21.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout21).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout21);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec21.into_iter().enumerate() {
                                                let base = result21
                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let (t18_0, t18_1) = e;
                                                    let vec19 = (t18_0.into_bytes()).into_boxed_slice();
                                                    let ptr19 = vec19.as_ptr().cast::<u8>();
                                                    let len19 = vec19.len();
                                                    ::core::mem::forget(vec19);
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len19;
                                                    *base.add(0).cast::<*mut u8>() = ptr19.cast_mut();
                                                    let vec20 = (t18_1).into_boxed_slice();
                                                    let ptr20 = vec20.as_ptr().cast::<u8>();
                                                    let len20 = vec20.len();
                                                    ::core::mem::forget(vec20);
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len20;
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr20.cast_mut();
                                                }
                                            }
                                            *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len21;
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result21;
                                        }
                                        V27::Hybrid(e) => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (5i32) as u8;
                                            let (t22_0, t22_1) = e;
                                            let vec23 = (t22_0).into_boxed_slice();
                                            let ptr23 = vec23.as_ptr().cast::<u8>();
                                            let len23 = vec23.len();
                                            ::core::mem::forget(vec23);
                                            *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len23;
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr23.cast_mut();
                                            let super::super::super::super::golem::vector::types::SparseVector {
                                                indices: indices24,
                                                values: values24,
                                                total_dimensions: total_dimensions24,
                                            } = t22_1;
                                            let vec25 = (indices24).into_boxed_slice();
                                            let ptr25 = vec25.as_ptr().cast::<u8>();
                                            let len25 = vec25.len();
                                            ::core::mem::forget(vec25);
                                            *base
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len25;
                                            *base
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr25.cast_mut();
                                            let vec26 = (values24).into_boxed_slice();
                                            let ptr26 = vec26.as_ptr().cast::<u8>();
                                            let len26 = vec26.len();
                                            ::core::mem::forget(vec26);
                                            *base
                                                .add(8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len26;
                                            *base
                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr26.cast_mut();
                                            *base
                                                .add(9 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>() = _rt::as_i32(total_dimensions24);
                                        }
                                    }
                                    match metadata8 {
                                        Some(e) => {
                                            *base
                                                .add(10 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec49 = e;
                                            let len49 = vec49.len();
                                            let layout49 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec49.len()
                                                    * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                8,
                                            );
                                            let result49 = if layout49.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout49).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout49);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec49.into_iter().enumerate() {
                                                let base = result49
                                                    .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let (t28_0, t28_1) = e;
                                                    let vec29 = (t28_0.into_bytes()).into_boxed_slice();
                                                    let ptr29 = vec29.as_ptr().cast::<u8>();
                                                    let len29 = vec29.len();
                                                    ::core::mem::forget(vec29);
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len29;
                                                    *base.add(0).cast::<*mut u8>() = ptr29.cast_mut();
                                                    use super::super::super::super::golem::vector::types::FlatMetadataValue as V48;
                                                    match t28_1 {
                                                        V48::StringVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                            let vec30 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr30 = vec30.as_ptr().cast::<u8>();
                                                            let len30 = vec30.len();
                                                            ::core::mem::forget(vec30);
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len30;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr30.cast_mut();
                                                        }
                                                        V48::NumberVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<f64>() = _rt::as_f64(e);
                                                        }
                                                        V48::IntegerVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (2i32) as u8;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<i64>() = _rt::as_i64(e);
                                                        }
                                                        V48::BooleanVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (3i32) as u8;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (match e {
                                                                true => 1,
                                                                false => 0,
                                                            }) as u8;
                                                        }
                                                        V48::ArrayVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (4i32) as u8;
                                                            let vec36 = e;
                                                            let len36 = vec36.len();
                                                            let layout36 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec36.len() * 24,
                                                                8,
                                                            );
                                                            let result36 = if layout36.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout36).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout36);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec36.into_iter().enumerate() {
                                                                let base = result36.add(i * 24);
                                                                {
                                                                    use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V35;
                                                                    match e {
                                                                        V35::StringVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                            let vec31 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr31 = vec31.as_ptr().cast::<u8>();
                                                                            let len31 = vec31.len();
                                                                            ::core::mem::forget(vec31);
                                                                            *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len31;
                                                                            *base.add(8).cast::<*mut u8>() = ptr31.cast_mut();
                                                                        }
                                                                        V35::NumberVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                            *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                                                        }
                                                                        V35::IntegerVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (2i32) as u8;
                                                                            *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                                        }
                                                                        V35::BooleanVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (3i32) as u8;
                                                                            *base.add(8).cast::<u8>() = (match e {
                                                                                true => 1,
                                                                                false => 0,
                                                                            }) as u8;
                                                                        }
                                                                        V35::NullVal => {
                                                                            *base.add(0).cast::<u8>() = (4i32) as u8;
                                                                        }
                                                                        V35::DatetimeVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (5i32) as u8;
                                                                            let vec32 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr32 = vec32.as_ptr().cast::<u8>();
                                                                            let len32 = vec32.len();
                                                                            ::core::mem::forget(vec32);
                                                                            *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len32;
                                                                            *base.add(8).cast::<*mut u8>() = ptr32.cast_mut();
                                                                        }
                                                                        V35::GeoVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (6i32) as u8;
                                                                            let super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                                latitude: latitude33,
                                                                                longitude: longitude33,
                                                                            } = e;
                                                                            *base.add(8).cast::<f64>() = _rt::as_f64(latitude33);
                                                                            *base.add(16).cast::<f64>() = _rt::as_f64(longitude33);
                                                                        }
                                                                        V35::BlobVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (7i32) as u8;
                                                                            let vec34 = (e).into_boxed_slice();
                                                                            let ptr34 = vec34.as_ptr().cast::<u8>();
                                                                            let len34 = vec34.len();
                                                                            ::core::mem::forget(vec34);
                                                                            *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len34;
                                                                            *base.add(8).cast::<*mut u8>() = ptr34.cast_mut();
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len36;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result36;
                                                        }
                                                        V48::ObjectVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (5i32) as u8;
                                                            let vec44 = e;
                                                            let len44 = vec44.len();
                                                            let layout44 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec44.len()
                                                                    * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                            let result44 = if layout44.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout44).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout44);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec44.into_iter().enumerate() {
                                                                let base = result44
                                                                    .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let (t37_0, t37_1) = e;
                                                                    let vec38 = (t37_0.into_bytes()).into_boxed_slice();
                                                                    let ptr38 = vec38.as_ptr().cast::<u8>();
                                                                    let len38 = vec38.len();
                                                                    ::core::mem::forget(vec38);
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len38;
                                                                    *base.add(0).cast::<*mut u8>() = ptr38.cast_mut();
                                                                    use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V43;
                                                                    match t37_1 {
                                                                        V43::StringVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                            let vec39 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr39 = vec39.as_ptr().cast::<u8>();
                                                                            let len39 = vec39.len();
                                                                            ::core::mem::forget(vec39);
                                                                            *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len39;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr39.cast_mut();
                                                                        }
                                                                        V43::NumberVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<f64>() = _rt::as_f64(e);
                                                                        }
                                                                        V43::IntegerVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (2i32) as u8;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i64>() = _rt::as_i64(e);
                                                                        }
                                                                        V43::BooleanVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (3i32) as u8;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (match e {
                                                                                true => 1,
                                                                                false => 0,
                                                                            }) as u8;
                                                                        }
                                                                        V43::NullVal => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (4i32) as u8;
                                                                        }
                                                                        V43::DatetimeVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (5i32) as u8;
                                                                            let vec40 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr40 = vec40.as_ptr().cast::<u8>();
                                                                            let len40 = vec40.len();
                                                                            ::core::mem::forget(vec40);
                                                                            *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len40;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr40.cast_mut();
                                                                        }
                                                                        V43::GeoVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (6i32) as u8;
                                                                            let super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                                latitude: latitude41,
                                                                                longitude: longitude41,
                                                                            } = e;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<f64>() = _rt::as_f64(latitude41);
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<f64>() = _rt::as_f64(longitude41);
                                                                        }
                                                                        V43::BlobVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (7i32) as u8;
                                                                            let vec42 = (e).into_boxed_slice();
                                                                            let ptr42 = vec42.as_ptr().cast::<u8>();
                                                                            let len42 = vec42.len();
                                                                            ::core::mem::forget(vec42);
                                                                            *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len42;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr42.cast_mut();
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len44;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result44;
                                                        }
                                                        V48::NullVal => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (6i32) as u8;
                                                        }
                                                        V48::GeoVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (7i32) as u8;
                                                            let super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                latitude: latitude45,
                                                                longitude: longitude45,
                                                            } = e;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<f64>() = _rt::as_f64(latitude45);
                                                            *base
                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<f64>() = _rt::as_f64(longitude45);
                                                        }
                                                        V48::DatetimeVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (8i32) as u8;
                                                            let vec46 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr46 = vec46.as_ptr().cast::<u8>();
                                                            let len46 = vec46.len();
                                                            ::core::mem::forget(vec46);
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len46;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr46.cast_mut();
                                                        }
                                                        V48::BlobVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (9i32) as u8;
                                                            let vec47 = (e).into_boxed_slice();
                                                            let ptr47 = vec47.as_ptr().cast::<u8>();
                                                            let len47 = vec47.len();
                                                            ::core::mem::forget(vec47);
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len47;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr47.cast_mut();
                                                        }
                                                    }
                                                }
                                            }
                                            *base
                                                .add(12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len49;
                                            *base
                                                .add(11 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result49;
                                        }
                                        None => {
                                            *base
                                                .add(10 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                            }
                            *ptr7
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len50;
                            *ptr7
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result50;
                        }
                        Err(e) => {
                            *ptr7.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::golem::vector::types::VectorError as V61;
                            match e {
                                V61::NotFound(e) => {
                                    *ptr7
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                    let vec51 = (e.into_bytes()).into_boxed_slice();
                                    let ptr51 = vec51.as_ptr().cast::<u8>();
                                    let len51 = vec51.len();
                                    ::core::mem::forget(vec51);
                                    *ptr7
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len51;
                                    *ptr7
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr51.cast_mut();
                                }
                                V61::AlreadyExists(e) => {
                                    *ptr7
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec52 = (e.into_bytes()).into_boxed_slice();
                                    let ptr52 = vec52.as_ptr().cast::<u8>();
                                    let len52 = vec52.len();
                                    ::core::mem::forget(vec52);
                                    *ptr7
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len52;
                                    *ptr7
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr52.cast_mut();
                                }
                                V61::InvalidParams(e) => {
                                    *ptr7
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                    let vec53 = (e.into_bytes()).into_boxed_slice();
                                    let ptr53 = vec53.as_ptr().cast::<u8>();
                                    let len53 = vec53.len();
                                    ::core::mem::forget(vec53);
                                    *ptr7
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len53;
                                    *ptr7
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr53.cast_mut();
                                }
                                V61::UnsupportedFeature(e) => {
                                    *ptr7
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                    let vec54 = (e.into_bytes()).into_boxed_slice();
                                    let ptr54 = vec54.as_ptr().cast::<u8>();
                                    let len54 = vec54.len();
                                    ::core::mem::forget(vec54);
                                    *ptr7
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len54;
                                    *ptr7
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr54.cast_mut();
                                }
                                V61::DimensionMismatch(e) => {
                                    *ptr7
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (4i32) as u8;
                                    let vec55 = (e.into_bytes()).into_boxed_slice();
                                    let ptr55 = vec55.as_ptr().cast::<u8>();
                                    let len55 = vec55.len();
                                    ::core::mem::forget(vec55);
                                    *ptr7
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len55;
                                    *ptr7
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr55.cast_mut();
                                }
                                V61::InvalidVector(e) => {
                                    *ptr7
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (5i32) as u8;
                                    let vec56 = (e.into_bytes()).into_boxed_slice();
                                    let ptr56 = vec56.as_ptr().cast::<u8>();
                                    let len56 = vec56.len();
                                    ::core::mem::forget(vec56);
                                    *ptr7
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len56;
                                    *ptr7
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr56.cast_mut();
                                }
                                V61::Unauthorized(e) => {
                                    *ptr7
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (6i32) as u8;
                                    let vec57 = (e.into_bytes()).into_boxed_slice();
                                    let ptr57 = vec57.as_ptr().cast::<u8>();
                                    let len57 = vec57.len();
                                    ::core::mem::forget(vec57);
                                    *ptr7
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len57;
                                    *ptr7
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr57.cast_mut();
                                }
                                V61::RateLimited(e) => {
                                    *ptr7
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (7i32) as u8;
                                    let vec58 = (e.into_bytes()).into_boxed_slice();
                                    let ptr58 = vec58.as_ptr().cast::<u8>();
                                    let len58 = vec58.len();
                                    ::core::mem::forget(vec58);
                                    *ptr7
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len58;
                                    *ptr7
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr58.cast_mut();
                                }
                                V61::ProviderError(e) => {
                                    *ptr7
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (8i32) as u8;
                                    let vec59 = (e.into_bytes()).into_boxed_slice();
                                    let ptr59 = vec59.as_ptr().cast::<u8>();
                                    let len59 = vec59.len();
                                    ::core::mem::forget(vec59);
                                    *ptr7
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len59;
                                    *ptr7
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr59.cast_mut();
                                }
                                V61::ConnectionError(e) => {
                                    *ptr7
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (9i32) as u8;
                                    let vec60 = (e.into_bytes()).into_boxed_slice();
                                    let ptr60 = vec60.as_ptr().cast::<u8>();
                                    let len60 = vec60.len();
                                    ::core::mem::forget(vec60);
                                    *ptr7
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len60;
                                    *ptr7
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr60.cast_mut();
                                }
                            }
                        }
                    };
                    ptr7
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_get_vectors<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let base76 = l1;
                            let len76 = l2;
                            for i in 0..len76 {
                                let base = base76
                                    .add(i * (13 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let l3 = *base.add(0).cast::<*mut u8>();
                                    let l4 = *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l3, l4, 1);
                                    let l5 = i32::from(
                                        *base
                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l5 {
                                        0 => {
                                            let l6 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l7 = *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base8 = l6;
                                            let len8 = l7;
                                            _rt::cabi_dealloc(base8, len8 * 4, 4);
                                        }
                                        1 => {
                                            let l9 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l10 = *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base11 = l9;
                                            let len11 = l10;
                                            _rt::cabi_dealloc(base11, len11 * 4, 4);
                                            let l12 = *base
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l13 = *base
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base14 = l12;
                                            let len14 = l13;
                                            _rt::cabi_dealloc(base14, len14 * 4, 4);
                                        }
                                        2 => {
                                            let l15 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l16 = *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base17 = l15;
                                            let len17 = l16;
                                            _rt::cabi_dealloc(base17, len17 * 1, 1);
                                        }
                                        3 => {
                                            let l18 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l19 = *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base20 = l18;
                                            let len20 = l19;
                                            _rt::cabi_dealloc(base20, len20 * 4, 4);
                                        }
                                        4 => {
                                            let l21 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l22 = *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base28 = l21;
                                            let len28 = l22;
                                            for i in 0..len28 {
                                                let base = base28
                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let l23 = *base.add(0).cast::<*mut u8>();
                                                    let l24 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l23, l24, 1);
                                                    let l25 = *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l26 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base27 = l25;
                                                    let len27 = l26;
                                                    _rt::cabi_dealloc(base27, len27 * 4, 4);
                                                }
                                            }
                                            _rt::cabi_dealloc(
                                                base28,
                                                len28 * (4 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                        }
                                        _ => {
                                            let l29 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l30 = *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base31 = l29;
                                            let len31 = l30;
                                            _rt::cabi_dealloc(base31, len31 * 4, 4);
                                            let l32 = *base
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l33 = *base
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base34 = l32;
                                            let len34 = l33;
                                            _rt::cabi_dealloc(base34, len34 * 4, 4);
                                            let l35 = *base
                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l36 = *base
                                                .add(8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base37 = l35;
                                            let len37 = l36;
                                            _rt::cabi_dealloc(base37, len37 * 4, 4);
                                        }
                                    }
                                    let l38 = i32::from(
                                        *base
                                            .add(10 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l38 {
                                        0 => {}
                                        _ => {
                                            let l39 = *base
                                                .add(11 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l40 = *base
                                                .add(12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base75 = l39;
                                            let len75 = l40;
                                            for i in 0..len75 {
                                                let base = base75
                                                    .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let l41 = *base.add(0).cast::<*mut u8>();
                                                    let l42 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l41, l42, 1);
                                                    let l43 = i32::from(
                                                        *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l43 {
                                                        0 => {
                                                            let l44 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l45 = *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l44, l45, 1);
                                                        }
                                                        1 => {}
                                                        2 => {}
                                                        3 => {}
                                                        4 => {
                                                            let l46 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l47 = *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base56 = l46;
                                                            let len56 = l47;
                                                            for i in 0..len56 {
                                                                let base = base56.add(i * 24);
                                                                {
                                                                    let l48 = i32::from(*base.add(0).cast::<u8>());
                                                                    match l48 {
                                                                        0 => {
                                                                            let l49 = *base.add(8).cast::<*mut u8>();
                                                                            let l50 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l49, l50, 1);
                                                                        }
                                                                        1 => {}
                                                                        2 => {}
                                                                        3 => {}
                                                                        4 => {}
                                                                        5 => {
                                                                            let l51 = *base.add(8).cast::<*mut u8>();
                                                                            let l52 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l51, l52, 1);
                                                                        }
                                                                        6 => {}
                                                                        _ => {
                                                                            let l53 = *base.add(8).cast::<*mut u8>();
                                                                            let l54 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base55 = l53;
                                                                            let len55 = l54;
                                                                            _rt::cabi_dealloc(base55, len55 * 1, 1);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(base56, len56 * 24, 8);
                                                        }
                                                        5 => {
                                                            let l57 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l58 = *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base69 = l57;
                                                            let len69 = l58;
                                                            for i in 0..len69 {
                                                                let base = base69
                                                                    .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l59 = *base.add(0).cast::<*mut u8>();
                                                                    let l60 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l59, l60, 1);
                                                                    let l61 = i32::from(
                                                                        *base
                                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l61 {
                                                                        0 => {
                                                                            let l62 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l63 = *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l62, l63, 1);
                                                                        }
                                                                        1 => {}
                                                                        2 => {}
                                                                        3 => {}
                                                                        4 => {}
                                                                        5 => {
                                                                            let l64 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l65 = *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l64, l65, 1);
                                                                        }
                                                                        6 => {}
                                                                        _ => {
                                                                            let l66 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l67 = *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base68 = l66;
                                                                            let len68 = l67;
                                                                            _rt::cabi_dealloc(base68, len68 * 1, 1);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base69,
                                                                len69 * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                        }
                                                        6 => {}
                                                        7 => {}
                                                        8 => {
                                                            let l70 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l71 = *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l70, l71, 1);
                                                        }
                                                        _ => {
                                                            let l72 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l73 = *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base74 = l72;
                                                            let len74 = l73;
                                                            _rt::cabi_dealloc(base74, len74 * 1, 1);
                                                        }
                                                    }
                                                }
                                            }
                                            _rt::cabi_dealloc(
                                                base75,
                                                len75 * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                8,
                                            );
                                        }
                                    }
                                }
                            }
                            _rt::cabi_dealloc(
                                base76,
                                len76 * (13 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                        }
                        _ => {
                            let l77 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l77 {
                                0 => {
                                    let l78 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l79 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l78, l79, 1);
                                }
                                1 => {
                                    let l80 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l81 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l80, l81, 1);
                                }
                                2 => {
                                    let l82 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l83 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l82, l83, 1);
                                }
                                3 => {
                                    let l84 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l85 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l84, l85, 1);
                                }
                                4 => {
                                    let l86 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l87 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l86, l87, 1);
                                }
                                5 => {
                                    let l88 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l89 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l88, l89, 1);
                                }
                                6 => {
                                    let l90 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l91 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l90, l91, 1);
                                }
                                7 => {
                                    let l92 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l93 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l92, l93, 1);
                                }
                                8 => {
                                    let l94 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l95 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l94, l95, 1);
                                }
                                _ => {
                                    let l96 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l97 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l96, l97, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_get_vector_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                    arg4: i32,
                    arg5: *mut u8,
                    arg6: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let len1 = arg3;
                    let bytes1 = _rt::Vec::from_raw_parts(arg2.cast(), len1, len1);
                    let result3 = T::get_vector(
                        _rt::string_lift(bytes0),
                        _rt::string_lift(bytes1),
                        match arg4 {
                            0 => None,
                            1 => {
                                let e = {
                                    let len2 = arg6;
                                    let bytes2 = _rt::Vec::from_raw_parts(
                                        arg5.cast(),
                                        len2,
                                        len2,
                                    );
                                    _rt::string_lift(bytes2)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    );
                    let ptr4 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result3 {
                        Ok(e) => {
                            *ptr4.add(0).cast::<u8>() = (0i32) as u8;
                            match e {
                                Some(e) => {
                                    *ptr4
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let super::super::super::super::golem::vector::types::VectorRecord {
                                        id: id5,
                                        vector: vector5,
                                        metadata: metadata5,
                                    } = e;
                                    let vec6 = (id5.into_bytes()).into_boxed_slice();
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    ::core::mem::forget(vec6);
                                    *ptr4
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len6;
                                    *ptr4
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr6.cast_mut();
                                    use super::super::super::super::golem::vector::types::VectorData as V24;
                                    match vector5 {
                                        V24::Dense(e) => {
                                            *ptr4
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                            let vec7 = (e).into_boxed_slice();
                                            let ptr7 = vec7.as_ptr().cast::<u8>();
                                            let len7 = vec7.len();
                                            ::core::mem::forget(vec7);
                                            *ptr4
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len7;
                                            *ptr4
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr7.cast_mut();
                                        }
                                        V24::Sparse(e) => {
                                            *ptr4
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let super::super::super::super::golem::vector::types::SparseVector {
                                                indices: indices8,
                                                values: values8,
                                                total_dimensions: total_dimensions8,
                                            } = e;
                                            let vec9 = (indices8).into_boxed_slice();
                                            let ptr9 = vec9.as_ptr().cast::<u8>();
                                            let len9 = vec9.len();
                                            ::core::mem::forget(vec9);
                                            *ptr4
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len9;
                                            *ptr4
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr9.cast_mut();
                                            let vec10 = (values8).into_boxed_slice();
                                            let ptr10 = vec10.as_ptr().cast::<u8>();
                                            let len10 = vec10.len();
                                            ::core::mem::forget(vec10);
                                            *ptr4
                                                .add(8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len10;
                                            *ptr4
                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr10.cast_mut();
                                            *ptr4
                                                .add(9 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>() = _rt::as_i32(total_dimensions8);
                                        }
                                        V24::Binary(e) => {
                                            *ptr4
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (2i32) as u8;
                                            let super::super::super::super::golem::vector::types::BinaryVector {
                                                data: data11,
                                                dimensions: dimensions11,
                                            } = e;
                                            let vec12 = (data11).into_boxed_slice();
                                            let ptr12 = vec12.as_ptr().cast::<u8>();
                                            let len12 = vec12.len();
                                            ::core::mem::forget(vec12);
                                            *ptr4
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len12;
                                            *ptr4
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr12.cast_mut();
                                            *ptr4
                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>() = _rt::as_i32(dimensions11);
                                        }
                                        V24::Half(e) => {
                                            *ptr4
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (3i32) as u8;
                                            let super::super::super::super::golem::vector::types::HalfVector {
                                                data: data13,
                                                dimensions: dimensions13,
                                            } = e;
                                            let vec14 = (data13).into_boxed_slice();
                                            let ptr14 = vec14.as_ptr().cast::<u8>();
                                            let len14 = vec14.len();
                                            ::core::mem::forget(vec14);
                                            *ptr4
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len14;
                                            *ptr4
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr14.cast_mut();
                                            *ptr4
                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>() = _rt::as_i32(dimensions13);
                                        }
                                        V24::Named(e) => {
                                            *ptr4
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (4i32) as u8;
                                            let vec18 = e;
                                            let len18 = vec18.len();
                                            let layout18 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec18.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let result18 = if layout18.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout18).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout18);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec18.into_iter().enumerate() {
                                                let base = result18
                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let (t15_0, t15_1) = e;
                                                    let vec16 = (t15_0.into_bytes()).into_boxed_slice();
                                                    let ptr16 = vec16.as_ptr().cast::<u8>();
                                                    let len16 = vec16.len();
                                                    ::core::mem::forget(vec16);
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len16;
                                                    *base.add(0).cast::<*mut u8>() = ptr16.cast_mut();
                                                    let vec17 = (t15_1).into_boxed_slice();
                                                    let ptr17 = vec17.as_ptr().cast::<u8>();
                                                    let len17 = vec17.len();
                                                    ::core::mem::forget(vec17);
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len17;
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr17.cast_mut();
                                                }
                                            }
                                            *ptr4
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len18;
                                            *ptr4
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result18;
                                        }
                                        V24::Hybrid(e) => {
                                            *ptr4
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (5i32) as u8;
                                            let (t19_0, t19_1) = e;
                                            let vec20 = (t19_0).into_boxed_slice();
                                            let ptr20 = vec20.as_ptr().cast::<u8>();
                                            let len20 = vec20.len();
                                            ::core::mem::forget(vec20);
                                            *ptr4
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len20;
                                            *ptr4
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr20.cast_mut();
                                            let super::super::super::super::golem::vector::types::SparseVector {
                                                indices: indices21,
                                                values: values21,
                                                total_dimensions: total_dimensions21,
                                            } = t19_1;
                                            let vec22 = (indices21).into_boxed_slice();
                                            let ptr22 = vec22.as_ptr().cast::<u8>();
                                            let len22 = vec22.len();
                                            ::core::mem::forget(vec22);
                                            *ptr4
                                                .add(8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len22;
                                            *ptr4
                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr22.cast_mut();
                                            let vec23 = (values21).into_boxed_slice();
                                            let ptr23 = vec23.as_ptr().cast::<u8>();
                                            let len23 = vec23.len();
                                            ::core::mem::forget(vec23);
                                            *ptr4
                                                .add(10 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len23;
                                            *ptr4
                                                .add(9 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr23.cast_mut();
                                            *ptr4
                                                .add(11 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>() = _rt::as_i32(total_dimensions21);
                                        }
                                    }
                                    match metadata5 {
                                        Some(e) => {
                                            *ptr4
                                                .add(12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec46 = e;
                                            let len46 = vec46.len();
                                            let layout46 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec46.len()
                                                    * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                8,
                                            );
                                            let result46 = if layout46.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout46).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout46);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec46.into_iter().enumerate() {
                                                let base = result46
                                                    .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let (t25_0, t25_1) = e;
                                                    let vec26 = (t25_0.into_bytes()).into_boxed_slice();
                                                    let ptr26 = vec26.as_ptr().cast::<u8>();
                                                    let len26 = vec26.len();
                                                    ::core::mem::forget(vec26);
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len26;
                                                    *base.add(0).cast::<*mut u8>() = ptr26.cast_mut();
                                                    use super::super::super::super::golem::vector::types::FlatMetadataValue as V45;
                                                    match t25_1 {
                                                        V45::StringVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                            let vec27 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr27 = vec27.as_ptr().cast::<u8>();
                                                            let len27 = vec27.len();
                                                            ::core::mem::forget(vec27);
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len27;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr27.cast_mut();
                                                        }
                                                        V45::NumberVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<f64>() = _rt::as_f64(e);
                                                        }
                                                        V45::IntegerVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (2i32) as u8;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<i64>() = _rt::as_i64(e);
                                                        }
                                                        V45::BooleanVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (3i32) as u8;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (match e {
                                                                true => 1,
                                                                false => 0,
                                                            }) as u8;
                                                        }
                                                        V45::ArrayVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (4i32) as u8;
                                                            let vec33 = e;
                                                            let len33 = vec33.len();
                                                            let layout33 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec33.len() * 24,
                                                                8,
                                                            );
                                                            let result33 = if layout33.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout33).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout33);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec33.into_iter().enumerate() {
                                                                let base = result33.add(i * 24);
                                                                {
                                                                    use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V32;
                                                                    match e {
                                                                        V32::StringVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                            let vec28 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr28 = vec28.as_ptr().cast::<u8>();
                                                                            let len28 = vec28.len();
                                                                            ::core::mem::forget(vec28);
                                                                            *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len28;
                                                                            *base.add(8).cast::<*mut u8>() = ptr28.cast_mut();
                                                                        }
                                                                        V32::NumberVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                            *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                                                        }
                                                                        V32::IntegerVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (2i32) as u8;
                                                                            *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                                        }
                                                                        V32::BooleanVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (3i32) as u8;
                                                                            *base.add(8).cast::<u8>() = (match e {
                                                                                true => 1,
                                                                                false => 0,
                                                                            }) as u8;
                                                                        }
                                                                        V32::NullVal => {
                                                                            *base.add(0).cast::<u8>() = (4i32) as u8;
                                                                        }
                                                                        V32::DatetimeVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (5i32) as u8;
                                                                            let vec29 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr29 = vec29.as_ptr().cast::<u8>();
                                                                            let len29 = vec29.len();
                                                                            ::core::mem::forget(vec29);
                                                                            *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len29;
                                                                            *base.add(8).cast::<*mut u8>() = ptr29.cast_mut();
                                                                        }
                                                                        V32::GeoVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (6i32) as u8;
                                                                            let super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                                latitude: latitude30,
                                                                                longitude: longitude30,
                                                                            } = e;
                                                                            *base.add(8).cast::<f64>() = _rt::as_f64(latitude30);
                                                                            *base.add(16).cast::<f64>() = _rt::as_f64(longitude30);
                                                                        }
                                                                        V32::BlobVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (7i32) as u8;
                                                                            let vec31 = (e).into_boxed_slice();
                                                                            let ptr31 = vec31.as_ptr().cast::<u8>();
                                                                            let len31 = vec31.len();
                                                                            ::core::mem::forget(vec31);
                                                                            *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len31;
                                                                            *base.add(8).cast::<*mut u8>() = ptr31.cast_mut();
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len33;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result33;
                                                        }
                                                        V45::ObjectVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (5i32) as u8;
                                                            let vec41 = e;
                                                            let len41 = vec41.len();
                                                            let layout41 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec41.len()
                                                                    * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                            let result41 = if layout41.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout41).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout41);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec41.into_iter().enumerate() {
                                                                let base = result41
                                                                    .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let (t34_0, t34_1) = e;
                                                                    let vec35 = (t34_0.into_bytes()).into_boxed_slice();
                                                                    let ptr35 = vec35.as_ptr().cast::<u8>();
                                                                    let len35 = vec35.len();
                                                                    ::core::mem::forget(vec35);
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len35;
                                                                    *base.add(0).cast::<*mut u8>() = ptr35.cast_mut();
                                                                    use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V40;
                                                                    match t34_1 {
                                                                        V40::StringVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                            let vec36 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr36 = vec36.as_ptr().cast::<u8>();
                                                                            let len36 = vec36.len();
                                                                            ::core::mem::forget(vec36);
                                                                            *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len36;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr36.cast_mut();
                                                                        }
                                                                        V40::NumberVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<f64>() = _rt::as_f64(e);
                                                                        }
                                                                        V40::IntegerVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (2i32) as u8;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i64>() = _rt::as_i64(e);
                                                                        }
                                                                        V40::BooleanVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (3i32) as u8;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (match e {
                                                                                true => 1,
                                                                                false => 0,
                                                                            }) as u8;
                                                                        }
                                                                        V40::NullVal => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (4i32) as u8;
                                                                        }
                                                                        V40::DatetimeVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (5i32) as u8;
                                                                            let vec37 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr37 = vec37.as_ptr().cast::<u8>();
                                                                            let len37 = vec37.len();
                                                                            ::core::mem::forget(vec37);
                                                                            *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len37;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr37.cast_mut();
                                                                        }
                                                                        V40::GeoVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (6i32) as u8;
                                                                            let super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                                latitude: latitude38,
                                                                                longitude: longitude38,
                                                                            } = e;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<f64>() = _rt::as_f64(latitude38);
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<f64>() = _rt::as_f64(longitude38);
                                                                        }
                                                                        V40::BlobVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (7i32) as u8;
                                                                            let vec39 = (e).into_boxed_slice();
                                                                            let ptr39 = vec39.as_ptr().cast::<u8>();
                                                                            let len39 = vec39.len();
                                                                            ::core::mem::forget(vec39);
                                                                            *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len39;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr39.cast_mut();
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len41;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result41;
                                                        }
                                                        V45::NullVal => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (6i32) as u8;
                                                        }
                                                        V45::GeoVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (7i32) as u8;
                                                            let super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                latitude: latitude42,
                                                                longitude: longitude42,
                                                            } = e;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<f64>() = _rt::as_f64(latitude42);
                                                            *base
                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<f64>() = _rt::as_f64(longitude42);
                                                        }
                                                        V45::DatetimeVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (8i32) as u8;
                                                            let vec43 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr43 = vec43.as_ptr().cast::<u8>();
                                                            let len43 = vec43.len();
                                                            ::core::mem::forget(vec43);
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len43;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr43.cast_mut();
                                                        }
                                                        V45::BlobVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (9i32) as u8;
                                                            let vec44 = (e).into_boxed_slice();
                                                            let ptr44 = vec44.as_ptr().cast::<u8>();
                                                            let len44 = vec44.len();
                                                            ::core::mem::forget(vec44);
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len44;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr44.cast_mut();
                                                        }
                                                    }
                                                }
                                            }
                                            *ptr4
                                                .add(14 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len46;
                                            *ptr4
                                                .add(13 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result46;
                                        }
                                        None => {
                                            *ptr4
                                                .add(12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                None => {
                                    *ptr4
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        Err(e) => {
                            *ptr4.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::golem::vector::types::VectorError as V57;
                            match e {
                                V57::NotFound(e) => {
                                    *ptr4
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                    let vec47 = (e.into_bytes()).into_boxed_slice();
                                    let ptr47 = vec47.as_ptr().cast::<u8>();
                                    let len47 = vec47.len();
                                    ::core::mem::forget(vec47);
                                    *ptr4
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len47;
                                    *ptr4
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr47.cast_mut();
                                }
                                V57::AlreadyExists(e) => {
                                    *ptr4
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec48 = (e.into_bytes()).into_boxed_slice();
                                    let ptr48 = vec48.as_ptr().cast::<u8>();
                                    let len48 = vec48.len();
                                    ::core::mem::forget(vec48);
                                    *ptr4
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len48;
                                    *ptr4
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr48.cast_mut();
                                }
                                V57::InvalidParams(e) => {
                                    *ptr4
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                    let vec49 = (e.into_bytes()).into_boxed_slice();
                                    let ptr49 = vec49.as_ptr().cast::<u8>();
                                    let len49 = vec49.len();
                                    ::core::mem::forget(vec49);
                                    *ptr4
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len49;
                                    *ptr4
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr49.cast_mut();
                                }
                                V57::UnsupportedFeature(e) => {
                                    *ptr4
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                    let vec50 = (e.into_bytes()).into_boxed_slice();
                                    let ptr50 = vec50.as_ptr().cast::<u8>();
                                    let len50 = vec50.len();
                                    ::core::mem::forget(vec50);
                                    *ptr4
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len50;
                                    *ptr4
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr50.cast_mut();
                                }
                                V57::DimensionMismatch(e) => {
                                    *ptr4
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (4i32) as u8;
                                    let vec51 = (e.into_bytes()).into_boxed_slice();
                                    let ptr51 = vec51.as_ptr().cast::<u8>();
                                    let len51 = vec51.len();
                                    ::core::mem::forget(vec51);
                                    *ptr4
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len51;
                                    *ptr4
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr51.cast_mut();
                                }
                                V57::InvalidVector(e) => {
                                    *ptr4
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (5i32) as u8;
                                    let vec52 = (e.into_bytes()).into_boxed_slice();
                                    let ptr52 = vec52.as_ptr().cast::<u8>();
                                    let len52 = vec52.len();
                                    ::core::mem::forget(vec52);
                                    *ptr4
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len52;
                                    *ptr4
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr52.cast_mut();
                                }
                                V57::Unauthorized(e) => {
                                    *ptr4
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (6i32) as u8;
                                    let vec53 = (e.into_bytes()).into_boxed_slice();
                                    let ptr53 = vec53.as_ptr().cast::<u8>();
                                    let len53 = vec53.len();
                                    ::core::mem::forget(vec53);
                                    *ptr4
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len53;
                                    *ptr4
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr53.cast_mut();
                                }
                                V57::RateLimited(e) => {
                                    *ptr4
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (7i32) as u8;
                                    let vec54 = (e.into_bytes()).into_boxed_slice();
                                    let ptr54 = vec54.as_ptr().cast::<u8>();
                                    let len54 = vec54.len();
                                    ::core::mem::forget(vec54);
                                    *ptr4
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len54;
                                    *ptr4
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr54.cast_mut();
                                }
                                V57::ProviderError(e) => {
                                    *ptr4
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (8i32) as u8;
                                    let vec55 = (e.into_bytes()).into_boxed_slice();
                                    let ptr55 = vec55.as_ptr().cast::<u8>();
                                    let len55 = vec55.len();
                                    ::core::mem::forget(vec55);
                                    *ptr4
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len55;
                                    *ptr4
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr55.cast_mut();
                                }
                                V57::ConnectionError(e) => {
                                    *ptr4
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (9i32) as u8;
                                    let vec56 = (e.into_bytes()).into_boxed_slice();
                                    let ptr56 = vec56.as_ptr().cast::<u8>();
                                    let len56 = vec56.len();
                                    ::core::mem::forget(vec56);
                                    *ptr4
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len56;
                                    *ptr4
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr56.cast_mut();
                                }
                            }
                        }
                    };
                    ptr4
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_get_vector<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l1 {
                                0 => {}
                                _ => {
                                    let l2 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l3 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                    let l4 = i32::from(
                                        *arg0
                                            .add(4 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l4 {
                                        0 => {
                                            let l5 = *arg0
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l6 = *arg0
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base7 = l5;
                                            let len7 = l6;
                                            _rt::cabi_dealloc(base7, len7 * 4, 4);
                                        }
                                        1 => {
                                            let l8 = *arg0
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l9 = *arg0
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base10 = l8;
                                            let len10 = l9;
                                            _rt::cabi_dealloc(base10, len10 * 4, 4);
                                            let l11 = *arg0
                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l12 = *arg0
                                                .add(8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base13 = l11;
                                            let len13 = l12;
                                            _rt::cabi_dealloc(base13, len13 * 4, 4);
                                        }
                                        2 => {
                                            let l14 = *arg0
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l15 = *arg0
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base16 = l14;
                                            let len16 = l15;
                                            _rt::cabi_dealloc(base16, len16 * 1, 1);
                                        }
                                        3 => {
                                            let l17 = *arg0
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l18 = *arg0
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base19 = l17;
                                            let len19 = l18;
                                            _rt::cabi_dealloc(base19, len19 * 4, 4);
                                        }
                                        4 => {
                                            let l20 = *arg0
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l21 = *arg0
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base27 = l20;
                                            let len27 = l21;
                                            for i in 0..len27 {
                                                let base = base27
                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let l22 = *base.add(0).cast::<*mut u8>();
                                                    let l23 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l22, l23, 1);
                                                    let l24 = *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l25 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base26 = l24;
                                                    let len26 = l25;
                                                    _rt::cabi_dealloc(base26, len26 * 4, 4);
                                                }
                                            }
                                            _rt::cabi_dealloc(
                                                base27,
                                                len27 * (4 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                        }
                                        _ => {
                                            let l28 = *arg0
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l29 = *arg0
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base30 = l28;
                                            let len30 = l29;
                                            _rt::cabi_dealloc(base30, len30 * 4, 4);
                                            let l31 = *arg0
                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l32 = *arg0
                                                .add(8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base33 = l31;
                                            let len33 = l32;
                                            _rt::cabi_dealloc(base33, len33 * 4, 4);
                                            let l34 = *arg0
                                                .add(9 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l35 = *arg0
                                                .add(10 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base36 = l34;
                                            let len36 = l35;
                                            _rt::cabi_dealloc(base36, len36 * 4, 4);
                                        }
                                    }
                                    let l37 = i32::from(
                                        *arg0
                                            .add(12 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l37 {
                                        0 => {}
                                        _ => {
                                            let l38 = *arg0
                                                .add(13 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l39 = *arg0
                                                .add(14 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base74 = l38;
                                            let len74 = l39;
                                            for i in 0..len74 {
                                                let base = base74
                                                    .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let l40 = *base.add(0).cast::<*mut u8>();
                                                    let l41 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l40, l41, 1);
                                                    let l42 = i32::from(
                                                        *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l42 {
                                                        0 => {
                                                            let l43 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l44 = *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l43, l44, 1);
                                                        }
                                                        1 => {}
                                                        2 => {}
                                                        3 => {}
                                                        4 => {
                                                            let l45 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l46 = *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base55 = l45;
                                                            let len55 = l46;
                                                            for i in 0..len55 {
                                                                let base = base55.add(i * 24);
                                                                {
                                                                    let l47 = i32::from(*base.add(0).cast::<u8>());
                                                                    match l47 {
                                                                        0 => {
                                                                            let l48 = *base.add(8).cast::<*mut u8>();
                                                                            let l49 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l48, l49, 1);
                                                                        }
                                                                        1 => {}
                                                                        2 => {}
                                                                        3 => {}
                                                                        4 => {}
                                                                        5 => {
                                                                            let l50 = *base.add(8).cast::<*mut u8>();
                                                                            let l51 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l50, l51, 1);
                                                                        }
                                                                        6 => {}
                                                                        _ => {
                                                                            let l52 = *base.add(8).cast::<*mut u8>();
                                                                            let l53 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base54 = l52;
                                                                            let len54 = l53;
                                                                            _rt::cabi_dealloc(base54, len54 * 1, 1);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(base55, len55 * 24, 8);
                                                        }
                                                        5 => {
                                                            let l56 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l57 = *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base68 = l56;
                                                            let len68 = l57;
                                                            for i in 0..len68 {
                                                                let base = base68
                                                                    .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l58 = *base.add(0).cast::<*mut u8>();
                                                                    let l59 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l58, l59, 1);
                                                                    let l60 = i32::from(
                                                                        *base
                                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l60 {
                                                                        0 => {
                                                                            let l61 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l62 = *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l61, l62, 1);
                                                                        }
                                                                        1 => {}
                                                                        2 => {}
                                                                        3 => {}
                                                                        4 => {}
                                                                        5 => {
                                                                            let l63 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l64 = *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l63, l64, 1);
                                                                        }
                                                                        6 => {}
                                                                        _ => {
                                                                            let l65 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l66 = *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base67 = l65;
                                                                            let len67 = l66;
                                                                            _rt::cabi_dealloc(base67, len67 * 1, 1);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base68,
                                                                len68 * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                        }
                                                        6 => {}
                                                        7 => {}
                                                        8 => {
                                                            let l69 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l70 = *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l69, l70, 1);
                                                        }
                                                        _ => {
                                                            let l71 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l72 = *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base73 = l71;
                                                            let len73 = l72;
                                                            _rt::cabi_dealloc(base73, len73 * 1, 1);
                                                        }
                                                    }
                                                }
                                            }
                                            _rt::cabi_dealloc(
                                                base74,
                                                len74 * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                8,
                                            );
                                        }
                                    }
                                }
                            }
                        }
                        _ => {
                            let l75 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l75 {
                                0 => {
                                    let l76 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l77 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l76, l77, 1);
                                }
                                1 => {
                                    let l78 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l79 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l78, l79, 1);
                                }
                                2 => {
                                    let l80 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l81 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l80, l81, 1);
                                }
                                3 => {
                                    let l82 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l83 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l82, l83, 1);
                                }
                                4 => {
                                    let l84 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l85 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l84, l85, 1);
                                }
                                5 => {
                                    let l86 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l87 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l86, l87, 1);
                                }
                                6 => {
                                    let l88 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l89 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l88, l89, 1);
                                }
                                7 => {
                                    let l90 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l91 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l90, l91, 1);
                                }
                                8 => {
                                    let l92 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l93 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l92, l93, 1);
                                }
                                _ => {
                                    let l94 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l95 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l94, l95, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_update_vector_cabi<T: Guest>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len2 = l1;
                    let bytes2 = _rt::Vec::from_raw_parts(l0.cast(), len2, len2);
                    let l3 = *arg0
                        .add(2 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l4 = *arg0
                        .add(3 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len5 = l4;
                    let bytes5 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);
                    let l6 = i32::from(
                        *arg0.add(4 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    let l46 = i32::from(
                        *arg0.add(13 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    let l110 = i32::from(
                        *arg0.add(16 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    let l114 = i32::from(
                        *arg0.add(19 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    let result116 = T::update_vector(
                        _rt::string_lift(bytes2),
                        _rt::string_lift(bytes5),
                        match l6 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l7 = i32::from(
                                        *arg0
                                            .add(5 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    use super::super::super::super::golem::vector::types::VectorData as V45;
                                    let v45 = match l7 {
                                        0 => {
                                            let e45 = {
                                                let l8 = *arg0
                                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l9 = *arg0
                                                    .add(7 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len10 = l9;
                                                _rt::Vec::from_raw_parts(l8.cast(), len10, len10)
                                            };
                                            V45::Dense(e45)
                                        }
                                        1 => {
                                            let e45 = {
                                                let l11 = *arg0
                                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l12 = *arg0
                                                    .add(7 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len13 = l12;
                                                let l14 = *arg0
                                                    .add(8 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l15 = *arg0
                                                    .add(9 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len16 = l15;
                                                let l17 = *arg0
                                                    .add(10 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<i32>();
                                                super::super::super::super::golem::vector::types::SparseVector {
                                                    indices: _rt::Vec::from_raw_parts(l11.cast(), len13, len13),
                                                    values: _rt::Vec::from_raw_parts(l14.cast(), len16, len16),
                                                    total_dimensions: l17 as u32,
                                                }
                                            };
                                            V45::Sparse(e45)
                                        }
                                        2 => {
                                            let e45 = {
                                                let l18 = *arg0
                                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l19 = *arg0
                                                    .add(7 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len20 = l19;
                                                let l21 = *arg0
                                                    .add(8 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<i32>();
                                                super::super::super::super::golem::vector::types::BinaryVector {
                                                    data: _rt::Vec::from_raw_parts(l18.cast(), len20, len20),
                                                    dimensions: l21 as u32,
                                                }
                                            };
                                            V45::Binary(e45)
                                        }
                                        3 => {
                                            let e45 = {
                                                let l22 = *arg0
                                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l23 = *arg0
                                                    .add(7 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len24 = l23;
                                                let l25 = *arg0
                                                    .add(8 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<i32>();
                                                super::super::super::super::golem::vector::types::HalfVector {
                                                    data: _rt::Vec::from_raw_parts(l22.cast(), len24, len24),
                                                    dimensions: l25 as u32,
                                                }
                                            };
                                            V45::Half(e45)
                                        }
                                        4 => {
                                            let e45 = {
                                                let l26 = *arg0
                                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l27 = *arg0
                                                    .add(7 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let base34 = l26;
                                                let len34 = l27;
                                                let mut result34 = _rt::Vec::with_capacity(len34);
                                                for i in 0..len34 {
                                                    let base = base34
                                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                    let e34 = {
                                                        let l28 = *base.add(0).cast::<*mut u8>();
                                                        let l29 = *base
                                                            .add(::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len30 = l29;
                                                        let bytes30 = _rt::Vec::from_raw_parts(
                                                            l28.cast(),
                                                            len30,
                                                            len30,
                                                        );
                                                        let l31 = *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l32 = *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len33 = l32;
                                                        (
                                                            _rt::string_lift(bytes30),
                                                            _rt::Vec::from_raw_parts(l31.cast(), len33, len33),
                                                        )
                                                    };
                                                    result34.push(e34);
                                                }
                                                _rt::cabi_dealloc(
                                                    base34,
                                                    len34 * (4 * ::core::mem::size_of::<*const u8>()),
                                                    ::core::mem::size_of::<*const u8>(),
                                                );
                                                result34
                                            };
                                            V45::Named(e45)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 5, "invalid enum discriminant");
                                            let e45 = {
                                                let l35 = *arg0
                                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l36 = *arg0
                                                    .add(7 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len37 = l36;
                                                let l38 = *arg0
                                                    .add(8 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l39 = *arg0
                                                    .add(9 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len40 = l39;
                                                let l41 = *arg0
                                                    .add(10 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l42 = *arg0
                                                    .add(11 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len43 = l42;
                                                let l44 = *arg0
                                                    .add(12 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<i32>();
                                                (
                                                    _rt::Vec::from_raw_parts(l35.cast(), len37, len37),
                                                    super::super::super::super::golem::vector::types::SparseVector {
                                                        indices: _rt::Vec::from_raw_parts(l38.cast(), len40, len40),
                                                        values: _rt::Vec::from_raw_parts(l41.cast(), len43, len43),
                                                        total_dimensions: l44 as u32,
                                                    },
                                                )
                                            };
                                            V45::Hybrid(e45)
                                        }
                                    };
                                    v45
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        match l46 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l47 = *arg0
                                        .add(14 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l48 = *arg0
                                        .add(15 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base109 = l47;
                                    let len109 = l48;
                                    let mut result109 = _rt::Vec::with_capacity(len109);
                                    for i in 0..len109 {
                                        let base = base109
                                            .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                        let e109 = {
                                            let l49 = *base.add(0).cast::<*mut u8>();
                                            let l50 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len51 = l50;
                                            let bytes51 = _rt::Vec::from_raw_parts(
                                                l49.cast(),
                                                len51,
                                                len51,
                                            );
                                            let l52 = i32::from(
                                                *base
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            use super::super::super::super::golem::vector::types::FlatMetadataValue as V108;
                                            let v108 = match l52 {
                                                0 => {
                                                    let e108 = {
                                                        let l53 = *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l54 = *base
                                                            .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len55 = l54;
                                                        let bytes55 = _rt::Vec::from_raw_parts(
                                                            l53.cast(),
                                                            len55,
                                                            len55,
                                                        );
                                                        _rt::string_lift(bytes55)
                                                    };
                                                    V108::StringVal(e108)
                                                }
                                                1 => {
                                                    let e108 = {
                                                        let l56 = *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<f64>();
                                                        l56
                                                    };
                                                    V108::NumberVal(e108)
                                                }
                                                2 => {
                                                    let e108 = {
                                                        let l57 = *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i64>();
                                                        l57
                                                    };
                                                    V108::IntegerVal(e108)
                                                }
                                                3 => {
                                                    let e108 = {
                                                        let l58 = i32::from(
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        _rt::bool_lift(l58 as u8)
                                                    };
                                                    V108::BooleanVal(e108)
                                                }
                                                4 => {
                                                    let e108 = {
                                                        let l59 = *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l60 = *base
                                                            .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base77 = l59;
                                                        let len77 = l60;
                                                        let mut result77 = _rt::Vec::with_capacity(len77);
                                                        for i in 0..len77 {
                                                            let base = base77.add(i * 24);
                                                            let e77 = {
                                                                let l61 = i32::from(*base.add(0).cast::<u8>());
                                                                use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V76;
                                                                let v76 = match l61 {
                                                                    0 => {
                                                                        let e76 = {
                                                                            let l62 = *base.add(8).cast::<*mut u8>();
                                                                            let l63 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len64 = l63;
                                                                            let bytes64 = _rt::Vec::from_raw_parts(
                                                                                l62.cast(),
                                                                                len64,
                                                                                len64,
                                                                            );
                                                                            _rt::string_lift(bytes64)
                                                                        };
                                                                        V76::StringVal(e76)
                                                                    }
                                                                    1 => {
                                                                        let e76 = {
                                                                            let l65 = *base.add(8).cast::<f64>();
                                                                            l65
                                                                        };
                                                                        V76::NumberVal(e76)
                                                                    }
                                                                    2 => {
                                                                        let e76 = {
                                                                            let l66 = *base.add(8).cast::<i64>();
                                                                            l66
                                                                        };
                                                                        V76::IntegerVal(e76)
                                                                    }
                                                                    3 => {
                                                                        let e76 = {
                                                                            let l67 = i32::from(*base.add(8).cast::<u8>());
                                                                            _rt::bool_lift(l67 as u8)
                                                                        };
                                                                        V76::BooleanVal(e76)
                                                                    }
                                                                    4 => V76::NullVal,
                                                                    5 => {
                                                                        let e76 = {
                                                                            let l68 = *base.add(8).cast::<*mut u8>();
                                                                            let l69 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len70 = l69;
                                                                            let bytes70 = _rt::Vec::from_raw_parts(
                                                                                l68.cast(),
                                                                                len70,
                                                                                len70,
                                                                            );
                                                                            _rt::string_lift(bytes70)
                                                                        };
                                                                        V76::DatetimeVal(e76)
                                                                    }
                                                                    6 => {
                                                                        let e76 = {
                                                                            let l71 = *base.add(8).cast::<f64>();
                                                                            let l72 = *base.add(16).cast::<f64>();
                                                                            super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                                latitude: l71,
                                                                                longitude: l72,
                                                                            }
                                                                        };
                                                                        V76::GeoVal(e76)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 7, "invalid enum discriminant");
                                                                        let e76 = {
                                                                            let l73 = *base.add(8).cast::<*mut u8>();
                                                                            let l74 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len75 = l74;
                                                                            _rt::Vec::from_raw_parts(l73.cast(), len75, len75)
                                                                        };
                                                                        V76::BlobVal(e76)
                                                                    }
                                                                };
                                                                v76
                                                            };
                                                            result77.push(e77);
                                                        }
                                                        _rt::cabi_dealloc(base77, len77 * 24, 8);
                                                        result77
                                                    };
                                                    V108::ArrayVal(e108)
                                                }
                                                5 => {
                                                    let e108 = {
                                                        let l78 = *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l79 = *base
                                                            .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base99 = l78;
                                                        let len99 = l79;
                                                        let mut result99 = _rt::Vec::with_capacity(len99);
                                                        for i in 0..len99 {
                                                            let base = base99
                                                                .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                            let e99 = {
                                                                let l80 = *base.add(0).cast::<*mut u8>();
                                                                let l81 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len82 = l81;
                                                                let bytes82 = _rt::Vec::from_raw_parts(
                                                                    l80.cast(),
                                                                    len82,
                                                                    len82,
                                                                );
                                                                let l83 = i32::from(
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V98;
                                                                let v98 = match l83 {
                                                                    0 => {
                                                                        let e98 = {
                                                                            let l84 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l85 = *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len86 = l85;
                                                                            let bytes86 = _rt::Vec::from_raw_parts(
                                                                                l84.cast(),
                                                                                len86,
                                                                                len86,
                                                                            );
                                                                            _rt::string_lift(bytes86)
                                                                        };
                                                                        V98::StringVal(e98)
                                                                    }
                                                                    1 => {
                                                                        let e98 = {
                                                                            let l87 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<f64>();
                                                                            l87
                                                                        };
                                                                        V98::NumberVal(e98)
                                                                    }
                                                                    2 => {
                                                                        let e98 = {
                                                                            let l88 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i64>();
                                                                            l88
                                                                        };
                                                                        V98::IntegerVal(e98)
                                                                    }
                                                                    3 => {
                                                                        let e98 = {
                                                                            let l89 = i32::from(
                                                                                *base
                                                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            _rt::bool_lift(l89 as u8)
                                                                        };
                                                                        V98::BooleanVal(e98)
                                                                    }
                                                                    4 => V98::NullVal,
                                                                    5 => {
                                                                        let e98 = {
                                                                            let l90 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l91 = *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len92 = l91;
                                                                            let bytes92 = _rt::Vec::from_raw_parts(
                                                                                l90.cast(),
                                                                                len92,
                                                                                len92,
                                                                            );
                                                                            _rt::string_lift(bytes92)
                                                                        };
                                                                        V98::DatetimeVal(e98)
                                                                    }
                                                                    6 => {
                                                                        let e98 = {
                                                                            let l93 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<f64>();
                                                                            let l94 = *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<f64>();
                                                                            super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                                latitude: l93,
                                                                                longitude: l94,
                                                                            }
                                                                        };
                                                                        V98::GeoVal(e98)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 7, "invalid enum discriminant");
                                                                        let e98 = {
                                                                            let l95 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l96 = *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len97 = l96;
                                                                            _rt::Vec::from_raw_parts(l95.cast(), len97, len97)
                                                                        };
                                                                        V98::BlobVal(e98)
                                                                    }
                                                                };
                                                                (_rt::string_lift(bytes82), v98)
                                                            };
                                                            result99.push(e99);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base99,
                                                            len99 * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                            8,
                                                        );
                                                        result99
                                                    };
                                                    V108::ObjectVal(e108)
                                                }
                                                6 => V108::NullVal,
                                                7 => {
                                                    let e108 = {
                                                        let l100 = *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<f64>();
                                                        let l101 = *base
                                                            .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<f64>();
                                                        super::super::super::super::golem::vector::types::GeoCoordinates {
                                                            latitude: l100,
                                                            longitude: l101,
                                                        }
                                                    };
                                                    V108::GeoVal(e108)
                                                }
                                                8 => {
                                                    let e108 = {
                                                        let l102 = *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l103 = *base
                                                            .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len104 = l103;
                                                        let bytes104 = _rt::Vec::from_raw_parts(
                                                            l102.cast(),
                                                            len104,
                                                            len104,
                                                        );
                                                        _rt::string_lift(bytes104)
                                                    };
                                                    V108::DatetimeVal(e108)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 9, "invalid enum discriminant");
                                                    let e108 = {
                                                        let l105 = *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l106 = *base
                                                            .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len107 = l106;
                                                        _rt::Vec::from_raw_parts(l105.cast(), len107, len107)
                                                    };
                                                    V108::BlobVal(e108)
                                                }
                                            };
                                            (_rt::string_lift(bytes51), v108)
                                        };
                                        result109.push(e109);
                                    }
                                    _rt::cabi_dealloc(
                                        base109,
                                        len109 * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                        8,
                                    );
                                    result109
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        match l110 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l111 = *arg0
                                        .add(17 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l112 = *arg0
                                        .add(18 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let len113 = l112;
                                    let bytes113 = _rt::Vec::from_raw_parts(
                                        l111.cast(),
                                        len113,
                                        len113,
                                    );
                                    _rt::string_lift(bytes113)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        match l114 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l115 = i32::from(
                                        *arg0
                                            .add(1 + 19 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    _rt::bool_lift(l115 as u8)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    );
                    _rt::cabi_dealloc(
                        arg0,
                        20 * ::core::mem::size_of::<*const u8>(),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let ptr117 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result116 {
                        Ok(_) => {
                            *ptr117.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr117.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::golem::vector::types::VectorError as V128;
                            match e {
                                V128::NotFound(e) => {
                                    *ptr117
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                    let vec118 = (e.into_bytes()).into_boxed_slice();
                                    let ptr118 = vec118.as_ptr().cast::<u8>();
                                    let len118 = vec118.len();
                                    ::core::mem::forget(vec118);
                                    *ptr117
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len118;
                                    *ptr117
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr118.cast_mut();
                                }
                                V128::AlreadyExists(e) => {
                                    *ptr117
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec119 = (e.into_bytes()).into_boxed_slice();
                                    let ptr119 = vec119.as_ptr().cast::<u8>();
                                    let len119 = vec119.len();
                                    ::core::mem::forget(vec119);
                                    *ptr117
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len119;
                                    *ptr117
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr119.cast_mut();
                                }
                                V128::InvalidParams(e) => {
                                    *ptr117
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                    let vec120 = (e.into_bytes()).into_boxed_slice();
                                    let ptr120 = vec120.as_ptr().cast::<u8>();
                                    let len120 = vec120.len();
                                    ::core::mem::forget(vec120);
                                    *ptr117
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len120;
                                    *ptr117
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr120.cast_mut();
                                }
                                V128::UnsupportedFeature(e) => {
                                    *ptr117
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                    let vec121 = (e.into_bytes()).into_boxed_slice();
                                    let ptr121 = vec121.as_ptr().cast::<u8>();
                                    let len121 = vec121.len();
                                    ::core::mem::forget(vec121);
                                    *ptr117
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len121;
                                    *ptr117
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr121.cast_mut();
                                }
                                V128::DimensionMismatch(e) => {
                                    *ptr117
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (4i32) as u8;
                                    let vec122 = (e.into_bytes()).into_boxed_slice();
                                    let ptr122 = vec122.as_ptr().cast::<u8>();
                                    let len122 = vec122.len();
                                    ::core::mem::forget(vec122);
                                    *ptr117
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len122;
                                    *ptr117
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr122.cast_mut();
                                }
                                V128::InvalidVector(e) => {
                                    *ptr117
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (5i32) as u8;
                                    let vec123 = (e.into_bytes()).into_boxed_slice();
                                    let ptr123 = vec123.as_ptr().cast::<u8>();
                                    let len123 = vec123.len();
                                    ::core::mem::forget(vec123);
                                    *ptr117
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len123;
                                    *ptr117
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr123.cast_mut();
                                }
                                V128::Unauthorized(e) => {
                                    *ptr117
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (6i32) as u8;
                                    let vec124 = (e.into_bytes()).into_boxed_slice();
                                    let ptr124 = vec124.as_ptr().cast::<u8>();
                                    let len124 = vec124.len();
                                    ::core::mem::forget(vec124);
                                    *ptr117
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len124;
                                    *ptr117
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr124.cast_mut();
                                }
                                V128::RateLimited(e) => {
                                    *ptr117
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (7i32) as u8;
                                    let vec125 = (e.into_bytes()).into_boxed_slice();
                                    let ptr125 = vec125.as_ptr().cast::<u8>();
                                    let len125 = vec125.len();
                                    ::core::mem::forget(vec125);
                                    *ptr117
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len125;
                                    *ptr117
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr125.cast_mut();
                                }
                                V128::ProviderError(e) => {
                                    *ptr117
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (8i32) as u8;
                                    let vec126 = (e.into_bytes()).into_boxed_slice();
                                    let ptr126 = vec126.as_ptr().cast::<u8>();
                                    let len126 = vec126.len();
                                    ::core::mem::forget(vec126);
                                    *ptr117
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len126;
                                    *ptr117
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr126.cast_mut();
                                }
                                V128::ConnectionError(e) => {
                                    *ptr117
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (9i32) as u8;
                                    let vec127 = (e.into_bytes()).into_boxed_slice();
                                    let ptr127 = vec127.as_ptr().cast::<u8>();
                                    let len127 = vec127.len();
                                    ::core::mem::forget(vec127);
                                    *ptr117
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len127;
                                    *ptr117
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr127.cast_mut();
                                }
                            }
                        }
                    };
                    ptr117
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_update_vector<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l1 {
                                0 => {
                                    let l2 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l3 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                }
                                1 => {
                                    let l4 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l5 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                                2 => {
                                    let l6 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l7 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l6, l7, 1);
                                }
                                3 => {
                                    let l8 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l9 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l8, l9, 1);
                                }
                                4 => {
                                    let l10 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l11 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l10, l11, 1);
                                }
                                5 => {
                                    let l12 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l13 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l12, l13, 1);
                                }
                                6 => {
                                    let l14 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l15 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l14, l15, 1);
                                }
                                7 => {
                                    let l16 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l17 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l16, l17, 1);
                                }
                                8 => {
                                    let l18 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l19 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l18, l19, 1);
                                }
                                _ => {
                                    let l20 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l21 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l20, l21, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_delete_vectors_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                    arg4: i32,
                    arg5: *mut u8,
                    arg6: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let base4 = arg2;
                    let len4 = arg3;
                    let mut result4 = _rt::Vec::with_capacity(len4);
                    for i in 0..len4 {
                        let base = base4
                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                        let e4 = {
                            let l1 = *base.add(0).cast::<*mut u8>();
                            let l2 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len3 = l2;
                            let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);
                            _rt::string_lift(bytes3)
                        };
                        result4.push(e4);
                    }
                    _rt::cabi_dealloc(
                        base4,
                        len4 * (2 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result6 = T::delete_vectors(
                        _rt::string_lift(bytes0),
                        result4,
                        match arg4 {
                            0 => None,
                            1 => {
                                let e = {
                                    let len5 = arg6;
                                    let bytes5 = _rt::Vec::from_raw_parts(
                                        arg5.cast(),
                                        len5,
                                        len5,
                                    );
                                    _rt::string_lift(bytes5)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    );
                    let ptr7 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result6 {
                        Ok(e) => {
                            *ptr7.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr7
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<i32>() = _rt::as_i32(e);
                        }
                        Err(e) => {
                            *ptr7.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::golem::vector::types::VectorError as V18;
                            match e {
                                V18::NotFound(e) => {
                                    *ptr7
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                    let vec8 = (e.into_bytes()).into_boxed_slice();
                                    let ptr8 = vec8.as_ptr().cast::<u8>();
                                    let len8 = vec8.len();
                                    ::core::mem::forget(vec8);
                                    *ptr7
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len8;
                                    *ptr7
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr8.cast_mut();
                                }
                                V18::AlreadyExists(e) => {
                                    *ptr7
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec9 = (e.into_bytes()).into_boxed_slice();
                                    let ptr9 = vec9.as_ptr().cast::<u8>();
                                    let len9 = vec9.len();
                                    ::core::mem::forget(vec9);
                                    *ptr7
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len9;
                                    *ptr7
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr9.cast_mut();
                                }
                                V18::InvalidParams(e) => {
                                    *ptr7
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                    let vec10 = (e.into_bytes()).into_boxed_slice();
                                    let ptr10 = vec10.as_ptr().cast::<u8>();
                                    let len10 = vec10.len();
                                    ::core::mem::forget(vec10);
                                    *ptr7
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len10;
                                    *ptr7
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr10.cast_mut();
                                }
                                V18::UnsupportedFeature(e) => {
                                    *ptr7
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                    let vec11 = (e.into_bytes()).into_boxed_slice();
                                    let ptr11 = vec11.as_ptr().cast::<u8>();
                                    let len11 = vec11.len();
                                    ::core::mem::forget(vec11);
                                    *ptr7
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len11;
                                    *ptr7
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr11.cast_mut();
                                }
                                V18::DimensionMismatch(e) => {
                                    *ptr7
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (4i32) as u8;
                                    let vec12 = (e.into_bytes()).into_boxed_slice();
                                    let ptr12 = vec12.as_ptr().cast::<u8>();
                                    let len12 = vec12.len();
                                    ::core::mem::forget(vec12);
                                    *ptr7
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len12;
                                    *ptr7
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr12.cast_mut();
                                }
                                V18::InvalidVector(e) => {
                                    *ptr7
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (5i32) as u8;
                                    let vec13 = (e.into_bytes()).into_boxed_slice();
                                    let ptr13 = vec13.as_ptr().cast::<u8>();
                                    let len13 = vec13.len();
                                    ::core::mem::forget(vec13);
                                    *ptr7
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len13;
                                    *ptr7
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr13.cast_mut();
                                }
                                V18::Unauthorized(e) => {
                                    *ptr7
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (6i32) as u8;
                                    let vec14 = (e.into_bytes()).into_boxed_slice();
                                    let ptr14 = vec14.as_ptr().cast::<u8>();
                                    let len14 = vec14.len();
                                    ::core::mem::forget(vec14);
                                    *ptr7
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len14;
                                    *ptr7
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr14.cast_mut();
                                }
                                V18::RateLimited(e) => {
                                    *ptr7
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (7i32) as u8;
                                    let vec15 = (e.into_bytes()).into_boxed_slice();
                                    let ptr15 = vec15.as_ptr().cast::<u8>();
                                    let len15 = vec15.len();
                                    ::core::mem::forget(vec15);
                                    *ptr7
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len15;
                                    *ptr7
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr15.cast_mut();
                                }
                                V18::ProviderError(e) => {
                                    *ptr7
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (8i32) as u8;
                                    let vec16 = (e.into_bytes()).into_boxed_slice();
                                    let ptr16 = vec16.as_ptr().cast::<u8>();
                                    let len16 = vec16.len();
                                    ::core::mem::forget(vec16);
                                    *ptr7
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len16;
                                    *ptr7
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr16.cast_mut();
                                }
                                V18::ConnectionError(e) => {
                                    *ptr7
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (9i32) as u8;
                                    let vec17 = (e.into_bytes()).into_boxed_slice();
                                    let ptr17 = vec17.as_ptr().cast::<u8>();
                                    let len17 = vec17.len();
                                    ::core::mem::forget(vec17);
                                    *ptr7
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len17;
                                    *ptr7
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr17.cast_mut();
                                }
                            }
                        }
                    };
                    ptr7
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_delete_vectors<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l1 {
                                0 => {
                                    let l2 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l3 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                }
                                1 => {
                                    let l4 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l5 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                                2 => {
                                    let l6 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l7 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l6, l7, 1);
                                }
                                3 => {
                                    let l8 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l9 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l8, l9, 1);
                                }
                                4 => {
                                    let l10 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l11 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l10, l11, 1);
                                }
                                5 => {
                                    let l12 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l13 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l12, l13, 1);
                                }
                                6 => {
                                    let l14 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l15 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l14, l15, 1);
                                }
                                7 => {
                                    let l16 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l17 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l16, l17, 1);
                                }
                                8 => {
                                    let l18 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l19 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l18, l19, 1);
                                }
                                _ => {
                                    let l20 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l21 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l20, l21, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_delete_by_filter_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                    arg4: i32,
                    arg5: i32,
                    arg6: *mut u8,
                    arg7: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let base69 = arg2;
                    let len69 = arg3;
                    let mut result69 = _rt::Vec::with_capacity(len69);
                    for i in 0..len69 {
                        let base = base69
                            .add(i * (48 + 4 * ::core::mem::size_of::<*const u8>()));
                        let e69 = {
                            let l1 = *base.add(0).cast::<i32>();
                            let l2 = i32::from(*base.add(4).cast::<u8>());
                            use super::super::super::super::golem::vector::types::FilterOp as V3;
                            let v3 = match l2 {
                                0 => V3::Condition,
                                1 => V3::And,
                                2 => V3::Or,
                                n => {
                                    debug_assert_eq!(n, 3, "invalid enum discriminant");
                                    V3::Not
                                }
                            };
                            let l4 = i32::from(*base.add(8).cast::<u8>());
                            let l66 = *base
                                .add(48 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l67 = *base
                                .add(48 + 3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len68 = l67;
                            super::super::super::super::golem::vector::types::FilterNode {
                                id: l1 as u32,
                                op: v3,
                                condition: match l4 {
                                    0 => None,
                                    1 => {
                                        let e = {
                                            let l5 = *base.add(16).cast::<*mut u8>();
                                            let l6 = *base
                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len7 = l6;
                                            let bytes7 = _rt::Vec::from_raw_parts(
                                                l5.cast(),
                                                len7,
                                                len7,
                                            );
                                            let l8 = i32::from(
                                                *base
                                                    .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            let l9 = i32::from(
                                                *base
                                                    .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            use super::super::super::super::golem::vector::types::FlatMetadataValue as V65;
                                            let v65 = match l9 {
                                                0 => {
                                                    let e65 = {
                                                        let l10 = *base
                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l11 = *base
                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len12 = l11;
                                                        let bytes12 = _rt::Vec::from_raw_parts(
                                                            l10.cast(),
                                                            len12,
                                                            len12,
                                                        );
                                                        _rt::string_lift(bytes12)
                                                    };
                                                    V65::StringVal(e65)
                                                }
                                                1 => {
                                                    let e65 = {
                                                        let l13 = *base
                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<f64>();
                                                        l13
                                                    };
                                                    V65::NumberVal(e65)
                                                }
                                                2 => {
                                                    let e65 = {
                                                        let l14 = *base
                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i64>();
                                                        l14
                                                    };
                                                    V65::IntegerVal(e65)
                                                }
                                                3 => {
                                                    let e65 = {
                                                        let l15 = i32::from(
                                                            *base
                                                                .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        _rt::bool_lift(l15 as u8)
                                                    };
                                                    V65::BooleanVal(e65)
                                                }
                                                4 => {
                                                    let e65 = {
                                                        let l16 = *base
                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l17 = *base
                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base34 = l16;
                                                        let len34 = l17;
                                                        let mut result34 = _rt::Vec::with_capacity(len34);
                                                        for i in 0..len34 {
                                                            let base = base34.add(i * 24);
                                                            let e34 = {
                                                                let l18 = i32::from(*base.add(0).cast::<u8>());
                                                                use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V33;
                                                                let v33 = match l18 {
                                                                    0 => {
                                                                        let e33 = {
                                                                            let l19 = *base.add(8).cast::<*mut u8>();
                                                                            let l20 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len21 = l20;
                                                                            let bytes21 = _rt::Vec::from_raw_parts(
                                                                                l19.cast(),
                                                                                len21,
                                                                                len21,
                                                                            );
                                                                            _rt::string_lift(bytes21)
                                                                        };
                                                                        V33::StringVal(e33)
                                                                    }
                                                                    1 => {
                                                                        let e33 = {
                                                                            let l22 = *base.add(8).cast::<f64>();
                                                                            l22
                                                                        };
                                                                        V33::NumberVal(e33)
                                                                    }
                                                                    2 => {
                                                                        let e33 = {
                                                                            let l23 = *base.add(8).cast::<i64>();
                                                                            l23
                                                                        };
                                                                        V33::IntegerVal(e33)
                                                                    }
                                                                    3 => {
                                                                        let e33 = {
                                                                            let l24 = i32::from(*base.add(8).cast::<u8>());
                                                                            _rt::bool_lift(l24 as u8)
                                                                        };
                                                                        V33::BooleanVal(e33)
                                                                    }
                                                                    4 => V33::NullVal,
                                                                    5 => {
                                                                        let e33 = {
                                                                            let l25 = *base.add(8).cast::<*mut u8>();
                                                                            let l26 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len27 = l26;
                                                                            let bytes27 = _rt::Vec::from_raw_parts(
                                                                                l25.cast(),
                                                                                len27,
                                                                                len27,
                                                                            );
                                                                            _rt::string_lift(bytes27)
                                                                        };
                                                                        V33::DatetimeVal(e33)
                                                                    }
                                                                    6 => {
                                                                        let e33 = {
                                                                            let l28 = *base.add(8).cast::<f64>();
                                                                            let l29 = *base.add(16).cast::<f64>();
                                                                            super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                                latitude: l28,
                                                                                longitude: l29,
                                                                            }
                                                                        };
                                                                        V33::GeoVal(e33)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 7, "invalid enum discriminant");
                                                                        let e33 = {
                                                                            let l30 = *base.add(8).cast::<*mut u8>();
                                                                            let l31 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len32 = l31;
                                                                            _rt::Vec::from_raw_parts(l30.cast(), len32, len32)
                                                                        };
                                                                        V33::BlobVal(e33)
                                                                    }
                                                                };
                                                                v33
                                                            };
                                                            result34.push(e34);
                                                        }
                                                        _rt::cabi_dealloc(base34, len34 * 24, 8);
                                                        result34
                                                    };
                                                    V65::ArrayVal(e65)
                                                }
                                                5 => {
                                                    let e65 = {
                                                        let l35 = *base
                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l36 = *base
                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base56 = l35;
                                                        let len56 = l36;
                                                        let mut result56 = _rt::Vec::with_capacity(len56);
                                                        for i in 0..len56 {
                                                            let base = base56
                                                                .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                            let e56 = {
                                                                let l37 = *base.add(0).cast::<*mut u8>();
                                                                let l38 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len39 = l38;
                                                                let bytes39 = _rt::Vec::from_raw_parts(
                                                                    l37.cast(),
                                                                    len39,
                                                                    len39,
                                                                );
                                                                let l40 = i32::from(
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V55;
                                                                let v55 = match l40 {
                                                                    0 => {
                                                                        let e55 = {
                                                                            let l41 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l42 = *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len43 = l42;
                                                                            let bytes43 = _rt::Vec::from_raw_parts(
                                                                                l41.cast(),
                                                                                len43,
                                                                                len43,
                                                                            );
                                                                            _rt::string_lift(bytes43)
                                                                        };
                                                                        V55::StringVal(e55)
                                                                    }
                                                                    1 => {
                                                                        let e55 = {
                                                                            let l44 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<f64>();
                                                                            l44
                                                                        };
                                                                        V55::NumberVal(e55)
                                                                    }
                                                                    2 => {
                                                                        let e55 = {
                                                                            let l45 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i64>();
                                                                            l45
                                                                        };
                                                                        V55::IntegerVal(e55)
                                                                    }
                                                                    3 => {
                                                                        let e55 = {
                                                                            let l46 = i32::from(
                                                                                *base
                                                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            _rt::bool_lift(l46 as u8)
                                                                        };
                                                                        V55::BooleanVal(e55)
                                                                    }
                                                                    4 => V55::NullVal,
                                                                    5 => {
                                                                        let e55 = {
                                                                            let l47 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l48 = *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len49 = l48;
                                                                            let bytes49 = _rt::Vec::from_raw_parts(
                                                                                l47.cast(),
                                                                                len49,
                                                                                len49,
                                                                            );
                                                                            _rt::string_lift(bytes49)
                                                                        };
                                                                        V55::DatetimeVal(e55)
                                                                    }
                                                                    6 => {
                                                                        let e55 = {
                                                                            let l50 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<f64>();
                                                                            let l51 = *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<f64>();
                                                                            super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                                latitude: l50,
                                                                                longitude: l51,
                                                                            }
                                                                        };
                                                                        V55::GeoVal(e55)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 7, "invalid enum discriminant");
                                                                        let e55 = {
                                                                            let l52 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l53 = *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len54 = l53;
                                                                            _rt::Vec::from_raw_parts(l52.cast(), len54, len54)
                                                                        };
                                                                        V55::BlobVal(e55)
                                                                    }
                                                                };
                                                                (_rt::string_lift(bytes39), v55)
                                                            };
                                                            result56.push(e56);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base56,
                                                            len56 * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                            8,
                                                        );
                                                        result56
                                                    };
                                                    V65::ObjectVal(e65)
                                                }
                                                6 => V65::NullVal,
                                                7 => {
                                                    let e65 = {
                                                        let l57 = *base
                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<f64>();
                                                        let l58 = *base
                                                            .add(40 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<f64>();
                                                        super::super::super::super::golem::vector::types::GeoCoordinates {
                                                            latitude: l57,
                                                            longitude: l58,
                                                        }
                                                    };
                                                    V65::GeoVal(e65)
                                                }
                                                8 => {
                                                    let e65 = {
                                                        let l59 = *base
                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l60 = *base
                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len61 = l60;
                                                        let bytes61 = _rt::Vec::from_raw_parts(
                                                            l59.cast(),
                                                            len61,
                                                            len61,
                                                        );
                                                        _rt::string_lift(bytes61)
                                                    };
                                                    V65::DatetimeVal(e65)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 9, "invalid enum discriminant");
                                                    let e65 = {
                                                        let l62 = *base
                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l63 = *base
                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len64 = l63;
                                                        _rt::Vec::from_raw_parts(l62.cast(), len64, len64)
                                                    };
                                                    V65::BlobVal(e65)
                                                }
                                            };
                                            super::super::super::super::golem::vector::types::FilterCondition {
                                                field: _rt::string_lift(bytes7),
                                                operator: super::super::super::super::golem::vector::types::FilterOperator::_lift(
                                                    l8 as u8,
                                                ),
                                                value: v65,
                                            }
                                        };
                                        Some(e)
                                    }
                                    _ => _rt::invalid_enum_discriminant(),
                                },
                                inputs: _rt::Vec::from_raw_parts(l66.cast(), len68, len68),
                            }
                        };
                        result69.push(e69);
                    }
                    _rt::cabi_dealloc(
                        base69,
                        len69 * (48 + 4 * ::core::mem::size_of::<*const u8>()),
                        8,
                    );
                    let result71 = T::delete_by_filter(
                        _rt::string_lift(bytes0),
                        super::super::super::super::golem::vector::types::FilterExpression {
                            nodes: result69,
                            root_id: arg4 as u32,
                        },
                        match arg5 {
                            0 => None,
                            1 => {
                                let e = {
                                    let len70 = arg7;
                                    let bytes70 = _rt::Vec::from_raw_parts(
                                        arg6.cast(),
                                        len70,
                                        len70,
                                    );
                                    _rt::string_lift(bytes70)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    );
                    let ptr72 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result71 {
                        Ok(e) => {
                            *ptr72.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr72
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<i32>() = _rt::as_i32(e);
                        }
                        Err(e) => {
                            *ptr72.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::golem::vector::types::VectorError as V83;
                            match e {
                                V83::NotFound(e) => {
                                    *ptr72
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                    let vec73 = (e.into_bytes()).into_boxed_slice();
                                    let ptr73 = vec73.as_ptr().cast::<u8>();
                                    let len73 = vec73.len();
                                    ::core::mem::forget(vec73);
                                    *ptr72
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len73;
                                    *ptr72
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr73.cast_mut();
                                }
                                V83::AlreadyExists(e) => {
                                    *ptr72
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec74 = (e.into_bytes()).into_boxed_slice();
                                    let ptr74 = vec74.as_ptr().cast::<u8>();
                                    let len74 = vec74.len();
                                    ::core::mem::forget(vec74);
                                    *ptr72
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len74;
                                    *ptr72
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr74.cast_mut();
                                }
                                V83::InvalidParams(e) => {
                                    *ptr72
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                    let vec75 = (e.into_bytes()).into_boxed_slice();
                                    let ptr75 = vec75.as_ptr().cast::<u8>();
                                    let len75 = vec75.len();
                                    ::core::mem::forget(vec75);
                                    *ptr72
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len75;
                                    *ptr72
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr75.cast_mut();
                                }
                                V83::UnsupportedFeature(e) => {
                                    *ptr72
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                    let vec76 = (e.into_bytes()).into_boxed_slice();
                                    let ptr76 = vec76.as_ptr().cast::<u8>();
                                    let len76 = vec76.len();
                                    ::core::mem::forget(vec76);
                                    *ptr72
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len76;
                                    *ptr72
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr76.cast_mut();
                                }
                                V83::DimensionMismatch(e) => {
                                    *ptr72
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (4i32) as u8;
                                    let vec77 = (e.into_bytes()).into_boxed_slice();
                                    let ptr77 = vec77.as_ptr().cast::<u8>();
                                    let len77 = vec77.len();
                                    ::core::mem::forget(vec77);
                                    *ptr72
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len77;
                                    *ptr72
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr77.cast_mut();
                                }
                                V83::InvalidVector(e) => {
                                    *ptr72
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (5i32) as u8;
                                    let vec78 = (e.into_bytes()).into_boxed_slice();
                                    let ptr78 = vec78.as_ptr().cast::<u8>();
                                    let len78 = vec78.len();
                                    ::core::mem::forget(vec78);
                                    *ptr72
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len78;
                                    *ptr72
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr78.cast_mut();
                                }
                                V83::Unauthorized(e) => {
                                    *ptr72
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (6i32) as u8;
                                    let vec79 = (e.into_bytes()).into_boxed_slice();
                                    let ptr79 = vec79.as_ptr().cast::<u8>();
                                    let len79 = vec79.len();
                                    ::core::mem::forget(vec79);
                                    *ptr72
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len79;
                                    *ptr72
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr79.cast_mut();
                                }
                                V83::RateLimited(e) => {
                                    *ptr72
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (7i32) as u8;
                                    let vec80 = (e.into_bytes()).into_boxed_slice();
                                    let ptr80 = vec80.as_ptr().cast::<u8>();
                                    let len80 = vec80.len();
                                    ::core::mem::forget(vec80);
                                    *ptr72
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len80;
                                    *ptr72
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr80.cast_mut();
                                }
                                V83::ProviderError(e) => {
                                    *ptr72
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (8i32) as u8;
                                    let vec81 = (e.into_bytes()).into_boxed_slice();
                                    let ptr81 = vec81.as_ptr().cast::<u8>();
                                    let len81 = vec81.len();
                                    ::core::mem::forget(vec81);
                                    *ptr72
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len81;
                                    *ptr72
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr81.cast_mut();
                                }
                                V83::ConnectionError(e) => {
                                    *ptr72
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (9i32) as u8;
                                    let vec82 = (e.into_bytes()).into_boxed_slice();
                                    let ptr82 = vec82.as_ptr().cast::<u8>();
                                    let len82 = vec82.len();
                                    ::core::mem::forget(vec82);
                                    *ptr72
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len82;
                                    *ptr72
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr82.cast_mut();
                                }
                            }
                        }
                    };
                    ptr72
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_delete_by_filter<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l1 {
                                0 => {
                                    let l2 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l3 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                }
                                1 => {
                                    let l4 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l5 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                                2 => {
                                    let l6 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l7 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l6, l7, 1);
                                }
                                3 => {
                                    let l8 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l9 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l8, l9, 1);
                                }
                                4 => {
                                    let l10 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l11 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l10, l11, 1);
                                }
                                5 => {
                                    let l12 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l13 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l12, l13, 1);
                                }
                                6 => {
                                    let l14 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l15 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l14, l15, 1);
                                }
                                7 => {
                                    let l16 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l17 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l16, l17, 1);
                                }
                                8 => {
                                    let l18 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l19 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l18, l19, 1);
                                }
                                _ => {
                                    let l20 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l21 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l20, l21, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_delete_namespace_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let len1 = arg3;
                    let bytes1 = _rt::Vec::from_raw_parts(arg2.cast(), len1, len1);
                    let result2 = T::delete_namespace(
                        _rt::string_lift(bytes0),
                        _rt::string_lift(bytes1),
                    );
                    let ptr3 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result2 {
                        Ok(e) => {
                            *ptr3.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr3
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<i32>() = _rt::as_i32(e);
                        }
                        Err(e) => {
                            *ptr3.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::golem::vector::types::VectorError as V14;
                            match e {
                                V14::NotFound(e) => {
                                    *ptr3
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                    let vec4 = (e.into_bytes()).into_boxed_slice();
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    ::core::mem::forget(vec4);
                                    *ptr3
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len4;
                                    *ptr3
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr4.cast_mut();
                                }
                                V14::AlreadyExists(e) => {
                                    *ptr3
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec5 = (e.into_bytes()).into_boxed_slice();
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    ::core::mem::forget(vec5);
                                    *ptr3
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len5;
                                    *ptr3
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr5.cast_mut();
                                }
                                V14::InvalidParams(e) => {
                                    *ptr3
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                    let vec6 = (e.into_bytes()).into_boxed_slice();
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    ::core::mem::forget(vec6);
                                    *ptr3
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len6;
                                    *ptr3
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr6.cast_mut();
                                }
                                V14::UnsupportedFeature(e) => {
                                    *ptr3
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                    let vec7 = (e.into_bytes()).into_boxed_slice();
                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                    let len7 = vec7.len();
                                    ::core::mem::forget(vec7);
                                    *ptr3
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len7;
                                    *ptr3
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr7.cast_mut();
                                }
                                V14::DimensionMismatch(e) => {
                                    *ptr3
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (4i32) as u8;
                                    let vec8 = (e.into_bytes()).into_boxed_slice();
                                    let ptr8 = vec8.as_ptr().cast::<u8>();
                                    let len8 = vec8.len();
                                    ::core::mem::forget(vec8);
                                    *ptr3
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len8;
                                    *ptr3
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr8.cast_mut();
                                }
                                V14::InvalidVector(e) => {
                                    *ptr3
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (5i32) as u8;
                                    let vec9 = (e.into_bytes()).into_boxed_slice();
                                    let ptr9 = vec9.as_ptr().cast::<u8>();
                                    let len9 = vec9.len();
                                    ::core::mem::forget(vec9);
                                    *ptr3
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len9;
                                    *ptr3
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr9.cast_mut();
                                }
                                V14::Unauthorized(e) => {
                                    *ptr3
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (6i32) as u8;
                                    let vec10 = (e.into_bytes()).into_boxed_slice();
                                    let ptr10 = vec10.as_ptr().cast::<u8>();
                                    let len10 = vec10.len();
                                    ::core::mem::forget(vec10);
                                    *ptr3
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len10;
                                    *ptr3
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr10.cast_mut();
                                }
                                V14::RateLimited(e) => {
                                    *ptr3
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (7i32) as u8;
                                    let vec11 = (e.into_bytes()).into_boxed_slice();
                                    let ptr11 = vec11.as_ptr().cast::<u8>();
                                    let len11 = vec11.len();
                                    ::core::mem::forget(vec11);
                                    *ptr3
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len11;
                                    *ptr3
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr11.cast_mut();
                                }
                                V14::ProviderError(e) => {
                                    *ptr3
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (8i32) as u8;
                                    let vec12 = (e.into_bytes()).into_boxed_slice();
                                    let ptr12 = vec12.as_ptr().cast::<u8>();
                                    let len12 = vec12.len();
                                    ::core::mem::forget(vec12);
                                    *ptr3
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len12;
                                    *ptr3
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr12.cast_mut();
                                }
                                V14::ConnectionError(e) => {
                                    *ptr3
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (9i32) as u8;
                                    let vec13 = (e.into_bytes()).into_boxed_slice();
                                    let ptr13 = vec13.as_ptr().cast::<u8>();
                                    let len13 = vec13.len();
                                    ::core::mem::forget(vec13);
                                    *ptr3
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len13;
                                    *ptr3
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr13.cast_mut();
                                }
                            }
                        }
                    };
                    ptr3
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_delete_namespace<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l1 {
                                0 => {
                                    let l2 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l3 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                }
                                1 => {
                                    let l4 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l5 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                                2 => {
                                    let l6 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l7 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l6, l7, 1);
                                }
                                3 => {
                                    let l8 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l9 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l8, l9, 1);
                                }
                                4 => {
                                    let l10 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l11 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l10, l11, 1);
                                }
                                5 => {
                                    let l12 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l13 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l12, l13, 1);
                                }
                                6 => {
                                    let l14 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l15 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l14, l15, 1);
                                }
                                7 => {
                                    let l16 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l17 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l16, l17, 1);
                                }
                                8 => {
                                    let l18 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l19 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l18, l19, 1);
                                }
                                _ => {
                                    let l20 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l21 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l20, l21, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_list_vectors_cabi<T: Guest>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len2 = l1;
                    let bytes2 = _rt::Vec::from_raw_parts(l0.cast(), len2, len2);
                    let l3 = i32::from(
                        *arg0.add(2 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    let l7 = i32::from(
                        *arg0.add(5 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    let l80 = i32::from(
                        *arg0.add(9 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    let l82 = i32::from(
                        *arg0
                            .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    let l86 = i32::from(
                        *arg0
                            .add(8 + 12 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    let l88 = i32::from(
                        *arg0
                            .add(10 + 12 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    let result90 = T::list_vectors(
                        _rt::string_lift(bytes2),
                        match l3 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l4 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l5 = *arg0
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let len6 = l5;
                                    let bytes6 = _rt::Vec::from_raw_parts(
                                        l4.cast(),
                                        len6,
                                        len6,
                                    );
                                    _rt::string_lift(bytes6)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        match l7 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l8 = *arg0
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l9 = *arg0
                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base78 = l8;
                                    let len78 = l9;
                                    let mut result78 = _rt::Vec::with_capacity(len78);
                                    for i in 0..len78 {
                                        let base = base78
                                            .add(i * (48 + 4 * ::core::mem::size_of::<*const u8>()));
                                        let e78 = {
                                            let l10 = *base.add(0).cast::<i32>();
                                            let l11 = i32::from(*base.add(4).cast::<u8>());
                                            use super::super::super::super::golem::vector::types::FilterOp as V12;
                                            let v12 = match l11 {
                                                0 => V12::Condition,
                                                1 => V12::And,
                                                2 => V12::Or,
                                                n => {
                                                    debug_assert_eq!(n, 3, "invalid enum discriminant");
                                                    V12::Not
                                                }
                                            };
                                            let l13 = i32::from(*base.add(8).cast::<u8>());
                                            let l75 = *base
                                                .add(48 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l76 = *base
                                                .add(48 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len77 = l76;
                                            super::super::super::super::golem::vector::types::FilterNode {
                                                id: l10 as u32,
                                                op: v12,
                                                condition: match l13 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l14 = *base.add(16).cast::<*mut u8>();
                                                            let l15 = *base
                                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len16 = l15;
                                                            let bytes16 = _rt::Vec::from_raw_parts(
                                                                l14.cast(),
                                                                len16,
                                                                len16,
                                                            );
                                                            let l17 = i32::from(
                                                                *base
                                                                    .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            let l18 = i32::from(
                                                                *base
                                                                    .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            use super::super::super::super::golem::vector::types::FlatMetadataValue as V74;
                                                            let v74 = match l18 {
                                                                0 => {
                                                                    let e74 = {
                                                                        let l19 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l20 = *base
                                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len21 = l20;
                                                                        let bytes21 = _rt::Vec::from_raw_parts(
                                                                            l19.cast(),
                                                                            len21,
                                                                            len21,
                                                                        );
                                                                        _rt::string_lift(bytes21)
                                                                    };
                                                                    V74::StringVal(e74)
                                                                }
                                                                1 => {
                                                                    let e74 = {
                                                                        let l22 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<f64>();
                                                                        l22
                                                                    };
                                                                    V74::NumberVal(e74)
                                                                }
                                                                2 => {
                                                                    let e74 = {
                                                                        let l23 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<i64>();
                                                                        l23
                                                                    };
                                                                    V74::IntegerVal(e74)
                                                                }
                                                                3 => {
                                                                    let e74 = {
                                                                        let l24 = i32::from(
                                                                            *base
                                                                                .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>(),
                                                                        );
                                                                        _rt::bool_lift(l24 as u8)
                                                                    };
                                                                    V74::BooleanVal(e74)
                                                                }
                                                                4 => {
                                                                    let e74 = {
                                                                        let l25 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l26 = *base
                                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let base43 = l25;
                                                                        let len43 = l26;
                                                                        let mut result43 = _rt::Vec::with_capacity(len43);
                                                                        for i in 0..len43 {
                                                                            let base = base43.add(i * 24);
                                                                            let e43 = {
                                                                                let l27 = i32::from(*base.add(0).cast::<u8>());
                                                                                use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V42;
                                                                                let v42 = match l27 {
                                                                                    0 => {
                                                                                        let e42 = {
                                                                                            let l28 = *base.add(8).cast::<*mut u8>();
                                                                                            let l29 = *base
                                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len30 = l29;
                                                                                            let bytes30 = _rt::Vec::from_raw_parts(
                                                                                                l28.cast(),
                                                                                                len30,
                                                                                                len30,
                                                                                            );
                                                                                            _rt::string_lift(bytes30)
                                                                                        };
                                                                                        V42::StringVal(e42)
                                                                                    }
                                                                                    1 => {
                                                                                        let e42 = {
                                                                                            let l31 = *base.add(8).cast::<f64>();
                                                                                            l31
                                                                                        };
                                                                                        V42::NumberVal(e42)
                                                                                    }
                                                                                    2 => {
                                                                                        let e42 = {
                                                                                            let l32 = *base.add(8).cast::<i64>();
                                                                                            l32
                                                                                        };
                                                                                        V42::IntegerVal(e42)
                                                                                    }
                                                                                    3 => {
                                                                                        let e42 = {
                                                                                            let l33 = i32::from(*base.add(8).cast::<u8>());
                                                                                            _rt::bool_lift(l33 as u8)
                                                                                        };
                                                                                        V42::BooleanVal(e42)
                                                                                    }
                                                                                    4 => V42::NullVal,
                                                                                    5 => {
                                                                                        let e42 = {
                                                                                            let l34 = *base.add(8).cast::<*mut u8>();
                                                                                            let l35 = *base
                                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len36 = l35;
                                                                                            let bytes36 = _rt::Vec::from_raw_parts(
                                                                                                l34.cast(),
                                                                                                len36,
                                                                                                len36,
                                                                                            );
                                                                                            _rt::string_lift(bytes36)
                                                                                        };
                                                                                        V42::DatetimeVal(e42)
                                                                                    }
                                                                                    6 => {
                                                                                        let e42 = {
                                                                                            let l37 = *base.add(8).cast::<f64>();
                                                                                            let l38 = *base.add(16).cast::<f64>();
                                                                                            super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                                                latitude: l37,
                                                                                                longitude: l38,
                                                                                            }
                                                                                        };
                                                                                        V42::GeoVal(e42)
                                                                                    }
                                                                                    n => {
                                                                                        debug_assert_eq!(n, 7, "invalid enum discriminant");
                                                                                        let e42 = {
                                                                                            let l39 = *base.add(8).cast::<*mut u8>();
                                                                                            let l40 = *base
                                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len41 = l40;
                                                                                            _rt::Vec::from_raw_parts(l39.cast(), len41, len41)
                                                                                        };
                                                                                        V42::BlobVal(e42)
                                                                                    }
                                                                                };
                                                                                v42
                                                                            };
                                                                            result43.push(e43);
                                                                        }
                                                                        _rt::cabi_dealloc(base43, len43 * 24, 8);
                                                                        result43
                                                                    };
                                                                    V74::ArrayVal(e74)
                                                                }
                                                                5 => {
                                                                    let e74 = {
                                                                        let l44 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l45 = *base
                                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let base65 = l44;
                                                                        let len65 = l45;
                                                                        let mut result65 = _rt::Vec::with_capacity(len65);
                                                                        for i in 0..len65 {
                                                                            let base = base65
                                                                                .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                            let e65 = {
                                                                                let l46 = *base.add(0).cast::<*mut u8>();
                                                                                let l47 = *base
                                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len48 = l47;
                                                                                let bytes48 = _rt::Vec::from_raw_parts(
                                                                                    l46.cast(),
                                                                                    len48,
                                                                                    len48,
                                                                                );
                                                                                let l49 = i32::from(
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>(),
                                                                                );
                                                                                use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V64;
                                                                                let v64 = match l49 {
                                                                                    0 => {
                                                                                        let e64 = {
                                                                                            let l50 = *base
                                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<*mut u8>();
                                                                                            let l51 = *base
                                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len52 = l51;
                                                                                            let bytes52 = _rt::Vec::from_raw_parts(
                                                                                                l50.cast(),
                                                                                                len52,
                                                                                                len52,
                                                                                            );
                                                                                            _rt::string_lift(bytes52)
                                                                                        };
                                                                                        V64::StringVal(e64)
                                                                                    }
                                                                                    1 => {
                                                                                        let e64 = {
                                                                                            let l53 = *base
                                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<f64>();
                                                                                            l53
                                                                                        };
                                                                                        V64::NumberVal(e64)
                                                                                    }
                                                                                    2 => {
                                                                                        let e64 = {
                                                                                            let l54 = *base
                                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<i64>();
                                                                                            l54
                                                                                        };
                                                                                        V64::IntegerVal(e64)
                                                                                    }
                                                                                    3 => {
                                                                                        let e64 = {
                                                                                            let l55 = i32::from(
                                                                                                *base
                                                                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                    .cast::<u8>(),
                                                                                            );
                                                                                            _rt::bool_lift(l55 as u8)
                                                                                        };
                                                                                        V64::BooleanVal(e64)
                                                                                    }
                                                                                    4 => V64::NullVal,
                                                                                    5 => {
                                                                                        let e64 = {
                                                                                            let l56 = *base
                                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<*mut u8>();
                                                                                            let l57 = *base
                                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len58 = l57;
                                                                                            let bytes58 = _rt::Vec::from_raw_parts(
                                                                                                l56.cast(),
                                                                                                len58,
                                                                                                len58,
                                                                                            );
                                                                                            _rt::string_lift(bytes58)
                                                                                        };
                                                                                        V64::DatetimeVal(e64)
                                                                                    }
                                                                                    6 => {
                                                                                        let e64 = {
                                                                                            let l59 = *base
                                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<f64>();
                                                                                            let l60 = *base
                                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<f64>();
                                                                                            super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                                                latitude: l59,
                                                                                                longitude: l60,
                                                                                            }
                                                                                        };
                                                                                        V64::GeoVal(e64)
                                                                                    }
                                                                                    n => {
                                                                                        debug_assert_eq!(n, 7, "invalid enum discriminant");
                                                                                        let e64 = {
                                                                                            let l61 = *base
                                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<*mut u8>();
                                                                                            let l62 = *base
                                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len63 = l62;
                                                                                            _rt::Vec::from_raw_parts(l61.cast(), len63, len63)
                                                                                        };
                                                                                        V64::BlobVal(e64)
                                                                                    }
                                                                                };
                                                                                (_rt::string_lift(bytes48), v64)
                                                                            };
                                                                            result65.push(e65);
                                                                        }
                                                                        _rt::cabi_dealloc(
                                                                            base65,
                                                                            len65 * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                            8,
                                                                        );
                                                                        result65
                                                                    };
                                                                    V74::ObjectVal(e74)
                                                                }
                                                                6 => V74::NullVal,
                                                                7 => {
                                                                    let e74 = {
                                                                        let l66 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<f64>();
                                                                        let l67 = *base
                                                                            .add(40 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<f64>();
                                                                        super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                            latitude: l66,
                                                                            longitude: l67,
                                                                        }
                                                                    };
                                                                    V74::GeoVal(e74)
                                                                }
                                                                8 => {
                                                                    let e74 = {
                                                                        let l68 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l69 = *base
                                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len70 = l69;
                                                                        let bytes70 = _rt::Vec::from_raw_parts(
                                                                            l68.cast(),
                                                                            len70,
                                                                            len70,
                                                                        );
                                                                        _rt::string_lift(bytes70)
                                                                    };
                                                                    V74::DatetimeVal(e74)
                                                                }
                                                                n => {
                                                                    debug_assert_eq!(n, 9, "invalid enum discriminant");
                                                                    let e74 = {
                                                                        let l71 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l72 = *base
                                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len73 = l72;
                                                                        _rt::Vec::from_raw_parts(l71.cast(), len73, len73)
                                                                    };
                                                                    V74::BlobVal(e74)
                                                                }
                                                            };
                                                            super::super::super::super::golem::vector::types::FilterCondition {
                                                                field: _rt::string_lift(bytes16),
                                                                operator: super::super::super::super::golem::vector::types::FilterOperator::_lift(
                                                                    l17 as u8,
                                                                ),
                                                                value: v74,
                                                            }
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                                inputs: _rt::Vec::from_raw_parts(l75.cast(), len77, len77),
                                            }
                                        };
                                        result78.push(e78);
                                    }
                                    _rt::cabi_dealloc(
                                        base78,
                                        len78 * (48 + 4 * ::core::mem::size_of::<*const u8>()),
                                        8,
                                    );
                                    let l79 = *arg0
                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i32>();
                                    super::super::super::super::golem::vector::types::FilterExpression {
                                        nodes: result78,
                                        root_id: l79 as u32,
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        match l80 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l81 = *arg0
                                        .add(4 + 9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i32>();
                                    l81 as u32
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        match l82 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l83 = *arg0
                                        .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l84 = *arg0
                                        .add(8 + 11 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let len85 = l84;
                                    let bytes85 = _rt::Vec::from_raw_parts(
                                        l83.cast(),
                                        len85,
                                        len85,
                                    );
                                    _rt::string_lift(bytes85)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        match l86 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l87 = i32::from(
                                        *arg0
                                            .add(9 + 12 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    _rt::bool_lift(l87 as u8)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        match l88 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l89 = i32::from(
                                        *arg0
                                            .add(11 + 12 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    _rt::bool_lift(l89 as u8)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    );
                    _rt::cabi_dealloc(
                        arg0,
                        8 + 13 * ::core::mem::size_of::<*const u8>(),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let ptr91 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result90 {
                        Ok(e) => {
                            *ptr91.add(0).cast::<u8>() = (0i32) as u8;
                            let ListResponse {
                                vectors: vectors92,
                                next_cursor: next_cursor92,
                                total_count: total_count92,
                            } = e;
                            let vec135 = vectors92;
                            let len135 = vec135.len();
                            let layout135 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec135.len() * (13 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result135 = if layout135.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout135).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout135);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec135.into_iter().enumerate() {
                                let base = result135
                                    .add(i * (13 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let super::super::super::super::golem::vector::types::VectorRecord {
                                        id: id93,
                                        vector: vector93,
                                        metadata: metadata93,
                                    } = e;
                                    let vec94 = (id93.into_bytes()).into_boxed_slice();
                                    let ptr94 = vec94.as_ptr().cast::<u8>();
                                    let len94 = vec94.len();
                                    ::core::mem::forget(vec94);
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len94;
                                    *base.add(0).cast::<*mut u8>() = ptr94.cast_mut();
                                    use super::super::super::super::golem::vector::types::VectorData as V112;
                                    match vector93 {
                                        V112::Dense(e) => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                            let vec95 = (e).into_boxed_slice();
                                            let ptr95 = vec95.as_ptr().cast::<u8>();
                                            let len95 = vec95.len();
                                            ::core::mem::forget(vec95);
                                            *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len95;
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr95.cast_mut();
                                        }
                                        V112::Sparse(e) => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let super::super::super::super::golem::vector::types::SparseVector {
                                                indices: indices96,
                                                values: values96,
                                                total_dimensions: total_dimensions96,
                                            } = e;
                                            let vec97 = (indices96).into_boxed_slice();
                                            let ptr97 = vec97.as_ptr().cast::<u8>();
                                            let len97 = vec97.len();
                                            ::core::mem::forget(vec97);
                                            *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len97;
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr97.cast_mut();
                                            let vec98 = (values96).into_boxed_slice();
                                            let ptr98 = vec98.as_ptr().cast::<u8>();
                                            let len98 = vec98.len();
                                            ::core::mem::forget(vec98);
                                            *base
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len98;
                                            *base
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr98.cast_mut();
                                            *base
                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>() = _rt::as_i32(total_dimensions96);
                                        }
                                        V112::Binary(e) => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (2i32) as u8;
                                            let super::super::super::super::golem::vector::types::BinaryVector {
                                                data: data99,
                                                dimensions: dimensions99,
                                            } = e;
                                            let vec100 = (data99).into_boxed_slice();
                                            let ptr100 = vec100.as_ptr().cast::<u8>();
                                            let len100 = vec100.len();
                                            ::core::mem::forget(vec100);
                                            *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len100;
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr100.cast_mut();
                                            *base
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>() = _rt::as_i32(dimensions99);
                                        }
                                        V112::Half(e) => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (3i32) as u8;
                                            let super::super::super::super::golem::vector::types::HalfVector {
                                                data: data101,
                                                dimensions: dimensions101,
                                            } = e;
                                            let vec102 = (data101).into_boxed_slice();
                                            let ptr102 = vec102.as_ptr().cast::<u8>();
                                            let len102 = vec102.len();
                                            ::core::mem::forget(vec102);
                                            *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len102;
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr102.cast_mut();
                                            *base
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>() = _rt::as_i32(dimensions101);
                                        }
                                        V112::Named(e) => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (4i32) as u8;
                                            let vec106 = e;
                                            let len106 = vec106.len();
                                            let layout106 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec106.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let result106 = if layout106.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout106).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout106);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec106.into_iter().enumerate() {
                                                let base = result106
                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let (t103_0, t103_1) = e;
                                                    let vec104 = (t103_0.into_bytes()).into_boxed_slice();
                                                    let ptr104 = vec104.as_ptr().cast::<u8>();
                                                    let len104 = vec104.len();
                                                    ::core::mem::forget(vec104);
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len104;
                                                    *base.add(0).cast::<*mut u8>() = ptr104.cast_mut();
                                                    let vec105 = (t103_1).into_boxed_slice();
                                                    let ptr105 = vec105.as_ptr().cast::<u8>();
                                                    let len105 = vec105.len();
                                                    ::core::mem::forget(vec105);
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len105;
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr105.cast_mut();
                                                }
                                            }
                                            *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len106;
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result106;
                                        }
                                        V112::Hybrid(e) => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (5i32) as u8;
                                            let (t107_0, t107_1) = e;
                                            let vec108 = (t107_0).into_boxed_slice();
                                            let ptr108 = vec108.as_ptr().cast::<u8>();
                                            let len108 = vec108.len();
                                            ::core::mem::forget(vec108);
                                            *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len108;
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr108.cast_mut();
                                            let super::super::super::super::golem::vector::types::SparseVector {
                                                indices: indices109,
                                                values: values109,
                                                total_dimensions: total_dimensions109,
                                            } = t107_1;
                                            let vec110 = (indices109).into_boxed_slice();
                                            let ptr110 = vec110.as_ptr().cast::<u8>();
                                            let len110 = vec110.len();
                                            ::core::mem::forget(vec110);
                                            *base
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len110;
                                            *base
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr110.cast_mut();
                                            let vec111 = (values109).into_boxed_slice();
                                            let ptr111 = vec111.as_ptr().cast::<u8>();
                                            let len111 = vec111.len();
                                            ::core::mem::forget(vec111);
                                            *base
                                                .add(8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len111;
                                            *base
                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr111.cast_mut();
                                            *base
                                                .add(9 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>() = _rt::as_i32(total_dimensions109);
                                        }
                                    }
                                    match metadata93 {
                                        Some(e) => {
                                            *base
                                                .add(10 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec134 = e;
                                            let len134 = vec134.len();
                                            let layout134 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec134.len()
                                                    * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                8,
                                            );
                                            let result134 = if layout134.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout134).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout134);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec134.into_iter().enumerate() {
                                                let base = result134
                                                    .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let (t113_0, t113_1) = e;
                                                    let vec114 = (t113_0.into_bytes()).into_boxed_slice();
                                                    let ptr114 = vec114.as_ptr().cast::<u8>();
                                                    let len114 = vec114.len();
                                                    ::core::mem::forget(vec114);
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len114;
                                                    *base.add(0).cast::<*mut u8>() = ptr114.cast_mut();
                                                    use super::super::super::super::golem::vector::types::FlatMetadataValue as V133;
                                                    match t113_1 {
                                                        V133::StringVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                            let vec115 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr115 = vec115.as_ptr().cast::<u8>();
                                                            let len115 = vec115.len();
                                                            ::core::mem::forget(vec115);
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len115;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr115.cast_mut();
                                                        }
                                                        V133::NumberVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<f64>() = _rt::as_f64(e);
                                                        }
                                                        V133::IntegerVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (2i32) as u8;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<i64>() = _rt::as_i64(e);
                                                        }
                                                        V133::BooleanVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (3i32) as u8;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (match e {
                                                                true => 1,
                                                                false => 0,
                                                            }) as u8;
                                                        }
                                                        V133::ArrayVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (4i32) as u8;
                                                            let vec121 = e;
                                                            let len121 = vec121.len();
                                                            let layout121 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec121.len() * 24,
                                                                8,
                                                            );
                                                            let result121 = if layout121.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout121).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout121);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec121.into_iter().enumerate() {
                                                                let base = result121.add(i * 24);
                                                                {
                                                                    use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V120;
                                                                    match e {
                                                                        V120::StringVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                            let vec116 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr116 = vec116.as_ptr().cast::<u8>();
                                                                            let len116 = vec116.len();
                                                                            ::core::mem::forget(vec116);
                                                                            *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len116;
                                                                            *base.add(8).cast::<*mut u8>() = ptr116.cast_mut();
                                                                        }
                                                                        V120::NumberVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                            *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                                                        }
                                                                        V120::IntegerVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (2i32) as u8;
                                                                            *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                                        }
                                                                        V120::BooleanVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (3i32) as u8;
                                                                            *base.add(8).cast::<u8>() = (match e {
                                                                                true => 1,
                                                                                false => 0,
                                                                            }) as u8;
                                                                        }
                                                                        V120::NullVal => {
                                                                            *base.add(0).cast::<u8>() = (4i32) as u8;
                                                                        }
                                                                        V120::DatetimeVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (5i32) as u8;
                                                                            let vec117 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr117 = vec117.as_ptr().cast::<u8>();
                                                                            let len117 = vec117.len();
                                                                            ::core::mem::forget(vec117);
                                                                            *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len117;
                                                                            *base.add(8).cast::<*mut u8>() = ptr117.cast_mut();
                                                                        }
                                                                        V120::GeoVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (6i32) as u8;
                                                                            let super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                                latitude: latitude118,
                                                                                longitude: longitude118,
                                                                            } = e;
                                                                            *base.add(8).cast::<f64>() = _rt::as_f64(latitude118);
                                                                            *base.add(16).cast::<f64>() = _rt::as_f64(longitude118);
                                                                        }
                                                                        V120::BlobVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (7i32) as u8;
                                                                            let vec119 = (e).into_boxed_slice();
                                                                            let ptr119 = vec119.as_ptr().cast::<u8>();
                                                                            let len119 = vec119.len();
                                                                            ::core::mem::forget(vec119);
                                                                            *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len119;
                                                                            *base.add(8).cast::<*mut u8>() = ptr119.cast_mut();
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len121;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result121;
                                                        }
                                                        V133::ObjectVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (5i32) as u8;
                                                            let vec129 = e;
                                                            let len129 = vec129.len();
                                                            let layout129 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec129.len()
                                                                    * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                            let result129 = if layout129.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout129).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout129);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec129.into_iter().enumerate() {
                                                                let base = result129
                                                                    .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let (t122_0, t122_1) = e;
                                                                    let vec123 = (t122_0.into_bytes()).into_boxed_slice();
                                                                    let ptr123 = vec123.as_ptr().cast::<u8>();
                                                                    let len123 = vec123.len();
                                                                    ::core::mem::forget(vec123);
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len123;
                                                                    *base.add(0).cast::<*mut u8>() = ptr123.cast_mut();
                                                                    use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V128;
                                                                    match t122_1 {
                                                                        V128::StringVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                            let vec124 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr124 = vec124.as_ptr().cast::<u8>();
                                                                            let len124 = vec124.len();
                                                                            ::core::mem::forget(vec124);
                                                                            *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len124;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr124.cast_mut();
                                                                        }
                                                                        V128::NumberVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<f64>() = _rt::as_f64(e);
                                                                        }
                                                                        V128::IntegerVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (2i32) as u8;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i64>() = _rt::as_i64(e);
                                                                        }
                                                                        V128::BooleanVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (3i32) as u8;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (match e {
                                                                                true => 1,
                                                                                false => 0,
                                                                            }) as u8;
                                                                        }
                                                                        V128::NullVal => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (4i32) as u8;
                                                                        }
                                                                        V128::DatetimeVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (5i32) as u8;
                                                                            let vec125 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr125 = vec125.as_ptr().cast::<u8>();
                                                                            let len125 = vec125.len();
                                                                            ::core::mem::forget(vec125);
                                                                            *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len125;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr125.cast_mut();
                                                                        }
                                                                        V128::GeoVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (6i32) as u8;
                                                                            let super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                                latitude: latitude126,
                                                                                longitude: longitude126,
                                                                            } = e;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<f64>() = _rt::as_f64(latitude126);
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<f64>() = _rt::as_f64(longitude126);
                                                                        }
                                                                        V128::BlobVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (7i32) as u8;
                                                                            let vec127 = (e).into_boxed_slice();
                                                                            let ptr127 = vec127.as_ptr().cast::<u8>();
                                                                            let len127 = vec127.len();
                                                                            ::core::mem::forget(vec127);
                                                                            *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len127;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr127.cast_mut();
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len129;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result129;
                                                        }
                                                        V133::NullVal => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (6i32) as u8;
                                                        }
                                                        V133::GeoVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (7i32) as u8;
                                                            let super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                latitude: latitude130,
                                                                longitude: longitude130,
                                                            } = e;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<f64>() = _rt::as_f64(latitude130);
                                                            *base
                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<f64>() = _rt::as_f64(longitude130);
                                                        }
                                                        V133::DatetimeVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (8i32) as u8;
                                                            let vec131 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr131 = vec131.as_ptr().cast::<u8>();
                                                            let len131 = vec131.len();
                                                            ::core::mem::forget(vec131);
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len131;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr131.cast_mut();
                                                        }
                                                        V133::BlobVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (9i32) as u8;
                                                            let vec132 = (e).into_boxed_slice();
                                                            let ptr132 = vec132.as_ptr().cast::<u8>();
                                                            let len132 = vec132.len();
                                                            ::core::mem::forget(vec132);
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len132;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr132.cast_mut();
                                                        }
                                                    }
                                                }
                                            }
                                            *base
                                                .add(12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len134;
                                            *base
                                                .add(11 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result134;
                                        }
                                        None => {
                                            *base
                                                .add(10 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                            }
                            *ptr91
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len135;
                            *ptr91.add(8).cast::<*mut u8>() = result135;
                            match next_cursor92 {
                                Some(e) => {
                                    *ptr91
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec136 = (e.into_bytes()).into_boxed_slice();
                                    let ptr136 = vec136.as_ptr().cast::<u8>();
                                    let len136 = vec136.len();
                                    ::core::mem::forget(vec136);
                                    *ptr91
                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len136;
                                    *ptr91
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr136.cast_mut();
                                }
                                None => {
                                    *ptr91
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match total_count92 {
                                Some(e) => {
                                    *ptr91
                                        .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    *ptr91
                                        .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i64>() = _rt::as_i64(e);
                                }
                                None => {
                                    *ptr91
                                        .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        Err(e) => {
                            *ptr91.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::golem::vector::types::VectorError as V147;
                            match e {
                                V147::NotFound(e) => {
                                    *ptr91.add(8).cast::<u8>() = (0i32) as u8;
                                    let vec137 = (e.into_bytes()).into_boxed_slice();
                                    let ptr137 = vec137.as_ptr().cast::<u8>();
                                    let len137 = vec137.len();
                                    ::core::mem::forget(vec137);
                                    *ptr91
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len137;
                                    *ptr91
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr137.cast_mut();
                                }
                                V147::AlreadyExists(e) => {
                                    *ptr91.add(8).cast::<u8>() = (1i32) as u8;
                                    let vec138 = (e.into_bytes()).into_boxed_slice();
                                    let ptr138 = vec138.as_ptr().cast::<u8>();
                                    let len138 = vec138.len();
                                    ::core::mem::forget(vec138);
                                    *ptr91
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len138;
                                    *ptr91
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr138.cast_mut();
                                }
                                V147::InvalidParams(e) => {
                                    *ptr91.add(8).cast::<u8>() = (2i32) as u8;
                                    let vec139 = (e.into_bytes()).into_boxed_slice();
                                    let ptr139 = vec139.as_ptr().cast::<u8>();
                                    let len139 = vec139.len();
                                    ::core::mem::forget(vec139);
                                    *ptr91
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len139;
                                    *ptr91
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr139.cast_mut();
                                }
                                V147::UnsupportedFeature(e) => {
                                    *ptr91.add(8).cast::<u8>() = (3i32) as u8;
                                    let vec140 = (e.into_bytes()).into_boxed_slice();
                                    let ptr140 = vec140.as_ptr().cast::<u8>();
                                    let len140 = vec140.len();
                                    ::core::mem::forget(vec140);
                                    *ptr91
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len140;
                                    *ptr91
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr140.cast_mut();
                                }
                                V147::DimensionMismatch(e) => {
                                    *ptr91.add(8).cast::<u8>() = (4i32) as u8;
                                    let vec141 = (e.into_bytes()).into_boxed_slice();
                                    let ptr141 = vec141.as_ptr().cast::<u8>();
                                    let len141 = vec141.len();
                                    ::core::mem::forget(vec141);
                                    *ptr91
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len141;
                                    *ptr91
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr141.cast_mut();
                                }
                                V147::InvalidVector(e) => {
                                    *ptr91.add(8).cast::<u8>() = (5i32) as u8;
                                    let vec142 = (e.into_bytes()).into_boxed_slice();
                                    let ptr142 = vec142.as_ptr().cast::<u8>();
                                    let len142 = vec142.len();
                                    ::core::mem::forget(vec142);
                                    *ptr91
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len142;
                                    *ptr91
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr142.cast_mut();
                                }
                                V147::Unauthorized(e) => {
                                    *ptr91.add(8).cast::<u8>() = (6i32) as u8;
                                    let vec143 = (e.into_bytes()).into_boxed_slice();
                                    let ptr143 = vec143.as_ptr().cast::<u8>();
                                    let len143 = vec143.len();
                                    ::core::mem::forget(vec143);
                                    *ptr91
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len143;
                                    *ptr91
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr143.cast_mut();
                                }
                                V147::RateLimited(e) => {
                                    *ptr91.add(8).cast::<u8>() = (7i32) as u8;
                                    let vec144 = (e.into_bytes()).into_boxed_slice();
                                    let ptr144 = vec144.as_ptr().cast::<u8>();
                                    let len144 = vec144.len();
                                    ::core::mem::forget(vec144);
                                    *ptr91
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len144;
                                    *ptr91
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr144.cast_mut();
                                }
                                V147::ProviderError(e) => {
                                    *ptr91.add(8).cast::<u8>() = (8i32) as u8;
                                    let vec145 = (e.into_bytes()).into_boxed_slice();
                                    let ptr145 = vec145.as_ptr().cast::<u8>();
                                    let len145 = vec145.len();
                                    ::core::mem::forget(vec145);
                                    *ptr91
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len145;
                                    *ptr91
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr145.cast_mut();
                                }
                                V147::ConnectionError(e) => {
                                    *ptr91.add(8).cast::<u8>() = (9i32) as u8;
                                    let vec146 = (e.into_bytes()).into_boxed_slice();
                                    let ptr146 = vec146.as_ptr().cast::<u8>();
                                    let len146 = vec146.len();
                                    ::core::mem::forget(vec146);
                                    *ptr91
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len146;
                                    *ptr91
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr146.cast_mut();
                                }
                            }
                        }
                    };
                    ptr91
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_list_vectors<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(8).cast::<*mut u8>();
                            let l2 = *arg0
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let base76 = l1;
                            let len76 = l2;
                            for i in 0..len76 {
                                let base = base76
                                    .add(i * (13 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let l3 = *base.add(0).cast::<*mut u8>();
                                    let l4 = *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l3, l4, 1);
                                    let l5 = i32::from(
                                        *base
                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l5 {
                                        0 => {
                                            let l6 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l7 = *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base8 = l6;
                                            let len8 = l7;
                                            _rt::cabi_dealloc(base8, len8 * 4, 4);
                                        }
                                        1 => {
                                            let l9 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l10 = *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base11 = l9;
                                            let len11 = l10;
                                            _rt::cabi_dealloc(base11, len11 * 4, 4);
                                            let l12 = *base
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l13 = *base
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base14 = l12;
                                            let len14 = l13;
                                            _rt::cabi_dealloc(base14, len14 * 4, 4);
                                        }
                                        2 => {
                                            let l15 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l16 = *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base17 = l15;
                                            let len17 = l16;
                                            _rt::cabi_dealloc(base17, len17 * 1, 1);
                                        }
                                        3 => {
                                            let l18 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l19 = *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base20 = l18;
                                            let len20 = l19;
                                            _rt::cabi_dealloc(base20, len20 * 4, 4);
                                        }
                                        4 => {
                                            let l21 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l22 = *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base28 = l21;
                                            let len28 = l22;
                                            for i in 0..len28 {
                                                let base = base28
                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let l23 = *base.add(0).cast::<*mut u8>();
                                                    let l24 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l23, l24, 1);
                                                    let l25 = *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l26 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base27 = l25;
                                                    let len27 = l26;
                                                    _rt::cabi_dealloc(base27, len27 * 4, 4);
                                                }
                                            }
                                            _rt::cabi_dealloc(
                                                base28,
                                                len28 * (4 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                        }
                                        _ => {
                                            let l29 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l30 = *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base31 = l29;
                                            let len31 = l30;
                                            _rt::cabi_dealloc(base31, len31 * 4, 4);
                                            let l32 = *base
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l33 = *base
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base34 = l32;
                                            let len34 = l33;
                                            _rt::cabi_dealloc(base34, len34 * 4, 4);
                                            let l35 = *base
                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l36 = *base
                                                .add(8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base37 = l35;
                                            let len37 = l36;
                                            _rt::cabi_dealloc(base37, len37 * 4, 4);
                                        }
                                    }
                                    let l38 = i32::from(
                                        *base
                                            .add(10 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l38 {
                                        0 => {}
                                        _ => {
                                            let l39 = *base
                                                .add(11 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l40 = *base
                                                .add(12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base75 = l39;
                                            let len75 = l40;
                                            for i in 0..len75 {
                                                let base = base75
                                                    .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let l41 = *base.add(0).cast::<*mut u8>();
                                                    let l42 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l41, l42, 1);
                                                    let l43 = i32::from(
                                                        *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l43 {
                                                        0 => {
                                                            let l44 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l45 = *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l44, l45, 1);
                                                        }
                                                        1 => {}
                                                        2 => {}
                                                        3 => {}
                                                        4 => {
                                                            let l46 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l47 = *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base56 = l46;
                                                            let len56 = l47;
                                                            for i in 0..len56 {
                                                                let base = base56.add(i * 24);
                                                                {
                                                                    let l48 = i32::from(*base.add(0).cast::<u8>());
                                                                    match l48 {
                                                                        0 => {
                                                                            let l49 = *base.add(8).cast::<*mut u8>();
                                                                            let l50 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l49, l50, 1);
                                                                        }
                                                                        1 => {}
                                                                        2 => {}
                                                                        3 => {}
                                                                        4 => {}
                                                                        5 => {
                                                                            let l51 = *base.add(8).cast::<*mut u8>();
                                                                            let l52 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l51, l52, 1);
                                                                        }
                                                                        6 => {}
                                                                        _ => {
                                                                            let l53 = *base.add(8).cast::<*mut u8>();
                                                                            let l54 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base55 = l53;
                                                                            let len55 = l54;
                                                                            _rt::cabi_dealloc(base55, len55 * 1, 1);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(base56, len56 * 24, 8);
                                                        }
                                                        5 => {
                                                            let l57 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l58 = *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base69 = l57;
                                                            let len69 = l58;
                                                            for i in 0..len69 {
                                                                let base = base69
                                                                    .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l59 = *base.add(0).cast::<*mut u8>();
                                                                    let l60 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l59, l60, 1);
                                                                    let l61 = i32::from(
                                                                        *base
                                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l61 {
                                                                        0 => {
                                                                            let l62 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l63 = *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l62, l63, 1);
                                                                        }
                                                                        1 => {}
                                                                        2 => {}
                                                                        3 => {}
                                                                        4 => {}
                                                                        5 => {
                                                                            let l64 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l65 = *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l64, l65, 1);
                                                                        }
                                                                        6 => {}
                                                                        _ => {
                                                                            let l66 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l67 = *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base68 = l66;
                                                                            let len68 = l67;
                                                                            _rt::cabi_dealloc(base68, len68 * 1, 1);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base69,
                                                                len69 * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                        }
                                                        6 => {}
                                                        7 => {}
                                                        8 => {
                                                            let l70 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l71 = *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l70, l71, 1);
                                                        }
                                                        _ => {
                                                            let l72 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l73 = *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base74 = l72;
                                                            let len74 = l73;
                                                            _rt::cabi_dealloc(base74, len74 * 1, 1);
                                                        }
                                                    }
                                                }
                                            }
                                            _rt::cabi_dealloc(
                                                base75,
                                                len75 * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                8,
                                            );
                                        }
                                    }
                                }
                            }
                            _rt::cabi_dealloc(
                                base76,
                                len76 * (13 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let l77 = i32::from(
                                *arg0
                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l77 {
                                0 => {}
                                _ => {
                                    let l78 = *arg0
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l79 = *arg0
                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l78, l79, 1);
                                }
                            }
                        }
                        _ => {
                            let l80 = i32::from(*arg0.add(8).cast::<u8>());
                            match l80 {
                                0 => {
                                    let l81 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l82 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l81, l82, 1);
                                }
                                1 => {
                                    let l83 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l84 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l83, l84, 1);
                                }
                                2 => {
                                    let l85 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l86 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l85, l86, 1);
                                }
                                3 => {
                                    let l87 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l88 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l87, l88, 1);
                                }
                                4 => {
                                    let l89 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l90 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l89, l90, 1);
                                }
                                5 => {
                                    let l91 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l92 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l91, l92, 1);
                                }
                                6 => {
                                    let l93 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l94 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l93, l94, 1);
                                }
                                7 => {
                                    let l95 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l96 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l95, l96, 1);
                                }
                                8 => {
                                    let l97 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l98 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l97, l98, 1);
                                }
                                _ => {
                                    let l99 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l100 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l99, l100, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_count_vectors_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: i32,
                    arg3: *mut u8,
                    arg4: usize,
                    arg5: i32,
                    arg6: i32,
                    arg7: *mut u8,
                    arg8: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let result71 = T::count_vectors(
                        _rt::string_lift(bytes0),
                        match arg2 {
                            0 => None,
                            1 => {
                                let e = {
                                    let base69 = arg3;
                                    let len69 = arg4;
                                    let mut result69 = _rt::Vec::with_capacity(len69);
                                    for i in 0..len69 {
                                        let base = base69
                                            .add(i * (48 + 4 * ::core::mem::size_of::<*const u8>()));
                                        let e69 = {
                                            let l1 = *base.add(0).cast::<i32>();
                                            let l2 = i32::from(*base.add(4).cast::<u8>());
                                            use super::super::super::super::golem::vector::types::FilterOp as V3;
                                            let v3 = match l2 {
                                                0 => V3::Condition,
                                                1 => V3::And,
                                                2 => V3::Or,
                                                n => {
                                                    debug_assert_eq!(n, 3, "invalid enum discriminant");
                                                    V3::Not
                                                }
                                            };
                                            let l4 = i32::from(*base.add(8).cast::<u8>());
                                            let l66 = *base
                                                .add(48 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l67 = *base
                                                .add(48 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len68 = l67;
                                            super::super::super::super::golem::vector::types::FilterNode {
                                                id: l1 as u32,
                                                op: v3,
                                                condition: match l4 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l5 = *base.add(16).cast::<*mut u8>();
                                                            let l6 = *base
                                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len7 = l6;
                                                            let bytes7 = _rt::Vec::from_raw_parts(
                                                                l5.cast(),
                                                                len7,
                                                                len7,
                                                            );
                                                            let l8 = i32::from(
                                                                *base
                                                                    .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            let l9 = i32::from(
                                                                *base
                                                                    .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            use super::super::super::super::golem::vector::types::FlatMetadataValue as V65;
                                                            let v65 = match l9 {
                                                                0 => {
                                                                    let e65 = {
                                                                        let l10 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l11 = *base
                                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len12 = l11;
                                                                        let bytes12 = _rt::Vec::from_raw_parts(
                                                                            l10.cast(),
                                                                            len12,
                                                                            len12,
                                                                        );
                                                                        _rt::string_lift(bytes12)
                                                                    };
                                                                    V65::StringVal(e65)
                                                                }
                                                                1 => {
                                                                    let e65 = {
                                                                        let l13 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<f64>();
                                                                        l13
                                                                    };
                                                                    V65::NumberVal(e65)
                                                                }
                                                                2 => {
                                                                    let e65 = {
                                                                        let l14 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<i64>();
                                                                        l14
                                                                    };
                                                                    V65::IntegerVal(e65)
                                                                }
                                                                3 => {
                                                                    let e65 = {
                                                                        let l15 = i32::from(
                                                                            *base
                                                                                .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>(),
                                                                        );
                                                                        _rt::bool_lift(l15 as u8)
                                                                    };
                                                                    V65::BooleanVal(e65)
                                                                }
                                                                4 => {
                                                                    let e65 = {
                                                                        let l16 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l17 = *base
                                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let base34 = l16;
                                                                        let len34 = l17;
                                                                        let mut result34 = _rt::Vec::with_capacity(len34);
                                                                        for i in 0..len34 {
                                                                            let base = base34.add(i * 24);
                                                                            let e34 = {
                                                                                let l18 = i32::from(*base.add(0).cast::<u8>());
                                                                                use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V33;
                                                                                let v33 = match l18 {
                                                                                    0 => {
                                                                                        let e33 = {
                                                                                            let l19 = *base.add(8).cast::<*mut u8>();
                                                                                            let l20 = *base
                                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len21 = l20;
                                                                                            let bytes21 = _rt::Vec::from_raw_parts(
                                                                                                l19.cast(),
                                                                                                len21,
                                                                                                len21,
                                                                                            );
                                                                                            _rt::string_lift(bytes21)
                                                                                        };
                                                                                        V33::StringVal(e33)
                                                                                    }
                                                                                    1 => {
                                                                                        let e33 = {
                                                                                            let l22 = *base.add(8).cast::<f64>();
                                                                                            l22
                                                                                        };
                                                                                        V33::NumberVal(e33)
                                                                                    }
                                                                                    2 => {
                                                                                        let e33 = {
                                                                                            let l23 = *base.add(8).cast::<i64>();
                                                                                            l23
                                                                                        };
                                                                                        V33::IntegerVal(e33)
                                                                                    }
                                                                                    3 => {
                                                                                        let e33 = {
                                                                                            let l24 = i32::from(*base.add(8).cast::<u8>());
                                                                                            _rt::bool_lift(l24 as u8)
                                                                                        };
                                                                                        V33::BooleanVal(e33)
                                                                                    }
                                                                                    4 => V33::NullVal,
                                                                                    5 => {
                                                                                        let e33 = {
                                                                                            let l25 = *base.add(8).cast::<*mut u8>();
                                                                                            let l26 = *base
                                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len27 = l26;
                                                                                            let bytes27 = _rt::Vec::from_raw_parts(
                                                                                                l25.cast(),
                                                                                                len27,
                                                                                                len27,
                                                                                            );
                                                                                            _rt::string_lift(bytes27)
                                                                                        };
                                                                                        V33::DatetimeVal(e33)
                                                                                    }
                                                                                    6 => {
                                                                                        let e33 = {
                                                                                            let l28 = *base.add(8).cast::<f64>();
                                                                                            let l29 = *base.add(16).cast::<f64>();
                                                                                            super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                                                latitude: l28,
                                                                                                longitude: l29,
                                                                                            }
                                                                                        };
                                                                                        V33::GeoVal(e33)
                                                                                    }
                                                                                    n => {
                                                                                        debug_assert_eq!(n, 7, "invalid enum discriminant");
                                                                                        let e33 = {
                                                                                            let l30 = *base.add(8).cast::<*mut u8>();
                                                                                            let l31 = *base
                                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len32 = l31;
                                                                                            _rt::Vec::from_raw_parts(l30.cast(), len32, len32)
                                                                                        };
                                                                                        V33::BlobVal(e33)
                                                                                    }
                                                                                };
                                                                                v33
                                                                            };
                                                                            result34.push(e34);
                                                                        }
                                                                        _rt::cabi_dealloc(base34, len34 * 24, 8);
                                                                        result34
                                                                    };
                                                                    V65::ArrayVal(e65)
                                                                }
                                                                5 => {
                                                                    let e65 = {
                                                                        let l35 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l36 = *base
                                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let base56 = l35;
                                                                        let len56 = l36;
                                                                        let mut result56 = _rt::Vec::with_capacity(len56);
                                                                        for i in 0..len56 {
                                                                            let base = base56
                                                                                .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                            let e56 = {
                                                                                let l37 = *base.add(0).cast::<*mut u8>();
                                                                                let l38 = *base
                                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len39 = l38;
                                                                                let bytes39 = _rt::Vec::from_raw_parts(
                                                                                    l37.cast(),
                                                                                    len39,
                                                                                    len39,
                                                                                );
                                                                                let l40 = i32::from(
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>(),
                                                                                );
                                                                                use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V55;
                                                                                let v55 = match l40 {
                                                                                    0 => {
                                                                                        let e55 = {
                                                                                            let l41 = *base
                                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<*mut u8>();
                                                                                            let l42 = *base
                                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len43 = l42;
                                                                                            let bytes43 = _rt::Vec::from_raw_parts(
                                                                                                l41.cast(),
                                                                                                len43,
                                                                                                len43,
                                                                                            );
                                                                                            _rt::string_lift(bytes43)
                                                                                        };
                                                                                        V55::StringVal(e55)
                                                                                    }
                                                                                    1 => {
                                                                                        let e55 = {
                                                                                            let l44 = *base
                                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<f64>();
                                                                                            l44
                                                                                        };
                                                                                        V55::NumberVal(e55)
                                                                                    }
                                                                                    2 => {
                                                                                        let e55 = {
                                                                                            let l45 = *base
                                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<i64>();
                                                                                            l45
                                                                                        };
                                                                                        V55::IntegerVal(e55)
                                                                                    }
                                                                                    3 => {
                                                                                        let e55 = {
                                                                                            let l46 = i32::from(
                                                                                                *base
                                                                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                    .cast::<u8>(),
                                                                                            );
                                                                                            _rt::bool_lift(l46 as u8)
                                                                                        };
                                                                                        V55::BooleanVal(e55)
                                                                                    }
                                                                                    4 => V55::NullVal,
                                                                                    5 => {
                                                                                        let e55 = {
                                                                                            let l47 = *base
                                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<*mut u8>();
                                                                                            let l48 = *base
                                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len49 = l48;
                                                                                            let bytes49 = _rt::Vec::from_raw_parts(
                                                                                                l47.cast(),
                                                                                                len49,
                                                                                                len49,
                                                                                            );
                                                                                            _rt::string_lift(bytes49)
                                                                                        };
                                                                                        V55::DatetimeVal(e55)
                                                                                    }
                                                                                    6 => {
                                                                                        let e55 = {
                                                                                            let l50 = *base
                                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<f64>();
                                                                                            let l51 = *base
                                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<f64>();
                                                                                            super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                                                latitude: l50,
                                                                                                longitude: l51,
                                                                                            }
                                                                                        };
                                                                                        V55::GeoVal(e55)
                                                                                    }
                                                                                    n => {
                                                                                        debug_assert_eq!(n, 7, "invalid enum discriminant");
                                                                                        let e55 = {
                                                                                            let l52 = *base
                                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<*mut u8>();
                                                                                            let l53 = *base
                                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len54 = l53;
                                                                                            _rt::Vec::from_raw_parts(l52.cast(), len54, len54)
                                                                                        };
                                                                                        V55::BlobVal(e55)
                                                                                    }
                                                                                };
                                                                                (_rt::string_lift(bytes39), v55)
                                                                            };
                                                                            result56.push(e56);
                                                                        }
                                                                        _rt::cabi_dealloc(
                                                                            base56,
                                                                            len56 * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                            8,
                                                                        );
                                                                        result56
                                                                    };
                                                                    V65::ObjectVal(e65)
                                                                }
                                                                6 => V65::NullVal,
                                                                7 => {
                                                                    let e65 = {
                                                                        let l57 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<f64>();
                                                                        let l58 = *base
                                                                            .add(40 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<f64>();
                                                                        super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                            latitude: l57,
                                                                            longitude: l58,
                                                                        }
                                                                    };
                                                                    V65::GeoVal(e65)
                                                                }
                                                                8 => {
                                                                    let e65 = {
                                                                        let l59 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l60 = *base
                                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len61 = l60;
                                                                        let bytes61 = _rt::Vec::from_raw_parts(
                                                                            l59.cast(),
                                                                            len61,
                                                                            len61,
                                                                        );
                                                                        _rt::string_lift(bytes61)
                                                                    };
                                                                    V65::DatetimeVal(e65)
                                                                }
                                                                n => {
                                                                    debug_assert_eq!(n, 9, "invalid enum discriminant");
                                                                    let e65 = {
                                                                        let l62 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l63 = *base
                                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len64 = l63;
                                                                        _rt::Vec::from_raw_parts(l62.cast(), len64, len64)
                                                                    };
                                                                    V65::BlobVal(e65)
                                                                }
                                                            };
                                                            super::super::super::super::golem::vector::types::FilterCondition {
                                                                field: _rt::string_lift(bytes7),
                                                                operator: super::super::super::super::golem::vector::types::FilterOperator::_lift(
                                                                    l8 as u8,
                                                                ),
                                                                value: v65,
                                                            }
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                                inputs: _rt::Vec::from_raw_parts(l66.cast(), len68, len68),
                                            }
                                        };
                                        result69.push(e69);
                                    }
                                    _rt::cabi_dealloc(
                                        base69,
                                        len69 * (48 + 4 * ::core::mem::size_of::<*const u8>()),
                                        8,
                                    );
                                    super::super::super::super::golem::vector::types::FilterExpression {
                                        nodes: result69,
                                        root_id: arg5 as u32,
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        match arg6 {
                            0 => None,
                            1 => {
                                let e = {
                                    let len70 = arg8;
                                    let bytes70 = _rt::Vec::from_raw_parts(
                                        arg7.cast(),
                                        len70,
                                        len70,
                                    );
                                    _rt::string_lift(bytes70)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    );
                    let ptr72 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result71 {
                        Ok(e) => {
                            *ptr72.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr72.add(8).cast::<i64>() = _rt::as_i64(e);
                        }
                        Err(e) => {
                            *ptr72.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::golem::vector::types::VectorError as V83;
                            match e {
                                V83::NotFound(e) => {
                                    *ptr72.add(8).cast::<u8>() = (0i32) as u8;
                                    let vec73 = (e.into_bytes()).into_boxed_slice();
                                    let ptr73 = vec73.as_ptr().cast::<u8>();
                                    let len73 = vec73.len();
                                    ::core::mem::forget(vec73);
                                    *ptr72
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len73;
                                    *ptr72
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr73.cast_mut();
                                }
                                V83::AlreadyExists(e) => {
                                    *ptr72.add(8).cast::<u8>() = (1i32) as u8;
                                    let vec74 = (e.into_bytes()).into_boxed_slice();
                                    let ptr74 = vec74.as_ptr().cast::<u8>();
                                    let len74 = vec74.len();
                                    ::core::mem::forget(vec74);
                                    *ptr72
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len74;
                                    *ptr72
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr74.cast_mut();
                                }
                                V83::InvalidParams(e) => {
                                    *ptr72.add(8).cast::<u8>() = (2i32) as u8;
                                    let vec75 = (e.into_bytes()).into_boxed_slice();
                                    let ptr75 = vec75.as_ptr().cast::<u8>();
                                    let len75 = vec75.len();
                                    ::core::mem::forget(vec75);
                                    *ptr72
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len75;
                                    *ptr72
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr75.cast_mut();
                                }
                                V83::UnsupportedFeature(e) => {
                                    *ptr72.add(8).cast::<u8>() = (3i32) as u8;
                                    let vec76 = (e.into_bytes()).into_boxed_slice();
                                    let ptr76 = vec76.as_ptr().cast::<u8>();
                                    let len76 = vec76.len();
                                    ::core::mem::forget(vec76);
                                    *ptr72
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len76;
                                    *ptr72
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr76.cast_mut();
                                }
                                V83::DimensionMismatch(e) => {
                                    *ptr72.add(8).cast::<u8>() = (4i32) as u8;
                                    let vec77 = (e.into_bytes()).into_boxed_slice();
                                    let ptr77 = vec77.as_ptr().cast::<u8>();
                                    let len77 = vec77.len();
                                    ::core::mem::forget(vec77);
                                    *ptr72
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len77;
                                    *ptr72
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr77.cast_mut();
                                }
                                V83::InvalidVector(e) => {
                                    *ptr72.add(8).cast::<u8>() = (5i32) as u8;
                                    let vec78 = (e.into_bytes()).into_boxed_slice();
                                    let ptr78 = vec78.as_ptr().cast::<u8>();
                                    let len78 = vec78.len();
                                    ::core::mem::forget(vec78);
                                    *ptr72
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len78;
                                    *ptr72
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr78.cast_mut();
                                }
                                V83::Unauthorized(e) => {
                                    *ptr72.add(8).cast::<u8>() = (6i32) as u8;
                                    let vec79 = (e.into_bytes()).into_boxed_slice();
                                    let ptr79 = vec79.as_ptr().cast::<u8>();
                                    let len79 = vec79.len();
                                    ::core::mem::forget(vec79);
                                    *ptr72
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len79;
                                    *ptr72
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr79.cast_mut();
                                }
                                V83::RateLimited(e) => {
                                    *ptr72.add(8).cast::<u8>() = (7i32) as u8;
                                    let vec80 = (e.into_bytes()).into_boxed_slice();
                                    let ptr80 = vec80.as_ptr().cast::<u8>();
                                    let len80 = vec80.len();
                                    ::core::mem::forget(vec80);
                                    *ptr72
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len80;
                                    *ptr72
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr80.cast_mut();
                                }
                                V83::ProviderError(e) => {
                                    *ptr72.add(8).cast::<u8>() = (8i32) as u8;
                                    let vec81 = (e.into_bytes()).into_boxed_slice();
                                    let ptr81 = vec81.as_ptr().cast::<u8>();
                                    let len81 = vec81.len();
                                    ::core::mem::forget(vec81);
                                    *ptr72
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len81;
                                    *ptr72
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr81.cast_mut();
                                }
                                V83::ConnectionError(e) => {
                                    *ptr72.add(8).cast::<u8>() = (9i32) as u8;
                                    let vec82 = (e.into_bytes()).into_boxed_slice();
                                    let ptr82 = vec82.as_ptr().cast::<u8>();
                                    let len82 = vec82.len();
                                    ::core::mem::forget(vec82);
                                    *ptr72
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len82;
                                    *ptr72
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr82.cast_mut();
                                }
                            }
                        }
                    };
                    ptr72
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_count_vectors<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = i32::from(*arg0.add(8).cast::<u8>());
                            match l1 {
                                0 => {
                                    let l2 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l3 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                }
                                1 => {
                                    let l4 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l5 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                                2 => {
                                    let l6 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l7 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l6, l7, 1);
                                }
                                3 => {
                                    let l8 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l9 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l8, l9, 1);
                                }
                                4 => {
                                    let l10 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l11 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l10, l11, 1);
                                }
                                5 => {
                                    let l12 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l13 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l12, l13, 1);
                                }
                                6 => {
                                    let l14 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l15 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l14, l15, 1);
                                }
                                7 => {
                                    let l16 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l17 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l16, l17, 1);
                                }
                                8 => {
                                    let l18 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l19 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l18, l19, 1);
                                }
                                _ => {
                                    let l20 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l21 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l20, l21, 1);
                                }
                            }
                        }
                    }
                }
                pub trait Guest {
                    /// Upsert vectors into collection
                    fn upsert_vectors(
                        collection: _rt::String,
                        vectors: _rt::Vec<VectorRecord>,
                        namespace: Option<_rt::String>,
                    ) -> Result<BatchResult, VectorError>;
                    /// Upsert single vector (convenience)
                    fn upsert_vector(
                        collection: _rt::String,
                        id: Id,
                        vector: VectorData,
                        metadata: Option<Metadata>,
                        namespace: Option<_rt::String>,
                    ) -> Result<(), VectorError>;
                    /// Get vectors by IDs
                    fn get_vectors(
                        collection: _rt::String,
                        ids: _rt::Vec<Id>,
                        namespace: Option<_rt::String>,
                        include_vectors: Option<bool>,
                        include_metadata: Option<bool>,
                    ) -> Result<_rt::Vec<VectorRecord>, VectorError>;
                    /// Get single vector by ID (convenience)
                    fn get_vector(
                        collection: _rt::String,
                        id: Id,
                        namespace: Option<_rt::String>,
                    ) -> Result<Option<VectorRecord>, VectorError>;
                    /// Update vector in place
                    fn update_vector(
                        collection: _rt::String,
                        id: Id,
                        vector: Option<VectorData>,
                        metadata: Option<Metadata>,
                        namespace: Option<_rt::String>,
                        merge_metadata: Option<bool>,
                    ) -> Result<(), VectorError>;
                    /// Delete vectors by IDs
                    fn delete_vectors(
                        collection: _rt::String,
                        ids: _rt::Vec<Id>,
                        namespace: Option<_rt::String>,
                    ) -> Result<u32, VectorError>;
                    /// Delete vectors by filter
                    fn delete_by_filter(
                        collection: _rt::String,
                        filter: FilterExpression,
                        namespace: Option<_rt::String>,
                    ) -> Result<u32, VectorError>;
                    /// Delete all vectors in namespace
                    fn delete_namespace(
                        collection: _rt::String,
                        namespace: _rt::String,
                    ) -> Result<u32, VectorError>;
                    /// List vectors with filtering and pagination
                    fn list_vectors(
                        collection: _rt::String,
                        namespace: Option<_rt::String>,
                        filter: Option<FilterExpression>,
                        limit: Option<u32>,
                        cursor: Option<_rt::String>,
                        include_vectors: Option<bool>,
                        include_metadata: Option<bool>,
                    ) -> Result<ListResponse, VectorError>;
                    /// Count vectors matching filter
                    fn count_vectors(
                        collection: _rt::String,
                        filter: Option<FilterExpression>,
                        namespace: Option<_rt::String>,
                    ) -> Result<u64, VectorError>;
                }
                #[doc(hidden)]
                macro_rules! __export_golem_vector_vectors_1_0_0_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "golem:vector/vectors@1.0.0#upsert-vectors")] unsafe extern "C"
                        fn export_upsert_vectors(arg0 : * mut u8, arg1 : usize, arg2 : *
                        mut u8, arg3 : usize, arg4 : i32, arg5 : * mut u8, arg6 : usize,)
                        -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_upsert_vectors_cabi::<$ty > (arg0, arg1, arg2, arg3,
                        arg4, arg5, arg6) } } #[unsafe (export_name =
                        "cabi_post_golem:vector/vectors@1.0.0#upsert-vectors")] unsafe
                        extern "C" fn _post_return_upsert_vectors(arg0 : * mut u8,) {
                        unsafe { $($path_to_types)*:: __post_return_upsert_vectors::<$ty
                        > (arg0) } } #[unsafe (export_name =
                        "golem:vector/vectors@1.0.0#upsert-vector")] unsafe extern "C" fn
                        export_upsert_vector(arg0 : * mut u8,) -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_upsert_vector_cabi::<$ty > (arg0) }
                        } #[unsafe (export_name =
                        "cabi_post_golem:vector/vectors@1.0.0#upsert-vector")] unsafe
                        extern "C" fn _post_return_upsert_vector(arg0 : * mut u8,) {
                        unsafe { $($path_to_types)*:: __post_return_upsert_vector::<$ty >
                        (arg0) } } #[unsafe (export_name =
                        "golem:vector/vectors@1.0.0#get-vectors")] unsafe extern "C" fn
                        export_get_vectors(arg0 : * mut u8, arg1 : usize, arg2 : * mut
                        u8, arg3 : usize, arg4 : i32, arg5 : * mut u8, arg6 : usize, arg7
                        : i32, arg8 : i32, arg9 : i32, arg10 : i32,) -> * mut u8 { unsafe
                        { $($path_to_types)*:: _export_get_vectors_cabi::<$ty > (arg0,
                        arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10) } }
                        #[unsafe (export_name =
                        "cabi_post_golem:vector/vectors@1.0.0#get-vectors")] unsafe
                        extern "C" fn _post_return_get_vectors(arg0 : * mut u8,) { unsafe
                        { $($path_to_types)*:: __post_return_get_vectors::<$ty > (arg0) }
                        } #[unsafe (export_name =
                        "golem:vector/vectors@1.0.0#get-vector")] unsafe extern "C" fn
                        export_get_vector(arg0 : * mut u8, arg1 : usize, arg2 : * mut u8,
                        arg3 : usize, arg4 : i32, arg5 : * mut u8, arg6 : usize,) -> *
                        mut u8 { unsafe { $($path_to_types)*::
                        _export_get_vector_cabi::<$ty > (arg0, arg1, arg2, arg3, arg4,
                        arg5, arg6) } } #[unsafe (export_name =
                        "cabi_post_golem:vector/vectors@1.0.0#get-vector")] unsafe extern
                        "C" fn _post_return_get_vector(arg0 : * mut u8,) { unsafe {
                        $($path_to_types)*:: __post_return_get_vector::<$ty > (arg0) } }
                        #[unsafe (export_name =
                        "golem:vector/vectors@1.0.0#update-vector")] unsafe extern "C" fn
                        export_update_vector(arg0 : * mut u8,) -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_update_vector_cabi::<$ty > (arg0) }
                        } #[unsafe (export_name =
                        "cabi_post_golem:vector/vectors@1.0.0#update-vector")] unsafe
                        extern "C" fn _post_return_update_vector(arg0 : * mut u8,) {
                        unsafe { $($path_to_types)*:: __post_return_update_vector::<$ty >
                        (arg0) } } #[unsafe (export_name =
                        "golem:vector/vectors@1.0.0#delete-vectors")] unsafe extern "C"
                        fn export_delete_vectors(arg0 : * mut u8, arg1 : usize, arg2 : *
                        mut u8, arg3 : usize, arg4 : i32, arg5 : * mut u8, arg6 : usize,)
                        -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_delete_vectors_cabi::<$ty > (arg0, arg1, arg2, arg3,
                        arg4, arg5, arg6) } } #[unsafe (export_name =
                        "cabi_post_golem:vector/vectors@1.0.0#delete-vectors")] unsafe
                        extern "C" fn _post_return_delete_vectors(arg0 : * mut u8,) {
                        unsafe { $($path_to_types)*:: __post_return_delete_vectors::<$ty
                        > (arg0) } } #[unsafe (export_name =
                        "golem:vector/vectors@1.0.0#delete-by-filter")] unsafe extern "C"
                        fn export_delete_by_filter(arg0 : * mut u8, arg1 : usize, arg2 :
                        * mut u8, arg3 : usize, arg4 : i32, arg5 : i32, arg6 : * mut u8,
                        arg7 : usize,) -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_delete_by_filter_cabi::<$ty > (arg0, arg1, arg2, arg3,
                        arg4, arg5, arg6, arg7) } } #[unsafe (export_name =
                        "cabi_post_golem:vector/vectors@1.0.0#delete-by-filter")] unsafe
                        extern "C" fn _post_return_delete_by_filter(arg0 : * mut u8,) {
                        unsafe { $($path_to_types)*::
                        __post_return_delete_by_filter::<$ty > (arg0) } } #[unsafe
                        (export_name = "golem:vector/vectors@1.0.0#delete-namespace")]
                        unsafe extern "C" fn export_delete_namespace(arg0 : * mut u8,
                        arg1 : usize, arg2 : * mut u8, arg3 : usize,) -> * mut u8 {
                        unsafe { $($path_to_types)*:: _export_delete_namespace_cabi::<$ty
                        > (arg0, arg1, arg2, arg3) } } #[unsafe (export_name =
                        "cabi_post_golem:vector/vectors@1.0.0#delete-namespace")] unsafe
                        extern "C" fn _post_return_delete_namespace(arg0 : * mut u8,) {
                        unsafe { $($path_to_types)*::
                        __post_return_delete_namespace::<$ty > (arg0) } } #[unsafe
                        (export_name = "golem:vector/vectors@1.0.0#list-vectors")] unsafe
                        extern "C" fn export_list_vectors(arg0 : * mut u8,) -> * mut u8 {
                        unsafe { $($path_to_types)*:: _export_list_vectors_cabi::<$ty >
                        (arg0) } } #[unsafe (export_name =
                        "cabi_post_golem:vector/vectors@1.0.0#list-vectors")] unsafe
                        extern "C" fn _post_return_list_vectors(arg0 : * mut u8,) {
                        unsafe { $($path_to_types)*:: __post_return_list_vectors::<$ty >
                        (arg0) } } #[unsafe (export_name =
                        "golem:vector/vectors@1.0.0#count-vectors")] unsafe extern "C" fn
                        export_count_vectors(arg0 : * mut u8, arg1 : usize, arg2 : i32,
                        arg3 : * mut u8, arg4 : usize, arg5 : i32, arg6 : i32, arg7 : *
                        mut u8, arg8 : usize,) -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_count_vectors_cabi::<$ty > (arg0,
                        arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8) } } #[unsafe
                        (export_name =
                        "cabi_post_golem:vector/vectors@1.0.0#count-vectors")] unsafe
                        extern "C" fn _post_return_count_vectors(arg0 : * mut u8,) {
                        unsafe { $($path_to_types)*:: __post_return_count_vectors::<$ty >
                        (arg0) } } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_golem_vector_vectors_1_0_0_cabi;
                #[repr(align(8))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<
                        u8,
                    >; 15 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 15
                        * ::core::mem::size_of::<*const u8>()],
                );
            }
            /// Core similarity search operations
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod search {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type Id = super::super::super::super::golem::vector::types::Id;
                pub type VectorData = super::super::super::super::golem::vector::types::VectorData;
                pub type SearchResult = super::super::super::super::golem::vector::types::SearchResult;
                pub type FilterExpression = super::super::super::super::golem::vector::types::FilterExpression;
                pub type VectorError = super::super::super::super::golem::vector::types::VectorError;
                /// Search query variants
                #[derive(Clone)]
                pub enum SearchQuery {
                    Vector(VectorData),
                    ById(Id),
                    MultiVector(_rt::Vec<(_rt::String, VectorData)>),
                }
                impl ::core::fmt::Debug for SearchQuery {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        match self {
                            SearchQuery::Vector(e) => {
                                f.debug_tuple("SearchQuery::Vector").field(e).finish()
                            }
                            SearchQuery::ById(e) => {
                                f.debug_tuple("SearchQuery::ById").field(e).finish()
                            }
                            SearchQuery::MultiVector(e) => {
                                f.debug_tuple("SearchQuery::MultiVector").field(e).finish()
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_search_vectors_cabi<T: Guest>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len2 = l1;
                    let bytes2 = _rt::Vec::from_raw_parts(l0.cast(), len2, len2);
                    let l3 = i32::from(
                        *arg0.add(2 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    let v91 = match l3 {
                        0 => {
                            let e91 = {
                                let l4 = i32::from(
                                    *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                use super::super::super::super::golem::vector::types::VectorData as V42;
                                let v42 = match l4 {
                                    0 => {
                                        let e42 = {
                                            let l5 = *arg0
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l6 = *arg0
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len7 = l6;
                                            _rt::Vec::from_raw_parts(l5.cast(), len7, len7)
                                        };
                                        V42::Dense(e42)
                                    }
                                    1 => {
                                        let e42 = {
                                            let l8 = *arg0
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l9 = *arg0
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len10 = l9;
                                            let l11 = *arg0
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l12 = *arg0
                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len13 = l12;
                                            let l14 = *arg0
                                                .add(8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>();
                                            super::super::super::super::golem::vector::types::SparseVector {
                                                indices: _rt::Vec::from_raw_parts(l8.cast(), len10, len10),
                                                values: _rt::Vec::from_raw_parts(l11.cast(), len13, len13),
                                                total_dimensions: l14 as u32,
                                            }
                                        };
                                        V42::Sparse(e42)
                                    }
                                    2 => {
                                        let e42 = {
                                            let l15 = *arg0
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l16 = *arg0
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len17 = l16;
                                            let l18 = *arg0
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>();
                                            super::super::super::super::golem::vector::types::BinaryVector {
                                                data: _rt::Vec::from_raw_parts(l15.cast(), len17, len17),
                                                dimensions: l18 as u32,
                                            }
                                        };
                                        V42::Binary(e42)
                                    }
                                    3 => {
                                        let e42 = {
                                            let l19 = *arg0
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l20 = *arg0
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len21 = l20;
                                            let l22 = *arg0
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>();
                                            super::super::super::super::golem::vector::types::HalfVector {
                                                data: _rt::Vec::from_raw_parts(l19.cast(), len21, len21),
                                                dimensions: l22 as u32,
                                            }
                                        };
                                        V42::Half(e42)
                                    }
                                    4 => {
                                        let e42 = {
                                            let l23 = *arg0
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l24 = *arg0
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base31 = l23;
                                            let len31 = l24;
                                            let mut result31 = _rt::Vec::with_capacity(len31);
                                            for i in 0..len31 {
                                                let base = base31
                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                let e31 = {
                                                    let l25 = *base.add(0).cast::<*mut u8>();
                                                    let l26 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len27 = l26;
                                                    let bytes27 = _rt::Vec::from_raw_parts(
                                                        l25.cast(),
                                                        len27,
                                                        len27,
                                                    );
                                                    let l28 = *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l29 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len30 = l29;
                                                    (
                                                        _rt::string_lift(bytes27),
                                                        _rt::Vec::from_raw_parts(l28.cast(), len30, len30),
                                                    )
                                                };
                                                result31.push(e31);
                                            }
                                            _rt::cabi_dealloc(
                                                base31,
                                                len31 * (4 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            result31
                                        };
                                        V42::Named(e42)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 5, "invalid enum discriminant");
                                        let e42 = {
                                            let l32 = *arg0
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l33 = *arg0
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len34 = l33;
                                            let l35 = *arg0
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l36 = *arg0
                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len37 = l36;
                                            let l38 = *arg0
                                                .add(8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l39 = *arg0
                                                .add(9 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len40 = l39;
                                            let l41 = *arg0
                                                .add(10 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>();
                                            (
                                                _rt::Vec::from_raw_parts(l32.cast(), len34, len34),
                                                super::super::super::super::golem::vector::types::SparseVector {
                                                    indices: _rt::Vec::from_raw_parts(l35.cast(), len37, len37),
                                                    values: _rt::Vec::from_raw_parts(l38.cast(), len40, len40),
                                                    total_dimensions: l41 as u32,
                                                },
                                            )
                                        };
                                        V42::Hybrid(e42)
                                    }
                                };
                                v42
                            };
                            SearchQuery::Vector(e91)
                        }
                        1 => {
                            let e91 = {
                                let l43 = *arg0
                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l44 = *arg0
                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len45 = l44;
                                let bytes45 = _rt::Vec::from_raw_parts(
                                    l43.cast(),
                                    len45,
                                    len45,
                                );
                                _rt::string_lift(bytes45)
                            };
                            SearchQuery::ById(e91)
                        }
                        n => {
                            debug_assert_eq!(n, 2, "invalid enum discriminant");
                            let e91 = {
                                let l46 = *arg0
                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l47 = *arg0
                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let base90 = l46;
                                let len90 = l47;
                                let mut result90 = _rt::Vec::with_capacity(len90);
                                for i in 0..len90 {
                                    let base = base90
                                        .add(i * (10 * ::core::mem::size_of::<*const u8>()));
                                    let e90 = {
                                        let l48 = *base.add(0).cast::<*mut u8>();
                                        let l49 = *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len50 = l49;
                                        let bytes50 = _rt::Vec::from_raw_parts(
                                            l48.cast(),
                                            len50,
                                            len50,
                                        );
                                        let l51 = i32::from(
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        use super::super::super::super::golem::vector::types::VectorData as V89;
                                        let v89 = match l51 {
                                            0 => {
                                                let e89 = {
                                                    let l52 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l53 = *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len54 = l53;
                                                    _rt::Vec::from_raw_parts(l52.cast(), len54, len54)
                                                };
                                                V89::Dense(e89)
                                            }
                                            1 => {
                                                let e89 = {
                                                    let l55 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l56 = *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len57 = l56;
                                                    let l58 = *base
                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l59 = *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len60 = l59;
                                                    let l61 = *base
                                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i32>();
                                                    super::super::super::super::golem::vector::types::SparseVector {
                                                        indices: _rt::Vec::from_raw_parts(l55.cast(), len57, len57),
                                                        values: _rt::Vec::from_raw_parts(l58.cast(), len60, len60),
                                                        total_dimensions: l61 as u32,
                                                    }
                                                };
                                                V89::Sparse(e89)
                                            }
                                            2 => {
                                                let e89 = {
                                                    let l62 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l63 = *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len64 = l63;
                                                    let l65 = *base
                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i32>();
                                                    super::super::super::super::golem::vector::types::BinaryVector {
                                                        data: _rt::Vec::from_raw_parts(l62.cast(), len64, len64),
                                                        dimensions: l65 as u32,
                                                    }
                                                };
                                                V89::Binary(e89)
                                            }
                                            3 => {
                                                let e89 = {
                                                    let l66 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l67 = *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len68 = l67;
                                                    let l69 = *base
                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i32>();
                                                    super::super::super::super::golem::vector::types::HalfVector {
                                                        data: _rt::Vec::from_raw_parts(l66.cast(), len68, len68),
                                                        dimensions: l69 as u32,
                                                    }
                                                };
                                                V89::Half(e89)
                                            }
                                            4 => {
                                                let e89 = {
                                                    let l70 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l71 = *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base78 = l70;
                                                    let len78 = l71;
                                                    let mut result78 = _rt::Vec::with_capacity(len78);
                                                    for i in 0..len78 {
                                                        let base = base78
                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                        let e78 = {
                                                            let l72 = *base.add(0).cast::<*mut u8>();
                                                            let l73 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len74 = l73;
                                                            let bytes74 = _rt::Vec::from_raw_parts(
                                                                l72.cast(),
                                                                len74,
                                                                len74,
                                                            );
                                                            let l75 = *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l76 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len77 = l76;
                                                            (
                                                                _rt::string_lift(bytes74),
                                                                _rt::Vec::from_raw_parts(l75.cast(), len77, len77),
                                                            )
                                                        };
                                                        result78.push(e78);
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base78,
                                                        len78 * (4 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    result78
                                                };
                                                V89::Named(e89)
                                            }
                                            n => {
                                                debug_assert_eq!(n, 5, "invalid enum discriminant");
                                                let e89 = {
                                                    let l79 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l80 = *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len81 = l80;
                                                    let l82 = *base
                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l83 = *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len84 = l83;
                                                    let l85 = *base
                                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l86 = *base
                                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len87 = l86;
                                                    let l88 = *base
                                                        .add(9 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i32>();
                                                    (
                                                        _rt::Vec::from_raw_parts(l79.cast(), len81, len81),
                                                        super::super::super::super::golem::vector::types::SparseVector {
                                                            indices: _rt::Vec::from_raw_parts(l82.cast(), len84, len84),
                                                            values: _rt::Vec::from_raw_parts(l85.cast(), len87, len87),
                                                            total_dimensions: l88 as u32,
                                                        },
                                                    )
                                                };
                                                V89::Hybrid(e89)
                                            }
                                        };
                                        (_rt::string_lift(bytes50), v89)
                                    };
                                    result90.push(e90);
                                }
                                _rt::cabi_dealloc(
                                    base90,
                                    len90 * (10 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                result90
                            };
                            SearchQuery::MultiVector(e91)
                        }
                    };
                    let l92 = *arg0
                        .add(11 * ::core::mem::size_of::<*const u8>())
                        .cast::<i32>();
                    let l93 = i32::from(
                        *arg0.add(12 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    let l166 = i32::from(
                        *arg0.add(16 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    let l170 = i32::from(
                        *arg0.add(19 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    let l172 = i32::from(
                        *arg0
                            .add(2 + 19 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    let l174 = i32::from(
                        *arg0
                            .add(4 + 19 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    let l176 = i32::from(
                        *arg0
                            .add(12 + 19 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    let l178 = i32::from(
                        *arg0
                            .add(16 + 20 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    let result188 = T::search_vectors(
                        _rt::string_lift(bytes2),
                        v91,
                        l92 as u32,
                        match l93 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l94 = *arg0
                                        .add(13 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l95 = *arg0
                                        .add(14 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base164 = l94;
                                    let len164 = l95;
                                    let mut result164 = _rt::Vec::with_capacity(len164);
                                    for i in 0..len164 {
                                        let base = base164
                                            .add(i * (48 + 4 * ::core::mem::size_of::<*const u8>()));
                                        let e164 = {
                                            let l96 = *base.add(0).cast::<i32>();
                                            let l97 = i32::from(*base.add(4).cast::<u8>());
                                            use super::super::super::super::golem::vector::types::FilterOp as V98;
                                            let v98 = match l97 {
                                                0 => V98::Condition,
                                                1 => V98::And,
                                                2 => V98::Or,
                                                n => {
                                                    debug_assert_eq!(n, 3, "invalid enum discriminant");
                                                    V98::Not
                                                }
                                            };
                                            let l99 = i32::from(*base.add(8).cast::<u8>());
                                            let l161 = *base
                                                .add(48 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l162 = *base
                                                .add(48 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len163 = l162;
                                            super::super::super::super::golem::vector::types::FilterNode {
                                                id: l96 as u32,
                                                op: v98,
                                                condition: match l99 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l100 = *base.add(16).cast::<*mut u8>();
                                                            let l101 = *base
                                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len102 = l101;
                                                            let bytes102 = _rt::Vec::from_raw_parts(
                                                                l100.cast(),
                                                                len102,
                                                                len102,
                                                            );
                                                            let l103 = i32::from(
                                                                *base
                                                                    .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            let l104 = i32::from(
                                                                *base
                                                                    .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            use super::super::super::super::golem::vector::types::FlatMetadataValue as V160;
                                                            let v160 = match l104 {
                                                                0 => {
                                                                    let e160 = {
                                                                        let l105 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l106 = *base
                                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len107 = l106;
                                                                        let bytes107 = _rt::Vec::from_raw_parts(
                                                                            l105.cast(),
                                                                            len107,
                                                                            len107,
                                                                        );
                                                                        _rt::string_lift(bytes107)
                                                                    };
                                                                    V160::StringVal(e160)
                                                                }
                                                                1 => {
                                                                    let e160 = {
                                                                        let l108 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<f64>();
                                                                        l108
                                                                    };
                                                                    V160::NumberVal(e160)
                                                                }
                                                                2 => {
                                                                    let e160 = {
                                                                        let l109 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<i64>();
                                                                        l109
                                                                    };
                                                                    V160::IntegerVal(e160)
                                                                }
                                                                3 => {
                                                                    let e160 = {
                                                                        let l110 = i32::from(
                                                                            *base
                                                                                .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>(),
                                                                        );
                                                                        _rt::bool_lift(l110 as u8)
                                                                    };
                                                                    V160::BooleanVal(e160)
                                                                }
                                                                4 => {
                                                                    let e160 = {
                                                                        let l111 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l112 = *base
                                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let base129 = l111;
                                                                        let len129 = l112;
                                                                        let mut result129 = _rt::Vec::with_capacity(len129);
                                                                        for i in 0..len129 {
                                                                            let base = base129.add(i * 24);
                                                                            let e129 = {
                                                                                let l113 = i32::from(*base.add(0).cast::<u8>());
                                                                                use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V128;
                                                                                let v128 = match l113 {
                                                                                    0 => {
                                                                                        let e128 = {
                                                                                            let l114 = *base.add(8).cast::<*mut u8>();
                                                                                            let l115 = *base
                                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len116 = l115;
                                                                                            let bytes116 = _rt::Vec::from_raw_parts(
                                                                                                l114.cast(),
                                                                                                len116,
                                                                                                len116,
                                                                                            );
                                                                                            _rt::string_lift(bytes116)
                                                                                        };
                                                                                        V128::StringVal(e128)
                                                                                    }
                                                                                    1 => {
                                                                                        let e128 = {
                                                                                            let l117 = *base.add(8).cast::<f64>();
                                                                                            l117
                                                                                        };
                                                                                        V128::NumberVal(e128)
                                                                                    }
                                                                                    2 => {
                                                                                        let e128 = {
                                                                                            let l118 = *base.add(8).cast::<i64>();
                                                                                            l118
                                                                                        };
                                                                                        V128::IntegerVal(e128)
                                                                                    }
                                                                                    3 => {
                                                                                        let e128 = {
                                                                                            let l119 = i32::from(*base.add(8).cast::<u8>());
                                                                                            _rt::bool_lift(l119 as u8)
                                                                                        };
                                                                                        V128::BooleanVal(e128)
                                                                                    }
                                                                                    4 => V128::NullVal,
                                                                                    5 => {
                                                                                        let e128 = {
                                                                                            let l120 = *base.add(8).cast::<*mut u8>();
                                                                                            let l121 = *base
                                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len122 = l121;
                                                                                            let bytes122 = _rt::Vec::from_raw_parts(
                                                                                                l120.cast(),
                                                                                                len122,
                                                                                                len122,
                                                                                            );
                                                                                            _rt::string_lift(bytes122)
                                                                                        };
                                                                                        V128::DatetimeVal(e128)
                                                                                    }
                                                                                    6 => {
                                                                                        let e128 = {
                                                                                            let l123 = *base.add(8).cast::<f64>();
                                                                                            let l124 = *base.add(16).cast::<f64>();
                                                                                            super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                                                latitude: l123,
                                                                                                longitude: l124,
                                                                                            }
                                                                                        };
                                                                                        V128::GeoVal(e128)
                                                                                    }
                                                                                    n => {
                                                                                        debug_assert_eq!(n, 7, "invalid enum discriminant");
                                                                                        let e128 = {
                                                                                            let l125 = *base.add(8).cast::<*mut u8>();
                                                                                            let l126 = *base
                                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len127 = l126;
                                                                                            _rt::Vec::from_raw_parts(l125.cast(), len127, len127)
                                                                                        };
                                                                                        V128::BlobVal(e128)
                                                                                    }
                                                                                };
                                                                                v128
                                                                            };
                                                                            result129.push(e129);
                                                                        }
                                                                        _rt::cabi_dealloc(base129, len129 * 24, 8);
                                                                        result129
                                                                    };
                                                                    V160::ArrayVal(e160)
                                                                }
                                                                5 => {
                                                                    let e160 = {
                                                                        let l130 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l131 = *base
                                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let base151 = l130;
                                                                        let len151 = l131;
                                                                        let mut result151 = _rt::Vec::with_capacity(len151);
                                                                        for i in 0..len151 {
                                                                            let base = base151
                                                                                .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                            let e151 = {
                                                                                let l132 = *base.add(0).cast::<*mut u8>();
                                                                                let l133 = *base
                                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len134 = l133;
                                                                                let bytes134 = _rt::Vec::from_raw_parts(
                                                                                    l132.cast(),
                                                                                    len134,
                                                                                    len134,
                                                                                );
                                                                                let l135 = i32::from(
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>(),
                                                                                );
                                                                                use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V150;
                                                                                let v150 = match l135 {
                                                                                    0 => {
                                                                                        let e150 = {
                                                                                            let l136 = *base
                                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<*mut u8>();
                                                                                            let l137 = *base
                                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len138 = l137;
                                                                                            let bytes138 = _rt::Vec::from_raw_parts(
                                                                                                l136.cast(),
                                                                                                len138,
                                                                                                len138,
                                                                                            );
                                                                                            _rt::string_lift(bytes138)
                                                                                        };
                                                                                        V150::StringVal(e150)
                                                                                    }
                                                                                    1 => {
                                                                                        let e150 = {
                                                                                            let l139 = *base
                                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<f64>();
                                                                                            l139
                                                                                        };
                                                                                        V150::NumberVal(e150)
                                                                                    }
                                                                                    2 => {
                                                                                        let e150 = {
                                                                                            let l140 = *base
                                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<i64>();
                                                                                            l140
                                                                                        };
                                                                                        V150::IntegerVal(e150)
                                                                                    }
                                                                                    3 => {
                                                                                        let e150 = {
                                                                                            let l141 = i32::from(
                                                                                                *base
                                                                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                    .cast::<u8>(),
                                                                                            );
                                                                                            _rt::bool_lift(l141 as u8)
                                                                                        };
                                                                                        V150::BooleanVal(e150)
                                                                                    }
                                                                                    4 => V150::NullVal,
                                                                                    5 => {
                                                                                        let e150 = {
                                                                                            let l142 = *base
                                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<*mut u8>();
                                                                                            let l143 = *base
                                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len144 = l143;
                                                                                            let bytes144 = _rt::Vec::from_raw_parts(
                                                                                                l142.cast(),
                                                                                                len144,
                                                                                                len144,
                                                                                            );
                                                                                            _rt::string_lift(bytes144)
                                                                                        };
                                                                                        V150::DatetimeVal(e150)
                                                                                    }
                                                                                    6 => {
                                                                                        let e150 = {
                                                                                            let l145 = *base
                                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<f64>();
                                                                                            let l146 = *base
                                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<f64>();
                                                                                            super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                                                latitude: l145,
                                                                                                longitude: l146,
                                                                                            }
                                                                                        };
                                                                                        V150::GeoVal(e150)
                                                                                    }
                                                                                    n => {
                                                                                        debug_assert_eq!(n, 7, "invalid enum discriminant");
                                                                                        let e150 = {
                                                                                            let l147 = *base
                                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<*mut u8>();
                                                                                            let l148 = *base
                                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len149 = l148;
                                                                                            _rt::Vec::from_raw_parts(l147.cast(), len149, len149)
                                                                                        };
                                                                                        V150::BlobVal(e150)
                                                                                    }
                                                                                };
                                                                                (_rt::string_lift(bytes134), v150)
                                                                            };
                                                                            result151.push(e151);
                                                                        }
                                                                        _rt::cabi_dealloc(
                                                                            base151,
                                                                            len151 * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                            8,
                                                                        );
                                                                        result151
                                                                    };
                                                                    V160::ObjectVal(e160)
                                                                }
                                                                6 => V160::NullVal,
                                                                7 => {
                                                                    let e160 = {
                                                                        let l152 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<f64>();
                                                                        let l153 = *base
                                                                            .add(40 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<f64>();
                                                                        super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                            latitude: l152,
                                                                            longitude: l153,
                                                                        }
                                                                    };
                                                                    V160::GeoVal(e160)
                                                                }
                                                                8 => {
                                                                    let e160 = {
                                                                        let l154 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l155 = *base
                                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len156 = l155;
                                                                        let bytes156 = _rt::Vec::from_raw_parts(
                                                                            l154.cast(),
                                                                            len156,
                                                                            len156,
                                                                        );
                                                                        _rt::string_lift(bytes156)
                                                                    };
                                                                    V160::DatetimeVal(e160)
                                                                }
                                                                n => {
                                                                    debug_assert_eq!(n, 9, "invalid enum discriminant");
                                                                    let e160 = {
                                                                        let l157 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l158 = *base
                                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len159 = l158;
                                                                        _rt::Vec::from_raw_parts(l157.cast(), len159, len159)
                                                                    };
                                                                    V160::BlobVal(e160)
                                                                }
                                                            };
                                                            super::super::super::super::golem::vector::types::FilterCondition {
                                                                field: _rt::string_lift(bytes102),
                                                                operator: super::super::super::super::golem::vector::types::FilterOperator::_lift(
                                                                    l103 as u8,
                                                                ),
                                                                value: v160,
                                                            }
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                                inputs: _rt::Vec::from_raw_parts(
                                                    l161.cast(),
                                                    len163,
                                                    len163,
                                                ),
                                            }
                                        };
                                        result164.push(e164);
                                    }
                                    _rt::cabi_dealloc(
                                        base164,
                                        len164 * (48 + 4 * ::core::mem::size_of::<*const u8>()),
                                        8,
                                    );
                                    let l165 = *arg0
                                        .add(15 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i32>();
                                    super::super::super::super::golem::vector::types::FilterExpression {
                                        nodes: result164,
                                        root_id: l165 as u32,
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        match l166 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l167 = *arg0
                                        .add(17 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l168 = *arg0
                                        .add(18 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let len169 = l168;
                                    let bytes169 = _rt::Vec::from_raw_parts(
                                        l167.cast(),
                                        len169,
                                        len169,
                                    );
                                    _rt::string_lift(bytes169)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        match l170 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l171 = i32::from(
                                        *arg0
                                            .add(1 + 19 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    _rt::bool_lift(l171 as u8)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        match l172 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l173 = i32::from(
                                        *arg0
                                            .add(3 + 19 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    _rt::bool_lift(l173 as u8)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        match l174 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l175 = *arg0
                                        .add(8 + 19 * ::core::mem::size_of::<*const u8>())
                                        .cast::<f32>();
                                    l175
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        match l176 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l177 = *arg0
                                        .add(16 + 19 * ::core::mem::size_of::<*const u8>())
                                        .cast::<f32>();
                                    l177
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        match l178 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l179 = *arg0
                                        .add(16 + 21 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l180 = *arg0
                                        .add(16 + 22 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base187 = l179;
                                    let len187 = l180;
                                    let mut result187 = _rt::Vec::with_capacity(len187);
                                    for i in 0..len187 {
                                        let base = base187
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        let e187 = {
                                            let l181 = *base.add(0).cast::<*mut u8>();
                                            let l182 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len183 = l182;
                                            let bytes183 = _rt::Vec::from_raw_parts(
                                                l181.cast(),
                                                len183,
                                                len183,
                                            );
                                            let l184 = *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l185 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len186 = l185;
                                            let bytes186 = _rt::Vec::from_raw_parts(
                                                l184.cast(),
                                                len186,
                                                len186,
                                            );
                                            (_rt::string_lift(bytes183), _rt::string_lift(bytes186))
                                        };
                                        result187.push(e187);
                                    }
                                    _rt::cabi_dealloc(
                                        base187,
                                        len187 * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    result187
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    );
                    _rt::cabi_dealloc(
                        arg0,
                        16 + 23 * ::core::mem::size_of::<*const u8>(),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let ptr189 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result188 {
                        Ok(e) => {
                            *ptr189.add(0).cast::<u8>() = (0i32) as u8;
                            let vec232 = e;
                            let len232 = vec232.len();
                            let layout232 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec232.len()
                                    * (8 + 14 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result232 = if layout232.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout232).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout232);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec232.into_iter().enumerate() {
                                let base = result232
                                    .add(i * (8 + 14 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let super::super::super::super::golem::vector::types::SearchResult {
                                        id: id190,
                                        score: score190,
                                        distance: distance190,
                                        vector: vector190,
                                        metadata: metadata190,
                                    } = e;
                                    let vec191 = (id190.into_bytes()).into_boxed_slice();
                                    let ptr191 = vec191.as_ptr().cast::<u8>();
                                    let len191 = vec191.len();
                                    ::core::mem::forget(vec191);
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len191;
                                    *base.add(0).cast::<*mut u8>() = ptr191.cast_mut();
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<f32>() = _rt::as_f32(score190);
                                    *base
                                        .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<f32>() = _rt::as_f32(distance190);
                                    match vector190 {
                                        Some(e) => {
                                            *base
                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            use super::super::super::super::golem::vector::types::VectorData as V209;
                                            match e {
                                                V209::Dense(e) => {
                                                    *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                    let vec192 = (e).into_boxed_slice();
                                                    let ptr192 = vec192.as_ptr().cast::<u8>();
                                                    let len192 = vec192.len();
                                                    ::core::mem::forget(vec192);
                                                    *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len192;
                                                    *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr192.cast_mut();
                                                }
                                                V209::Sparse(e) => {
                                                    *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let super::super::super::super::golem::vector::types::SparseVector {
                                                        indices: indices193,
                                                        values: values193,
                                                        total_dimensions: total_dimensions193,
                                                    } = e;
                                                    let vec194 = (indices193).into_boxed_slice();
                                                    let ptr194 = vec194.as_ptr().cast::<u8>();
                                                    let len194 = vec194.len();
                                                    ::core::mem::forget(vec194);
                                                    *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len194;
                                                    *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr194.cast_mut();
                                                    let vec195 = (values193).into_boxed_slice();
                                                    let ptr195 = vec195.as_ptr().cast::<u8>();
                                                    let len195 = vec195.len();
                                                    ::core::mem::forget(vec195);
                                                    *base
                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len195;
                                                    *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr195.cast_mut();
                                                    *base
                                                        .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i32>() = _rt::as_i32(total_dimensions193);
                                                }
                                                V209::Binary(e) => {
                                                    *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (2i32) as u8;
                                                    let super::super::super::super::golem::vector::types::BinaryVector {
                                                        data: data196,
                                                        dimensions: dimensions196,
                                                    } = e;
                                                    let vec197 = (data196).into_boxed_slice();
                                                    let ptr197 = vec197.as_ptr().cast::<u8>();
                                                    let len197 = vec197.len();
                                                    ::core::mem::forget(vec197);
                                                    *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len197;
                                                    *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr197.cast_mut();
                                                    *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i32>() = _rt::as_i32(dimensions196);
                                                }
                                                V209::Half(e) => {
                                                    *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (3i32) as u8;
                                                    let super::super::super::super::golem::vector::types::HalfVector {
                                                        data: data198,
                                                        dimensions: dimensions198,
                                                    } = e;
                                                    let vec199 = (data198).into_boxed_slice();
                                                    let ptr199 = vec199.as_ptr().cast::<u8>();
                                                    let len199 = vec199.len();
                                                    ::core::mem::forget(vec199);
                                                    *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len199;
                                                    *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr199.cast_mut();
                                                    *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i32>() = _rt::as_i32(dimensions198);
                                                }
                                                V209::Named(e) => {
                                                    *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (4i32) as u8;
                                                    let vec203 = e;
                                                    let len203 = vec203.len();
                                                    let layout203 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec203.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    let result203 = if layout203.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout203).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout203);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec203.into_iter().enumerate() {
                                                        let base = result203
                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let (t200_0, t200_1) = e;
                                                            let vec201 = (t200_0.into_bytes()).into_boxed_slice();
                                                            let ptr201 = vec201.as_ptr().cast::<u8>();
                                                            let len201 = vec201.len();
                                                            ::core::mem::forget(vec201);
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len201;
                                                            *base.add(0).cast::<*mut u8>() = ptr201.cast_mut();
                                                            let vec202 = (t200_1).into_boxed_slice();
                                                            let ptr202 = vec202.as_ptr().cast::<u8>();
                                                            let len202 = vec202.len();
                                                            ::core::mem::forget(vec202);
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len202;
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr202.cast_mut();
                                                        }
                                                    }
                                                    *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len203;
                                                    *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result203;
                                                }
                                                V209::Hybrid(e) => {
                                                    *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (5i32) as u8;
                                                    let (t204_0, t204_1) = e;
                                                    let vec205 = (t204_0).into_boxed_slice();
                                                    let ptr205 = vec205.as_ptr().cast::<u8>();
                                                    let len205 = vec205.len();
                                                    ::core::mem::forget(vec205);
                                                    *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len205;
                                                    *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr205.cast_mut();
                                                    let super::super::super::super::golem::vector::types::SparseVector {
                                                        indices: indices206,
                                                        values: values206,
                                                        total_dimensions: total_dimensions206,
                                                    } = t204_1;
                                                    let vec207 = (indices206).into_boxed_slice();
                                                    let ptr207 = vec207.as_ptr().cast::<u8>();
                                                    let len207 = vec207.len();
                                                    ::core::mem::forget(vec207);
                                                    *base
                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len207;
                                                    *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr207.cast_mut();
                                                    let vec208 = (values206).into_boxed_slice();
                                                    let ptr208 = vec208.as_ptr().cast::<u8>();
                                                    let len208 = vec208.len();
                                                    ::core::mem::forget(vec208);
                                                    *base
                                                        .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len208;
                                                    *base
                                                        .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr208.cast_mut();
                                                    *base
                                                        .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i32>() = _rt::as_i32(total_dimensions206);
                                                }
                                            }
                                        }
                                        None => {
                                            *base
                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match metadata190 {
                                        Some(e) => {
                                            *base
                                                .add(8 + 11 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec231 = e;
                                            let len231 = vec231.len();
                                            let layout231 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec231.len()
                                                    * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                8,
                                            );
                                            let result231 = if layout231.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout231).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout231);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec231.into_iter().enumerate() {
                                                let base = result231
                                                    .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let (t210_0, t210_1) = e;
                                                    let vec211 = (t210_0.into_bytes()).into_boxed_slice();
                                                    let ptr211 = vec211.as_ptr().cast::<u8>();
                                                    let len211 = vec211.len();
                                                    ::core::mem::forget(vec211);
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len211;
                                                    *base.add(0).cast::<*mut u8>() = ptr211.cast_mut();
                                                    use super::super::super::super::golem::vector::types::FlatMetadataValue as V230;
                                                    match t210_1 {
                                                        V230::StringVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                            let vec212 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr212 = vec212.as_ptr().cast::<u8>();
                                                            let len212 = vec212.len();
                                                            ::core::mem::forget(vec212);
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len212;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr212.cast_mut();
                                                        }
                                                        V230::NumberVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<f64>() = _rt::as_f64(e);
                                                        }
                                                        V230::IntegerVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (2i32) as u8;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<i64>() = _rt::as_i64(e);
                                                        }
                                                        V230::BooleanVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (3i32) as u8;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (match e {
                                                                true => 1,
                                                                false => 0,
                                                            }) as u8;
                                                        }
                                                        V230::ArrayVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (4i32) as u8;
                                                            let vec218 = e;
                                                            let len218 = vec218.len();
                                                            let layout218 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec218.len() * 24,
                                                                8,
                                                            );
                                                            let result218 = if layout218.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout218).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout218);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec218.into_iter().enumerate() {
                                                                let base = result218.add(i * 24);
                                                                {
                                                                    use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V217;
                                                                    match e {
                                                                        V217::StringVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                            let vec213 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr213 = vec213.as_ptr().cast::<u8>();
                                                                            let len213 = vec213.len();
                                                                            ::core::mem::forget(vec213);
                                                                            *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len213;
                                                                            *base.add(8).cast::<*mut u8>() = ptr213.cast_mut();
                                                                        }
                                                                        V217::NumberVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                            *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                                                        }
                                                                        V217::IntegerVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (2i32) as u8;
                                                                            *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                                        }
                                                                        V217::BooleanVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (3i32) as u8;
                                                                            *base.add(8).cast::<u8>() = (match e {
                                                                                true => 1,
                                                                                false => 0,
                                                                            }) as u8;
                                                                        }
                                                                        V217::NullVal => {
                                                                            *base.add(0).cast::<u8>() = (4i32) as u8;
                                                                        }
                                                                        V217::DatetimeVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (5i32) as u8;
                                                                            let vec214 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr214 = vec214.as_ptr().cast::<u8>();
                                                                            let len214 = vec214.len();
                                                                            ::core::mem::forget(vec214);
                                                                            *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len214;
                                                                            *base.add(8).cast::<*mut u8>() = ptr214.cast_mut();
                                                                        }
                                                                        V217::GeoVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (6i32) as u8;
                                                                            let super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                                latitude: latitude215,
                                                                                longitude: longitude215,
                                                                            } = e;
                                                                            *base.add(8).cast::<f64>() = _rt::as_f64(latitude215);
                                                                            *base.add(16).cast::<f64>() = _rt::as_f64(longitude215);
                                                                        }
                                                                        V217::BlobVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (7i32) as u8;
                                                                            let vec216 = (e).into_boxed_slice();
                                                                            let ptr216 = vec216.as_ptr().cast::<u8>();
                                                                            let len216 = vec216.len();
                                                                            ::core::mem::forget(vec216);
                                                                            *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len216;
                                                                            *base.add(8).cast::<*mut u8>() = ptr216.cast_mut();
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len218;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result218;
                                                        }
                                                        V230::ObjectVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (5i32) as u8;
                                                            let vec226 = e;
                                                            let len226 = vec226.len();
                                                            let layout226 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec226.len()
                                                                    * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                            let result226 = if layout226.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout226).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout226);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec226.into_iter().enumerate() {
                                                                let base = result226
                                                                    .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let (t219_0, t219_1) = e;
                                                                    let vec220 = (t219_0.into_bytes()).into_boxed_slice();
                                                                    let ptr220 = vec220.as_ptr().cast::<u8>();
                                                                    let len220 = vec220.len();
                                                                    ::core::mem::forget(vec220);
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len220;
                                                                    *base.add(0).cast::<*mut u8>() = ptr220.cast_mut();
                                                                    use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V225;
                                                                    match t219_1 {
                                                                        V225::StringVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                            let vec221 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr221 = vec221.as_ptr().cast::<u8>();
                                                                            let len221 = vec221.len();
                                                                            ::core::mem::forget(vec221);
                                                                            *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len221;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr221.cast_mut();
                                                                        }
                                                                        V225::NumberVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<f64>() = _rt::as_f64(e);
                                                                        }
                                                                        V225::IntegerVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (2i32) as u8;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i64>() = _rt::as_i64(e);
                                                                        }
                                                                        V225::BooleanVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (3i32) as u8;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (match e {
                                                                                true => 1,
                                                                                false => 0,
                                                                            }) as u8;
                                                                        }
                                                                        V225::NullVal => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (4i32) as u8;
                                                                        }
                                                                        V225::DatetimeVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (5i32) as u8;
                                                                            let vec222 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr222 = vec222.as_ptr().cast::<u8>();
                                                                            let len222 = vec222.len();
                                                                            ::core::mem::forget(vec222);
                                                                            *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len222;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr222.cast_mut();
                                                                        }
                                                                        V225::GeoVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (6i32) as u8;
                                                                            let super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                                latitude: latitude223,
                                                                                longitude: longitude223,
                                                                            } = e;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<f64>() = _rt::as_f64(latitude223);
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<f64>() = _rt::as_f64(longitude223);
                                                                        }
                                                                        V225::BlobVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (7i32) as u8;
                                                                            let vec224 = (e).into_boxed_slice();
                                                                            let ptr224 = vec224.as_ptr().cast::<u8>();
                                                                            let len224 = vec224.len();
                                                                            ::core::mem::forget(vec224);
                                                                            *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len224;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr224.cast_mut();
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len226;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result226;
                                                        }
                                                        V230::NullVal => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (6i32) as u8;
                                                        }
                                                        V230::GeoVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (7i32) as u8;
                                                            let super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                latitude: latitude227,
                                                                longitude: longitude227,
                                                            } = e;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<f64>() = _rt::as_f64(latitude227);
                                                            *base
                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<f64>() = _rt::as_f64(longitude227);
                                                        }
                                                        V230::DatetimeVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (8i32) as u8;
                                                            let vec228 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr228 = vec228.as_ptr().cast::<u8>();
                                                            let len228 = vec228.len();
                                                            ::core::mem::forget(vec228);
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len228;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr228.cast_mut();
                                                        }
                                                        V230::BlobVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (9i32) as u8;
                                                            let vec229 = (e).into_boxed_slice();
                                                            let ptr229 = vec229.as_ptr().cast::<u8>();
                                                            let len229 = vec229.len();
                                                            ::core::mem::forget(vec229);
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len229;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr229.cast_mut();
                                                        }
                                                    }
                                                }
                                            }
                                            *base
                                                .add(8 + 13 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len231;
                                            *base
                                                .add(8 + 12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result231;
                                        }
                                        None => {
                                            *base
                                                .add(8 + 11 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                            }
                            *ptr189
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len232;
                            *ptr189
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result232;
                        }
                        Err(e) => {
                            *ptr189.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::golem::vector::types::VectorError as V243;
                            match e {
                                V243::NotFound(e) => {
                                    *ptr189
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                    let vec233 = (e.into_bytes()).into_boxed_slice();
                                    let ptr233 = vec233.as_ptr().cast::<u8>();
                                    let len233 = vec233.len();
                                    ::core::mem::forget(vec233);
                                    *ptr189
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len233;
                                    *ptr189
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr233.cast_mut();
                                }
                                V243::AlreadyExists(e) => {
                                    *ptr189
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec234 = (e.into_bytes()).into_boxed_slice();
                                    let ptr234 = vec234.as_ptr().cast::<u8>();
                                    let len234 = vec234.len();
                                    ::core::mem::forget(vec234);
                                    *ptr189
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len234;
                                    *ptr189
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr234.cast_mut();
                                }
                                V243::InvalidParams(e) => {
                                    *ptr189
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                    let vec235 = (e.into_bytes()).into_boxed_slice();
                                    let ptr235 = vec235.as_ptr().cast::<u8>();
                                    let len235 = vec235.len();
                                    ::core::mem::forget(vec235);
                                    *ptr189
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len235;
                                    *ptr189
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr235.cast_mut();
                                }
                                V243::UnsupportedFeature(e) => {
                                    *ptr189
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                    let vec236 = (e.into_bytes()).into_boxed_slice();
                                    let ptr236 = vec236.as_ptr().cast::<u8>();
                                    let len236 = vec236.len();
                                    ::core::mem::forget(vec236);
                                    *ptr189
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len236;
                                    *ptr189
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr236.cast_mut();
                                }
                                V243::DimensionMismatch(e) => {
                                    *ptr189
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (4i32) as u8;
                                    let vec237 = (e.into_bytes()).into_boxed_slice();
                                    let ptr237 = vec237.as_ptr().cast::<u8>();
                                    let len237 = vec237.len();
                                    ::core::mem::forget(vec237);
                                    *ptr189
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len237;
                                    *ptr189
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr237.cast_mut();
                                }
                                V243::InvalidVector(e) => {
                                    *ptr189
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (5i32) as u8;
                                    let vec238 = (e.into_bytes()).into_boxed_slice();
                                    let ptr238 = vec238.as_ptr().cast::<u8>();
                                    let len238 = vec238.len();
                                    ::core::mem::forget(vec238);
                                    *ptr189
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len238;
                                    *ptr189
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr238.cast_mut();
                                }
                                V243::Unauthorized(e) => {
                                    *ptr189
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (6i32) as u8;
                                    let vec239 = (e.into_bytes()).into_boxed_slice();
                                    let ptr239 = vec239.as_ptr().cast::<u8>();
                                    let len239 = vec239.len();
                                    ::core::mem::forget(vec239);
                                    *ptr189
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len239;
                                    *ptr189
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr239.cast_mut();
                                }
                                V243::RateLimited(e) => {
                                    *ptr189
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (7i32) as u8;
                                    let vec240 = (e.into_bytes()).into_boxed_slice();
                                    let ptr240 = vec240.as_ptr().cast::<u8>();
                                    let len240 = vec240.len();
                                    ::core::mem::forget(vec240);
                                    *ptr189
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len240;
                                    *ptr189
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr240.cast_mut();
                                }
                                V243::ProviderError(e) => {
                                    *ptr189
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (8i32) as u8;
                                    let vec241 = (e.into_bytes()).into_boxed_slice();
                                    let ptr241 = vec241.as_ptr().cast::<u8>();
                                    let len241 = vec241.len();
                                    ::core::mem::forget(vec241);
                                    *ptr189
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len241;
                                    *ptr189
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr241.cast_mut();
                                }
                                V243::ConnectionError(e) => {
                                    *ptr189
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (9i32) as u8;
                                    let vec242 = (e.into_bytes()).into_boxed_slice();
                                    let ptr242 = vec242.as_ptr().cast::<u8>();
                                    let len242 = vec242.len();
                                    ::core::mem::forget(vec242);
                                    *ptr189
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len242;
                                    *ptr189
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr242.cast_mut();
                                }
                            }
                        }
                    };
                    ptr189
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_search_vectors<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let base77 = l1;
                            let len77 = l2;
                            for i in 0..len77 {
                                let base = base77
                                    .add(i * (8 + 14 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let l3 = *base.add(0).cast::<*mut u8>();
                                    let l4 = *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l3, l4, 1);
                                    let l5 = i32::from(
                                        *base
                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l5 {
                                        0 => {}
                                        _ => {
                                            let l6 = i32::from(
                                                *base
                                                    .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l6 {
                                                0 => {
                                                    let l7 = *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l8 = *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base9 = l7;
                                                    let len9 = l8;
                                                    _rt::cabi_dealloc(base9, len9 * 4, 4);
                                                }
                                                1 => {
                                                    let l10 = *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l11 = *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base12 = l10;
                                                    let len12 = l11;
                                                    _rt::cabi_dealloc(base12, len12 * 4, 4);
                                                    let l13 = *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l14 = *base
                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base15 = l13;
                                                    let len15 = l14;
                                                    _rt::cabi_dealloc(base15, len15 * 4, 4);
                                                }
                                                2 => {
                                                    let l16 = *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l17 = *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base18 = l16;
                                                    let len18 = l17;
                                                    _rt::cabi_dealloc(base18, len18 * 1, 1);
                                                }
                                                3 => {
                                                    let l19 = *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l20 = *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base21 = l19;
                                                    let len21 = l20;
                                                    _rt::cabi_dealloc(base21, len21 * 4, 4);
                                                }
                                                4 => {
                                                    let l22 = *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l23 = *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base29 = l22;
                                                    let len29 = l23;
                                                    for i in 0..len29 {
                                                        let base = base29
                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l24 = *base.add(0).cast::<*mut u8>();
                                                            let l25 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l24, l25, 1);
                                                            let l26 = *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l27 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base28 = l26;
                                                            let len28 = l27;
                                                            _rt::cabi_dealloc(base28, len28 * 4, 4);
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base29,
                                                        len29 * (4 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                }
                                                _ => {
                                                    let l30 = *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l31 = *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base32 = l30;
                                                    let len32 = l31;
                                                    _rt::cabi_dealloc(base32, len32 * 4, 4);
                                                    let l33 = *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l34 = *base
                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base35 = l33;
                                                    let len35 = l34;
                                                    _rt::cabi_dealloc(base35, len35 * 4, 4);
                                                    let l36 = *base
                                                        .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l37 = *base
                                                        .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base38 = l36;
                                                    let len38 = l37;
                                                    _rt::cabi_dealloc(base38, len38 * 4, 4);
                                                }
                                            }
                                        }
                                    }
                                    let l39 = i32::from(
                                        *base
                                            .add(8 + 11 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l39 {
                                        0 => {}
                                        _ => {
                                            let l40 = *base
                                                .add(8 + 12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l41 = *base
                                                .add(8 + 13 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base76 = l40;
                                            let len76 = l41;
                                            for i in 0..len76 {
                                                let base = base76
                                                    .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let l42 = *base.add(0).cast::<*mut u8>();
                                                    let l43 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l42, l43, 1);
                                                    let l44 = i32::from(
                                                        *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l44 {
                                                        0 => {
                                                            let l45 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l46 = *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l45, l46, 1);
                                                        }
                                                        1 => {}
                                                        2 => {}
                                                        3 => {}
                                                        4 => {
                                                            let l47 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l48 = *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base57 = l47;
                                                            let len57 = l48;
                                                            for i in 0..len57 {
                                                                let base = base57.add(i * 24);
                                                                {
                                                                    let l49 = i32::from(*base.add(0).cast::<u8>());
                                                                    match l49 {
                                                                        0 => {
                                                                            let l50 = *base.add(8).cast::<*mut u8>();
                                                                            let l51 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l50, l51, 1);
                                                                        }
                                                                        1 => {}
                                                                        2 => {}
                                                                        3 => {}
                                                                        4 => {}
                                                                        5 => {
                                                                            let l52 = *base.add(8).cast::<*mut u8>();
                                                                            let l53 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l52, l53, 1);
                                                                        }
                                                                        6 => {}
                                                                        _ => {
                                                                            let l54 = *base.add(8).cast::<*mut u8>();
                                                                            let l55 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base56 = l54;
                                                                            let len56 = l55;
                                                                            _rt::cabi_dealloc(base56, len56 * 1, 1);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(base57, len57 * 24, 8);
                                                        }
                                                        5 => {
                                                            let l58 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l59 = *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base70 = l58;
                                                            let len70 = l59;
                                                            for i in 0..len70 {
                                                                let base = base70
                                                                    .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l60 = *base.add(0).cast::<*mut u8>();
                                                                    let l61 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l60, l61, 1);
                                                                    let l62 = i32::from(
                                                                        *base
                                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l62 {
                                                                        0 => {
                                                                            let l63 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l64 = *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l63, l64, 1);
                                                                        }
                                                                        1 => {}
                                                                        2 => {}
                                                                        3 => {}
                                                                        4 => {}
                                                                        5 => {
                                                                            let l65 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l66 = *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l65, l66, 1);
                                                                        }
                                                                        6 => {}
                                                                        _ => {
                                                                            let l67 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l68 = *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base69 = l67;
                                                                            let len69 = l68;
                                                                            _rt::cabi_dealloc(base69, len69 * 1, 1);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base70,
                                                                len70 * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                        }
                                                        6 => {}
                                                        7 => {}
                                                        8 => {
                                                            let l71 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l72 = *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l71, l72, 1);
                                                        }
                                                        _ => {
                                                            let l73 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l74 = *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base75 = l73;
                                                            let len75 = l74;
                                                            _rt::cabi_dealloc(base75, len75 * 1, 1);
                                                        }
                                                    }
                                                }
                                            }
                                            _rt::cabi_dealloc(
                                                base76,
                                                len76 * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                8,
                                            );
                                        }
                                    }
                                }
                            }
                            _rt::cabi_dealloc(
                                base77,
                                len77 * (8 + 14 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                        }
                        _ => {
                            let l78 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l78 {
                                0 => {
                                    let l79 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l80 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l79, l80, 1);
                                }
                                1 => {
                                    let l81 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l82 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l81, l82, 1);
                                }
                                2 => {
                                    let l83 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l84 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l83, l84, 1);
                                }
                                3 => {
                                    let l85 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l86 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l85, l86, 1);
                                }
                                4 => {
                                    let l87 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l88 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l87, l88, 1);
                                }
                                5 => {
                                    let l89 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l90 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l89, l90, 1);
                                }
                                6 => {
                                    let l91 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l92 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l91, l92, 1);
                                }
                                7 => {
                                    let l93 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l94 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l93, l94, 1);
                                }
                                8 => {
                                    let l95 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l96 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l95, l96, 1);
                                }
                                _ => {
                                    let l97 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l98 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l97, l98, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_find_similar_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: i32,
                    arg3: *mut u8,
                    arg4: usize,
                    arg5: *mut u8,
                    arg6: usize,
                    arg7: *mut u8,
                    arg8: usize,
                    arg9: i32,
                    arg10: i32,
                    arg11: i32,
                    arg12: *mut u8,
                    arg13: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    use super::super::super::super::golem::vector::types::VectorData as V16;
                    let v16 = match arg2 {
                        0 => {
                            let e16 = {
                                let len1 = arg4;
                                _rt::Vec::from_raw_parts(arg3.cast(), len1, len1)
                            };
                            V16::Dense(e16)
                        }
                        1 => {
                            let e16 = {
                                let len2 = arg4;
                                let len3 = arg6;
                                super::super::super::super::golem::vector::types::SparseVector {
                                    indices: _rt::Vec::from_raw_parts(arg3.cast(), len2, len2),
                                    values: _rt::Vec::from_raw_parts(arg5.cast(), len3, len3),
                                    total_dimensions: arg7 as i32 as u32,
                                }
                            };
                            V16::Sparse(e16)
                        }
                        2 => {
                            let e16 = {
                                let len4 = arg4;
                                super::super::super::super::golem::vector::types::BinaryVector {
                                    data: _rt::Vec::from_raw_parts(arg3.cast(), len4, len4),
                                    dimensions: arg5 as i32 as u32,
                                }
                            };
                            V16::Binary(e16)
                        }
                        3 => {
                            let e16 = {
                                let len5 = arg4;
                                super::super::super::super::golem::vector::types::HalfVector {
                                    data: _rt::Vec::from_raw_parts(arg3.cast(), len5, len5),
                                    dimensions: arg5 as i32 as u32,
                                }
                            };
                            V16::Half(e16)
                        }
                        4 => {
                            let e16 = {
                                let base12 = arg3;
                                let len12 = arg4;
                                let mut result12 = _rt::Vec::with_capacity(len12);
                                for i in 0..len12 {
                                    let base = base12
                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                    let e12 = {
                                        let l6 = *base.add(0).cast::<*mut u8>();
                                        let l7 = *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len8 = l7;
                                        let bytes8 = _rt::Vec::from_raw_parts(
                                            l6.cast(),
                                            len8,
                                            len8,
                                        );
                                        let l9 = *base
                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l10 = *base
                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len11 = l10;
                                        (
                                            _rt::string_lift(bytes8),
                                            _rt::Vec::from_raw_parts(l9.cast(), len11, len11),
                                        )
                                    };
                                    result12.push(e12);
                                }
                                _rt::cabi_dealloc(
                                    base12,
                                    len12 * (4 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                result12
                            };
                            V16::Named(e16)
                        }
                        n => {
                            debug_assert_eq!(n, 5, "invalid enum discriminant");
                            let e16 = {
                                let len13 = arg4;
                                let len14 = arg6;
                                let len15 = arg8;
                                (
                                    _rt::Vec::from_raw_parts(arg3.cast(), len13, len13),
                                    super::super::super::super::golem::vector::types::SparseVector {
                                        indices: _rt::Vec::from_raw_parts(
                                            arg5.cast(),
                                            len14,
                                            len14,
                                        ),
                                        values: _rt::Vec::from_raw_parts(arg7.cast(), len15, len15),
                                        total_dimensions: arg9 as u32,
                                    },
                                )
                            };
                            V16::Hybrid(e16)
                        }
                    };
                    let result18 = T::find_similar(
                        _rt::string_lift(bytes0),
                        v16,
                        arg10 as u32,
                        match arg11 {
                            0 => None,
                            1 => {
                                let e = {
                                    let len17 = arg13;
                                    let bytes17 = _rt::Vec::from_raw_parts(
                                        arg12.cast(),
                                        len17,
                                        len17,
                                    );
                                    _rt::string_lift(bytes17)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    );
                    let ptr19 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result18 {
                        Ok(e) => {
                            *ptr19.add(0).cast::<u8>() = (0i32) as u8;
                            let vec62 = e;
                            let len62 = vec62.len();
                            let layout62 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec62.len()
                                    * (8 + 14 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result62 = if layout62.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout62).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout62);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec62.into_iter().enumerate() {
                                let base = result62
                                    .add(i * (8 + 14 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let super::super::super::super::golem::vector::types::SearchResult {
                                        id: id20,
                                        score: score20,
                                        distance: distance20,
                                        vector: vector20,
                                        metadata: metadata20,
                                    } = e;
                                    let vec21 = (id20.into_bytes()).into_boxed_slice();
                                    let ptr21 = vec21.as_ptr().cast::<u8>();
                                    let len21 = vec21.len();
                                    ::core::mem::forget(vec21);
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len21;
                                    *base.add(0).cast::<*mut u8>() = ptr21.cast_mut();
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<f32>() = _rt::as_f32(score20);
                                    *base
                                        .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<f32>() = _rt::as_f32(distance20);
                                    match vector20 {
                                        Some(e) => {
                                            *base
                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            use super::super::super::super::golem::vector::types::VectorData as V39;
                                            match e {
                                                V39::Dense(e) => {
                                                    *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                    let vec22 = (e).into_boxed_slice();
                                                    let ptr22 = vec22.as_ptr().cast::<u8>();
                                                    let len22 = vec22.len();
                                                    ::core::mem::forget(vec22);
                                                    *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len22;
                                                    *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr22.cast_mut();
                                                }
                                                V39::Sparse(e) => {
                                                    *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let super::super::super::super::golem::vector::types::SparseVector {
                                                        indices: indices23,
                                                        values: values23,
                                                        total_dimensions: total_dimensions23,
                                                    } = e;
                                                    let vec24 = (indices23).into_boxed_slice();
                                                    let ptr24 = vec24.as_ptr().cast::<u8>();
                                                    let len24 = vec24.len();
                                                    ::core::mem::forget(vec24);
                                                    *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len24;
                                                    *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr24.cast_mut();
                                                    let vec25 = (values23).into_boxed_slice();
                                                    let ptr25 = vec25.as_ptr().cast::<u8>();
                                                    let len25 = vec25.len();
                                                    ::core::mem::forget(vec25);
                                                    *base
                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len25;
                                                    *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr25.cast_mut();
                                                    *base
                                                        .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i32>() = _rt::as_i32(total_dimensions23);
                                                }
                                                V39::Binary(e) => {
                                                    *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (2i32) as u8;
                                                    let super::super::super::super::golem::vector::types::BinaryVector {
                                                        data: data26,
                                                        dimensions: dimensions26,
                                                    } = e;
                                                    let vec27 = (data26).into_boxed_slice();
                                                    let ptr27 = vec27.as_ptr().cast::<u8>();
                                                    let len27 = vec27.len();
                                                    ::core::mem::forget(vec27);
                                                    *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len27;
                                                    *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr27.cast_mut();
                                                    *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i32>() = _rt::as_i32(dimensions26);
                                                }
                                                V39::Half(e) => {
                                                    *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (3i32) as u8;
                                                    let super::super::super::super::golem::vector::types::HalfVector {
                                                        data: data28,
                                                        dimensions: dimensions28,
                                                    } = e;
                                                    let vec29 = (data28).into_boxed_slice();
                                                    let ptr29 = vec29.as_ptr().cast::<u8>();
                                                    let len29 = vec29.len();
                                                    ::core::mem::forget(vec29);
                                                    *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len29;
                                                    *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr29.cast_mut();
                                                    *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i32>() = _rt::as_i32(dimensions28);
                                                }
                                                V39::Named(e) => {
                                                    *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (4i32) as u8;
                                                    let vec33 = e;
                                                    let len33 = vec33.len();
                                                    let layout33 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec33.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    let result33 = if layout33.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout33).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout33);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec33.into_iter().enumerate() {
                                                        let base = result33
                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let (t30_0, t30_1) = e;
                                                            let vec31 = (t30_0.into_bytes()).into_boxed_slice();
                                                            let ptr31 = vec31.as_ptr().cast::<u8>();
                                                            let len31 = vec31.len();
                                                            ::core::mem::forget(vec31);
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len31;
                                                            *base.add(0).cast::<*mut u8>() = ptr31.cast_mut();
                                                            let vec32 = (t30_1).into_boxed_slice();
                                                            let ptr32 = vec32.as_ptr().cast::<u8>();
                                                            let len32 = vec32.len();
                                                            ::core::mem::forget(vec32);
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len32;
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr32.cast_mut();
                                                        }
                                                    }
                                                    *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len33;
                                                    *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result33;
                                                }
                                                V39::Hybrid(e) => {
                                                    *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (5i32) as u8;
                                                    let (t34_0, t34_1) = e;
                                                    let vec35 = (t34_0).into_boxed_slice();
                                                    let ptr35 = vec35.as_ptr().cast::<u8>();
                                                    let len35 = vec35.len();
                                                    ::core::mem::forget(vec35);
                                                    *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len35;
                                                    *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr35.cast_mut();
                                                    let super::super::super::super::golem::vector::types::SparseVector {
                                                        indices: indices36,
                                                        values: values36,
                                                        total_dimensions: total_dimensions36,
                                                    } = t34_1;
                                                    let vec37 = (indices36).into_boxed_slice();
                                                    let ptr37 = vec37.as_ptr().cast::<u8>();
                                                    let len37 = vec37.len();
                                                    ::core::mem::forget(vec37);
                                                    *base
                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len37;
                                                    *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr37.cast_mut();
                                                    let vec38 = (values36).into_boxed_slice();
                                                    let ptr38 = vec38.as_ptr().cast::<u8>();
                                                    let len38 = vec38.len();
                                                    ::core::mem::forget(vec38);
                                                    *base
                                                        .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len38;
                                                    *base
                                                        .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr38.cast_mut();
                                                    *base
                                                        .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i32>() = _rt::as_i32(total_dimensions36);
                                                }
                                            }
                                        }
                                        None => {
                                            *base
                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match metadata20 {
                                        Some(e) => {
                                            *base
                                                .add(8 + 11 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec61 = e;
                                            let len61 = vec61.len();
                                            let layout61 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec61.len()
                                                    * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                8,
                                            );
                                            let result61 = if layout61.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout61).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout61);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec61.into_iter().enumerate() {
                                                let base = result61
                                                    .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let (t40_0, t40_1) = e;
                                                    let vec41 = (t40_0.into_bytes()).into_boxed_slice();
                                                    let ptr41 = vec41.as_ptr().cast::<u8>();
                                                    let len41 = vec41.len();
                                                    ::core::mem::forget(vec41);
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len41;
                                                    *base.add(0).cast::<*mut u8>() = ptr41.cast_mut();
                                                    use super::super::super::super::golem::vector::types::FlatMetadataValue as V60;
                                                    match t40_1 {
                                                        V60::StringVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                            let vec42 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr42 = vec42.as_ptr().cast::<u8>();
                                                            let len42 = vec42.len();
                                                            ::core::mem::forget(vec42);
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len42;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr42.cast_mut();
                                                        }
                                                        V60::NumberVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<f64>() = _rt::as_f64(e);
                                                        }
                                                        V60::IntegerVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (2i32) as u8;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<i64>() = _rt::as_i64(e);
                                                        }
                                                        V60::BooleanVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (3i32) as u8;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (match e {
                                                                true => 1,
                                                                false => 0,
                                                            }) as u8;
                                                        }
                                                        V60::ArrayVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (4i32) as u8;
                                                            let vec48 = e;
                                                            let len48 = vec48.len();
                                                            let layout48 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec48.len() * 24,
                                                                8,
                                                            );
                                                            let result48 = if layout48.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout48).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout48);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec48.into_iter().enumerate() {
                                                                let base = result48.add(i * 24);
                                                                {
                                                                    use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V47;
                                                                    match e {
                                                                        V47::StringVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                            let vec43 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr43 = vec43.as_ptr().cast::<u8>();
                                                                            let len43 = vec43.len();
                                                                            ::core::mem::forget(vec43);
                                                                            *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len43;
                                                                            *base.add(8).cast::<*mut u8>() = ptr43.cast_mut();
                                                                        }
                                                                        V47::NumberVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                            *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                                                        }
                                                                        V47::IntegerVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (2i32) as u8;
                                                                            *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                                        }
                                                                        V47::BooleanVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (3i32) as u8;
                                                                            *base.add(8).cast::<u8>() = (match e {
                                                                                true => 1,
                                                                                false => 0,
                                                                            }) as u8;
                                                                        }
                                                                        V47::NullVal => {
                                                                            *base.add(0).cast::<u8>() = (4i32) as u8;
                                                                        }
                                                                        V47::DatetimeVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (5i32) as u8;
                                                                            let vec44 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr44 = vec44.as_ptr().cast::<u8>();
                                                                            let len44 = vec44.len();
                                                                            ::core::mem::forget(vec44);
                                                                            *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len44;
                                                                            *base.add(8).cast::<*mut u8>() = ptr44.cast_mut();
                                                                        }
                                                                        V47::GeoVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (6i32) as u8;
                                                                            let super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                                latitude: latitude45,
                                                                                longitude: longitude45,
                                                                            } = e;
                                                                            *base.add(8).cast::<f64>() = _rt::as_f64(latitude45);
                                                                            *base.add(16).cast::<f64>() = _rt::as_f64(longitude45);
                                                                        }
                                                                        V47::BlobVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (7i32) as u8;
                                                                            let vec46 = (e).into_boxed_slice();
                                                                            let ptr46 = vec46.as_ptr().cast::<u8>();
                                                                            let len46 = vec46.len();
                                                                            ::core::mem::forget(vec46);
                                                                            *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len46;
                                                                            *base.add(8).cast::<*mut u8>() = ptr46.cast_mut();
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len48;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result48;
                                                        }
                                                        V60::ObjectVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (5i32) as u8;
                                                            let vec56 = e;
                                                            let len56 = vec56.len();
                                                            let layout56 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec56.len()
                                                                    * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                            let result56 = if layout56.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout56).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout56);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec56.into_iter().enumerate() {
                                                                let base = result56
                                                                    .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let (t49_0, t49_1) = e;
                                                                    let vec50 = (t49_0.into_bytes()).into_boxed_slice();
                                                                    let ptr50 = vec50.as_ptr().cast::<u8>();
                                                                    let len50 = vec50.len();
                                                                    ::core::mem::forget(vec50);
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len50;
                                                                    *base.add(0).cast::<*mut u8>() = ptr50.cast_mut();
                                                                    use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V55;
                                                                    match t49_1 {
                                                                        V55::StringVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                            let vec51 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr51 = vec51.as_ptr().cast::<u8>();
                                                                            let len51 = vec51.len();
                                                                            ::core::mem::forget(vec51);
                                                                            *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len51;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr51.cast_mut();
                                                                        }
                                                                        V55::NumberVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<f64>() = _rt::as_f64(e);
                                                                        }
                                                                        V55::IntegerVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (2i32) as u8;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i64>() = _rt::as_i64(e);
                                                                        }
                                                                        V55::BooleanVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (3i32) as u8;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (match e {
                                                                                true => 1,
                                                                                false => 0,
                                                                            }) as u8;
                                                                        }
                                                                        V55::NullVal => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (4i32) as u8;
                                                                        }
                                                                        V55::DatetimeVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (5i32) as u8;
                                                                            let vec52 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr52 = vec52.as_ptr().cast::<u8>();
                                                                            let len52 = vec52.len();
                                                                            ::core::mem::forget(vec52);
                                                                            *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len52;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr52.cast_mut();
                                                                        }
                                                                        V55::GeoVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (6i32) as u8;
                                                                            let super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                                latitude: latitude53,
                                                                                longitude: longitude53,
                                                                            } = e;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<f64>() = _rt::as_f64(latitude53);
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<f64>() = _rt::as_f64(longitude53);
                                                                        }
                                                                        V55::BlobVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (7i32) as u8;
                                                                            let vec54 = (e).into_boxed_slice();
                                                                            let ptr54 = vec54.as_ptr().cast::<u8>();
                                                                            let len54 = vec54.len();
                                                                            ::core::mem::forget(vec54);
                                                                            *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len54;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr54.cast_mut();
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len56;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result56;
                                                        }
                                                        V60::NullVal => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (6i32) as u8;
                                                        }
                                                        V60::GeoVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (7i32) as u8;
                                                            let super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                latitude: latitude57,
                                                                longitude: longitude57,
                                                            } = e;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<f64>() = _rt::as_f64(latitude57);
                                                            *base
                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<f64>() = _rt::as_f64(longitude57);
                                                        }
                                                        V60::DatetimeVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (8i32) as u8;
                                                            let vec58 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr58 = vec58.as_ptr().cast::<u8>();
                                                            let len58 = vec58.len();
                                                            ::core::mem::forget(vec58);
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len58;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr58.cast_mut();
                                                        }
                                                        V60::BlobVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (9i32) as u8;
                                                            let vec59 = (e).into_boxed_slice();
                                                            let ptr59 = vec59.as_ptr().cast::<u8>();
                                                            let len59 = vec59.len();
                                                            ::core::mem::forget(vec59);
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len59;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr59.cast_mut();
                                                        }
                                                    }
                                                }
                                            }
                                            *base
                                                .add(8 + 13 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len61;
                                            *base
                                                .add(8 + 12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result61;
                                        }
                                        None => {
                                            *base
                                                .add(8 + 11 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                            }
                            *ptr19
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len62;
                            *ptr19
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result62;
                        }
                        Err(e) => {
                            *ptr19.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::golem::vector::types::VectorError as V73;
                            match e {
                                V73::NotFound(e) => {
                                    *ptr19
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                    let vec63 = (e.into_bytes()).into_boxed_slice();
                                    let ptr63 = vec63.as_ptr().cast::<u8>();
                                    let len63 = vec63.len();
                                    ::core::mem::forget(vec63);
                                    *ptr19
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len63;
                                    *ptr19
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr63.cast_mut();
                                }
                                V73::AlreadyExists(e) => {
                                    *ptr19
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec64 = (e.into_bytes()).into_boxed_slice();
                                    let ptr64 = vec64.as_ptr().cast::<u8>();
                                    let len64 = vec64.len();
                                    ::core::mem::forget(vec64);
                                    *ptr19
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len64;
                                    *ptr19
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr64.cast_mut();
                                }
                                V73::InvalidParams(e) => {
                                    *ptr19
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                    let vec65 = (e.into_bytes()).into_boxed_slice();
                                    let ptr65 = vec65.as_ptr().cast::<u8>();
                                    let len65 = vec65.len();
                                    ::core::mem::forget(vec65);
                                    *ptr19
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len65;
                                    *ptr19
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr65.cast_mut();
                                }
                                V73::UnsupportedFeature(e) => {
                                    *ptr19
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                    let vec66 = (e.into_bytes()).into_boxed_slice();
                                    let ptr66 = vec66.as_ptr().cast::<u8>();
                                    let len66 = vec66.len();
                                    ::core::mem::forget(vec66);
                                    *ptr19
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len66;
                                    *ptr19
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr66.cast_mut();
                                }
                                V73::DimensionMismatch(e) => {
                                    *ptr19
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (4i32) as u8;
                                    let vec67 = (e.into_bytes()).into_boxed_slice();
                                    let ptr67 = vec67.as_ptr().cast::<u8>();
                                    let len67 = vec67.len();
                                    ::core::mem::forget(vec67);
                                    *ptr19
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len67;
                                    *ptr19
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr67.cast_mut();
                                }
                                V73::InvalidVector(e) => {
                                    *ptr19
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (5i32) as u8;
                                    let vec68 = (e.into_bytes()).into_boxed_slice();
                                    let ptr68 = vec68.as_ptr().cast::<u8>();
                                    let len68 = vec68.len();
                                    ::core::mem::forget(vec68);
                                    *ptr19
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len68;
                                    *ptr19
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr68.cast_mut();
                                }
                                V73::Unauthorized(e) => {
                                    *ptr19
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (6i32) as u8;
                                    let vec69 = (e.into_bytes()).into_boxed_slice();
                                    let ptr69 = vec69.as_ptr().cast::<u8>();
                                    let len69 = vec69.len();
                                    ::core::mem::forget(vec69);
                                    *ptr19
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len69;
                                    *ptr19
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr69.cast_mut();
                                }
                                V73::RateLimited(e) => {
                                    *ptr19
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (7i32) as u8;
                                    let vec70 = (e.into_bytes()).into_boxed_slice();
                                    let ptr70 = vec70.as_ptr().cast::<u8>();
                                    let len70 = vec70.len();
                                    ::core::mem::forget(vec70);
                                    *ptr19
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len70;
                                    *ptr19
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr70.cast_mut();
                                }
                                V73::ProviderError(e) => {
                                    *ptr19
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (8i32) as u8;
                                    let vec71 = (e.into_bytes()).into_boxed_slice();
                                    let ptr71 = vec71.as_ptr().cast::<u8>();
                                    let len71 = vec71.len();
                                    ::core::mem::forget(vec71);
                                    *ptr19
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len71;
                                    *ptr19
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr71.cast_mut();
                                }
                                V73::ConnectionError(e) => {
                                    *ptr19
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (9i32) as u8;
                                    let vec72 = (e.into_bytes()).into_boxed_slice();
                                    let ptr72 = vec72.as_ptr().cast::<u8>();
                                    let len72 = vec72.len();
                                    ::core::mem::forget(vec72);
                                    *ptr19
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len72;
                                    *ptr19
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr72.cast_mut();
                                }
                            }
                        }
                    };
                    ptr19
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_find_similar<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let base77 = l1;
                            let len77 = l2;
                            for i in 0..len77 {
                                let base = base77
                                    .add(i * (8 + 14 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let l3 = *base.add(0).cast::<*mut u8>();
                                    let l4 = *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l3, l4, 1);
                                    let l5 = i32::from(
                                        *base
                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l5 {
                                        0 => {}
                                        _ => {
                                            let l6 = i32::from(
                                                *base
                                                    .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l6 {
                                                0 => {
                                                    let l7 = *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l8 = *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base9 = l7;
                                                    let len9 = l8;
                                                    _rt::cabi_dealloc(base9, len9 * 4, 4);
                                                }
                                                1 => {
                                                    let l10 = *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l11 = *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base12 = l10;
                                                    let len12 = l11;
                                                    _rt::cabi_dealloc(base12, len12 * 4, 4);
                                                    let l13 = *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l14 = *base
                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base15 = l13;
                                                    let len15 = l14;
                                                    _rt::cabi_dealloc(base15, len15 * 4, 4);
                                                }
                                                2 => {
                                                    let l16 = *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l17 = *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base18 = l16;
                                                    let len18 = l17;
                                                    _rt::cabi_dealloc(base18, len18 * 1, 1);
                                                }
                                                3 => {
                                                    let l19 = *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l20 = *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base21 = l19;
                                                    let len21 = l20;
                                                    _rt::cabi_dealloc(base21, len21 * 4, 4);
                                                }
                                                4 => {
                                                    let l22 = *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l23 = *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base29 = l22;
                                                    let len29 = l23;
                                                    for i in 0..len29 {
                                                        let base = base29
                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l24 = *base.add(0).cast::<*mut u8>();
                                                            let l25 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l24, l25, 1);
                                                            let l26 = *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l27 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base28 = l26;
                                                            let len28 = l27;
                                                            _rt::cabi_dealloc(base28, len28 * 4, 4);
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base29,
                                                        len29 * (4 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                }
                                                _ => {
                                                    let l30 = *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l31 = *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base32 = l30;
                                                    let len32 = l31;
                                                    _rt::cabi_dealloc(base32, len32 * 4, 4);
                                                    let l33 = *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l34 = *base
                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base35 = l33;
                                                    let len35 = l34;
                                                    _rt::cabi_dealloc(base35, len35 * 4, 4);
                                                    let l36 = *base
                                                        .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l37 = *base
                                                        .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base38 = l36;
                                                    let len38 = l37;
                                                    _rt::cabi_dealloc(base38, len38 * 4, 4);
                                                }
                                            }
                                        }
                                    }
                                    let l39 = i32::from(
                                        *base
                                            .add(8 + 11 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l39 {
                                        0 => {}
                                        _ => {
                                            let l40 = *base
                                                .add(8 + 12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l41 = *base
                                                .add(8 + 13 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base76 = l40;
                                            let len76 = l41;
                                            for i in 0..len76 {
                                                let base = base76
                                                    .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let l42 = *base.add(0).cast::<*mut u8>();
                                                    let l43 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l42, l43, 1);
                                                    let l44 = i32::from(
                                                        *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l44 {
                                                        0 => {
                                                            let l45 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l46 = *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l45, l46, 1);
                                                        }
                                                        1 => {}
                                                        2 => {}
                                                        3 => {}
                                                        4 => {
                                                            let l47 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l48 = *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base57 = l47;
                                                            let len57 = l48;
                                                            for i in 0..len57 {
                                                                let base = base57.add(i * 24);
                                                                {
                                                                    let l49 = i32::from(*base.add(0).cast::<u8>());
                                                                    match l49 {
                                                                        0 => {
                                                                            let l50 = *base.add(8).cast::<*mut u8>();
                                                                            let l51 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l50, l51, 1);
                                                                        }
                                                                        1 => {}
                                                                        2 => {}
                                                                        3 => {}
                                                                        4 => {}
                                                                        5 => {
                                                                            let l52 = *base.add(8).cast::<*mut u8>();
                                                                            let l53 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l52, l53, 1);
                                                                        }
                                                                        6 => {}
                                                                        _ => {
                                                                            let l54 = *base.add(8).cast::<*mut u8>();
                                                                            let l55 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base56 = l54;
                                                                            let len56 = l55;
                                                                            _rt::cabi_dealloc(base56, len56 * 1, 1);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(base57, len57 * 24, 8);
                                                        }
                                                        5 => {
                                                            let l58 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l59 = *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base70 = l58;
                                                            let len70 = l59;
                                                            for i in 0..len70 {
                                                                let base = base70
                                                                    .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l60 = *base.add(0).cast::<*mut u8>();
                                                                    let l61 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l60, l61, 1);
                                                                    let l62 = i32::from(
                                                                        *base
                                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l62 {
                                                                        0 => {
                                                                            let l63 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l64 = *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l63, l64, 1);
                                                                        }
                                                                        1 => {}
                                                                        2 => {}
                                                                        3 => {}
                                                                        4 => {}
                                                                        5 => {
                                                                            let l65 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l66 = *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l65, l66, 1);
                                                                        }
                                                                        6 => {}
                                                                        _ => {
                                                                            let l67 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l68 = *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base69 = l67;
                                                                            let len69 = l68;
                                                                            _rt::cabi_dealloc(base69, len69 * 1, 1);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base70,
                                                                len70 * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                        }
                                                        6 => {}
                                                        7 => {}
                                                        8 => {
                                                            let l71 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l72 = *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l71, l72, 1);
                                                        }
                                                        _ => {
                                                            let l73 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l74 = *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base75 = l73;
                                                            let len75 = l74;
                                                            _rt::cabi_dealloc(base75, len75 * 1, 1);
                                                        }
                                                    }
                                                }
                                            }
                                            _rt::cabi_dealloc(
                                                base76,
                                                len76 * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                8,
                                            );
                                        }
                                    }
                                }
                            }
                            _rt::cabi_dealloc(
                                base77,
                                len77 * (8 + 14 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                        }
                        _ => {
                            let l78 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l78 {
                                0 => {
                                    let l79 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l80 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l79, l80, 1);
                                }
                                1 => {
                                    let l81 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l82 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l81, l82, 1);
                                }
                                2 => {
                                    let l83 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l84 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l83, l84, 1);
                                }
                                3 => {
                                    let l85 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l86 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l85, l86, 1);
                                }
                                4 => {
                                    let l87 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l88 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l87, l88, 1);
                                }
                                5 => {
                                    let l89 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l90 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l89, l90, 1);
                                }
                                6 => {
                                    let l91 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l92 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l91, l92, 1);
                                }
                                7 => {
                                    let l93 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l94 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l93, l94, 1);
                                }
                                8 => {
                                    let l95 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l96 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l95, l96, 1);
                                }
                                _ => {
                                    let l97 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l98 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l97, l98, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_batch_search_cabi<T: Guest>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len2 = l1;
                    let bytes2 = _rt::Vec::from_raw_parts(l0.cast(), len2, len2);
                    let l3 = *arg0
                        .add(2 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l4 = *arg0
                        .add(3 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base94 = l3;
                    let len94 = l4;
                    let mut result94 = _rt::Vec::with_capacity(len94);
                    for i in 0..len94 {
                        let base = base94
                            .add(i * (9 * ::core::mem::size_of::<*const u8>()));
                        let e94 = {
                            let l5 = i32::from(*base.add(0).cast::<u8>());
                            let v93 = match l5 {
                                0 => {
                                    let e93 = {
                                        let l6 = i32::from(
                                            *base.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                        );
                                        use super::super::super::super::golem::vector::types::VectorData as V44;
                                        let v44 = match l6 {
                                            0 => {
                                                let e44 = {
                                                    let l7 = *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l8 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len9 = l8;
                                                    _rt::Vec::from_raw_parts(l7.cast(), len9, len9)
                                                };
                                                V44::Dense(e44)
                                            }
                                            1 => {
                                                let e44 = {
                                                    let l10 = *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l11 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len12 = l11;
                                                    let l13 = *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l14 = *base
                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len15 = l14;
                                                    let l16 = *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i32>();
                                                    super::super::super::super::golem::vector::types::SparseVector {
                                                        indices: _rt::Vec::from_raw_parts(l10.cast(), len12, len12),
                                                        values: _rt::Vec::from_raw_parts(l13.cast(), len15, len15),
                                                        total_dimensions: l16 as u32,
                                                    }
                                                };
                                                V44::Sparse(e44)
                                            }
                                            2 => {
                                                let e44 = {
                                                    let l17 = *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l18 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len19 = l18;
                                                    let l20 = *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i32>();
                                                    super::super::super::super::golem::vector::types::BinaryVector {
                                                        data: _rt::Vec::from_raw_parts(l17.cast(), len19, len19),
                                                        dimensions: l20 as u32,
                                                    }
                                                };
                                                V44::Binary(e44)
                                            }
                                            3 => {
                                                let e44 = {
                                                    let l21 = *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l22 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len23 = l22;
                                                    let l24 = *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i32>();
                                                    super::super::super::super::golem::vector::types::HalfVector {
                                                        data: _rt::Vec::from_raw_parts(l21.cast(), len23, len23),
                                                        dimensions: l24 as u32,
                                                    }
                                                };
                                                V44::Half(e44)
                                            }
                                            4 => {
                                                let e44 = {
                                                    let l25 = *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l26 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base33 = l25;
                                                    let len33 = l26;
                                                    let mut result33 = _rt::Vec::with_capacity(len33);
                                                    for i in 0..len33 {
                                                        let base = base33
                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                        let e33 = {
                                                            let l27 = *base.add(0).cast::<*mut u8>();
                                                            let l28 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len29 = l28;
                                                            let bytes29 = _rt::Vec::from_raw_parts(
                                                                l27.cast(),
                                                                len29,
                                                                len29,
                                                            );
                                                            let l30 = *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l31 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len32 = l31;
                                                            (
                                                                _rt::string_lift(bytes29),
                                                                _rt::Vec::from_raw_parts(l30.cast(), len32, len32),
                                                            )
                                                        };
                                                        result33.push(e33);
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base33,
                                                        len33 * (4 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    result33
                                                };
                                                V44::Named(e44)
                                            }
                                            n => {
                                                debug_assert_eq!(n, 5, "invalid enum discriminant");
                                                let e44 = {
                                                    let l34 = *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l35 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len36 = l35;
                                                    let l37 = *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l38 = *base
                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len39 = l38;
                                                    let l40 = *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l41 = *base
                                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len42 = l41;
                                                    let l43 = *base
                                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i32>();
                                                    (
                                                        _rt::Vec::from_raw_parts(l34.cast(), len36, len36),
                                                        super::super::super::super::golem::vector::types::SparseVector {
                                                            indices: _rt::Vec::from_raw_parts(l37.cast(), len39, len39),
                                                            values: _rt::Vec::from_raw_parts(l40.cast(), len42, len42),
                                                            total_dimensions: l43 as u32,
                                                        },
                                                    )
                                                };
                                                V44::Hybrid(e44)
                                            }
                                        };
                                        v44
                                    };
                                    SearchQuery::Vector(e93)
                                }
                                1 => {
                                    let e93 = {
                                        let l45 = *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l46 = *base
                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len47 = l46;
                                        let bytes47 = _rt::Vec::from_raw_parts(
                                            l45.cast(),
                                            len47,
                                            len47,
                                        );
                                        _rt::string_lift(bytes47)
                                    };
                                    SearchQuery::ById(e93)
                                }
                                n => {
                                    debug_assert_eq!(n, 2, "invalid enum discriminant");
                                    let e93 = {
                                        let l48 = *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l49 = *base
                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let base92 = l48;
                                        let len92 = l49;
                                        let mut result92 = _rt::Vec::with_capacity(len92);
                                        for i in 0..len92 {
                                            let base = base92
                                                .add(i * (10 * ::core::mem::size_of::<*const u8>()));
                                            let e92 = {
                                                let l50 = *base.add(0).cast::<*mut u8>();
                                                let l51 = *base
                                                    .add(::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len52 = l51;
                                                let bytes52 = _rt::Vec::from_raw_parts(
                                                    l50.cast(),
                                                    len52,
                                                    len52,
                                                );
                                                let l53 = i32::from(
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>(),
                                                );
                                                use super::super::super::super::golem::vector::types::VectorData as V91;
                                                let v91 = match l53 {
                                                    0 => {
                                                        let e91 = {
                                                            let l54 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l55 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len56 = l55;
                                                            _rt::Vec::from_raw_parts(l54.cast(), len56, len56)
                                                        };
                                                        V91::Dense(e91)
                                                    }
                                                    1 => {
                                                        let e91 = {
                                                            let l57 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l58 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len59 = l58;
                                                            let l60 = *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l61 = *base
                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len62 = l61;
                                                            let l63 = *base
                                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<i32>();
                                                            super::super::super::super::golem::vector::types::SparseVector {
                                                                indices: _rt::Vec::from_raw_parts(l57.cast(), len59, len59),
                                                                values: _rt::Vec::from_raw_parts(l60.cast(), len62, len62),
                                                                total_dimensions: l63 as u32,
                                                            }
                                                        };
                                                        V91::Sparse(e91)
                                                    }
                                                    2 => {
                                                        let e91 = {
                                                            let l64 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l65 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len66 = l65;
                                                            let l67 = *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<i32>();
                                                            super::super::super::super::golem::vector::types::BinaryVector {
                                                                data: _rt::Vec::from_raw_parts(l64.cast(), len66, len66),
                                                                dimensions: l67 as u32,
                                                            }
                                                        };
                                                        V91::Binary(e91)
                                                    }
                                                    3 => {
                                                        let e91 = {
                                                            let l68 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l69 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len70 = l69;
                                                            let l71 = *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<i32>();
                                                            super::super::super::super::golem::vector::types::HalfVector {
                                                                data: _rt::Vec::from_raw_parts(l68.cast(), len70, len70),
                                                                dimensions: l71 as u32,
                                                            }
                                                        };
                                                        V91::Half(e91)
                                                    }
                                                    4 => {
                                                        let e91 = {
                                                            let l72 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l73 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base80 = l72;
                                                            let len80 = l73;
                                                            let mut result80 = _rt::Vec::with_capacity(len80);
                                                            for i in 0..len80 {
                                                                let base = base80
                                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                let e80 = {
                                                                    let l74 = *base.add(0).cast::<*mut u8>();
                                                                    let l75 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len76 = l75;
                                                                    let bytes76 = _rt::Vec::from_raw_parts(
                                                                        l74.cast(),
                                                                        len76,
                                                                        len76,
                                                                    );
                                                                    let l77 = *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l78 = *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len79 = l78;
                                                                    (
                                                                        _rt::string_lift(bytes76),
                                                                        _rt::Vec::from_raw_parts(l77.cast(), len79, len79),
                                                                    )
                                                                };
                                                                result80.push(e80);
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base80,
                                                                len80 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            result80
                                                        };
                                                        V91::Named(e91)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 5, "invalid enum discriminant");
                                                        let e91 = {
                                                            let l81 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l82 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len83 = l82;
                                                            let l84 = *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l85 = *base
                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len86 = l85;
                                                            let l87 = *base
                                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l88 = *base
                                                                .add(8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len89 = l88;
                                                            let l90 = *base
                                                                .add(9 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<i32>();
                                                            (
                                                                _rt::Vec::from_raw_parts(l81.cast(), len83, len83),
                                                                super::super::super::super::golem::vector::types::SparseVector {
                                                                    indices: _rt::Vec::from_raw_parts(l84.cast(), len86, len86),
                                                                    values: _rt::Vec::from_raw_parts(l87.cast(), len89, len89),
                                                                    total_dimensions: l90 as u32,
                                                                },
                                                            )
                                                        };
                                                        V91::Hybrid(e91)
                                                    }
                                                };
                                                (_rt::string_lift(bytes52), v91)
                                            };
                                            result92.push(e92);
                                        }
                                        _rt::cabi_dealloc(
                                            base92,
                                            len92 * (10 * ::core::mem::size_of::<*const u8>()),
                                            ::core::mem::size_of::<*const u8>(),
                                        );
                                        result92
                                    };
                                    SearchQuery::MultiVector(e93)
                                }
                            };
                            v93
                        };
                        result94.push(e94);
                    }
                    _rt::cabi_dealloc(
                        base94,
                        len94 * (9 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let l95 = *arg0
                        .add(4 * ::core::mem::size_of::<*const u8>())
                        .cast::<i32>();
                    let l96 = i32::from(
                        *arg0.add(5 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    let l169 = i32::from(
                        *arg0.add(9 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    let l173 = i32::from(
                        *arg0.add(12 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    let l175 = i32::from(
                        *arg0
                            .add(2 + 12 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    let l177 = i32::from(
                        *arg0.add(13 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    let result187 = T::batch_search(
                        _rt::string_lift(bytes2),
                        result94,
                        l95 as u32,
                        match l96 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l97 = *arg0
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l98 = *arg0
                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base167 = l97;
                                    let len167 = l98;
                                    let mut result167 = _rt::Vec::with_capacity(len167);
                                    for i in 0..len167 {
                                        let base = base167
                                            .add(i * (48 + 4 * ::core::mem::size_of::<*const u8>()));
                                        let e167 = {
                                            let l99 = *base.add(0).cast::<i32>();
                                            let l100 = i32::from(*base.add(4).cast::<u8>());
                                            use super::super::super::super::golem::vector::types::FilterOp as V101;
                                            let v101 = match l100 {
                                                0 => V101::Condition,
                                                1 => V101::And,
                                                2 => V101::Or,
                                                n => {
                                                    debug_assert_eq!(n, 3, "invalid enum discriminant");
                                                    V101::Not
                                                }
                                            };
                                            let l102 = i32::from(*base.add(8).cast::<u8>());
                                            let l164 = *base
                                                .add(48 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l165 = *base
                                                .add(48 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len166 = l165;
                                            super::super::super::super::golem::vector::types::FilterNode {
                                                id: l99 as u32,
                                                op: v101,
                                                condition: match l102 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l103 = *base.add(16).cast::<*mut u8>();
                                                            let l104 = *base
                                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len105 = l104;
                                                            let bytes105 = _rt::Vec::from_raw_parts(
                                                                l103.cast(),
                                                                len105,
                                                                len105,
                                                            );
                                                            let l106 = i32::from(
                                                                *base
                                                                    .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            let l107 = i32::from(
                                                                *base
                                                                    .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            use super::super::super::super::golem::vector::types::FlatMetadataValue as V163;
                                                            let v163 = match l107 {
                                                                0 => {
                                                                    let e163 = {
                                                                        let l108 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l109 = *base
                                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len110 = l109;
                                                                        let bytes110 = _rt::Vec::from_raw_parts(
                                                                            l108.cast(),
                                                                            len110,
                                                                            len110,
                                                                        );
                                                                        _rt::string_lift(bytes110)
                                                                    };
                                                                    V163::StringVal(e163)
                                                                }
                                                                1 => {
                                                                    let e163 = {
                                                                        let l111 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<f64>();
                                                                        l111
                                                                    };
                                                                    V163::NumberVal(e163)
                                                                }
                                                                2 => {
                                                                    let e163 = {
                                                                        let l112 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<i64>();
                                                                        l112
                                                                    };
                                                                    V163::IntegerVal(e163)
                                                                }
                                                                3 => {
                                                                    let e163 = {
                                                                        let l113 = i32::from(
                                                                            *base
                                                                                .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>(),
                                                                        );
                                                                        _rt::bool_lift(l113 as u8)
                                                                    };
                                                                    V163::BooleanVal(e163)
                                                                }
                                                                4 => {
                                                                    let e163 = {
                                                                        let l114 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l115 = *base
                                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let base132 = l114;
                                                                        let len132 = l115;
                                                                        let mut result132 = _rt::Vec::with_capacity(len132);
                                                                        for i in 0..len132 {
                                                                            let base = base132.add(i * 24);
                                                                            let e132 = {
                                                                                let l116 = i32::from(*base.add(0).cast::<u8>());
                                                                                use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V131;
                                                                                let v131 = match l116 {
                                                                                    0 => {
                                                                                        let e131 = {
                                                                                            let l117 = *base.add(8).cast::<*mut u8>();
                                                                                            let l118 = *base
                                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len119 = l118;
                                                                                            let bytes119 = _rt::Vec::from_raw_parts(
                                                                                                l117.cast(),
                                                                                                len119,
                                                                                                len119,
                                                                                            );
                                                                                            _rt::string_lift(bytes119)
                                                                                        };
                                                                                        V131::StringVal(e131)
                                                                                    }
                                                                                    1 => {
                                                                                        let e131 = {
                                                                                            let l120 = *base.add(8).cast::<f64>();
                                                                                            l120
                                                                                        };
                                                                                        V131::NumberVal(e131)
                                                                                    }
                                                                                    2 => {
                                                                                        let e131 = {
                                                                                            let l121 = *base.add(8).cast::<i64>();
                                                                                            l121
                                                                                        };
                                                                                        V131::IntegerVal(e131)
                                                                                    }
                                                                                    3 => {
                                                                                        let e131 = {
                                                                                            let l122 = i32::from(*base.add(8).cast::<u8>());
                                                                                            _rt::bool_lift(l122 as u8)
                                                                                        };
                                                                                        V131::BooleanVal(e131)
                                                                                    }
                                                                                    4 => V131::NullVal,
                                                                                    5 => {
                                                                                        let e131 = {
                                                                                            let l123 = *base.add(8).cast::<*mut u8>();
                                                                                            let l124 = *base
                                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len125 = l124;
                                                                                            let bytes125 = _rt::Vec::from_raw_parts(
                                                                                                l123.cast(),
                                                                                                len125,
                                                                                                len125,
                                                                                            );
                                                                                            _rt::string_lift(bytes125)
                                                                                        };
                                                                                        V131::DatetimeVal(e131)
                                                                                    }
                                                                                    6 => {
                                                                                        let e131 = {
                                                                                            let l126 = *base.add(8).cast::<f64>();
                                                                                            let l127 = *base.add(16).cast::<f64>();
                                                                                            super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                                                latitude: l126,
                                                                                                longitude: l127,
                                                                                            }
                                                                                        };
                                                                                        V131::GeoVal(e131)
                                                                                    }
                                                                                    n => {
                                                                                        debug_assert_eq!(n, 7, "invalid enum discriminant");
                                                                                        let e131 = {
                                                                                            let l128 = *base.add(8).cast::<*mut u8>();
                                                                                            let l129 = *base
                                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len130 = l129;
                                                                                            _rt::Vec::from_raw_parts(l128.cast(), len130, len130)
                                                                                        };
                                                                                        V131::BlobVal(e131)
                                                                                    }
                                                                                };
                                                                                v131
                                                                            };
                                                                            result132.push(e132);
                                                                        }
                                                                        _rt::cabi_dealloc(base132, len132 * 24, 8);
                                                                        result132
                                                                    };
                                                                    V163::ArrayVal(e163)
                                                                }
                                                                5 => {
                                                                    let e163 = {
                                                                        let l133 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l134 = *base
                                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let base154 = l133;
                                                                        let len154 = l134;
                                                                        let mut result154 = _rt::Vec::with_capacity(len154);
                                                                        for i in 0..len154 {
                                                                            let base = base154
                                                                                .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                            let e154 = {
                                                                                let l135 = *base.add(0).cast::<*mut u8>();
                                                                                let l136 = *base
                                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len137 = l136;
                                                                                let bytes137 = _rt::Vec::from_raw_parts(
                                                                                    l135.cast(),
                                                                                    len137,
                                                                                    len137,
                                                                                );
                                                                                let l138 = i32::from(
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>(),
                                                                                );
                                                                                use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V153;
                                                                                let v153 = match l138 {
                                                                                    0 => {
                                                                                        let e153 = {
                                                                                            let l139 = *base
                                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<*mut u8>();
                                                                                            let l140 = *base
                                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len141 = l140;
                                                                                            let bytes141 = _rt::Vec::from_raw_parts(
                                                                                                l139.cast(),
                                                                                                len141,
                                                                                                len141,
                                                                                            );
                                                                                            _rt::string_lift(bytes141)
                                                                                        };
                                                                                        V153::StringVal(e153)
                                                                                    }
                                                                                    1 => {
                                                                                        let e153 = {
                                                                                            let l142 = *base
                                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<f64>();
                                                                                            l142
                                                                                        };
                                                                                        V153::NumberVal(e153)
                                                                                    }
                                                                                    2 => {
                                                                                        let e153 = {
                                                                                            let l143 = *base
                                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<i64>();
                                                                                            l143
                                                                                        };
                                                                                        V153::IntegerVal(e153)
                                                                                    }
                                                                                    3 => {
                                                                                        let e153 = {
                                                                                            let l144 = i32::from(
                                                                                                *base
                                                                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                    .cast::<u8>(),
                                                                                            );
                                                                                            _rt::bool_lift(l144 as u8)
                                                                                        };
                                                                                        V153::BooleanVal(e153)
                                                                                    }
                                                                                    4 => V153::NullVal,
                                                                                    5 => {
                                                                                        let e153 = {
                                                                                            let l145 = *base
                                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<*mut u8>();
                                                                                            let l146 = *base
                                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len147 = l146;
                                                                                            let bytes147 = _rt::Vec::from_raw_parts(
                                                                                                l145.cast(),
                                                                                                len147,
                                                                                                len147,
                                                                                            );
                                                                                            _rt::string_lift(bytes147)
                                                                                        };
                                                                                        V153::DatetimeVal(e153)
                                                                                    }
                                                                                    6 => {
                                                                                        let e153 = {
                                                                                            let l148 = *base
                                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<f64>();
                                                                                            let l149 = *base
                                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<f64>();
                                                                                            super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                                                latitude: l148,
                                                                                                longitude: l149,
                                                                                            }
                                                                                        };
                                                                                        V153::GeoVal(e153)
                                                                                    }
                                                                                    n => {
                                                                                        debug_assert_eq!(n, 7, "invalid enum discriminant");
                                                                                        let e153 = {
                                                                                            let l150 = *base
                                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<*mut u8>();
                                                                                            let l151 = *base
                                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len152 = l151;
                                                                                            _rt::Vec::from_raw_parts(l150.cast(), len152, len152)
                                                                                        };
                                                                                        V153::BlobVal(e153)
                                                                                    }
                                                                                };
                                                                                (_rt::string_lift(bytes137), v153)
                                                                            };
                                                                            result154.push(e154);
                                                                        }
                                                                        _rt::cabi_dealloc(
                                                                            base154,
                                                                            len154 * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                            8,
                                                                        );
                                                                        result154
                                                                    };
                                                                    V163::ObjectVal(e163)
                                                                }
                                                                6 => V163::NullVal,
                                                                7 => {
                                                                    let e163 = {
                                                                        let l155 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<f64>();
                                                                        let l156 = *base
                                                                            .add(40 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<f64>();
                                                                        super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                            latitude: l155,
                                                                            longitude: l156,
                                                                        }
                                                                    };
                                                                    V163::GeoVal(e163)
                                                                }
                                                                8 => {
                                                                    let e163 = {
                                                                        let l157 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l158 = *base
                                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len159 = l158;
                                                                        let bytes159 = _rt::Vec::from_raw_parts(
                                                                            l157.cast(),
                                                                            len159,
                                                                            len159,
                                                                        );
                                                                        _rt::string_lift(bytes159)
                                                                    };
                                                                    V163::DatetimeVal(e163)
                                                                }
                                                                n => {
                                                                    debug_assert_eq!(n, 9, "invalid enum discriminant");
                                                                    let e163 = {
                                                                        let l160 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l161 = *base
                                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len162 = l161;
                                                                        _rt::Vec::from_raw_parts(l160.cast(), len162, len162)
                                                                    };
                                                                    V163::BlobVal(e163)
                                                                }
                                                            };
                                                            super::super::super::super::golem::vector::types::FilterCondition {
                                                                field: _rt::string_lift(bytes105),
                                                                operator: super::super::super::super::golem::vector::types::FilterOperator::_lift(
                                                                    l106 as u8,
                                                                ),
                                                                value: v163,
                                                            }
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                                inputs: _rt::Vec::from_raw_parts(
                                                    l164.cast(),
                                                    len166,
                                                    len166,
                                                ),
                                            }
                                        };
                                        result167.push(e167);
                                    }
                                    _rt::cabi_dealloc(
                                        base167,
                                        len167 * (48 + 4 * ::core::mem::size_of::<*const u8>()),
                                        8,
                                    );
                                    let l168 = *arg0
                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i32>();
                                    super::super::super::super::golem::vector::types::FilterExpression {
                                        nodes: result167,
                                        root_id: l168 as u32,
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        match l169 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l170 = *arg0
                                        .add(10 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l171 = *arg0
                                        .add(11 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let len172 = l171;
                                    let bytes172 = _rt::Vec::from_raw_parts(
                                        l170.cast(),
                                        len172,
                                        len172,
                                    );
                                    _rt::string_lift(bytes172)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        match l173 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l174 = i32::from(
                                        *arg0
                                            .add(1 + 12 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    _rt::bool_lift(l174 as u8)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        match l175 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l176 = i32::from(
                                        *arg0
                                            .add(3 + 12 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    _rt::bool_lift(l176 as u8)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        match l177 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l178 = *arg0
                                        .add(14 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l179 = *arg0
                                        .add(15 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base186 = l178;
                                    let len186 = l179;
                                    let mut result186 = _rt::Vec::with_capacity(len186);
                                    for i in 0..len186 {
                                        let base = base186
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        let e186 = {
                                            let l180 = *base.add(0).cast::<*mut u8>();
                                            let l181 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len182 = l181;
                                            let bytes182 = _rt::Vec::from_raw_parts(
                                                l180.cast(),
                                                len182,
                                                len182,
                                            );
                                            let l183 = *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l184 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len185 = l184;
                                            let bytes185 = _rt::Vec::from_raw_parts(
                                                l183.cast(),
                                                len185,
                                                len185,
                                            );
                                            (_rt::string_lift(bytes182), _rt::string_lift(bytes185))
                                        };
                                        result186.push(e186);
                                    }
                                    _rt::cabi_dealloc(
                                        base186,
                                        len186 * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    result186
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    );
                    _rt::cabi_dealloc(
                        arg0,
                        16 * ::core::mem::size_of::<*const u8>(),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let ptr188 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result187 {
                        Ok(e) => {
                            *ptr188.add(0).cast::<u8>() = (0i32) as u8;
                            let vec232 = e;
                            let len232 = vec232.len();
                            let layout232 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec232.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result232 = if layout232.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout232).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout232);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec232.into_iter().enumerate() {
                                let base = result232
                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let vec231 = e;
                                    let len231 = vec231.len();
                                    let layout231 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec231.len()
                                            * (8 + 14 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result231 = if layout231.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout231).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout231);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec231.into_iter().enumerate() {
                                        let base = result231
                                            .add(i * (8 + 14 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let super::super::super::super::golem::vector::types::SearchResult {
                                                id: id189,
                                                score: score189,
                                                distance: distance189,
                                                vector: vector189,
                                                metadata: metadata189,
                                            } = e;
                                            let vec190 = (id189.into_bytes()).into_boxed_slice();
                                            let ptr190 = vec190.as_ptr().cast::<u8>();
                                            let len190 = vec190.len();
                                            ::core::mem::forget(vec190);
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len190;
                                            *base.add(0).cast::<*mut u8>() = ptr190.cast_mut();
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<f32>() = _rt::as_f32(score189);
                                            *base
                                                .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<f32>() = _rt::as_f32(distance189);
                                            match vector189 {
                                                Some(e) => {
                                                    *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    use super::super::super::super::golem::vector::types::VectorData as V208;
                                                    match e {
                                                        V208::Dense(e) => {
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                            let vec191 = (e).into_boxed_slice();
                                                            let ptr191 = vec191.as_ptr().cast::<u8>();
                                                            let len191 = vec191.len();
                                                            ::core::mem::forget(vec191);
                                                            *base
                                                                .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len191;
                                                            *base
                                                                .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr191.cast_mut();
                                                        }
                                                        V208::Sparse(e) => {
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let super::super::super::super::golem::vector::types::SparseVector {
                                                                indices: indices192,
                                                                values: values192,
                                                                total_dimensions: total_dimensions192,
                                                            } = e;
                                                            let vec193 = (indices192).into_boxed_slice();
                                                            let ptr193 = vec193.as_ptr().cast::<u8>();
                                                            let len193 = vec193.len();
                                                            ::core::mem::forget(vec193);
                                                            *base
                                                                .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len193;
                                                            *base
                                                                .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr193.cast_mut();
                                                            let vec194 = (values192).into_boxed_slice();
                                                            let ptr194 = vec194.as_ptr().cast::<u8>();
                                                            let len194 = vec194.len();
                                                            ::core::mem::forget(vec194);
                                                            *base
                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len194;
                                                            *base
                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr194.cast_mut();
                                                            *base
                                                                .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<i32>() = _rt::as_i32(total_dimensions192);
                                                        }
                                                        V208::Binary(e) => {
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (2i32) as u8;
                                                            let super::super::super::super::golem::vector::types::BinaryVector {
                                                                data: data195,
                                                                dimensions: dimensions195,
                                                            } = e;
                                                            let vec196 = (data195).into_boxed_slice();
                                                            let ptr196 = vec196.as_ptr().cast::<u8>();
                                                            let len196 = vec196.len();
                                                            ::core::mem::forget(vec196);
                                                            *base
                                                                .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len196;
                                                            *base
                                                                .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr196.cast_mut();
                                                            *base
                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<i32>() = _rt::as_i32(dimensions195);
                                                        }
                                                        V208::Half(e) => {
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (3i32) as u8;
                                                            let super::super::super::super::golem::vector::types::HalfVector {
                                                                data: data197,
                                                                dimensions: dimensions197,
                                                            } = e;
                                                            let vec198 = (data197).into_boxed_slice();
                                                            let ptr198 = vec198.as_ptr().cast::<u8>();
                                                            let len198 = vec198.len();
                                                            ::core::mem::forget(vec198);
                                                            *base
                                                                .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len198;
                                                            *base
                                                                .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr198.cast_mut();
                                                            *base
                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<i32>() = _rt::as_i32(dimensions197);
                                                        }
                                                        V208::Named(e) => {
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (4i32) as u8;
                                                            let vec202 = e;
                                                            let len202 = vec202.len();
                                                            let layout202 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec202.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            let result202 = if layout202.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout202).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout202);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec202.into_iter().enumerate() {
                                                                let base = result202
                                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let (t199_0, t199_1) = e;
                                                                    let vec200 = (t199_0.into_bytes()).into_boxed_slice();
                                                                    let ptr200 = vec200.as_ptr().cast::<u8>();
                                                                    let len200 = vec200.len();
                                                                    ::core::mem::forget(vec200);
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len200;
                                                                    *base.add(0).cast::<*mut u8>() = ptr200.cast_mut();
                                                                    let vec201 = (t199_1).into_boxed_slice();
                                                                    let ptr201 = vec201.as_ptr().cast::<u8>();
                                                                    let len201 = vec201.len();
                                                                    ::core::mem::forget(vec201);
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len201;
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr201.cast_mut();
                                                                }
                                                            }
                                                            *base
                                                                .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len202;
                                                            *base
                                                                .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result202;
                                                        }
                                                        V208::Hybrid(e) => {
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (5i32) as u8;
                                                            let (t203_0, t203_1) = e;
                                                            let vec204 = (t203_0).into_boxed_slice();
                                                            let ptr204 = vec204.as_ptr().cast::<u8>();
                                                            let len204 = vec204.len();
                                                            ::core::mem::forget(vec204);
                                                            *base
                                                                .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len204;
                                                            *base
                                                                .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr204.cast_mut();
                                                            let super::super::super::super::golem::vector::types::SparseVector {
                                                                indices: indices205,
                                                                values: values205,
                                                                total_dimensions: total_dimensions205,
                                                            } = t203_1;
                                                            let vec206 = (indices205).into_boxed_slice();
                                                            let ptr206 = vec206.as_ptr().cast::<u8>();
                                                            let len206 = vec206.len();
                                                            ::core::mem::forget(vec206);
                                                            *base
                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len206;
                                                            *base
                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr206.cast_mut();
                                                            let vec207 = (values205).into_boxed_slice();
                                                            let ptr207 = vec207.as_ptr().cast::<u8>();
                                                            let len207 = vec207.len();
                                                            ::core::mem::forget(vec207);
                                                            *base
                                                                .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len207;
                                                            *base
                                                                .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr207.cast_mut();
                                                            *base
                                                                .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<i32>() = _rt::as_i32(total_dimensions205);
                                                        }
                                                    }
                                                }
                                                None => {
                                                    *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match metadata189 {
                                                Some(e) => {
                                                    *base
                                                        .add(8 + 11 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec230 = e;
                                                    let len230 = vec230.len();
                                                    let layout230 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec230.len()
                                                            * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                        8,
                                                    );
                                                    let result230 = if layout230.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout230).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout230);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec230.into_iter().enumerate() {
                                                        let base = result230
                                                            .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let (t209_0, t209_1) = e;
                                                            let vec210 = (t209_0.into_bytes()).into_boxed_slice();
                                                            let ptr210 = vec210.as_ptr().cast::<u8>();
                                                            let len210 = vec210.len();
                                                            ::core::mem::forget(vec210);
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len210;
                                                            *base.add(0).cast::<*mut u8>() = ptr210.cast_mut();
                                                            use super::super::super::super::golem::vector::types::FlatMetadataValue as V229;
                                                            match t209_1 {
                                                                V229::StringVal(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                    let vec211 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr211 = vec211.as_ptr().cast::<u8>();
                                                                    let len211 = vec211.len();
                                                                    ::core::mem::forget(vec211);
                                                                    *base
                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len211;
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr211.cast_mut();
                                                                }
                                                                V229::NumberVal(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<f64>() = _rt::as_f64(e);
                                                                }
                                                                V229::IntegerVal(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (2i32) as u8;
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i64>() = _rt::as_i64(e);
                                                                }
                                                                V229::BooleanVal(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (3i32) as u8;
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (match e {
                                                                        true => 1,
                                                                        false => 0,
                                                                    }) as u8;
                                                                }
                                                                V229::ArrayVal(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (4i32) as u8;
                                                                    let vec217 = e;
                                                                    let len217 = vec217.len();
                                                                    let layout217 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec217.len() * 24,
                                                                        8,
                                                                    );
                                                                    let result217 = if layout217.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout217).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout217);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec217.into_iter().enumerate() {
                                                                        let base = result217.add(i * 24);
                                                                        {
                                                                            use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V216;
                                                                            match e {
                                                                                V216::StringVal(e) => {
                                                                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                                    let vec212 = (e.into_bytes()).into_boxed_slice();
                                                                                    let ptr212 = vec212.as_ptr().cast::<u8>();
                                                                                    let len212 = vec212.len();
                                                                                    ::core::mem::forget(vec212);
                                                                                    *base
                                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len212;
                                                                                    *base.add(8).cast::<*mut u8>() = ptr212.cast_mut();
                                                                                }
                                                                                V216::NumberVal(e) => {
                                                                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                                    *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                                                                }
                                                                                V216::IntegerVal(e) => {
                                                                                    *base.add(0).cast::<u8>() = (2i32) as u8;
                                                                                    *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                                                }
                                                                                V216::BooleanVal(e) => {
                                                                                    *base.add(0).cast::<u8>() = (3i32) as u8;
                                                                                    *base.add(8).cast::<u8>() = (match e {
                                                                                        true => 1,
                                                                                        false => 0,
                                                                                    }) as u8;
                                                                                }
                                                                                V216::NullVal => {
                                                                                    *base.add(0).cast::<u8>() = (4i32) as u8;
                                                                                }
                                                                                V216::DatetimeVal(e) => {
                                                                                    *base.add(0).cast::<u8>() = (5i32) as u8;
                                                                                    let vec213 = (e.into_bytes()).into_boxed_slice();
                                                                                    let ptr213 = vec213.as_ptr().cast::<u8>();
                                                                                    let len213 = vec213.len();
                                                                                    ::core::mem::forget(vec213);
                                                                                    *base
                                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len213;
                                                                                    *base.add(8).cast::<*mut u8>() = ptr213.cast_mut();
                                                                                }
                                                                                V216::GeoVal(e) => {
                                                                                    *base.add(0).cast::<u8>() = (6i32) as u8;
                                                                                    let super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                                        latitude: latitude214,
                                                                                        longitude: longitude214,
                                                                                    } = e;
                                                                                    *base.add(8).cast::<f64>() = _rt::as_f64(latitude214);
                                                                                    *base.add(16).cast::<f64>() = _rt::as_f64(longitude214);
                                                                                }
                                                                                V216::BlobVal(e) => {
                                                                                    *base.add(0).cast::<u8>() = (7i32) as u8;
                                                                                    let vec215 = (e).into_boxed_slice();
                                                                                    let ptr215 = vec215.as_ptr().cast::<u8>();
                                                                                    let len215 = vec215.len();
                                                                                    ::core::mem::forget(vec215);
                                                                                    *base
                                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len215;
                                                                                    *base.add(8).cast::<*mut u8>() = ptr215.cast_mut();
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len217;
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result217;
                                                                }
                                                                V229::ObjectVal(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (5i32) as u8;
                                                                    let vec225 = e;
                                                                    let len225 = vec225.len();
                                                                    let layout225 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec225.len()
                                                                            * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                        8,
                                                                    );
                                                                    let result225 = if layout225.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout225).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout225);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec225.into_iter().enumerate() {
                                                                        let base = result225
                                                                            .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let (t218_0, t218_1) = e;
                                                                            let vec219 = (t218_0.into_bytes()).into_boxed_slice();
                                                                            let ptr219 = vec219.as_ptr().cast::<u8>();
                                                                            let len219 = vec219.len();
                                                                            ::core::mem::forget(vec219);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len219;
                                                                            *base.add(0).cast::<*mut u8>() = ptr219.cast_mut();
                                                                            use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V224;
                                                                            match t218_1 {
                                                                                V224::StringVal(e) => {
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                    let vec220 = (e.into_bytes()).into_boxed_slice();
                                                                                    let ptr220 = vec220.as_ptr().cast::<u8>();
                                                                                    let len220 = vec220.len();
                                                                                    ::core::mem::forget(vec220);
                                                                                    *base
                                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len220;
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>() = ptr220.cast_mut();
                                                                                }
                                                                                V224::NumberVal(e) => {
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<f64>() = _rt::as_f64(e);
                                                                                }
                                                                                V224::IntegerVal(e) => {
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (2i32) as u8;
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i64>() = _rt::as_i64(e);
                                                                                }
                                                                                V224::BooleanVal(e) => {
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (3i32) as u8;
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (match e {
                                                                                        true => 1,
                                                                                        false => 0,
                                                                                    }) as u8;
                                                                                }
                                                                                V224::NullVal => {
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (4i32) as u8;
                                                                                }
                                                                                V224::DatetimeVal(e) => {
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (5i32) as u8;
                                                                                    let vec221 = (e.into_bytes()).into_boxed_slice();
                                                                                    let ptr221 = vec221.as_ptr().cast::<u8>();
                                                                                    let len221 = vec221.len();
                                                                                    ::core::mem::forget(vec221);
                                                                                    *base
                                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len221;
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>() = ptr221.cast_mut();
                                                                                }
                                                                                V224::GeoVal(e) => {
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (6i32) as u8;
                                                                                    let super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                                        latitude: latitude222,
                                                                                        longitude: longitude222,
                                                                                    } = e;
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<f64>() = _rt::as_f64(latitude222);
                                                                                    *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<f64>() = _rt::as_f64(longitude222);
                                                                                }
                                                                                V224::BlobVal(e) => {
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (7i32) as u8;
                                                                                    let vec223 = (e).into_boxed_slice();
                                                                                    let ptr223 = vec223.as_ptr().cast::<u8>();
                                                                                    let len223 = vec223.len();
                                                                                    ::core::mem::forget(vec223);
                                                                                    *base
                                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len223;
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>() = ptr223.cast_mut();
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len225;
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result225;
                                                                }
                                                                V229::NullVal => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (6i32) as u8;
                                                                }
                                                                V229::GeoVal(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (7i32) as u8;
                                                                    let super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                        latitude: latitude226,
                                                                        longitude: longitude226,
                                                                    } = e;
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<f64>() = _rt::as_f64(latitude226);
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<f64>() = _rt::as_f64(longitude226);
                                                                }
                                                                V229::DatetimeVal(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (8i32) as u8;
                                                                    let vec227 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr227 = vec227.as_ptr().cast::<u8>();
                                                                    let len227 = vec227.len();
                                                                    ::core::mem::forget(vec227);
                                                                    *base
                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len227;
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr227.cast_mut();
                                                                }
                                                                V229::BlobVal(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (9i32) as u8;
                                                                    let vec228 = (e).into_boxed_slice();
                                                                    let ptr228 = vec228.as_ptr().cast::<u8>();
                                                                    let len228 = vec228.len();
                                                                    ::core::mem::forget(vec228);
                                                                    *base
                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len228;
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr228.cast_mut();
                                                                }
                                                            }
                                                        }
                                                    }
                                                    *base
                                                        .add(8 + 13 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len230;
                                                    *base
                                                        .add(8 + 12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result230;
                                                }
                                                None => {
                                                    *base
                                                        .add(8 + 11 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                    }
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len231;
                                    *base.add(0).cast::<*mut u8>() = result231;
                                }
                            }
                            *ptr188
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len232;
                            *ptr188
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result232;
                        }
                        Err(e) => {
                            *ptr188.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::golem::vector::types::VectorError as V243;
                            match e {
                                V243::NotFound(e) => {
                                    *ptr188
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                    let vec233 = (e.into_bytes()).into_boxed_slice();
                                    let ptr233 = vec233.as_ptr().cast::<u8>();
                                    let len233 = vec233.len();
                                    ::core::mem::forget(vec233);
                                    *ptr188
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len233;
                                    *ptr188
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr233.cast_mut();
                                }
                                V243::AlreadyExists(e) => {
                                    *ptr188
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec234 = (e.into_bytes()).into_boxed_slice();
                                    let ptr234 = vec234.as_ptr().cast::<u8>();
                                    let len234 = vec234.len();
                                    ::core::mem::forget(vec234);
                                    *ptr188
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len234;
                                    *ptr188
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr234.cast_mut();
                                }
                                V243::InvalidParams(e) => {
                                    *ptr188
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                    let vec235 = (e.into_bytes()).into_boxed_slice();
                                    let ptr235 = vec235.as_ptr().cast::<u8>();
                                    let len235 = vec235.len();
                                    ::core::mem::forget(vec235);
                                    *ptr188
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len235;
                                    *ptr188
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr235.cast_mut();
                                }
                                V243::UnsupportedFeature(e) => {
                                    *ptr188
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                    let vec236 = (e.into_bytes()).into_boxed_slice();
                                    let ptr236 = vec236.as_ptr().cast::<u8>();
                                    let len236 = vec236.len();
                                    ::core::mem::forget(vec236);
                                    *ptr188
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len236;
                                    *ptr188
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr236.cast_mut();
                                }
                                V243::DimensionMismatch(e) => {
                                    *ptr188
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (4i32) as u8;
                                    let vec237 = (e.into_bytes()).into_boxed_slice();
                                    let ptr237 = vec237.as_ptr().cast::<u8>();
                                    let len237 = vec237.len();
                                    ::core::mem::forget(vec237);
                                    *ptr188
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len237;
                                    *ptr188
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr237.cast_mut();
                                }
                                V243::InvalidVector(e) => {
                                    *ptr188
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (5i32) as u8;
                                    let vec238 = (e.into_bytes()).into_boxed_slice();
                                    let ptr238 = vec238.as_ptr().cast::<u8>();
                                    let len238 = vec238.len();
                                    ::core::mem::forget(vec238);
                                    *ptr188
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len238;
                                    *ptr188
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr238.cast_mut();
                                }
                                V243::Unauthorized(e) => {
                                    *ptr188
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (6i32) as u8;
                                    let vec239 = (e.into_bytes()).into_boxed_slice();
                                    let ptr239 = vec239.as_ptr().cast::<u8>();
                                    let len239 = vec239.len();
                                    ::core::mem::forget(vec239);
                                    *ptr188
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len239;
                                    *ptr188
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr239.cast_mut();
                                }
                                V243::RateLimited(e) => {
                                    *ptr188
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (7i32) as u8;
                                    let vec240 = (e.into_bytes()).into_boxed_slice();
                                    let ptr240 = vec240.as_ptr().cast::<u8>();
                                    let len240 = vec240.len();
                                    ::core::mem::forget(vec240);
                                    *ptr188
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len240;
                                    *ptr188
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr240.cast_mut();
                                }
                                V243::ProviderError(e) => {
                                    *ptr188
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (8i32) as u8;
                                    let vec241 = (e.into_bytes()).into_boxed_slice();
                                    let ptr241 = vec241.as_ptr().cast::<u8>();
                                    let len241 = vec241.len();
                                    ::core::mem::forget(vec241);
                                    *ptr188
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len241;
                                    *ptr188
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr241.cast_mut();
                                }
                                V243::ConnectionError(e) => {
                                    *ptr188
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (9i32) as u8;
                                    let vec242 = (e.into_bytes()).into_boxed_slice();
                                    let ptr242 = vec242.as_ptr().cast::<u8>();
                                    let len242 = vec242.len();
                                    ::core::mem::forget(vec242);
                                    *ptr188
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len242;
                                    *ptr188
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr242.cast_mut();
                                }
                            }
                        }
                    };
                    ptr188
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_batch_search<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let base80 = l1;
                            let len80 = l2;
                            for i in 0..len80 {
                                let base = base80
                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let l3 = *base.add(0).cast::<*mut u8>();
                                    let l4 = *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base79 = l3;
                                    let len79 = l4;
                                    for i in 0..len79 {
                                        let base = base79
                                            .add(i * (8 + 14 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let l5 = *base.add(0).cast::<*mut u8>();
                                            let l6 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l5, l6, 1);
                                            let l7 = i32::from(
                                                *base
                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l7 {
                                                0 => {}
                                                _ => {
                                                    let l8 = i32::from(
                                                        *base
                                                            .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l8 {
                                                        0 => {
                                                            let l9 = *base
                                                                .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l10 = *base
                                                                .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base11 = l9;
                                                            let len11 = l10;
                                                            _rt::cabi_dealloc(base11, len11 * 4, 4);
                                                        }
                                                        1 => {
                                                            let l12 = *base
                                                                .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l13 = *base
                                                                .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base14 = l12;
                                                            let len14 = l13;
                                                            _rt::cabi_dealloc(base14, len14 * 4, 4);
                                                            let l15 = *base
                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l16 = *base
                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base17 = l15;
                                                            let len17 = l16;
                                                            _rt::cabi_dealloc(base17, len17 * 4, 4);
                                                        }
                                                        2 => {
                                                            let l18 = *base
                                                                .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l19 = *base
                                                                .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base20 = l18;
                                                            let len20 = l19;
                                                            _rt::cabi_dealloc(base20, len20 * 1, 1);
                                                        }
                                                        3 => {
                                                            let l21 = *base
                                                                .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l22 = *base
                                                                .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base23 = l21;
                                                            let len23 = l22;
                                                            _rt::cabi_dealloc(base23, len23 * 4, 4);
                                                        }
                                                        4 => {
                                                            let l24 = *base
                                                                .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l25 = *base
                                                                .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base31 = l24;
                                                            let len31 = l25;
                                                            for i in 0..len31 {
                                                                let base = base31
                                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l26 = *base.add(0).cast::<*mut u8>();
                                                                    let l27 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l26, l27, 1);
                                                                    let l28 = *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l29 = *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base30 = l28;
                                                                    let len30 = l29;
                                                                    _rt::cabi_dealloc(base30, len30 * 4, 4);
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base31,
                                                                len31 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                        }
                                                        _ => {
                                                            let l32 = *base
                                                                .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l33 = *base
                                                                .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base34 = l32;
                                                            let len34 = l33;
                                                            _rt::cabi_dealloc(base34, len34 * 4, 4);
                                                            let l35 = *base
                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l36 = *base
                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base37 = l35;
                                                            let len37 = l36;
                                                            _rt::cabi_dealloc(base37, len37 * 4, 4);
                                                            let l38 = *base
                                                                .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l39 = *base
                                                                .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base40 = l38;
                                                            let len40 = l39;
                                                            _rt::cabi_dealloc(base40, len40 * 4, 4);
                                                        }
                                                    }
                                                }
                                            }
                                            let l41 = i32::from(
                                                *base
                                                    .add(8 + 11 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l41 {
                                                0 => {}
                                                _ => {
                                                    let l42 = *base
                                                        .add(8 + 12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l43 = *base
                                                        .add(8 + 13 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base78 = l42;
                                                    let len78 = l43;
                                                    for i in 0..len78 {
                                                        let base = base78
                                                            .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l44 = *base.add(0).cast::<*mut u8>();
                                                            let l45 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l44, l45, 1);
                                                            let l46 = i32::from(
                                                                *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l46 {
                                                                0 => {
                                                                    let l47 = *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l48 = *base
                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l47, l48, 1);
                                                                }
                                                                1 => {}
                                                                2 => {}
                                                                3 => {}
                                                                4 => {
                                                                    let l49 = *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l50 = *base
                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base59 = l49;
                                                                    let len59 = l50;
                                                                    for i in 0..len59 {
                                                                        let base = base59.add(i * 24);
                                                                        {
                                                                            let l51 = i32::from(*base.add(0).cast::<u8>());
                                                                            match l51 {
                                                                                0 => {
                                                                                    let l52 = *base.add(8).cast::<*mut u8>();
                                                                                    let l53 = *base
                                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l52, l53, 1);
                                                                                }
                                                                                1 => {}
                                                                                2 => {}
                                                                                3 => {}
                                                                                4 => {}
                                                                                5 => {
                                                                                    let l54 = *base.add(8).cast::<*mut u8>();
                                                                                    let l55 = *base
                                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l54, l55, 1);
                                                                                }
                                                                                6 => {}
                                                                                _ => {
                                                                                    let l56 = *base.add(8).cast::<*mut u8>();
                                                                                    let l57 = *base
                                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base58 = l56;
                                                                                    let len58 = l57;
                                                                                    _rt::cabi_dealloc(base58, len58 * 1, 1);
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(base59, len59 * 24, 8);
                                                                }
                                                                5 => {
                                                                    let l60 = *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l61 = *base
                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base72 = l60;
                                                                    let len72 = l61;
                                                                    for i in 0..len72 {
                                                                        let base = base72
                                                                            .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l62 = *base.add(0).cast::<*mut u8>();
                                                                            let l63 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l62, l63, 1);
                                                                            let l64 = i32::from(
                                                                                *base
                                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            match l64 {
                                                                                0 => {
                                                                                    let l65 = *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l66 = *base
                                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l65, l66, 1);
                                                                                }
                                                                                1 => {}
                                                                                2 => {}
                                                                                3 => {}
                                                                                4 => {}
                                                                                5 => {
                                                                                    let l67 = *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l68 = *base
                                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l67, l68, 1);
                                                                                }
                                                                                6 => {}
                                                                                _ => {
                                                                                    let l69 = *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l70 = *base
                                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base71 = l69;
                                                                                    let len71 = l70;
                                                                                    _rt::cabi_dealloc(base71, len71 * 1, 1);
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base72,
                                                                        len72 * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                        8,
                                                                    );
                                                                }
                                                                6 => {}
                                                                7 => {}
                                                                8 => {
                                                                    let l73 = *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l74 = *base
                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l73, l74, 1);
                                                                }
                                                                _ => {
                                                                    let l75 = *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l76 = *base
                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base77 = l75;
                                                                    let len77 = l76;
                                                                    _rt::cabi_dealloc(base77, len77 * 1, 1);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base78,
                                                        len78 * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                        8,
                                                    );
                                                }
                                            }
                                        }
                                    }
                                    _rt::cabi_dealloc(
                                        base79,
                                        len79 * (8 + 14 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                }
                            }
                            _rt::cabi_dealloc(
                                base80,
                                len80 * (2 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                        }
                        _ => {
                            let l81 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l81 {
                                0 => {
                                    let l82 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l83 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l82, l83, 1);
                                }
                                1 => {
                                    let l84 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l85 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l84, l85, 1);
                                }
                                2 => {
                                    let l86 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l87 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l86, l87, 1);
                                }
                                3 => {
                                    let l88 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l89 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l88, l89, 1);
                                }
                                4 => {
                                    let l90 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l91 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l90, l91, 1);
                                }
                                5 => {
                                    let l92 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l93 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l92, l93, 1);
                                }
                                6 => {
                                    let l94 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l95 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l94, l95, 1);
                                }
                                7 => {
                                    let l96 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l97 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l96, l97, 1);
                                }
                                8 => {
                                    let l98 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l99 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l98, l99, 1);
                                }
                                _ => {
                                    let l100 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l101 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l100, l101, 1);
                                }
                            }
                        }
                    }
                }
                pub trait Guest {
                    /// Similarity search
                    fn search_vectors(
                        collection: _rt::String,
                        query: SearchQuery,
                        limit: u32,
                        filter: Option<FilterExpression>,
                        namespace: Option<_rt::String>,
                        include_vectors: Option<bool>,
                        include_metadata: Option<bool>,
                        min_score: Option<f32>,
                        max_distance: Option<f32>,
                        search_params: Option<_rt::Vec<(_rt::String, _rt::String)>>,
                    ) -> Result<_rt::Vec<SearchResult>, VectorError>;
                    /// Simple vector similarity search (convenience)
                    fn find_similar(
                        collection: _rt::String,
                        vector: VectorData,
                        limit: u32,
                        namespace: Option<_rt::String>,
                    ) -> Result<_rt::Vec<SearchResult>, VectorError>;
                    /// Batch similarity search
                    fn batch_search(
                        collection: _rt::String,
                        queries: _rt::Vec<SearchQuery>,
                        limit: u32,
                        filter: Option<FilterExpression>,
                        namespace: Option<_rt::String>,
                        include_vectors: Option<bool>,
                        include_metadata: Option<bool>,
                        search_params: Option<_rt::Vec<(_rt::String, _rt::String)>>,
                    ) -> Result<_rt::Vec<_rt::Vec<SearchResult>>, VectorError>;
                }
                #[doc(hidden)]
                macro_rules! __export_golem_vector_search_1_0_0_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "golem:vector/search@1.0.0#search-vectors")] unsafe extern "C" fn
                        export_search_vectors(arg0 : * mut u8,) -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_search_vectors_cabi::<$ty > (arg0) }
                        } #[unsafe (export_name =
                        "cabi_post_golem:vector/search@1.0.0#search-vectors")] unsafe
                        extern "C" fn _post_return_search_vectors(arg0 : * mut u8,) {
                        unsafe { $($path_to_types)*:: __post_return_search_vectors::<$ty
                        > (arg0) } } #[unsafe (export_name =
                        "golem:vector/search@1.0.0#find-similar")] unsafe extern "C" fn
                        export_find_similar(arg0 : * mut u8, arg1 : usize, arg2 : i32,
                        arg3 : * mut u8, arg4 : usize, arg5 : * mut u8, arg6 : usize,
                        arg7 : * mut u8, arg8 : usize, arg9 : i32, arg10 : i32, arg11 :
                        i32, arg12 : * mut u8, arg13 : usize,) -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_find_similar_cabi::<$ty > (arg0,
                        arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10,
                        arg11, arg12, arg13) } } #[unsafe (export_name =
                        "cabi_post_golem:vector/search@1.0.0#find-similar")] unsafe
                        extern "C" fn _post_return_find_similar(arg0 : * mut u8,) {
                        unsafe { $($path_to_types)*:: __post_return_find_similar::<$ty >
                        (arg0) } } #[unsafe (export_name =
                        "golem:vector/search@1.0.0#batch-search")] unsafe extern "C" fn
                        export_batch_search(arg0 : * mut u8,) -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_batch_search_cabi::<$ty > (arg0) } }
                        #[unsafe (export_name =
                        "cabi_post_golem:vector/search@1.0.0#batch-search")] unsafe
                        extern "C" fn _post_return_batch_search(arg0 : * mut u8,) {
                        unsafe { $($path_to_types)*:: __post_return_batch_search::<$ty >
                        (arg0) } } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_golem_vector_search_1_0_0_cabi;
                #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<
                        u8,
                    >; 4 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 4
                        * ::core::mem::size_of::<*const u8>()],
                );
            }
            /// Extended search capabilities (provider-dependent)
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod search_extended {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type Id = super::super::super::super::golem::vector::types::Id;
                pub type VectorData = super::super::super::super::golem::vector::types::VectorData;
                pub type SearchResult = super::super::super::super::golem::vector::types::SearchResult;
                pub type FilterExpression = super::super::super::super::golem::vector::types::FilterExpression;
                pub type VectorError = super::super::super::super::golem::vector::types::VectorError;
                pub type FlatMetadataValue = super::super::super::super::golem::vector::types::FlatMetadataValue;
                pub type SearchQuery = super::super::super::super::exports::golem::vector::search::SearchQuery;
                /// Recommendation example types
                #[derive(Clone)]
                pub enum RecommendationExample {
                    VectorId(Id),
                    VectorData(VectorData),
                }
                impl ::core::fmt::Debug for RecommendationExample {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        match self {
                            RecommendationExample::VectorId(e) => {
                                f.debug_tuple("RecommendationExample::VectorId")
                                    .field(e)
                                    .finish()
                            }
                            RecommendationExample::VectorData(e) => {
                                f.debug_tuple("RecommendationExample::VectorData")
                                    .field(e)
                                    .finish()
                            }
                        }
                    }
                }
                #[repr(u8)]
                #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
                pub enum RecommendationStrategy {
                    AverageVector,
                    BestScore,
                    Centroid,
                }
                impl ::core::fmt::Debug for RecommendationStrategy {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        match self {
                            RecommendationStrategy::AverageVector => {
                                f.debug_tuple("RecommendationStrategy::AverageVector")
                                    .finish()
                            }
                            RecommendationStrategy::BestScore => {
                                f.debug_tuple("RecommendationStrategy::BestScore").finish()
                            }
                            RecommendationStrategy::Centroid => {
                                f.debug_tuple("RecommendationStrategy::Centroid").finish()
                            }
                        }
                    }
                }
                impl RecommendationStrategy {
                    #[doc(hidden)]
                    pub unsafe fn _lift(val: u8) -> RecommendationStrategy {
                        if !cfg!(debug_assertions) {
                            return ::core::mem::transmute(val);
                        }
                        match val {
                            0 => RecommendationStrategy::AverageVector,
                            1 => RecommendationStrategy::BestScore,
                            2 => RecommendationStrategy::Centroid,
                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                }
                /// Context pair for discovery
                #[derive(Clone)]
                pub struct ContextPair {
                    pub positive: RecommendationExample,
                    pub negative: RecommendationExample,
                }
                impl ::core::fmt::Debug for ContextPair {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("ContextPair")
                            .field("positive", &self.positive)
                            .field("negative", &self.negative)
                            .finish()
                    }
                }
                /// Grouped search result
                #[derive(Clone)]
                pub struct GroupedSearchResult {
                    pub group_value: FlatMetadataValue,
                    pub results: _rt::Vec<SearchResult>,
                    pub group_count: u32,
                }
                impl ::core::fmt::Debug for GroupedSearchResult {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("GroupedSearchResult")
                            .field("group-value", &self.group_value)
                            .field("results", &self.results)
                            .field("group-count", &self.group_count)
                            .finish()
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_recommend_vectors_cabi<T: Guest>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len2 = l1;
                    let bytes2 = _rt::Vec::from_raw_parts(l0.cast(), len2, len2);
                    let l3 = *arg0
                        .add(2 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l4 = *arg0
                        .add(3 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base49 = l3;
                    let len49 = l4;
                    let mut result49 = _rt::Vec::with_capacity(len49);
                    for i in 0..len49 {
                        let base = base49
                            .add(i * (9 * ::core::mem::size_of::<*const u8>()));
                        let e49 = {
                            let l5 = i32::from(*base.add(0).cast::<u8>());
                            let v48 = match l5 {
                                0 => {
                                    let e48 = {
                                        let l6 = *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l7 = *base
                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len8 = l7;
                                        let bytes8 = _rt::Vec::from_raw_parts(
                                            l6.cast(),
                                            len8,
                                            len8,
                                        );
                                        _rt::string_lift(bytes8)
                                    };
                                    RecommendationExample::VectorId(e48)
                                }
                                n => {
                                    debug_assert_eq!(n, 1, "invalid enum discriminant");
                                    let e48 = {
                                        let l9 = i32::from(
                                            *base.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                        );
                                        use super::super::super::super::golem::vector::types::VectorData as V47;
                                        let v47 = match l9 {
                                            0 => {
                                                let e47 = {
                                                    let l10 = *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l11 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len12 = l11;
                                                    _rt::Vec::from_raw_parts(l10.cast(), len12, len12)
                                                };
                                                V47::Dense(e47)
                                            }
                                            1 => {
                                                let e47 = {
                                                    let l13 = *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l14 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len15 = l14;
                                                    let l16 = *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l17 = *base
                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len18 = l17;
                                                    let l19 = *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i32>();
                                                    super::super::super::super::golem::vector::types::SparseVector {
                                                        indices: _rt::Vec::from_raw_parts(l13.cast(), len15, len15),
                                                        values: _rt::Vec::from_raw_parts(l16.cast(), len18, len18),
                                                        total_dimensions: l19 as u32,
                                                    }
                                                };
                                                V47::Sparse(e47)
                                            }
                                            2 => {
                                                let e47 = {
                                                    let l20 = *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l21 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len22 = l21;
                                                    let l23 = *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i32>();
                                                    super::super::super::super::golem::vector::types::BinaryVector {
                                                        data: _rt::Vec::from_raw_parts(l20.cast(), len22, len22),
                                                        dimensions: l23 as u32,
                                                    }
                                                };
                                                V47::Binary(e47)
                                            }
                                            3 => {
                                                let e47 = {
                                                    let l24 = *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l25 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len26 = l25;
                                                    let l27 = *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i32>();
                                                    super::super::super::super::golem::vector::types::HalfVector {
                                                        data: _rt::Vec::from_raw_parts(l24.cast(), len26, len26),
                                                        dimensions: l27 as u32,
                                                    }
                                                };
                                                V47::Half(e47)
                                            }
                                            4 => {
                                                let e47 = {
                                                    let l28 = *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l29 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base36 = l28;
                                                    let len36 = l29;
                                                    let mut result36 = _rt::Vec::with_capacity(len36);
                                                    for i in 0..len36 {
                                                        let base = base36
                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                        let e36 = {
                                                            let l30 = *base.add(0).cast::<*mut u8>();
                                                            let l31 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len32 = l31;
                                                            let bytes32 = _rt::Vec::from_raw_parts(
                                                                l30.cast(),
                                                                len32,
                                                                len32,
                                                            );
                                                            let l33 = *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l34 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len35 = l34;
                                                            (
                                                                _rt::string_lift(bytes32),
                                                                _rt::Vec::from_raw_parts(l33.cast(), len35, len35),
                                                            )
                                                        };
                                                        result36.push(e36);
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base36,
                                                        len36 * (4 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    result36
                                                };
                                                V47::Named(e47)
                                            }
                                            n => {
                                                debug_assert_eq!(n, 5, "invalid enum discriminant");
                                                let e47 = {
                                                    let l37 = *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l38 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len39 = l38;
                                                    let l40 = *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l41 = *base
                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len42 = l41;
                                                    let l43 = *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l44 = *base
                                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len45 = l44;
                                                    let l46 = *base
                                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i32>();
                                                    (
                                                        _rt::Vec::from_raw_parts(l37.cast(), len39, len39),
                                                        super::super::super::super::golem::vector::types::SparseVector {
                                                            indices: _rt::Vec::from_raw_parts(l40.cast(), len42, len42),
                                                            values: _rt::Vec::from_raw_parts(l43.cast(), len45, len45),
                                                            total_dimensions: l46 as u32,
                                                        },
                                                    )
                                                };
                                                V47::Hybrid(e47)
                                            }
                                        };
                                        v47
                                    };
                                    RecommendationExample::VectorData(e48)
                                }
                            };
                            v48
                        };
                        result49.push(e49);
                    }
                    _rt::cabi_dealloc(
                        base49,
                        len49 * (9 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let l50 = i32::from(
                        *arg0.add(4 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    let l98 = *arg0
                        .add(7 * ::core::mem::size_of::<*const u8>())
                        .cast::<i32>();
                    let l99 = i32::from(
                        *arg0.add(8 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    let l172 = i32::from(
                        *arg0.add(12 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    let l176 = i32::from(
                        *arg0.add(15 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    let l178 = i32::from(
                        *arg0
                            .add(2 + 15 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    let l180 = i32::from(
                        *arg0
                            .add(4 + 15 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    let result182 = T::recommend_vectors(
                        _rt::string_lift(bytes2),
                        result49,
                        match l50 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l51 = *arg0
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l52 = *arg0
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base97 = l51;
                                    let len97 = l52;
                                    let mut result97 = _rt::Vec::with_capacity(len97);
                                    for i in 0..len97 {
                                        let base = base97
                                            .add(i * (9 * ::core::mem::size_of::<*const u8>()));
                                        let e97 = {
                                            let l53 = i32::from(*base.add(0).cast::<u8>());
                                            let v96 = match l53 {
                                                0 => {
                                                    let e96 = {
                                                        let l54 = *base
                                                            .add(::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l55 = *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len56 = l55;
                                                        let bytes56 = _rt::Vec::from_raw_parts(
                                                            l54.cast(),
                                                            len56,
                                                            len56,
                                                        );
                                                        _rt::string_lift(bytes56)
                                                    };
                                                    RecommendationExample::VectorId(e96)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                    let e96 = {
                                                        let l57 = i32::from(
                                                            *base.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                                        );
                                                        use super::super::super::super::golem::vector::types::VectorData as V95;
                                                        let v95 = match l57 {
                                                            0 => {
                                                                let e95 = {
                                                                    let l58 = *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l59 = *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len60 = l59;
                                                                    _rt::Vec::from_raw_parts(l58.cast(), len60, len60)
                                                                };
                                                                V95::Dense(e95)
                                                            }
                                                            1 => {
                                                                let e95 = {
                                                                    let l61 = *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l62 = *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len63 = l62;
                                                                    let l64 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l65 = *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len66 = l65;
                                                                    let l67 = *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i32>();
                                                                    super::super::super::super::golem::vector::types::SparseVector {
                                                                        indices: _rt::Vec::from_raw_parts(l61.cast(), len63, len63),
                                                                        values: _rt::Vec::from_raw_parts(l64.cast(), len66, len66),
                                                                        total_dimensions: l67 as u32,
                                                                    }
                                                                };
                                                                V95::Sparse(e95)
                                                            }
                                                            2 => {
                                                                let e95 = {
                                                                    let l68 = *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l69 = *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len70 = l69;
                                                                    let l71 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i32>();
                                                                    super::super::super::super::golem::vector::types::BinaryVector {
                                                                        data: _rt::Vec::from_raw_parts(l68.cast(), len70, len70),
                                                                        dimensions: l71 as u32,
                                                                    }
                                                                };
                                                                V95::Binary(e95)
                                                            }
                                                            3 => {
                                                                let e95 = {
                                                                    let l72 = *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l73 = *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len74 = l73;
                                                                    let l75 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i32>();
                                                                    super::super::super::super::golem::vector::types::HalfVector {
                                                                        data: _rt::Vec::from_raw_parts(l72.cast(), len74, len74),
                                                                        dimensions: l75 as u32,
                                                                    }
                                                                };
                                                                V95::Half(e95)
                                                            }
                                                            4 => {
                                                                let e95 = {
                                                                    let l76 = *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l77 = *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base84 = l76;
                                                                    let len84 = l77;
                                                                    let mut result84 = _rt::Vec::with_capacity(len84);
                                                                    for i in 0..len84 {
                                                                        let base = base84
                                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                        let e84 = {
                                                                            let l78 = *base.add(0).cast::<*mut u8>();
                                                                            let l79 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len80 = l79;
                                                                            let bytes80 = _rt::Vec::from_raw_parts(
                                                                                l78.cast(),
                                                                                len80,
                                                                                len80,
                                                                            );
                                                                            let l81 = *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l82 = *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len83 = l82;
                                                                            (
                                                                                _rt::string_lift(bytes80),
                                                                                _rt::Vec::from_raw_parts(l81.cast(), len83, len83),
                                                                            )
                                                                        };
                                                                        result84.push(e84);
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base84,
                                                                        len84 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    result84
                                                                };
                                                                V95::Named(e95)
                                                            }
                                                            n => {
                                                                debug_assert_eq!(n, 5, "invalid enum discriminant");
                                                                let e95 = {
                                                                    let l85 = *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l86 = *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len87 = l86;
                                                                    let l88 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l89 = *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len90 = l89;
                                                                    let l91 = *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l92 = *base
                                                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len93 = l92;
                                                                    let l94 = *base
                                                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i32>();
                                                                    (
                                                                        _rt::Vec::from_raw_parts(l85.cast(), len87, len87),
                                                                        super::super::super::super::golem::vector::types::SparseVector {
                                                                            indices: _rt::Vec::from_raw_parts(l88.cast(), len90, len90),
                                                                            values: _rt::Vec::from_raw_parts(l91.cast(), len93, len93),
                                                                            total_dimensions: l94 as u32,
                                                                        },
                                                                    )
                                                                };
                                                                V95::Hybrid(e95)
                                                            }
                                                        };
                                                        v95
                                                    };
                                                    RecommendationExample::VectorData(e96)
                                                }
                                            };
                                            v96
                                        };
                                        result97.push(e97);
                                    }
                                    _rt::cabi_dealloc(
                                        base97,
                                        len97 * (9 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    result97
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        l98 as u32,
                        match l99 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l100 = *arg0
                                        .add(9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l101 = *arg0
                                        .add(10 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base170 = l100;
                                    let len170 = l101;
                                    let mut result170 = _rt::Vec::with_capacity(len170);
                                    for i in 0..len170 {
                                        let base = base170
                                            .add(i * (48 + 4 * ::core::mem::size_of::<*const u8>()));
                                        let e170 = {
                                            let l102 = *base.add(0).cast::<i32>();
                                            let l103 = i32::from(*base.add(4).cast::<u8>());
                                            use super::super::super::super::golem::vector::types::FilterOp as V104;
                                            let v104 = match l103 {
                                                0 => V104::Condition,
                                                1 => V104::And,
                                                2 => V104::Or,
                                                n => {
                                                    debug_assert_eq!(n, 3, "invalid enum discriminant");
                                                    V104::Not
                                                }
                                            };
                                            let l105 = i32::from(*base.add(8).cast::<u8>());
                                            let l167 = *base
                                                .add(48 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l168 = *base
                                                .add(48 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len169 = l168;
                                            super::super::super::super::golem::vector::types::FilterNode {
                                                id: l102 as u32,
                                                op: v104,
                                                condition: match l105 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l106 = *base.add(16).cast::<*mut u8>();
                                                            let l107 = *base
                                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len108 = l107;
                                                            let bytes108 = _rt::Vec::from_raw_parts(
                                                                l106.cast(),
                                                                len108,
                                                                len108,
                                                            );
                                                            let l109 = i32::from(
                                                                *base
                                                                    .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            let l110 = i32::from(
                                                                *base
                                                                    .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            use super::super::super::super::golem::vector::types::FlatMetadataValue as V166;
                                                            let v166 = match l110 {
                                                                0 => {
                                                                    let e166 = {
                                                                        let l111 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l112 = *base
                                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len113 = l112;
                                                                        let bytes113 = _rt::Vec::from_raw_parts(
                                                                            l111.cast(),
                                                                            len113,
                                                                            len113,
                                                                        );
                                                                        _rt::string_lift(bytes113)
                                                                    };
                                                                    V166::StringVal(e166)
                                                                }
                                                                1 => {
                                                                    let e166 = {
                                                                        let l114 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<f64>();
                                                                        l114
                                                                    };
                                                                    V166::NumberVal(e166)
                                                                }
                                                                2 => {
                                                                    let e166 = {
                                                                        let l115 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<i64>();
                                                                        l115
                                                                    };
                                                                    V166::IntegerVal(e166)
                                                                }
                                                                3 => {
                                                                    let e166 = {
                                                                        let l116 = i32::from(
                                                                            *base
                                                                                .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>(),
                                                                        );
                                                                        _rt::bool_lift(l116 as u8)
                                                                    };
                                                                    V166::BooleanVal(e166)
                                                                }
                                                                4 => {
                                                                    let e166 = {
                                                                        let l117 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l118 = *base
                                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let base135 = l117;
                                                                        let len135 = l118;
                                                                        let mut result135 = _rt::Vec::with_capacity(len135);
                                                                        for i in 0..len135 {
                                                                            let base = base135.add(i * 24);
                                                                            let e135 = {
                                                                                let l119 = i32::from(*base.add(0).cast::<u8>());
                                                                                use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V134;
                                                                                let v134 = match l119 {
                                                                                    0 => {
                                                                                        let e134 = {
                                                                                            let l120 = *base.add(8).cast::<*mut u8>();
                                                                                            let l121 = *base
                                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len122 = l121;
                                                                                            let bytes122 = _rt::Vec::from_raw_parts(
                                                                                                l120.cast(),
                                                                                                len122,
                                                                                                len122,
                                                                                            );
                                                                                            _rt::string_lift(bytes122)
                                                                                        };
                                                                                        V134::StringVal(e134)
                                                                                    }
                                                                                    1 => {
                                                                                        let e134 = {
                                                                                            let l123 = *base.add(8).cast::<f64>();
                                                                                            l123
                                                                                        };
                                                                                        V134::NumberVal(e134)
                                                                                    }
                                                                                    2 => {
                                                                                        let e134 = {
                                                                                            let l124 = *base.add(8).cast::<i64>();
                                                                                            l124
                                                                                        };
                                                                                        V134::IntegerVal(e134)
                                                                                    }
                                                                                    3 => {
                                                                                        let e134 = {
                                                                                            let l125 = i32::from(*base.add(8).cast::<u8>());
                                                                                            _rt::bool_lift(l125 as u8)
                                                                                        };
                                                                                        V134::BooleanVal(e134)
                                                                                    }
                                                                                    4 => V134::NullVal,
                                                                                    5 => {
                                                                                        let e134 = {
                                                                                            let l126 = *base.add(8).cast::<*mut u8>();
                                                                                            let l127 = *base
                                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len128 = l127;
                                                                                            let bytes128 = _rt::Vec::from_raw_parts(
                                                                                                l126.cast(),
                                                                                                len128,
                                                                                                len128,
                                                                                            );
                                                                                            _rt::string_lift(bytes128)
                                                                                        };
                                                                                        V134::DatetimeVal(e134)
                                                                                    }
                                                                                    6 => {
                                                                                        let e134 = {
                                                                                            let l129 = *base.add(8).cast::<f64>();
                                                                                            let l130 = *base.add(16).cast::<f64>();
                                                                                            super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                                                latitude: l129,
                                                                                                longitude: l130,
                                                                                            }
                                                                                        };
                                                                                        V134::GeoVal(e134)
                                                                                    }
                                                                                    n => {
                                                                                        debug_assert_eq!(n, 7, "invalid enum discriminant");
                                                                                        let e134 = {
                                                                                            let l131 = *base.add(8).cast::<*mut u8>();
                                                                                            let l132 = *base
                                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len133 = l132;
                                                                                            _rt::Vec::from_raw_parts(l131.cast(), len133, len133)
                                                                                        };
                                                                                        V134::BlobVal(e134)
                                                                                    }
                                                                                };
                                                                                v134
                                                                            };
                                                                            result135.push(e135);
                                                                        }
                                                                        _rt::cabi_dealloc(base135, len135 * 24, 8);
                                                                        result135
                                                                    };
                                                                    V166::ArrayVal(e166)
                                                                }
                                                                5 => {
                                                                    let e166 = {
                                                                        let l136 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l137 = *base
                                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let base157 = l136;
                                                                        let len157 = l137;
                                                                        let mut result157 = _rt::Vec::with_capacity(len157);
                                                                        for i in 0..len157 {
                                                                            let base = base157
                                                                                .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                            let e157 = {
                                                                                let l138 = *base.add(0).cast::<*mut u8>();
                                                                                let l139 = *base
                                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len140 = l139;
                                                                                let bytes140 = _rt::Vec::from_raw_parts(
                                                                                    l138.cast(),
                                                                                    len140,
                                                                                    len140,
                                                                                );
                                                                                let l141 = i32::from(
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>(),
                                                                                );
                                                                                use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V156;
                                                                                let v156 = match l141 {
                                                                                    0 => {
                                                                                        let e156 = {
                                                                                            let l142 = *base
                                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<*mut u8>();
                                                                                            let l143 = *base
                                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len144 = l143;
                                                                                            let bytes144 = _rt::Vec::from_raw_parts(
                                                                                                l142.cast(),
                                                                                                len144,
                                                                                                len144,
                                                                                            );
                                                                                            _rt::string_lift(bytes144)
                                                                                        };
                                                                                        V156::StringVal(e156)
                                                                                    }
                                                                                    1 => {
                                                                                        let e156 = {
                                                                                            let l145 = *base
                                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<f64>();
                                                                                            l145
                                                                                        };
                                                                                        V156::NumberVal(e156)
                                                                                    }
                                                                                    2 => {
                                                                                        let e156 = {
                                                                                            let l146 = *base
                                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<i64>();
                                                                                            l146
                                                                                        };
                                                                                        V156::IntegerVal(e156)
                                                                                    }
                                                                                    3 => {
                                                                                        let e156 = {
                                                                                            let l147 = i32::from(
                                                                                                *base
                                                                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                    .cast::<u8>(),
                                                                                            );
                                                                                            _rt::bool_lift(l147 as u8)
                                                                                        };
                                                                                        V156::BooleanVal(e156)
                                                                                    }
                                                                                    4 => V156::NullVal,
                                                                                    5 => {
                                                                                        let e156 = {
                                                                                            let l148 = *base
                                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<*mut u8>();
                                                                                            let l149 = *base
                                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len150 = l149;
                                                                                            let bytes150 = _rt::Vec::from_raw_parts(
                                                                                                l148.cast(),
                                                                                                len150,
                                                                                                len150,
                                                                                            );
                                                                                            _rt::string_lift(bytes150)
                                                                                        };
                                                                                        V156::DatetimeVal(e156)
                                                                                    }
                                                                                    6 => {
                                                                                        let e156 = {
                                                                                            let l151 = *base
                                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<f64>();
                                                                                            let l152 = *base
                                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<f64>();
                                                                                            super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                                                latitude: l151,
                                                                                                longitude: l152,
                                                                                            }
                                                                                        };
                                                                                        V156::GeoVal(e156)
                                                                                    }
                                                                                    n => {
                                                                                        debug_assert_eq!(n, 7, "invalid enum discriminant");
                                                                                        let e156 = {
                                                                                            let l153 = *base
                                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<*mut u8>();
                                                                                            let l154 = *base
                                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len155 = l154;
                                                                                            _rt::Vec::from_raw_parts(l153.cast(), len155, len155)
                                                                                        };
                                                                                        V156::BlobVal(e156)
                                                                                    }
                                                                                };
                                                                                (_rt::string_lift(bytes140), v156)
                                                                            };
                                                                            result157.push(e157);
                                                                        }
                                                                        _rt::cabi_dealloc(
                                                                            base157,
                                                                            len157 * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                            8,
                                                                        );
                                                                        result157
                                                                    };
                                                                    V166::ObjectVal(e166)
                                                                }
                                                                6 => V166::NullVal,
                                                                7 => {
                                                                    let e166 = {
                                                                        let l158 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<f64>();
                                                                        let l159 = *base
                                                                            .add(40 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<f64>();
                                                                        super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                            latitude: l158,
                                                                            longitude: l159,
                                                                        }
                                                                    };
                                                                    V166::GeoVal(e166)
                                                                }
                                                                8 => {
                                                                    let e166 = {
                                                                        let l160 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l161 = *base
                                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len162 = l161;
                                                                        let bytes162 = _rt::Vec::from_raw_parts(
                                                                            l160.cast(),
                                                                            len162,
                                                                            len162,
                                                                        );
                                                                        _rt::string_lift(bytes162)
                                                                    };
                                                                    V166::DatetimeVal(e166)
                                                                }
                                                                n => {
                                                                    debug_assert_eq!(n, 9, "invalid enum discriminant");
                                                                    let e166 = {
                                                                        let l163 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l164 = *base
                                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len165 = l164;
                                                                        _rt::Vec::from_raw_parts(l163.cast(), len165, len165)
                                                                    };
                                                                    V166::BlobVal(e166)
                                                                }
                                                            };
                                                            super::super::super::super::golem::vector::types::FilterCondition {
                                                                field: _rt::string_lift(bytes108),
                                                                operator: super::super::super::super::golem::vector::types::FilterOperator::_lift(
                                                                    l109 as u8,
                                                                ),
                                                                value: v166,
                                                            }
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                                inputs: _rt::Vec::from_raw_parts(
                                                    l167.cast(),
                                                    len169,
                                                    len169,
                                                ),
                                            }
                                        };
                                        result170.push(e170);
                                    }
                                    _rt::cabi_dealloc(
                                        base170,
                                        len170 * (48 + 4 * ::core::mem::size_of::<*const u8>()),
                                        8,
                                    );
                                    let l171 = *arg0
                                        .add(11 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i32>();
                                    super::super::super::super::golem::vector::types::FilterExpression {
                                        nodes: result170,
                                        root_id: l171 as u32,
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        match l172 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l173 = *arg0
                                        .add(13 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l174 = *arg0
                                        .add(14 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let len175 = l174;
                                    let bytes175 = _rt::Vec::from_raw_parts(
                                        l173.cast(),
                                        len175,
                                        len175,
                                    );
                                    _rt::string_lift(bytes175)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        match l176 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l177 = i32::from(
                                        *arg0
                                            .add(1 + 15 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    RecommendationStrategy::_lift(l177 as u8)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        match l178 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l179 = i32::from(
                                        *arg0
                                            .add(3 + 15 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    _rt::bool_lift(l179 as u8)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        match l180 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l181 = i32::from(
                                        *arg0
                                            .add(5 + 15 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    _rt::bool_lift(l181 as u8)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    );
                    _rt::cabi_dealloc(
                        arg0,
                        8 + 15 * ::core::mem::size_of::<*const u8>(),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let ptr183 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result182 {
                        Ok(e) => {
                            *ptr183.add(0).cast::<u8>() = (0i32) as u8;
                            let vec226 = e;
                            let len226 = vec226.len();
                            let layout226 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec226.len()
                                    * (8 + 14 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result226 = if layout226.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout226).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout226);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec226.into_iter().enumerate() {
                                let base = result226
                                    .add(i * (8 + 14 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let super::super::super::super::golem::vector::types::SearchResult {
                                        id: id184,
                                        score: score184,
                                        distance: distance184,
                                        vector: vector184,
                                        metadata: metadata184,
                                    } = e;
                                    let vec185 = (id184.into_bytes()).into_boxed_slice();
                                    let ptr185 = vec185.as_ptr().cast::<u8>();
                                    let len185 = vec185.len();
                                    ::core::mem::forget(vec185);
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len185;
                                    *base.add(0).cast::<*mut u8>() = ptr185.cast_mut();
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<f32>() = _rt::as_f32(score184);
                                    *base
                                        .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<f32>() = _rt::as_f32(distance184);
                                    match vector184 {
                                        Some(e) => {
                                            *base
                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            use super::super::super::super::golem::vector::types::VectorData as V203;
                                            match e {
                                                V203::Dense(e) => {
                                                    *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                    let vec186 = (e).into_boxed_slice();
                                                    let ptr186 = vec186.as_ptr().cast::<u8>();
                                                    let len186 = vec186.len();
                                                    ::core::mem::forget(vec186);
                                                    *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len186;
                                                    *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr186.cast_mut();
                                                }
                                                V203::Sparse(e) => {
                                                    *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let super::super::super::super::golem::vector::types::SparseVector {
                                                        indices: indices187,
                                                        values: values187,
                                                        total_dimensions: total_dimensions187,
                                                    } = e;
                                                    let vec188 = (indices187).into_boxed_slice();
                                                    let ptr188 = vec188.as_ptr().cast::<u8>();
                                                    let len188 = vec188.len();
                                                    ::core::mem::forget(vec188);
                                                    *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len188;
                                                    *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr188.cast_mut();
                                                    let vec189 = (values187).into_boxed_slice();
                                                    let ptr189 = vec189.as_ptr().cast::<u8>();
                                                    let len189 = vec189.len();
                                                    ::core::mem::forget(vec189);
                                                    *base
                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len189;
                                                    *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr189.cast_mut();
                                                    *base
                                                        .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i32>() = _rt::as_i32(total_dimensions187);
                                                }
                                                V203::Binary(e) => {
                                                    *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (2i32) as u8;
                                                    let super::super::super::super::golem::vector::types::BinaryVector {
                                                        data: data190,
                                                        dimensions: dimensions190,
                                                    } = e;
                                                    let vec191 = (data190).into_boxed_slice();
                                                    let ptr191 = vec191.as_ptr().cast::<u8>();
                                                    let len191 = vec191.len();
                                                    ::core::mem::forget(vec191);
                                                    *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len191;
                                                    *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr191.cast_mut();
                                                    *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i32>() = _rt::as_i32(dimensions190);
                                                }
                                                V203::Half(e) => {
                                                    *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (3i32) as u8;
                                                    let super::super::super::super::golem::vector::types::HalfVector {
                                                        data: data192,
                                                        dimensions: dimensions192,
                                                    } = e;
                                                    let vec193 = (data192).into_boxed_slice();
                                                    let ptr193 = vec193.as_ptr().cast::<u8>();
                                                    let len193 = vec193.len();
                                                    ::core::mem::forget(vec193);
                                                    *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len193;
                                                    *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr193.cast_mut();
                                                    *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i32>() = _rt::as_i32(dimensions192);
                                                }
                                                V203::Named(e) => {
                                                    *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (4i32) as u8;
                                                    let vec197 = e;
                                                    let len197 = vec197.len();
                                                    let layout197 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec197.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    let result197 = if layout197.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout197).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout197);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec197.into_iter().enumerate() {
                                                        let base = result197
                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let (t194_0, t194_1) = e;
                                                            let vec195 = (t194_0.into_bytes()).into_boxed_slice();
                                                            let ptr195 = vec195.as_ptr().cast::<u8>();
                                                            let len195 = vec195.len();
                                                            ::core::mem::forget(vec195);
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len195;
                                                            *base.add(0).cast::<*mut u8>() = ptr195.cast_mut();
                                                            let vec196 = (t194_1).into_boxed_slice();
                                                            let ptr196 = vec196.as_ptr().cast::<u8>();
                                                            let len196 = vec196.len();
                                                            ::core::mem::forget(vec196);
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len196;
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr196.cast_mut();
                                                        }
                                                    }
                                                    *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len197;
                                                    *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result197;
                                                }
                                                V203::Hybrid(e) => {
                                                    *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (5i32) as u8;
                                                    let (t198_0, t198_1) = e;
                                                    let vec199 = (t198_0).into_boxed_slice();
                                                    let ptr199 = vec199.as_ptr().cast::<u8>();
                                                    let len199 = vec199.len();
                                                    ::core::mem::forget(vec199);
                                                    *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len199;
                                                    *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr199.cast_mut();
                                                    let super::super::super::super::golem::vector::types::SparseVector {
                                                        indices: indices200,
                                                        values: values200,
                                                        total_dimensions: total_dimensions200,
                                                    } = t198_1;
                                                    let vec201 = (indices200).into_boxed_slice();
                                                    let ptr201 = vec201.as_ptr().cast::<u8>();
                                                    let len201 = vec201.len();
                                                    ::core::mem::forget(vec201);
                                                    *base
                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len201;
                                                    *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr201.cast_mut();
                                                    let vec202 = (values200).into_boxed_slice();
                                                    let ptr202 = vec202.as_ptr().cast::<u8>();
                                                    let len202 = vec202.len();
                                                    ::core::mem::forget(vec202);
                                                    *base
                                                        .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len202;
                                                    *base
                                                        .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr202.cast_mut();
                                                    *base
                                                        .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i32>() = _rt::as_i32(total_dimensions200);
                                                }
                                            }
                                        }
                                        None => {
                                            *base
                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match metadata184 {
                                        Some(e) => {
                                            *base
                                                .add(8 + 11 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec225 = e;
                                            let len225 = vec225.len();
                                            let layout225 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec225.len()
                                                    * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                8,
                                            );
                                            let result225 = if layout225.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout225).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout225);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec225.into_iter().enumerate() {
                                                let base = result225
                                                    .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let (t204_0, t204_1) = e;
                                                    let vec205 = (t204_0.into_bytes()).into_boxed_slice();
                                                    let ptr205 = vec205.as_ptr().cast::<u8>();
                                                    let len205 = vec205.len();
                                                    ::core::mem::forget(vec205);
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len205;
                                                    *base.add(0).cast::<*mut u8>() = ptr205.cast_mut();
                                                    use super::super::super::super::golem::vector::types::FlatMetadataValue as V224;
                                                    match t204_1 {
                                                        V224::StringVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                            let vec206 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr206 = vec206.as_ptr().cast::<u8>();
                                                            let len206 = vec206.len();
                                                            ::core::mem::forget(vec206);
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len206;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr206.cast_mut();
                                                        }
                                                        V224::NumberVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<f64>() = _rt::as_f64(e);
                                                        }
                                                        V224::IntegerVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (2i32) as u8;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<i64>() = _rt::as_i64(e);
                                                        }
                                                        V224::BooleanVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (3i32) as u8;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (match e {
                                                                true => 1,
                                                                false => 0,
                                                            }) as u8;
                                                        }
                                                        V224::ArrayVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (4i32) as u8;
                                                            let vec212 = e;
                                                            let len212 = vec212.len();
                                                            let layout212 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec212.len() * 24,
                                                                8,
                                                            );
                                                            let result212 = if layout212.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout212).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout212);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec212.into_iter().enumerate() {
                                                                let base = result212.add(i * 24);
                                                                {
                                                                    use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V211;
                                                                    match e {
                                                                        V211::StringVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                            let vec207 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr207 = vec207.as_ptr().cast::<u8>();
                                                                            let len207 = vec207.len();
                                                                            ::core::mem::forget(vec207);
                                                                            *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len207;
                                                                            *base.add(8).cast::<*mut u8>() = ptr207.cast_mut();
                                                                        }
                                                                        V211::NumberVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                            *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                                                        }
                                                                        V211::IntegerVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (2i32) as u8;
                                                                            *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                                        }
                                                                        V211::BooleanVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (3i32) as u8;
                                                                            *base.add(8).cast::<u8>() = (match e {
                                                                                true => 1,
                                                                                false => 0,
                                                                            }) as u8;
                                                                        }
                                                                        V211::NullVal => {
                                                                            *base.add(0).cast::<u8>() = (4i32) as u8;
                                                                        }
                                                                        V211::DatetimeVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (5i32) as u8;
                                                                            let vec208 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr208 = vec208.as_ptr().cast::<u8>();
                                                                            let len208 = vec208.len();
                                                                            ::core::mem::forget(vec208);
                                                                            *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len208;
                                                                            *base.add(8).cast::<*mut u8>() = ptr208.cast_mut();
                                                                        }
                                                                        V211::GeoVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (6i32) as u8;
                                                                            let super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                                latitude: latitude209,
                                                                                longitude: longitude209,
                                                                            } = e;
                                                                            *base.add(8).cast::<f64>() = _rt::as_f64(latitude209);
                                                                            *base.add(16).cast::<f64>() = _rt::as_f64(longitude209);
                                                                        }
                                                                        V211::BlobVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (7i32) as u8;
                                                                            let vec210 = (e).into_boxed_slice();
                                                                            let ptr210 = vec210.as_ptr().cast::<u8>();
                                                                            let len210 = vec210.len();
                                                                            ::core::mem::forget(vec210);
                                                                            *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len210;
                                                                            *base.add(8).cast::<*mut u8>() = ptr210.cast_mut();
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len212;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result212;
                                                        }
                                                        V224::ObjectVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (5i32) as u8;
                                                            let vec220 = e;
                                                            let len220 = vec220.len();
                                                            let layout220 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec220.len()
                                                                    * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                            let result220 = if layout220.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout220).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout220);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec220.into_iter().enumerate() {
                                                                let base = result220
                                                                    .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let (t213_0, t213_1) = e;
                                                                    let vec214 = (t213_0.into_bytes()).into_boxed_slice();
                                                                    let ptr214 = vec214.as_ptr().cast::<u8>();
                                                                    let len214 = vec214.len();
                                                                    ::core::mem::forget(vec214);
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len214;
                                                                    *base.add(0).cast::<*mut u8>() = ptr214.cast_mut();
                                                                    use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V219;
                                                                    match t213_1 {
                                                                        V219::StringVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                            let vec215 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr215 = vec215.as_ptr().cast::<u8>();
                                                                            let len215 = vec215.len();
                                                                            ::core::mem::forget(vec215);
                                                                            *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len215;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr215.cast_mut();
                                                                        }
                                                                        V219::NumberVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<f64>() = _rt::as_f64(e);
                                                                        }
                                                                        V219::IntegerVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (2i32) as u8;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i64>() = _rt::as_i64(e);
                                                                        }
                                                                        V219::BooleanVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (3i32) as u8;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (match e {
                                                                                true => 1,
                                                                                false => 0,
                                                                            }) as u8;
                                                                        }
                                                                        V219::NullVal => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (4i32) as u8;
                                                                        }
                                                                        V219::DatetimeVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (5i32) as u8;
                                                                            let vec216 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr216 = vec216.as_ptr().cast::<u8>();
                                                                            let len216 = vec216.len();
                                                                            ::core::mem::forget(vec216);
                                                                            *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len216;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr216.cast_mut();
                                                                        }
                                                                        V219::GeoVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (6i32) as u8;
                                                                            let super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                                latitude: latitude217,
                                                                                longitude: longitude217,
                                                                            } = e;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<f64>() = _rt::as_f64(latitude217);
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<f64>() = _rt::as_f64(longitude217);
                                                                        }
                                                                        V219::BlobVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (7i32) as u8;
                                                                            let vec218 = (e).into_boxed_slice();
                                                                            let ptr218 = vec218.as_ptr().cast::<u8>();
                                                                            let len218 = vec218.len();
                                                                            ::core::mem::forget(vec218);
                                                                            *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len218;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr218.cast_mut();
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len220;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result220;
                                                        }
                                                        V224::NullVal => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (6i32) as u8;
                                                        }
                                                        V224::GeoVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (7i32) as u8;
                                                            let super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                latitude: latitude221,
                                                                longitude: longitude221,
                                                            } = e;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<f64>() = _rt::as_f64(latitude221);
                                                            *base
                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<f64>() = _rt::as_f64(longitude221);
                                                        }
                                                        V224::DatetimeVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (8i32) as u8;
                                                            let vec222 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr222 = vec222.as_ptr().cast::<u8>();
                                                            let len222 = vec222.len();
                                                            ::core::mem::forget(vec222);
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len222;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr222.cast_mut();
                                                        }
                                                        V224::BlobVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (9i32) as u8;
                                                            let vec223 = (e).into_boxed_slice();
                                                            let ptr223 = vec223.as_ptr().cast::<u8>();
                                                            let len223 = vec223.len();
                                                            ::core::mem::forget(vec223);
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len223;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr223.cast_mut();
                                                        }
                                                    }
                                                }
                                            }
                                            *base
                                                .add(8 + 13 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len225;
                                            *base
                                                .add(8 + 12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result225;
                                        }
                                        None => {
                                            *base
                                                .add(8 + 11 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                            }
                            *ptr183
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len226;
                            *ptr183
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result226;
                        }
                        Err(e) => {
                            *ptr183.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::golem::vector::types::VectorError as V237;
                            match e {
                                V237::NotFound(e) => {
                                    *ptr183
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                    let vec227 = (e.into_bytes()).into_boxed_slice();
                                    let ptr227 = vec227.as_ptr().cast::<u8>();
                                    let len227 = vec227.len();
                                    ::core::mem::forget(vec227);
                                    *ptr183
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len227;
                                    *ptr183
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr227.cast_mut();
                                }
                                V237::AlreadyExists(e) => {
                                    *ptr183
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec228 = (e.into_bytes()).into_boxed_slice();
                                    let ptr228 = vec228.as_ptr().cast::<u8>();
                                    let len228 = vec228.len();
                                    ::core::mem::forget(vec228);
                                    *ptr183
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len228;
                                    *ptr183
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr228.cast_mut();
                                }
                                V237::InvalidParams(e) => {
                                    *ptr183
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                    let vec229 = (e.into_bytes()).into_boxed_slice();
                                    let ptr229 = vec229.as_ptr().cast::<u8>();
                                    let len229 = vec229.len();
                                    ::core::mem::forget(vec229);
                                    *ptr183
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len229;
                                    *ptr183
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr229.cast_mut();
                                }
                                V237::UnsupportedFeature(e) => {
                                    *ptr183
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                    let vec230 = (e.into_bytes()).into_boxed_slice();
                                    let ptr230 = vec230.as_ptr().cast::<u8>();
                                    let len230 = vec230.len();
                                    ::core::mem::forget(vec230);
                                    *ptr183
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len230;
                                    *ptr183
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr230.cast_mut();
                                }
                                V237::DimensionMismatch(e) => {
                                    *ptr183
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (4i32) as u8;
                                    let vec231 = (e.into_bytes()).into_boxed_slice();
                                    let ptr231 = vec231.as_ptr().cast::<u8>();
                                    let len231 = vec231.len();
                                    ::core::mem::forget(vec231);
                                    *ptr183
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len231;
                                    *ptr183
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr231.cast_mut();
                                }
                                V237::InvalidVector(e) => {
                                    *ptr183
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (5i32) as u8;
                                    let vec232 = (e.into_bytes()).into_boxed_slice();
                                    let ptr232 = vec232.as_ptr().cast::<u8>();
                                    let len232 = vec232.len();
                                    ::core::mem::forget(vec232);
                                    *ptr183
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len232;
                                    *ptr183
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr232.cast_mut();
                                }
                                V237::Unauthorized(e) => {
                                    *ptr183
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (6i32) as u8;
                                    let vec233 = (e.into_bytes()).into_boxed_slice();
                                    let ptr233 = vec233.as_ptr().cast::<u8>();
                                    let len233 = vec233.len();
                                    ::core::mem::forget(vec233);
                                    *ptr183
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len233;
                                    *ptr183
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr233.cast_mut();
                                }
                                V237::RateLimited(e) => {
                                    *ptr183
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (7i32) as u8;
                                    let vec234 = (e.into_bytes()).into_boxed_slice();
                                    let ptr234 = vec234.as_ptr().cast::<u8>();
                                    let len234 = vec234.len();
                                    ::core::mem::forget(vec234);
                                    *ptr183
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len234;
                                    *ptr183
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr234.cast_mut();
                                }
                                V237::ProviderError(e) => {
                                    *ptr183
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (8i32) as u8;
                                    let vec235 = (e.into_bytes()).into_boxed_slice();
                                    let ptr235 = vec235.as_ptr().cast::<u8>();
                                    let len235 = vec235.len();
                                    ::core::mem::forget(vec235);
                                    *ptr183
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len235;
                                    *ptr183
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr235.cast_mut();
                                }
                                V237::ConnectionError(e) => {
                                    *ptr183
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (9i32) as u8;
                                    let vec236 = (e.into_bytes()).into_boxed_slice();
                                    let ptr236 = vec236.as_ptr().cast::<u8>();
                                    let len236 = vec236.len();
                                    ::core::mem::forget(vec236);
                                    *ptr183
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len236;
                                    *ptr183
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr236.cast_mut();
                                }
                            }
                        }
                    };
                    ptr183
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_recommend_vectors<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let base77 = l1;
                            let len77 = l2;
                            for i in 0..len77 {
                                let base = base77
                                    .add(i * (8 + 14 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let l3 = *base.add(0).cast::<*mut u8>();
                                    let l4 = *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l3, l4, 1);
                                    let l5 = i32::from(
                                        *base
                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l5 {
                                        0 => {}
                                        _ => {
                                            let l6 = i32::from(
                                                *base
                                                    .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l6 {
                                                0 => {
                                                    let l7 = *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l8 = *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base9 = l7;
                                                    let len9 = l8;
                                                    _rt::cabi_dealloc(base9, len9 * 4, 4);
                                                }
                                                1 => {
                                                    let l10 = *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l11 = *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base12 = l10;
                                                    let len12 = l11;
                                                    _rt::cabi_dealloc(base12, len12 * 4, 4);
                                                    let l13 = *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l14 = *base
                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base15 = l13;
                                                    let len15 = l14;
                                                    _rt::cabi_dealloc(base15, len15 * 4, 4);
                                                }
                                                2 => {
                                                    let l16 = *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l17 = *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base18 = l16;
                                                    let len18 = l17;
                                                    _rt::cabi_dealloc(base18, len18 * 1, 1);
                                                }
                                                3 => {
                                                    let l19 = *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l20 = *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base21 = l19;
                                                    let len21 = l20;
                                                    _rt::cabi_dealloc(base21, len21 * 4, 4);
                                                }
                                                4 => {
                                                    let l22 = *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l23 = *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base29 = l22;
                                                    let len29 = l23;
                                                    for i in 0..len29 {
                                                        let base = base29
                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l24 = *base.add(0).cast::<*mut u8>();
                                                            let l25 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l24, l25, 1);
                                                            let l26 = *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l27 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base28 = l26;
                                                            let len28 = l27;
                                                            _rt::cabi_dealloc(base28, len28 * 4, 4);
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base29,
                                                        len29 * (4 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                }
                                                _ => {
                                                    let l30 = *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l31 = *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base32 = l30;
                                                    let len32 = l31;
                                                    _rt::cabi_dealloc(base32, len32 * 4, 4);
                                                    let l33 = *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l34 = *base
                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base35 = l33;
                                                    let len35 = l34;
                                                    _rt::cabi_dealloc(base35, len35 * 4, 4);
                                                    let l36 = *base
                                                        .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l37 = *base
                                                        .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base38 = l36;
                                                    let len38 = l37;
                                                    _rt::cabi_dealloc(base38, len38 * 4, 4);
                                                }
                                            }
                                        }
                                    }
                                    let l39 = i32::from(
                                        *base
                                            .add(8 + 11 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l39 {
                                        0 => {}
                                        _ => {
                                            let l40 = *base
                                                .add(8 + 12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l41 = *base
                                                .add(8 + 13 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base76 = l40;
                                            let len76 = l41;
                                            for i in 0..len76 {
                                                let base = base76
                                                    .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let l42 = *base.add(0).cast::<*mut u8>();
                                                    let l43 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l42, l43, 1);
                                                    let l44 = i32::from(
                                                        *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l44 {
                                                        0 => {
                                                            let l45 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l46 = *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l45, l46, 1);
                                                        }
                                                        1 => {}
                                                        2 => {}
                                                        3 => {}
                                                        4 => {
                                                            let l47 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l48 = *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base57 = l47;
                                                            let len57 = l48;
                                                            for i in 0..len57 {
                                                                let base = base57.add(i * 24);
                                                                {
                                                                    let l49 = i32::from(*base.add(0).cast::<u8>());
                                                                    match l49 {
                                                                        0 => {
                                                                            let l50 = *base.add(8).cast::<*mut u8>();
                                                                            let l51 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l50, l51, 1);
                                                                        }
                                                                        1 => {}
                                                                        2 => {}
                                                                        3 => {}
                                                                        4 => {}
                                                                        5 => {
                                                                            let l52 = *base.add(8).cast::<*mut u8>();
                                                                            let l53 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l52, l53, 1);
                                                                        }
                                                                        6 => {}
                                                                        _ => {
                                                                            let l54 = *base.add(8).cast::<*mut u8>();
                                                                            let l55 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base56 = l54;
                                                                            let len56 = l55;
                                                                            _rt::cabi_dealloc(base56, len56 * 1, 1);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(base57, len57 * 24, 8);
                                                        }
                                                        5 => {
                                                            let l58 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l59 = *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base70 = l58;
                                                            let len70 = l59;
                                                            for i in 0..len70 {
                                                                let base = base70
                                                                    .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l60 = *base.add(0).cast::<*mut u8>();
                                                                    let l61 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l60, l61, 1);
                                                                    let l62 = i32::from(
                                                                        *base
                                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l62 {
                                                                        0 => {
                                                                            let l63 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l64 = *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l63, l64, 1);
                                                                        }
                                                                        1 => {}
                                                                        2 => {}
                                                                        3 => {}
                                                                        4 => {}
                                                                        5 => {
                                                                            let l65 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l66 = *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l65, l66, 1);
                                                                        }
                                                                        6 => {}
                                                                        _ => {
                                                                            let l67 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l68 = *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base69 = l67;
                                                                            let len69 = l68;
                                                                            _rt::cabi_dealloc(base69, len69 * 1, 1);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base70,
                                                                len70 * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                        }
                                                        6 => {}
                                                        7 => {}
                                                        8 => {
                                                            let l71 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l72 = *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l71, l72, 1);
                                                        }
                                                        _ => {
                                                            let l73 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l74 = *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base75 = l73;
                                                            let len75 = l74;
                                                            _rt::cabi_dealloc(base75, len75 * 1, 1);
                                                        }
                                                    }
                                                }
                                            }
                                            _rt::cabi_dealloc(
                                                base76,
                                                len76 * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                8,
                                            );
                                        }
                                    }
                                }
                            }
                            _rt::cabi_dealloc(
                                base77,
                                len77 * (8 + 14 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                        }
                        _ => {
                            let l78 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l78 {
                                0 => {
                                    let l79 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l80 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l79, l80, 1);
                                }
                                1 => {
                                    let l81 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l82 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l81, l82, 1);
                                }
                                2 => {
                                    let l83 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l84 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l83, l84, 1);
                                }
                                3 => {
                                    let l85 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l86 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l85, l86, 1);
                                }
                                4 => {
                                    let l87 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l88 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l87, l88, 1);
                                }
                                5 => {
                                    let l89 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l90 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l89, l90, 1);
                                }
                                6 => {
                                    let l91 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l92 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l91, l92, 1);
                                }
                                7 => {
                                    let l93 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l94 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l93, l94, 1);
                                }
                                8 => {
                                    let l95 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l96 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l95, l96, 1);
                                }
                                _ => {
                                    let l97 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l98 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l97, l98, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_discover_vectors_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                    arg4: i32,
                    arg5: i32,
                    arg6: *mut u8,
                    arg7: usize,
                    arg8: i32,
                    arg9: i32,
                    arg10: *mut u8,
                    arg11: usize,
                    arg12: i32,
                    arg13: i32,
                    arg14: i32,
                    arg15: i32,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let base89 = arg2;
                    let len89 = arg3;
                    let mut result89 = _rt::Vec::with_capacity(len89);
                    for i in 0..len89 {
                        let base = base89
                            .add(i * (18 * ::core::mem::size_of::<*const u8>()));
                        let e89 = {
                            let l1 = i32::from(*base.add(0).cast::<u8>());
                            let v44 = match l1 {
                                0 => {
                                    let e44 = {
                                        let l2 = *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l3 = *base
                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len4 = l3;
                                        let bytes4 = _rt::Vec::from_raw_parts(
                                            l2.cast(),
                                            len4,
                                            len4,
                                        );
                                        _rt::string_lift(bytes4)
                                    };
                                    RecommendationExample::VectorId(e44)
                                }
                                n => {
                                    debug_assert_eq!(n, 1, "invalid enum discriminant");
                                    let e44 = {
                                        let l5 = i32::from(
                                            *base.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                        );
                                        use super::super::super::super::golem::vector::types::VectorData as V43;
                                        let v43 = match l5 {
                                            0 => {
                                                let e43 = {
                                                    let l6 = *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l7 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len8 = l7;
                                                    _rt::Vec::from_raw_parts(l6.cast(), len8, len8)
                                                };
                                                V43::Dense(e43)
                                            }
                                            1 => {
                                                let e43 = {
                                                    let l9 = *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l10 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len11 = l10;
                                                    let l12 = *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l13 = *base
                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len14 = l13;
                                                    let l15 = *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i32>();
                                                    super::super::super::super::golem::vector::types::SparseVector {
                                                        indices: _rt::Vec::from_raw_parts(l9.cast(), len11, len11),
                                                        values: _rt::Vec::from_raw_parts(l12.cast(), len14, len14),
                                                        total_dimensions: l15 as u32,
                                                    }
                                                };
                                                V43::Sparse(e43)
                                            }
                                            2 => {
                                                let e43 = {
                                                    let l16 = *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l17 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len18 = l17;
                                                    let l19 = *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i32>();
                                                    super::super::super::super::golem::vector::types::BinaryVector {
                                                        data: _rt::Vec::from_raw_parts(l16.cast(), len18, len18),
                                                        dimensions: l19 as u32,
                                                    }
                                                };
                                                V43::Binary(e43)
                                            }
                                            3 => {
                                                let e43 = {
                                                    let l20 = *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l21 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len22 = l21;
                                                    let l23 = *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i32>();
                                                    super::super::super::super::golem::vector::types::HalfVector {
                                                        data: _rt::Vec::from_raw_parts(l20.cast(), len22, len22),
                                                        dimensions: l23 as u32,
                                                    }
                                                };
                                                V43::Half(e43)
                                            }
                                            4 => {
                                                let e43 = {
                                                    let l24 = *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l25 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base32 = l24;
                                                    let len32 = l25;
                                                    let mut result32 = _rt::Vec::with_capacity(len32);
                                                    for i in 0..len32 {
                                                        let base = base32
                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                        let e32 = {
                                                            let l26 = *base.add(0).cast::<*mut u8>();
                                                            let l27 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len28 = l27;
                                                            let bytes28 = _rt::Vec::from_raw_parts(
                                                                l26.cast(),
                                                                len28,
                                                                len28,
                                                            );
                                                            let l29 = *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l30 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len31 = l30;
                                                            (
                                                                _rt::string_lift(bytes28),
                                                                _rt::Vec::from_raw_parts(l29.cast(), len31, len31),
                                                            )
                                                        };
                                                        result32.push(e32);
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base32,
                                                        len32 * (4 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    result32
                                                };
                                                V43::Named(e43)
                                            }
                                            n => {
                                                debug_assert_eq!(n, 5, "invalid enum discriminant");
                                                let e43 = {
                                                    let l33 = *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l34 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len35 = l34;
                                                    let l36 = *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l37 = *base
                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len38 = l37;
                                                    let l39 = *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l40 = *base
                                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len41 = l40;
                                                    let l42 = *base
                                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i32>();
                                                    (
                                                        _rt::Vec::from_raw_parts(l33.cast(), len35, len35),
                                                        super::super::super::super::golem::vector::types::SparseVector {
                                                            indices: _rt::Vec::from_raw_parts(l36.cast(), len38, len38),
                                                            values: _rt::Vec::from_raw_parts(l39.cast(), len41, len41),
                                                            total_dimensions: l42 as u32,
                                                        },
                                                    )
                                                };
                                                V43::Hybrid(e43)
                                            }
                                        };
                                        v43
                                    };
                                    RecommendationExample::VectorData(e44)
                                }
                            };
                            let l45 = i32::from(
                                *base
                                    .add(9 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            let v88 = match l45 {
                                0 => {
                                    let e88 = {
                                        let l46 = *base
                                            .add(10 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l47 = *base
                                            .add(11 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len48 = l47;
                                        let bytes48 = _rt::Vec::from_raw_parts(
                                            l46.cast(),
                                            len48,
                                            len48,
                                        );
                                        _rt::string_lift(bytes48)
                                    };
                                    RecommendationExample::VectorId(e88)
                                }
                                n => {
                                    debug_assert_eq!(n, 1, "invalid enum discriminant");
                                    let e88 = {
                                        let l49 = i32::from(
                                            *base
                                                .add(10 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        use super::super::super::super::golem::vector::types::VectorData as V87;
                                        let v87 = match l49 {
                                            0 => {
                                                let e87 = {
                                                    let l50 = *base
                                                        .add(11 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l51 = *base
                                                        .add(12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len52 = l51;
                                                    _rt::Vec::from_raw_parts(l50.cast(), len52, len52)
                                                };
                                                V87::Dense(e87)
                                            }
                                            1 => {
                                                let e87 = {
                                                    let l53 = *base
                                                        .add(11 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l54 = *base
                                                        .add(12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len55 = l54;
                                                    let l56 = *base
                                                        .add(13 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l57 = *base
                                                        .add(14 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len58 = l57;
                                                    let l59 = *base
                                                        .add(15 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i32>();
                                                    super::super::super::super::golem::vector::types::SparseVector {
                                                        indices: _rt::Vec::from_raw_parts(l53.cast(), len55, len55),
                                                        values: _rt::Vec::from_raw_parts(l56.cast(), len58, len58),
                                                        total_dimensions: l59 as u32,
                                                    }
                                                };
                                                V87::Sparse(e87)
                                            }
                                            2 => {
                                                let e87 = {
                                                    let l60 = *base
                                                        .add(11 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l61 = *base
                                                        .add(12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len62 = l61;
                                                    let l63 = *base
                                                        .add(13 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i32>();
                                                    super::super::super::super::golem::vector::types::BinaryVector {
                                                        data: _rt::Vec::from_raw_parts(l60.cast(), len62, len62),
                                                        dimensions: l63 as u32,
                                                    }
                                                };
                                                V87::Binary(e87)
                                            }
                                            3 => {
                                                let e87 = {
                                                    let l64 = *base
                                                        .add(11 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l65 = *base
                                                        .add(12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len66 = l65;
                                                    let l67 = *base
                                                        .add(13 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i32>();
                                                    super::super::super::super::golem::vector::types::HalfVector {
                                                        data: _rt::Vec::from_raw_parts(l64.cast(), len66, len66),
                                                        dimensions: l67 as u32,
                                                    }
                                                };
                                                V87::Half(e87)
                                            }
                                            4 => {
                                                let e87 = {
                                                    let l68 = *base
                                                        .add(11 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l69 = *base
                                                        .add(12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base76 = l68;
                                                    let len76 = l69;
                                                    let mut result76 = _rt::Vec::with_capacity(len76);
                                                    for i in 0..len76 {
                                                        let base = base76
                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                        let e76 = {
                                                            let l70 = *base.add(0).cast::<*mut u8>();
                                                            let l71 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len72 = l71;
                                                            let bytes72 = _rt::Vec::from_raw_parts(
                                                                l70.cast(),
                                                                len72,
                                                                len72,
                                                            );
                                                            let l73 = *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l74 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len75 = l74;
                                                            (
                                                                _rt::string_lift(bytes72),
                                                                _rt::Vec::from_raw_parts(l73.cast(), len75, len75),
                                                            )
                                                        };
                                                        result76.push(e76);
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base76,
                                                        len76 * (4 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    result76
                                                };
                                                V87::Named(e87)
                                            }
                                            n => {
                                                debug_assert_eq!(n, 5, "invalid enum discriminant");
                                                let e87 = {
                                                    let l77 = *base
                                                        .add(11 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l78 = *base
                                                        .add(12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len79 = l78;
                                                    let l80 = *base
                                                        .add(13 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l81 = *base
                                                        .add(14 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len82 = l81;
                                                    let l83 = *base
                                                        .add(15 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l84 = *base
                                                        .add(16 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len85 = l84;
                                                    let l86 = *base
                                                        .add(17 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i32>();
                                                    (
                                                        _rt::Vec::from_raw_parts(l77.cast(), len79, len79),
                                                        super::super::super::super::golem::vector::types::SparseVector {
                                                            indices: _rt::Vec::from_raw_parts(l80.cast(), len82, len82),
                                                            values: _rt::Vec::from_raw_parts(l83.cast(), len85, len85),
                                                            total_dimensions: l86 as u32,
                                                        },
                                                    )
                                                };
                                                V87::Hybrid(e87)
                                            }
                                        };
                                        v87
                                    };
                                    RecommendationExample::VectorData(e88)
                                }
                            };
                            ContextPair {
                                positive: v44,
                                negative: v88,
                            }
                        };
                        result89.push(e89);
                    }
                    _rt::cabi_dealloc(
                        base89,
                        len89 * (18 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result160 = T::discover_vectors(
                        _rt::string_lift(bytes0),
                        result89,
                        arg4 as u32,
                        match arg5 {
                            0 => None,
                            1 => {
                                let e = {
                                    let base158 = arg6;
                                    let len158 = arg7;
                                    let mut result158 = _rt::Vec::with_capacity(len158);
                                    for i in 0..len158 {
                                        let base = base158
                                            .add(i * (48 + 4 * ::core::mem::size_of::<*const u8>()));
                                        let e158 = {
                                            let l90 = *base.add(0).cast::<i32>();
                                            let l91 = i32::from(*base.add(4).cast::<u8>());
                                            use super::super::super::super::golem::vector::types::FilterOp as V92;
                                            let v92 = match l91 {
                                                0 => V92::Condition,
                                                1 => V92::And,
                                                2 => V92::Or,
                                                n => {
                                                    debug_assert_eq!(n, 3, "invalid enum discriminant");
                                                    V92::Not
                                                }
                                            };
                                            let l93 = i32::from(*base.add(8).cast::<u8>());
                                            let l155 = *base
                                                .add(48 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l156 = *base
                                                .add(48 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len157 = l156;
                                            super::super::super::super::golem::vector::types::FilterNode {
                                                id: l90 as u32,
                                                op: v92,
                                                condition: match l93 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l94 = *base.add(16).cast::<*mut u8>();
                                                            let l95 = *base
                                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len96 = l95;
                                                            let bytes96 = _rt::Vec::from_raw_parts(
                                                                l94.cast(),
                                                                len96,
                                                                len96,
                                                            );
                                                            let l97 = i32::from(
                                                                *base
                                                                    .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            let l98 = i32::from(
                                                                *base
                                                                    .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            use super::super::super::super::golem::vector::types::FlatMetadataValue as V154;
                                                            let v154 = match l98 {
                                                                0 => {
                                                                    let e154 = {
                                                                        let l99 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l100 = *base
                                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len101 = l100;
                                                                        let bytes101 = _rt::Vec::from_raw_parts(
                                                                            l99.cast(),
                                                                            len101,
                                                                            len101,
                                                                        );
                                                                        _rt::string_lift(bytes101)
                                                                    };
                                                                    V154::StringVal(e154)
                                                                }
                                                                1 => {
                                                                    let e154 = {
                                                                        let l102 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<f64>();
                                                                        l102
                                                                    };
                                                                    V154::NumberVal(e154)
                                                                }
                                                                2 => {
                                                                    let e154 = {
                                                                        let l103 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<i64>();
                                                                        l103
                                                                    };
                                                                    V154::IntegerVal(e154)
                                                                }
                                                                3 => {
                                                                    let e154 = {
                                                                        let l104 = i32::from(
                                                                            *base
                                                                                .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>(),
                                                                        );
                                                                        _rt::bool_lift(l104 as u8)
                                                                    };
                                                                    V154::BooleanVal(e154)
                                                                }
                                                                4 => {
                                                                    let e154 = {
                                                                        let l105 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l106 = *base
                                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let base123 = l105;
                                                                        let len123 = l106;
                                                                        let mut result123 = _rt::Vec::with_capacity(len123);
                                                                        for i in 0..len123 {
                                                                            let base = base123.add(i * 24);
                                                                            let e123 = {
                                                                                let l107 = i32::from(*base.add(0).cast::<u8>());
                                                                                use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V122;
                                                                                let v122 = match l107 {
                                                                                    0 => {
                                                                                        let e122 = {
                                                                                            let l108 = *base.add(8).cast::<*mut u8>();
                                                                                            let l109 = *base
                                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len110 = l109;
                                                                                            let bytes110 = _rt::Vec::from_raw_parts(
                                                                                                l108.cast(),
                                                                                                len110,
                                                                                                len110,
                                                                                            );
                                                                                            _rt::string_lift(bytes110)
                                                                                        };
                                                                                        V122::StringVal(e122)
                                                                                    }
                                                                                    1 => {
                                                                                        let e122 = {
                                                                                            let l111 = *base.add(8).cast::<f64>();
                                                                                            l111
                                                                                        };
                                                                                        V122::NumberVal(e122)
                                                                                    }
                                                                                    2 => {
                                                                                        let e122 = {
                                                                                            let l112 = *base.add(8).cast::<i64>();
                                                                                            l112
                                                                                        };
                                                                                        V122::IntegerVal(e122)
                                                                                    }
                                                                                    3 => {
                                                                                        let e122 = {
                                                                                            let l113 = i32::from(*base.add(8).cast::<u8>());
                                                                                            _rt::bool_lift(l113 as u8)
                                                                                        };
                                                                                        V122::BooleanVal(e122)
                                                                                    }
                                                                                    4 => V122::NullVal,
                                                                                    5 => {
                                                                                        let e122 = {
                                                                                            let l114 = *base.add(8).cast::<*mut u8>();
                                                                                            let l115 = *base
                                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len116 = l115;
                                                                                            let bytes116 = _rt::Vec::from_raw_parts(
                                                                                                l114.cast(),
                                                                                                len116,
                                                                                                len116,
                                                                                            );
                                                                                            _rt::string_lift(bytes116)
                                                                                        };
                                                                                        V122::DatetimeVal(e122)
                                                                                    }
                                                                                    6 => {
                                                                                        let e122 = {
                                                                                            let l117 = *base.add(8).cast::<f64>();
                                                                                            let l118 = *base.add(16).cast::<f64>();
                                                                                            super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                                                latitude: l117,
                                                                                                longitude: l118,
                                                                                            }
                                                                                        };
                                                                                        V122::GeoVal(e122)
                                                                                    }
                                                                                    n => {
                                                                                        debug_assert_eq!(n, 7, "invalid enum discriminant");
                                                                                        let e122 = {
                                                                                            let l119 = *base.add(8).cast::<*mut u8>();
                                                                                            let l120 = *base
                                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len121 = l120;
                                                                                            _rt::Vec::from_raw_parts(l119.cast(), len121, len121)
                                                                                        };
                                                                                        V122::BlobVal(e122)
                                                                                    }
                                                                                };
                                                                                v122
                                                                            };
                                                                            result123.push(e123);
                                                                        }
                                                                        _rt::cabi_dealloc(base123, len123 * 24, 8);
                                                                        result123
                                                                    };
                                                                    V154::ArrayVal(e154)
                                                                }
                                                                5 => {
                                                                    let e154 = {
                                                                        let l124 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l125 = *base
                                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let base145 = l124;
                                                                        let len145 = l125;
                                                                        let mut result145 = _rt::Vec::with_capacity(len145);
                                                                        for i in 0..len145 {
                                                                            let base = base145
                                                                                .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                            let e145 = {
                                                                                let l126 = *base.add(0).cast::<*mut u8>();
                                                                                let l127 = *base
                                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len128 = l127;
                                                                                let bytes128 = _rt::Vec::from_raw_parts(
                                                                                    l126.cast(),
                                                                                    len128,
                                                                                    len128,
                                                                                );
                                                                                let l129 = i32::from(
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>(),
                                                                                );
                                                                                use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V144;
                                                                                let v144 = match l129 {
                                                                                    0 => {
                                                                                        let e144 = {
                                                                                            let l130 = *base
                                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<*mut u8>();
                                                                                            let l131 = *base
                                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len132 = l131;
                                                                                            let bytes132 = _rt::Vec::from_raw_parts(
                                                                                                l130.cast(),
                                                                                                len132,
                                                                                                len132,
                                                                                            );
                                                                                            _rt::string_lift(bytes132)
                                                                                        };
                                                                                        V144::StringVal(e144)
                                                                                    }
                                                                                    1 => {
                                                                                        let e144 = {
                                                                                            let l133 = *base
                                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<f64>();
                                                                                            l133
                                                                                        };
                                                                                        V144::NumberVal(e144)
                                                                                    }
                                                                                    2 => {
                                                                                        let e144 = {
                                                                                            let l134 = *base
                                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<i64>();
                                                                                            l134
                                                                                        };
                                                                                        V144::IntegerVal(e144)
                                                                                    }
                                                                                    3 => {
                                                                                        let e144 = {
                                                                                            let l135 = i32::from(
                                                                                                *base
                                                                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                    .cast::<u8>(),
                                                                                            );
                                                                                            _rt::bool_lift(l135 as u8)
                                                                                        };
                                                                                        V144::BooleanVal(e144)
                                                                                    }
                                                                                    4 => V144::NullVal,
                                                                                    5 => {
                                                                                        let e144 = {
                                                                                            let l136 = *base
                                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<*mut u8>();
                                                                                            let l137 = *base
                                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len138 = l137;
                                                                                            let bytes138 = _rt::Vec::from_raw_parts(
                                                                                                l136.cast(),
                                                                                                len138,
                                                                                                len138,
                                                                                            );
                                                                                            _rt::string_lift(bytes138)
                                                                                        };
                                                                                        V144::DatetimeVal(e144)
                                                                                    }
                                                                                    6 => {
                                                                                        let e144 = {
                                                                                            let l139 = *base
                                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<f64>();
                                                                                            let l140 = *base
                                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<f64>();
                                                                                            super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                                                latitude: l139,
                                                                                                longitude: l140,
                                                                                            }
                                                                                        };
                                                                                        V144::GeoVal(e144)
                                                                                    }
                                                                                    n => {
                                                                                        debug_assert_eq!(n, 7, "invalid enum discriminant");
                                                                                        let e144 = {
                                                                                            let l141 = *base
                                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<*mut u8>();
                                                                                            let l142 = *base
                                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len143 = l142;
                                                                                            _rt::Vec::from_raw_parts(l141.cast(), len143, len143)
                                                                                        };
                                                                                        V144::BlobVal(e144)
                                                                                    }
                                                                                };
                                                                                (_rt::string_lift(bytes128), v144)
                                                                            };
                                                                            result145.push(e145);
                                                                        }
                                                                        _rt::cabi_dealloc(
                                                                            base145,
                                                                            len145 * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                            8,
                                                                        );
                                                                        result145
                                                                    };
                                                                    V154::ObjectVal(e154)
                                                                }
                                                                6 => V154::NullVal,
                                                                7 => {
                                                                    let e154 = {
                                                                        let l146 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<f64>();
                                                                        let l147 = *base
                                                                            .add(40 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<f64>();
                                                                        super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                            latitude: l146,
                                                                            longitude: l147,
                                                                        }
                                                                    };
                                                                    V154::GeoVal(e154)
                                                                }
                                                                8 => {
                                                                    let e154 = {
                                                                        let l148 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l149 = *base
                                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len150 = l149;
                                                                        let bytes150 = _rt::Vec::from_raw_parts(
                                                                            l148.cast(),
                                                                            len150,
                                                                            len150,
                                                                        );
                                                                        _rt::string_lift(bytes150)
                                                                    };
                                                                    V154::DatetimeVal(e154)
                                                                }
                                                                n => {
                                                                    debug_assert_eq!(n, 9, "invalid enum discriminant");
                                                                    let e154 = {
                                                                        let l151 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l152 = *base
                                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len153 = l152;
                                                                        _rt::Vec::from_raw_parts(l151.cast(), len153, len153)
                                                                    };
                                                                    V154::BlobVal(e154)
                                                                }
                                                            };
                                                            super::super::super::super::golem::vector::types::FilterCondition {
                                                                field: _rt::string_lift(bytes96),
                                                                operator: super::super::super::super::golem::vector::types::FilterOperator::_lift(
                                                                    l97 as u8,
                                                                ),
                                                                value: v154,
                                                            }
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                                inputs: _rt::Vec::from_raw_parts(
                                                    l155.cast(),
                                                    len157,
                                                    len157,
                                                ),
                                            }
                                        };
                                        result158.push(e158);
                                    }
                                    _rt::cabi_dealloc(
                                        base158,
                                        len158 * (48 + 4 * ::core::mem::size_of::<*const u8>()),
                                        8,
                                    );
                                    super::super::super::super::golem::vector::types::FilterExpression {
                                        nodes: result158,
                                        root_id: arg8 as u32,
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        match arg9 {
                            0 => None,
                            1 => {
                                let e = {
                                    let len159 = arg11;
                                    let bytes159 = _rt::Vec::from_raw_parts(
                                        arg10.cast(),
                                        len159,
                                        len159,
                                    );
                                    _rt::string_lift(bytes159)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        match arg12 {
                            0 => None,
                            1 => {
                                let e = _rt::bool_lift(arg13 as u8);
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        match arg14 {
                            0 => None,
                            1 => {
                                let e = _rt::bool_lift(arg15 as u8);
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    );
                    let ptr161 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result160 {
                        Ok(e) => {
                            *ptr161.add(0).cast::<u8>() = (0i32) as u8;
                            let vec204 = e;
                            let len204 = vec204.len();
                            let layout204 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec204.len()
                                    * (8 + 14 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result204 = if layout204.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout204).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout204);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec204.into_iter().enumerate() {
                                let base = result204
                                    .add(i * (8 + 14 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let super::super::super::super::golem::vector::types::SearchResult {
                                        id: id162,
                                        score: score162,
                                        distance: distance162,
                                        vector: vector162,
                                        metadata: metadata162,
                                    } = e;
                                    let vec163 = (id162.into_bytes()).into_boxed_slice();
                                    let ptr163 = vec163.as_ptr().cast::<u8>();
                                    let len163 = vec163.len();
                                    ::core::mem::forget(vec163);
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len163;
                                    *base.add(0).cast::<*mut u8>() = ptr163.cast_mut();
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<f32>() = _rt::as_f32(score162);
                                    *base
                                        .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<f32>() = _rt::as_f32(distance162);
                                    match vector162 {
                                        Some(e) => {
                                            *base
                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            use super::super::super::super::golem::vector::types::VectorData as V181;
                                            match e {
                                                V181::Dense(e) => {
                                                    *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                    let vec164 = (e).into_boxed_slice();
                                                    let ptr164 = vec164.as_ptr().cast::<u8>();
                                                    let len164 = vec164.len();
                                                    ::core::mem::forget(vec164);
                                                    *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len164;
                                                    *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr164.cast_mut();
                                                }
                                                V181::Sparse(e) => {
                                                    *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let super::super::super::super::golem::vector::types::SparseVector {
                                                        indices: indices165,
                                                        values: values165,
                                                        total_dimensions: total_dimensions165,
                                                    } = e;
                                                    let vec166 = (indices165).into_boxed_slice();
                                                    let ptr166 = vec166.as_ptr().cast::<u8>();
                                                    let len166 = vec166.len();
                                                    ::core::mem::forget(vec166);
                                                    *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len166;
                                                    *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr166.cast_mut();
                                                    let vec167 = (values165).into_boxed_slice();
                                                    let ptr167 = vec167.as_ptr().cast::<u8>();
                                                    let len167 = vec167.len();
                                                    ::core::mem::forget(vec167);
                                                    *base
                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len167;
                                                    *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr167.cast_mut();
                                                    *base
                                                        .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i32>() = _rt::as_i32(total_dimensions165);
                                                }
                                                V181::Binary(e) => {
                                                    *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (2i32) as u8;
                                                    let super::super::super::super::golem::vector::types::BinaryVector {
                                                        data: data168,
                                                        dimensions: dimensions168,
                                                    } = e;
                                                    let vec169 = (data168).into_boxed_slice();
                                                    let ptr169 = vec169.as_ptr().cast::<u8>();
                                                    let len169 = vec169.len();
                                                    ::core::mem::forget(vec169);
                                                    *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len169;
                                                    *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr169.cast_mut();
                                                    *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i32>() = _rt::as_i32(dimensions168);
                                                }
                                                V181::Half(e) => {
                                                    *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (3i32) as u8;
                                                    let super::super::super::super::golem::vector::types::HalfVector {
                                                        data: data170,
                                                        dimensions: dimensions170,
                                                    } = e;
                                                    let vec171 = (data170).into_boxed_slice();
                                                    let ptr171 = vec171.as_ptr().cast::<u8>();
                                                    let len171 = vec171.len();
                                                    ::core::mem::forget(vec171);
                                                    *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len171;
                                                    *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr171.cast_mut();
                                                    *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i32>() = _rt::as_i32(dimensions170);
                                                }
                                                V181::Named(e) => {
                                                    *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (4i32) as u8;
                                                    let vec175 = e;
                                                    let len175 = vec175.len();
                                                    let layout175 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec175.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    let result175 = if layout175.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout175).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout175);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec175.into_iter().enumerate() {
                                                        let base = result175
                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let (t172_0, t172_1) = e;
                                                            let vec173 = (t172_0.into_bytes()).into_boxed_slice();
                                                            let ptr173 = vec173.as_ptr().cast::<u8>();
                                                            let len173 = vec173.len();
                                                            ::core::mem::forget(vec173);
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len173;
                                                            *base.add(0).cast::<*mut u8>() = ptr173.cast_mut();
                                                            let vec174 = (t172_1).into_boxed_slice();
                                                            let ptr174 = vec174.as_ptr().cast::<u8>();
                                                            let len174 = vec174.len();
                                                            ::core::mem::forget(vec174);
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len174;
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr174.cast_mut();
                                                        }
                                                    }
                                                    *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len175;
                                                    *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result175;
                                                }
                                                V181::Hybrid(e) => {
                                                    *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (5i32) as u8;
                                                    let (t176_0, t176_1) = e;
                                                    let vec177 = (t176_0).into_boxed_slice();
                                                    let ptr177 = vec177.as_ptr().cast::<u8>();
                                                    let len177 = vec177.len();
                                                    ::core::mem::forget(vec177);
                                                    *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len177;
                                                    *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr177.cast_mut();
                                                    let super::super::super::super::golem::vector::types::SparseVector {
                                                        indices: indices178,
                                                        values: values178,
                                                        total_dimensions: total_dimensions178,
                                                    } = t176_1;
                                                    let vec179 = (indices178).into_boxed_slice();
                                                    let ptr179 = vec179.as_ptr().cast::<u8>();
                                                    let len179 = vec179.len();
                                                    ::core::mem::forget(vec179);
                                                    *base
                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len179;
                                                    *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr179.cast_mut();
                                                    let vec180 = (values178).into_boxed_slice();
                                                    let ptr180 = vec180.as_ptr().cast::<u8>();
                                                    let len180 = vec180.len();
                                                    ::core::mem::forget(vec180);
                                                    *base
                                                        .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len180;
                                                    *base
                                                        .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr180.cast_mut();
                                                    *base
                                                        .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i32>() = _rt::as_i32(total_dimensions178);
                                                }
                                            }
                                        }
                                        None => {
                                            *base
                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match metadata162 {
                                        Some(e) => {
                                            *base
                                                .add(8 + 11 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec203 = e;
                                            let len203 = vec203.len();
                                            let layout203 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec203.len()
                                                    * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                8,
                                            );
                                            let result203 = if layout203.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout203).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout203);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec203.into_iter().enumerate() {
                                                let base = result203
                                                    .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let (t182_0, t182_1) = e;
                                                    let vec183 = (t182_0.into_bytes()).into_boxed_slice();
                                                    let ptr183 = vec183.as_ptr().cast::<u8>();
                                                    let len183 = vec183.len();
                                                    ::core::mem::forget(vec183);
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len183;
                                                    *base.add(0).cast::<*mut u8>() = ptr183.cast_mut();
                                                    use super::super::super::super::golem::vector::types::FlatMetadataValue as V202;
                                                    match t182_1 {
                                                        V202::StringVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                            let vec184 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr184 = vec184.as_ptr().cast::<u8>();
                                                            let len184 = vec184.len();
                                                            ::core::mem::forget(vec184);
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len184;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr184.cast_mut();
                                                        }
                                                        V202::NumberVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<f64>() = _rt::as_f64(e);
                                                        }
                                                        V202::IntegerVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (2i32) as u8;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<i64>() = _rt::as_i64(e);
                                                        }
                                                        V202::BooleanVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (3i32) as u8;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (match e {
                                                                true => 1,
                                                                false => 0,
                                                            }) as u8;
                                                        }
                                                        V202::ArrayVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (4i32) as u8;
                                                            let vec190 = e;
                                                            let len190 = vec190.len();
                                                            let layout190 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec190.len() * 24,
                                                                8,
                                                            );
                                                            let result190 = if layout190.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout190).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout190);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec190.into_iter().enumerate() {
                                                                let base = result190.add(i * 24);
                                                                {
                                                                    use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V189;
                                                                    match e {
                                                                        V189::StringVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                            let vec185 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr185 = vec185.as_ptr().cast::<u8>();
                                                                            let len185 = vec185.len();
                                                                            ::core::mem::forget(vec185);
                                                                            *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len185;
                                                                            *base.add(8).cast::<*mut u8>() = ptr185.cast_mut();
                                                                        }
                                                                        V189::NumberVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                            *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                                                        }
                                                                        V189::IntegerVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (2i32) as u8;
                                                                            *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                                        }
                                                                        V189::BooleanVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (3i32) as u8;
                                                                            *base.add(8).cast::<u8>() = (match e {
                                                                                true => 1,
                                                                                false => 0,
                                                                            }) as u8;
                                                                        }
                                                                        V189::NullVal => {
                                                                            *base.add(0).cast::<u8>() = (4i32) as u8;
                                                                        }
                                                                        V189::DatetimeVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (5i32) as u8;
                                                                            let vec186 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr186 = vec186.as_ptr().cast::<u8>();
                                                                            let len186 = vec186.len();
                                                                            ::core::mem::forget(vec186);
                                                                            *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len186;
                                                                            *base.add(8).cast::<*mut u8>() = ptr186.cast_mut();
                                                                        }
                                                                        V189::GeoVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (6i32) as u8;
                                                                            let super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                                latitude: latitude187,
                                                                                longitude: longitude187,
                                                                            } = e;
                                                                            *base.add(8).cast::<f64>() = _rt::as_f64(latitude187);
                                                                            *base.add(16).cast::<f64>() = _rt::as_f64(longitude187);
                                                                        }
                                                                        V189::BlobVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (7i32) as u8;
                                                                            let vec188 = (e).into_boxed_slice();
                                                                            let ptr188 = vec188.as_ptr().cast::<u8>();
                                                                            let len188 = vec188.len();
                                                                            ::core::mem::forget(vec188);
                                                                            *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len188;
                                                                            *base.add(8).cast::<*mut u8>() = ptr188.cast_mut();
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len190;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result190;
                                                        }
                                                        V202::ObjectVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (5i32) as u8;
                                                            let vec198 = e;
                                                            let len198 = vec198.len();
                                                            let layout198 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec198.len()
                                                                    * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                            let result198 = if layout198.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout198).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout198);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec198.into_iter().enumerate() {
                                                                let base = result198
                                                                    .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let (t191_0, t191_1) = e;
                                                                    let vec192 = (t191_0.into_bytes()).into_boxed_slice();
                                                                    let ptr192 = vec192.as_ptr().cast::<u8>();
                                                                    let len192 = vec192.len();
                                                                    ::core::mem::forget(vec192);
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len192;
                                                                    *base.add(0).cast::<*mut u8>() = ptr192.cast_mut();
                                                                    use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V197;
                                                                    match t191_1 {
                                                                        V197::StringVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                            let vec193 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr193 = vec193.as_ptr().cast::<u8>();
                                                                            let len193 = vec193.len();
                                                                            ::core::mem::forget(vec193);
                                                                            *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len193;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr193.cast_mut();
                                                                        }
                                                                        V197::NumberVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<f64>() = _rt::as_f64(e);
                                                                        }
                                                                        V197::IntegerVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (2i32) as u8;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i64>() = _rt::as_i64(e);
                                                                        }
                                                                        V197::BooleanVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (3i32) as u8;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (match e {
                                                                                true => 1,
                                                                                false => 0,
                                                                            }) as u8;
                                                                        }
                                                                        V197::NullVal => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (4i32) as u8;
                                                                        }
                                                                        V197::DatetimeVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (5i32) as u8;
                                                                            let vec194 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr194 = vec194.as_ptr().cast::<u8>();
                                                                            let len194 = vec194.len();
                                                                            ::core::mem::forget(vec194);
                                                                            *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len194;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr194.cast_mut();
                                                                        }
                                                                        V197::GeoVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (6i32) as u8;
                                                                            let super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                                latitude: latitude195,
                                                                                longitude: longitude195,
                                                                            } = e;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<f64>() = _rt::as_f64(latitude195);
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<f64>() = _rt::as_f64(longitude195);
                                                                        }
                                                                        V197::BlobVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (7i32) as u8;
                                                                            let vec196 = (e).into_boxed_slice();
                                                                            let ptr196 = vec196.as_ptr().cast::<u8>();
                                                                            let len196 = vec196.len();
                                                                            ::core::mem::forget(vec196);
                                                                            *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len196;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr196.cast_mut();
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len198;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result198;
                                                        }
                                                        V202::NullVal => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (6i32) as u8;
                                                        }
                                                        V202::GeoVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (7i32) as u8;
                                                            let super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                latitude: latitude199,
                                                                longitude: longitude199,
                                                            } = e;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<f64>() = _rt::as_f64(latitude199);
                                                            *base
                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<f64>() = _rt::as_f64(longitude199);
                                                        }
                                                        V202::DatetimeVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (8i32) as u8;
                                                            let vec200 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr200 = vec200.as_ptr().cast::<u8>();
                                                            let len200 = vec200.len();
                                                            ::core::mem::forget(vec200);
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len200;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr200.cast_mut();
                                                        }
                                                        V202::BlobVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (9i32) as u8;
                                                            let vec201 = (e).into_boxed_slice();
                                                            let ptr201 = vec201.as_ptr().cast::<u8>();
                                                            let len201 = vec201.len();
                                                            ::core::mem::forget(vec201);
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len201;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr201.cast_mut();
                                                        }
                                                    }
                                                }
                                            }
                                            *base
                                                .add(8 + 13 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len203;
                                            *base
                                                .add(8 + 12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result203;
                                        }
                                        None => {
                                            *base
                                                .add(8 + 11 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                            }
                            *ptr161
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len204;
                            *ptr161
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result204;
                        }
                        Err(e) => {
                            *ptr161.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::golem::vector::types::VectorError as V215;
                            match e {
                                V215::NotFound(e) => {
                                    *ptr161
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                    let vec205 = (e.into_bytes()).into_boxed_slice();
                                    let ptr205 = vec205.as_ptr().cast::<u8>();
                                    let len205 = vec205.len();
                                    ::core::mem::forget(vec205);
                                    *ptr161
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len205;
                                    *ptr161
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr205.cast_mut();
                                }
                                V215::AlreadyExists(e) => {
                                    *ptr161
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec206 = (e.into_bytes()).into_boxed_slice();
                                    let ptr206 = vec206.as_ptr().cast::<u8>();
                                    let len206 = vec206.len();
                                    ::core::mem::forget(vec206);
                                    *ptr161
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len206;
                                    *ptr161
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr206.cast_mut();
                                }
                                V215::InvalidParams(e) => {
                                    *ptr161
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                    let vec207 = (e.into_bytes()).into_boxed_slice();
                                    let ptr207 = vec207.as_ptr().cast::<u8>();
                                    let len207 = vec207.len();
                                    ::core::mem::forget(vec207);
                                    *ptr161
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len207;
                                    *ptr161
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr207.cast_mut();
                                }
                                V215::UnsupportedFeature(e) => {
                                    *ptr161
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                    let vec208 = (e.into_bytes()).into_boxed_slice();
                                    let ptr208 = vec208.as_ptr().cast::<u8>();
                                    let len208 = vec208.len();
                                    ::core::mem::forget(vec208);
                                    *ptr161
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len208;
                                    *ptr161
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr208.cast_mut();
                                }
                                V215::DimensionMismatch(e) => {
                                    *ptr161
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (4i32) as u8;
                                    let vec209 = (e.into_bytes()).into_boxed_slice();
                                    let ptr209 = vec209.as_ptr().cast::<u8>();
                                    let len209 = vec209.len();
                                    ::core::mem::forget(vec209);
                                    *ptr161
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len209;
                                    *ptr161
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr209.cast_mut();
                                }
                                V215::InvalidVector(e) => {
                                    *ptr161
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (5i32) as u8;
                                    let vec210 = (e.into_bytes()).into_boxed_slice();
                                    let ptr210 = vec210.as_ptr().cast::<u8>();
                                    let len210 = vec210.len();
                                    ::core::mem::forget(vec210);
                                    *ptr161
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len210;
                                    *ptr161
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr210.cast_mut();
                                }
                                V215::Unauthorized(e) => {
                                    *ptr161
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (6i32) as u8;
                                    let vec211 = (e.into_bytes()).into_boxed_slice();
                                    let ptr211 = vec211.as_ptr().cast::<u8>();
                                    let len211 = vec211.len();
                                    ::core::mem::forget(vec211);
                                    *ptr161
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len211;
                                    *ptr161
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr211.cast_mut();
                                }
                                V215::RateLimited(e) => {
                                    *ptr161
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (7i32) as u8;
                                    let vec212 = (e.into_bytes()).into_boxed_slice();
                                    let ptr212 = vec212.as_ptr().cast::<u8>();
                                    let len212 = vec212.len();
                                    ::core::mem::forget(vec212);
                                    *ptr161
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len212;
                                    *ptr161
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr212.cast_mut();
                                }
                                V215::ProviderError(e) => {
                                    *ptr161
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (8i32) as u8;
                                    let vec213 = (e.into_bytes()).into_boxed_slice();
                                    let ptr213 = vec213.as_ptr().cast::<u8>();
                                    let len213 = vec213.len();
                                    ::core::mem::forget(vec213);
                                    *ptr161
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len213;
                                    *ptr161
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr213.cast_mut();
                                }
                                V215::ConnectionError(e) => {
                                    *ptr161
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (9i32) as u8;
                                    let vec214 = (e.into_bytes()).into_boxed_slice();
                                    let ptr214 = vec214.as_ptr().cast::<u8>();
                                    let len214 = vec214.len();
                                    ::core::mem::forget(vec214);
                                    *ptr161
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len214;
                                    *ptr161
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr214.cast_mut();
                                }
                            }
                        }
                    };
                    ptr161
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_discover_vectors<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let base77 = l1;
                            let len77 = l2;
                            for i in 0..len77 {
                                let base = base77
                                    .add(i * (8 + 14 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let l3 = *base.add(0).cast::<*mut u8>();
                                    let l4 = *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l3, l4, 1);
                                    let l5 = i32::from(
                                        *base
                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l5 {
                                        0 => {}
                                        _ => {
                                            let l6 = i32::from(
                                                *base
                                                    .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l6 {
                                                0 => {
                                                    let l7 = *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l8 = *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base9 = l7;
                                                    let len9 = l8;
                                                    _rt::cabi_dealloc(base9, len9 * 4, 4);
                                                }
                                                1 => {
                                                    let l10 = *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l11 = *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base12 = l10;
                                                    let len12 = l11;
                                                    _rt::cabi_dealloc(base12, len12 * 4, 4);
                                                    let l13 = *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l14 = *base
                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base15 = l13;
                                                    let len15 = l14;
                                                    _rt::cabi_dealloc(base15, len15 * 4, 4);
                                                }
                                                2 => {
                                                    let l16 = *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l17 = *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base18 = l16;
                                                    let len18 = l17;
                                                    _rt::cabi_dealloc(base18, len18 * 1, 1);
                                                }
                                                3 => {
                                                    let l19 = *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l20 = *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base21 = l19;
                                                    let len21 = l20;
                                                    _rt::cabi_dealloc(base21, len21 * 4, 4);
                                                }
                                                4 => {
                                                    let l22 = *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l23 = *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base29 = l22;
                                                    let len29 = l23;
                                                    for i in 0..len29 {
                                                        let base = base29
                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l24 = *base.add(0).cast::<*mut u8>();
                                                            let l25 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l24, l25, 1);
                                                            let l26 = *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l27 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base28 = l26;
                                                            let len28 = l27;
                                                            _rt::cabi_dealloc(base28, len28 * 4, 4);
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base29,
                                                        len29 * (4 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                }
                                                _ => {
                                                    let l30 = *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l31 = *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base32 = l30;
                                                    let len32 = l31;
                                                    _rt::cabi_dealloc(base32, len32 * 4, 4);
                                                    let l33 = *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l34 = *base
                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base35 = l33;
                                                    let len35 = l34;
                                                    _rt::cabi_dealloc(base35, len35 * 4, 4);
                                                    let l36 = *base
                                                        .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l37 = *base
                                                        .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base38 = l36;
                                                    let len38 = l37;
                                                    _rt::cabi_dealloc(base38, len38 * 4, 4);
                                                }
                                            }
                                        }
                                    }
                                    let l39 = i32::from(
                                        *base
                                            .add(8 + 11 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l39 {
                                        0 => {}
                                        _ => {
                                            let l40 = *base
                                                .add(8 + 12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l41 = *base
                                                .add(8 + 13 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base76 = l40;
                                            let len76 = l41;
                                            for i in 0..len76 {
                                                let base = base76
                                                    .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let l42 = *base.add(0).cast::<*mut u8>();
                                                    let l43 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l42, l43, 1);
                                                    let l44 = i32::from(
                                                        *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l44 {
                                                        0 => {
                                                            let l45 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l46 = *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l45, l46, 1);
                                                        }
                                                        1 => {}
                                                        2 => {}
                                                        3 => {}
                                                        4 => {
                                                            let l47 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l48 = *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base57 = l47;
                                                            let len57 = l48;
                                                            for i in 0..len57 {
                                                                let base = base57.add(i * 24);
                                                                {
                                                                    let l49 = i32::from(*base.add(0).cast::<u8>());
                                                                    match l49 {
                                                                        0 => {
                                                                            let l50 = *base.add(8).cast::<*mut u8>();
                                                                            let l51 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l50, l51, 1);
                                                                        }
                                                                        1 => {}
                                                                        2 => {}
                                                                        3 => {}
                                                                        4 => {}
                                                                        5 => {
                                                                            let l52 = *base.add(8).cast::<*mut u8>();
                                                                            let l53 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l52, l53, 1);
                                                                        }
                                                                        6 => {}
                                                                        _ => {
                                                                            let l54 = *base.add(8).cast::<*mut u8>();
                                                                            let l55 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base56 = l54;
                                                                            let len56 = l55;
                                                                            _rt::cabi_dealloc(base56, len56 * 1, 1);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(base57, len57 * 24, 8);
                                                        }
                                                        5 => {
                                                            let l58 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l59 = *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base70 = l58;
                                                            let len70 = l59;
                                                            for i in 0..len70 {
                                                                let base = base70
                                                                    .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l60 = *base.add(0).cast::<*mut u8>();
                                                                    let l61 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l60, l61, 1);
                                                                    let l62 = i32::from(
                                                                        *base
                                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l62 {
                                                                        0 => {
                                                                            let l63 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l64 = *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l63, l64, 1);
                                                                        }
                                                                        1 => {}
                                                                        2 => {}
                                                                        3 => {}
                                                                        4 => {}
                                                                        5 => {
                                                                            let l65 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l66 = *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l65, l66, 1);
                                                                        }
                                                                        6 => {}
                                                                        _ => {
                                                                            let l67 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l68 = *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base69 = l67;
                                                                            let len69 = l68;
                                                                            _rt::cabi_dealloc(base69, len69 * 1, 1);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base70,
                                                                len70 * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                        }
                                                        6 => {}
                                                        7 => {}
                                                        8 => {
                                                            let l71 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l72 = *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l71, l72, 1);
                                                        }
                                                        _ => {
                                                            let l73 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l74 = *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base75 = l73;
                                                            let len75 = l74;
                                                            _rt::cabi_dealloc(base75, len75 * 1, 1);
                                                        }
                                                    }
                                                }
                                            }
                                            _rt::cabi_dealloc(
                                                base76,
                                                len76 * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                8,
                                            );
                                        }
                                    }
                                }
                            }
                            _rt::cabi_dealloc(
                                base77,
                                len77 * (8 + 14 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                        }
                        _ => {
                            let l78 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l78 {
                                0 => {
                                    let l79 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l80 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l79, l80, 1);
                                }
                                1 => {
                                    let l81 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l82 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l81, l82, 1);
                                }
                                2 => {
                                    let l83 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l84 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l83, l84, 1);
                                }
                                3 => {
                                    let l85 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l86 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l85, l86, 1);
                                }
                                4 => {
                                    let l87 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l88 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l87, l88, 1);
                                }
                                5 => {
                                    let l89 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l90 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l89, l90, 1);
                                }
                                6 => {
                                    let l91 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l92 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l91, l92, 1);
                                }
                                7 => {
                                    let l93 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l94 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l93, l94, 1);
                                }
                                8 => {
                                    let l95 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l96 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l95, l96, 1);
                                }
                                _ => {
                                    let l97 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l98 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l97, l98, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_search_groups_cabi<T: Guest>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len2 = l1;
                    let bytes2 = _rt::Vec::from_raw_parts(l0.cast(), len2, len2);
                    let l3 = i32::from(
                        *arg0.add(2 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    use super::super::super::super::exports::golem::vector::search::SearchQuery as V91;
                    let v91 = match l3 {
                        0 => {
                            let e91 = {
                                let l4 = i32::from(
                                    *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                use super::super::super::super::golem::vector::types::VectorData as V42;
                                let v42 = match l4 {
                                    0 => {
                                        let e42 = {
                                            let l5 = *arg0
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l6 = *arg0
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len7 = l6;
                                            _rt::Vec::from_raw_parts(l5.cast(), len7, len7)
                                        };
                                        V42::Dense(e42)
                                    }
                                    1 => {
                                        let e42 = {
                                            let l8 = *arg0
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l9 = *arg0
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len10 = l9;
                                            let l11 = *arg0
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l12 = *arg0
                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len13 = l12;
                                            let l14 = *arg0
                                                .add(8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>();
                                            super::super::super::super::golem::vector::types::SparseVector {
                                                indices: _rt::Vec::from_raw_parts(l8.cast(), len10, len10),
                                                values: _rt::Vec::from_raw_parts(l11.cast(), len13, len13),
                                                total_dimensions: l14 as u32,
                                            }
                                        };
                                        V42::Sparse(e42)
                                    }
                                    2 => {
                                        let e42 = {
                                            let l15 = *arg0
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l16 = *arg0
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len17 = l16;
                                            let l18 = *arg0
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>();
                                            super::super::super::super::golem::vector::types::BinaryVector {
                                                data: _rt::Vec::from_raw_parts(l15.cast(), len17, len17),
                                                dimensions: l18 as u32,
                                            }
                                        };
                                        V42::Binary(e42)
                                    }
                                    3 => {
                                        let e42 = {
                                            let l19 = *arg0
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l20 = *arg0
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len21 = l20;
                                            let l22 = *arg0
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>();
                                            super::super::super::super::golem::vector::types::HalfVector {
                                                data: _rt::Vec::from_raw_parts(l19.cast(), len21, len21),
                                                dimensions: l22 as u32,
                                            }
                                        };
                                        V42::Half(e42)
                                    }
                                    4 => {
                                        let e42 = {
                                            let l23 = *arg0
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l24 = *arg0
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base31 = l23;
                                            let len31 = l24;
                                            let mut result31 = _rt::Vec::with_capacity(len31);
                                            for i in 0..len31 {
                                                let base = base31
                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                let e31 = {
                                                    let l25 = *base.add(0).cast::<*mut u8>();
                                                    let l26 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len27 = l26;
                                                    let bytes27 = _rt::Vec::from_raw_parts(
                                                        l25.cast(),
                                                        len27,
                                                        len27,
                                                    );
                                                    let l28 = *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l29 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len30 = l29;
                                                    (
                                                        _rt::string_lift(bytes27),
                                                        _rt::Vec::from_raw_parts(l28.cast(), len30, len30),
                                                    )
                                                };
                                                result31.push(e31);
                                            }
                                            _rt::cabi_dealloc(
                                                base31,
                                                len31 * (4 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            result31
                                        };
                                        V42::Named(e42)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 5, "invalid enum discriminant");
                                        let e42 = {
                                            let l32 = *arg0
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l33 = *arg0
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len34 = l33;
                                            let l35 = *arg0
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l36 = *arg0
                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len37 = l36;
                                            let l38 = *arg0
                                                .add(8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l39 = *arg0
                                                .add(9 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len40 = l39;
                                            let l41 = *arg0
                                                .add(10 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>();
                                            (
                                                _rt::Vec::from_raw_parts(l32.cast(), len34, len34),
                                                super::super::super::super::golem::vector::types::SparseVector {
                                                    indices: _rt::Vec::from_raw_parts(l35.cast(), len37, len37),
                                                    values: _rt::Vec::from_raw_parts(l38.cast(), len40, len40),
                                                    total_dimensions: l41 as u32,
                                                },
                                            )
                                        };
                                        V42::Hybrid(e42)
                                    }
                                };
                                v42
                            };
                            V91::Vector(e91)
                        }
                        1 => {
                            let e91 = {
                                let l43 = *arg0
                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l44 = *arg0
                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len45 = l44;
                                let bytes45 = _rt::Vec::from_raw_parts(
                                    l43.cast(),
                                    len45,
                                    len45,
                                );
                                _rt::string_lift(bytes45)
                            };
                            V91::ById(e91)
                        }
                        n => {
                            debug_assert_eq!(n, 2, "invalid enum discriminant");
                            let e91 = {
                                let l46 = *arg0
                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l47 = *arg0
                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let base90 = l46;
                                let len90 = l47;
                                let mut result90 = _rt::Vec::with_capacity(len90);
                                for i in 0..len90 {
                                    let base = base90
                                        .add(i * (10 * ::core::mem::size_of::<*const u8>()));
                                    let e90 = {
                                        let l48 = *base.add(0).cast::<*mut u8>();
                                        let l49 = *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len50 = l49;
                                        let bytes50 = _rt::Vec::from_raw_parts(
                                            l48.cast(),
                                            len50,
                                            len50,
                                        );
                                        let l51 = i32::from(
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        use super::super::super::super::golem::vector::types::VectorData as V89;
                                        let v89 = match l51 {
                                            0 => {
                                                let e89 = {
                                                    let l52 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l53 = *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len54 = l53;
                                                    _rt::Vec::from_raw_parts(l52.cast(), len54, len54)
                                                };
                                                V89::Dense(e89)
                                            }
                                            1 => {
                                                let e89 = {
                                                    let l55 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l56 = *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len57 = l56;
                                                    let l58 = *base
                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l59 = *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len60 = l59;
                                                    let l61 = *base
                                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i32>();
                                                    super::super::super::super::golem::vector::types::SparseVector {
                                                        indices: _rt::Vec::from_raw_parts(l55.cast(), len57, len57),
                                                        values: _rt::Vec::from_raw_parts(l58.cast(), len60, len60),
                                                        total_dimensions: l61 as u32,
                                                    }
                                                };
                                                V89::Sparse(e89)
                                            }
                                            2 => {
                                                let e89 = {
                                                    let l62 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l63 = *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len64 = l63;
                                                    let l65 = *base
                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i32>();
                                                    super::super::super::super::golem::vector::types::BinaryVector {
                                                        data: _rt::Vec::from_raw_parts(l62.cast(), len64, len64),
                                                        dimensions: l65 as u32,
                                                    }
                                                };
                                                V89::Binary(e89)
                                            }
                                            3 => {
                                                let e89 = {
                                                    let l66 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l67 = *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len68 = l67;
                                                    let l69 = *base
                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i32>();
                                                    super::super::super::super::golem::vector::types::HalfVector {
                                                        data: _rt::Vec::from_raw_parts(l66.cast(), len68, len68),
                                                        dimensions: l69 as u32,
                                                    }
                                                };
                                                V89::Half(e89)
                                            }
                                            4 => {
                                                let e89 = {
                                                    let l70 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l71 = *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base78 = l70;
                                                    let len78 = l71;
                                                    let mut result78 = _rt::Vec::with_capacity(len78);
                                                    for i in 0..len78 {
                                                        let base = base78
                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                        let e78 = {
                                                            let l72 = *base.add(0).cast::<*mut u8>();
                                                            let l73 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len74 = l73;
                                                            let bytes74 = _rt::Vec::from_raw_parts(
                                                                l72.cast(),
                                                                len74,
                                                                len74,
                                                            );
                                                            let l75 = *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l76 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len77 = l76;
                                                            (
                                                                _rt::string_lift(bytes74),
                                                                _rt::Vec::from_raw_parts(l75.cast(), len77, len77),
                                                            )
                                                        };
                                                        result78.push(e78);
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base78,
                                                        len78 * (4 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    result78
                                                };
                                                V89::Named(e89)
                                            }
                                            n => {
                                                debug_assert_eq!(n, 5, "invalid enum discriminant");
                                                let e89 = {
                                                    let l79 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l80 = *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len81 = l80;
                                                    let l82 = *base
                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l83 = *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len84 = l83;
                                                    let l85 = *base
                                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l86 = *base
                                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len87 = l86;
                                                    let l88 = *base
                                                        .add(9 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i32>();
                                                    (
                                                        _rt::Vec::from_raw_parts(l79.cast(), len81, len81),
                                                        super::super::super::super::golem::vector::types::SparseVector {
                                                            indices: _rt::Vec::from_raw_parts(l82.cast(), len84, len84),
                                                            values: _rt::Vec::from_raw_parts(l85.cast(), len87, len87),
                                                            total_dimensions: l88 as u32,
                                                        },
                                                    )
                                                };
                                                V89::Hybrid(e89)
                                            }
                                        };
                                        (_rt::string_lift(bytes50), v89)
                                    };
                                    result90.push(e90);
                                }
                                _rt::cabi_dealloc(
                                    base90,
                                    len90 * (10 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                result90
                            };
                            V91::MultiVector(e91)
                        }
                    };
                    let l92 = *arg0
                        .add(11 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l93 = *arg0
                        .add(12 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len94 = l93;
                    let bytes94 = _rt::Vec::from_raw_parts(l92.cast(), len94, len94);
                    let l95 = *arg0
                        .add(13 * ::core::mem::size_of::<*const u8>())
                        .cast::<i32>();
                    let l96 = *arg0
                        .add(4 + 13 * ::core::mem::size_of::<*const u8>())
                        .cast::<i32>();
                    let l97 = i32::from(
                        *arg0
                            .add(8 + 13 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    let l170 = i32::from(
                        *arg0
                            .add(8 + 17 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    let l174 = i32::from(
                        *arg0
                            .add(8 + 20 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    let l176 = i32::from(
                        *arg0
                            .add(10 + 20 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    let result178 = T::search_groups(
                        _rt::string_lift(bytes2),
                        v91,
                        _rt::string_lift(bytes94),
                        l95 as u32,
                        l96 as u32,
                        match l97 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l98 = *arg0
                                        .add(8 + 14 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l99 = *arg0
                                        .add(8 + 15 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base168 = l98;
                                    let len168 = l99;
                                    let mut result168 = _rt::Vec::with_capacity(len168);
                                    for i in 0..len168 {
                                        let base = base168
                                            .add(i * (48 + 4 * ::core::mem::size_of::<*const u8>()));
                                        let e168 = {
                                            let l100 = *base.add(0).cast::<i32>();
                                            let l101 = i32::from(*base.add(4).cast::<u8>());
                                            use super::super::super::super::golem::vector::types::FilterOp as V102;
                                            let v102 = match l101 {
                                                0 => V102::Condition,
                                                1 => V102::And,
                                                2 => V102::Or,
                                                n => {
                                                    debug_assert_eq!(n, 3, "invalid enum discriminant");
                                                    V102::Not
                                                }
                                            };
                                            let l103 = i32::from(*base.add(8).cast::<u8>());
                                            let l165 = *base
                                                .add(48 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l166 = *base
                                                .add(48 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len167 = l166;
                                            super::super::super::super::golem::vector::types::FilterNode {
                                                id: l100 as u32,
                                                op: v102,
                                                condition: match l103 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l104 = *base.add(16).cast::<*mut u8>();
                                                            let l105 = *base
                                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len106 = l105;
                                                            let bytes106 = _rt::Vec::from_raw_parts(
                                                                l104.cast(),
                                                                len106,
                                                                len106,
                                                            );
                                                            let l107 = i32::from(
                                                                *base
                                                                    .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            let l108 = i32::from(
                                                                *base
                                                                    .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            use super::super::super::super::golem::vector::types::FlatMetadataValue as V164;
                                                            let v164 = match l108 {
                                                                0 => {
                                                                    let e164 = {
                                                                        let l109 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l110 = *base
                                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len111 = l110;
                                                                        let bytes111 = _rt::Vec::from_raw_parts(
                                                                            l109.cast(),
                                                                            len111,
                                                                            len111,
                                                                        );
                                                                        _rt::string_lift(bytes111)
                                                                    };
                                                                    V164::StringVal(e164)
                                                                }
                                                                1 => {
                                                                    let e164 = {
                                                                        let l112 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<f64>();
                                                                        l112
                                                                    };
                                                                    V164::NumberVal(e164)
                                                                }
                                                                2 => {
                                                                    let e164 = {
                                                                        let l113 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<i64>();
                                                                        l113
                                                                    };
                                                                    V164::IntegerVal(e164)
                                                                }
                                                                3 => {
                                                                    let e164 = {
                                                                        let l114 = i32::from(
                                                                            *base
                                                                                .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>(),
                                                                        );
                                                                        _rt::bool_lift(l114 as u8)
                                                                    };
                                                                    V164::BooleanVal(e164)
                                                                }
                                                                4 => {
                                                                    let e164 = {
                                                                        let l115 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l116 = *base
                                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let base133 = l115;
                                                                        let len133 = l116;
                                                                        let mut result133 = _rt::Vec::with_capacity(len133);
                                                                        for i in 0..len133 {
                                                                            let base = base133.add(i * 24);
                                                                            let e133 = {
                                                                                let l117 = i32::from(*base.add(0).cast::<u8>());
                                                                                use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V132;
                                                                                let v132 = match l117 {
                                                                                    0 => {
                                                                                        let e132 = {
                                                                                            let l118 = *base.add(8).cast::<*mut u8>();
                                                                                            let l119 = *base
                                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len120 = l119;
                                                                                            let bytes120 = _rt::Vec::from_raw_parts(
                                                                                                l118.cast(),
                                                                                                len120,
                                                                                                len120,
                                                                                            );
                                                                                            _rt::string_lift(bytes120)
                                                                                        };
                                                                                        V132::StringVal(e132)
                                                                                    }
                                                                                    1 => {
                                                                                        let e132 = {
                                                                                            let l121 = *base.add(8).cast::<f64>();
                                                                                            l121
                                                                                        };
                                                                                        V132::NumberVal(e132)
                                                                                    }
                                                                                    2 => {
                                                                                        let e132 = {
                                                                                            let l122 = *base.add(8).cast::<i64>();
                                                                                            l122
                                                                                        };
                                                                                        V132::IntegerVal(e132)
                                                                                    }
                                                                                    3 => {
                                                                                        let e132 = {
                                                                                            let l123 = i32::from(*base.add(8).cast::<u8>());
                                                                                            _rt::bool_lift(l123 as u8)
                                                                                        };
                                                                                        V132::BooleanVal(e132)
                                                                                    }
                                                                                    4 => V132::NullVal,
                                                                                    5 => {
                                                                                        let e132 = {
                                                                                            let l124 = *base.add(8).cast::<*mut u8>();
                                                                                            let l125 = *base
                                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len126 = l125;
                                                                                            let bytes126 = _rt::Vec::from_raw_parts(
                                                                                                l124.cast(),
                                                                                                len126,
                                                                                                len126,
                                                                                            );
                                                                                            _rt::string_lift(bytes126)
                                                                                        };
                                                                                        V132::DatetimeVal(e132)
                                                                                    }
                                                                                    6 => {
                                                                                        let e132 = {
                                                                                            let l127 = *base.add(8).cast::<f64>();
                                                                                            let l128 = *base.add(16).cast::<f64>();
                                                                                            super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                                                latitude: l127,
                                                                                                longitude: l128,
                                                                                            }
                                                                                        };
                                                                                        V132::GeoVal(e132)
                                                                                    }
                                                                                    n => {
                                                                                        debug_assert_eq!(n, 7, "invalid enum discriminant");
                                                                                        let e132 = {
                                                                                            let l129 = *base.add(8).cast::<*mut u8>();
                                                                                            let l130 = *base
                                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len131 = l130;
                                                                                            _rt::Vec::from_raw_parts(l129.cast(), len131, len131)
                                                                                        };
                                                                                        V132::BlobVal(e132)
                                                                                    }
                                                                                };
                                                                                v132
                                                                            };
                                                                            result133.push(e133);
                                                                        }
                                                                        _rt::cabi_dealloc(base133, len133 * 24, 8);
                                                                        result133
                                                                    };
                                                                    V164::ArrayVal(e164)
                                                                }
                                                                5 => {
                                                                    let e164 = {
                                                                        let l134 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l135 = *base
                                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let base155 = l134;
                                                                        let len155 = l135;
                                                                        let mut result155 = _rt::Vec::with_capacity(len155);
                                                                        for i in 0..len155 {
                                                                            let base = base155
                                                                                .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                            let e155 = {
                                                                                let l136 = *base.add(0).cast::<*mut u8>();
                                                                                let l137 = *base
                                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len138 = l137;
                                                                                let bytes138 = _rt::Vec::from_raw_parts(
                                                                                    l136.cast(),
                                                                                    len138,
                                                                                    len138,
                                                                                );
                                                                                let l139 = i32::from(
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>(),
                                                                                );
                                                                                use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V154;
                                                                                let v154 = match l139 {
                                                                                    0 => {
                                                                                        let e154 = {
                                                                                            let l140 = *base
                                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<*mut u8>();
                                                                                            let l141 = *base
                                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len142 = l141;
                                                                                            let bytes142 = _rt::Vec::from_raw_parts(
                                                                                                l140.cast(),
                                                                                                len142,
                                                                                                len142,
                                                                                            );
                                                                                            _rt::string_lift(bytes142)
                                                                                        };
                                                                                        V154::StringVal(e154)
                                                                                    }
                                                                                    1 => {
                                                                                        let e154 = {
                                                                                            let l143 = *base
                                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<f64>();
                                                                                            l143
                                                                                        };
                                                                                        V154::NumberVal(e154)
                                                                                    }
                                                                                    2 => {
                                                                                        let e154 = {
                                                                                            let l144 = *base
                                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<i64>();
                                                                                            l144
                                                                                        };
                                                                                        V154::IntegerVal(e154)
                                                                                    }
                                                                                    3 => {
                                                                                        let e154 = {
                                                                                            let l145 = i32::from(
                                                                                                *base
                                                                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                    .cast::<u8>(),
                                                                                            );
                                                                                            _rt::bool_lift(l145 as u8)
                                                                                        };
                                                                                        V154::BooleanVal(e154)
                                                                                    }
                                                                                    4 => V154::NullVal,
                                                                                    5 => {
                                                                                        let e154 = {
                                                                                            let l146 = *base
                                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<*mut u8>();
                                                                                            let l147 = *base
                                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len148 = l147;
                                                                                            let bytes148 = _rt::Vec::from_raw_parts(
                                                                                                l146.cast(),
                                                                                                len148,
                                                                                                len148,
                                                                                            );
                                                                                            _rt::string_lift(bytes148)
                                                                                        };
                                                                                        V154::DatetimeVal(e154)
                                                                                    }
                                                                                    6 => {
                                                                                        let e154 = {
                                                                                            let l149 = *base
                                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<f64>();
                                                                                            let l150 = *base
                                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<f64>();
                                                                                            super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                                                latitude: l149,
                                                                                                longitude: l150,
                                                                                            }
                                                                                        };
                                                                                        V154::GeoVal(e154)
                                                                                    }
                                                                                    n => {
                                                                                        debug_assert_eq!(n, 7, "invalid enum discriminant");
                                                                                        let e154 = {
                                                                                            let l151 = *base
                                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<*mut u8>();
                                                                                            let l152 = *base
                                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len153 = l152;
                                                                                            _rt::Vec::from_raw_parts(l151.cast(), len153, len153)
                                                                                        };
                                                                                        V154::BlobVal(e154)
                                                                                    }
                                                                                };
                                                                                (_rt::string_lift(bytes138), v154)
                                                                            };
                                                                            result155.push(e155);
                                                                        }
                                                                        _rt::cabi_dealloc(
                                                                            base155,
                                                                            len155 * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                            8,
                                                                        );
                                                                        result155
                                                                    };
                                                                    V164::ObjectVal(e164)
                                                                }
                                                                6 => V164::NullVal,
                                                                7 => {
                                                                    let e164 = {
                                                                        let l156 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<f64>();
                                                                        let l157 = *base
                                                                            .add(40 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<f64>();
                                                                        super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                            latitude: l156,
                                                                            longitude: l157,
                                                                        }
                                                                    };
                                                                    V164::GeoVal(e164)
                                                                }
                                                                8 => {
                                                                    let e164 = {
                                                                        let l158 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l159 = *base
                                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len160 = l159;
                                                                        let bytes160 = _rt::Vec::from_raw_parts(
                                                                            l158.cast(),
                                                                            len160,
                                                                            len160,
                                                                        );
                                                                        _rt::string_lift(bytes160)
                                                                    };
                                                                    V164::DatetimeVal(e164)
                                                                }
                                                                n => {
                                                                    debug_assert_eq!(n, 9, "invalid enum discriminant");
                                                                    let e164 = {
                                                                        let l161 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l162 = *base
                                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len163 = l162;
                                                                        _rt::Vec::from_raw_parts(l161.cast(), len163, len163)
                                                                    };
                                                                    V164::BlobVal(e164)
                                                                }
                                                            };
                                                            super::super::super::super::golem::vector::types::FilterCondition {
                                                                field: _rt::string_lift(bytes106),
                                                                operator: super::super::super::super::golem::vector::types::FilterOperator::_lift(
                                                                    l107 as u8,
                                                                ),
                                                                value: v164,
                                                            }
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                                inputs: _rt::Vec::from_raw_parts(
                                                    l165.cast(),
                                                    len167,
                                                    len167,
                                                ),
                                            }
                                        };
                                        result168.push(e168);
                                    }
                                    _rt::cabi_dealloc(
                                        base168,
                                        len168 * (48 + 4 * ::core::mem::size_of::<*const u8>()),
                                        8,
                                    );
                                    let l169 = *arg0
                                        .add(8 + 16 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i32>();
                                    super::super::super::super::golem::vector::types::FilterExpression {
                                        nodes: result168,
                                        root_id: l169 as u32,
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        match l170 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l171 = *arg0
                                        .add(8 + 18 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l172 = *arg0
                                        .add(8 + 19 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let len173 = l172;
                                    let bytes173 = _rt::Vec::from_raw_parts(
                                        l171.cast(),
                                        len173,
                                        len173,
                                    );
                                    _rt::string_lift(bytes173)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        match l174 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l175 = i32::from(
                                        *arg0
                                            .add(9 + 20 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    _rt::bool_lift(l175 as u8)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        match l176 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l177 = i32::from(
                                        *arg0
                                            .add(11 + 20 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    _rt::bool_lift(l177 as u8)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    );
                    _rt::cabi_dealloc(
                        arg0,
                        8 + 21 * ::core::mem::size_of::<*const u8>(),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let ptr179 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result178 {
                        Ok(e) => {
                            *ptr179.add(0).cast::<u8>() = (0i32) as u8;
                            let vec243 = e;
                            let len243 = vec243.len();
                            let layout243 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec243.len()
                                    * (32 + 2 * ::core::mem::size_of::<*const u8>()),
                                8,
                            );
                            let result243 = if layout243.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout243).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout243);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec243.into_iter().enumerate() {
                                let base = result243
                                    .add(i * (32 + 2 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let GroupedSearchResult {
                                        group_value: group_value180,
                                        results: results180,
                                        group_count: group_count180,
                                    } = e;
                                    use super::super::super::super::golem::vector::types::FlatMetadataValue as V199;
                                    match group_value180 {
                                        V199::StringVal(e) => {
                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                            let vec181 = (e.into_bytes()).into_boxed_slice();
                                            let ptr181 = vec181.as_ptr().cast::<u8>();
                                            let len181 = vec181.len();
                                            ::core::mem::forget(vec181);
                                            *base
                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len181;
                                            *base.add(8).cast::<*mut u8>() = ptr181.cast_mut();
                                        }
                                        V199::NumberVal(e) => {
                                            *base.add(0).cast::<u8>() = (1i32) as u8;
                                            *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                        }
                                        V199::IntegerVal(e) => {
                                            *base.add(0).cast::<u8>() = (2i32) as u8;
                                            *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                        }
                                        V199::BooleanVal(e) => {
                                            *base.add(0).cast::<u8>() = (3i32) as u8;
                                            *base.add(8).cast::<u8>() = (match e {
                                                true => 1,
                                                false => 0,
                                            }) as u8;
                                        }
                                        V199::ArrayVal(e) => {
                                            *base.add(0).cast::<u8>() = (4i32) as u8;
                                            let vec187 = e;
                                            let len187 = vec187.len();
                                            let layout187 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec187.len() * 24,
                                                8,
                                            );
                                            let result187 = if layout187.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout187).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout187);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec187.into_iter().enumerate() {
                                                let base = result187.add(i * 24);
                                                {
                                                    use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V186;
                                                    match e {
                                                        V186::StringVal(e) => {
                                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                                            let vec182 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr182 = vec182.as_ptr().cast::<u8>();
                                                            let len182 = vec182.len();
                                                            ::core::mem::forget(vec182);
                                                            *base
                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len182;
                                                            *base.add(8).cast::<*mut u8>() = ptr182.cast_mut();
                                                        }
                                                        V186::NumberVal(e) => {
                                                            *base.add(0).cast::<u8>() = (1i32) as u8;
                                                            *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                                        }
                                                        V186::IntegerVal(e) => {
                                                            *base.add(0).cast::<u8>() = (2i32) as u8;
                                                            *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                        }
                                                        V186::BooleanVal(e) => {
                                                            *base.add(0).cast::<u8>() = (3i32) as u8;
                                                            *base.add(8).cast::<u8>() = (match e {
                                                                true => 1,
                                                                false => 0,
                                                            }) as u8;
                                                        }
                                                        V186::NullVal => {
                                                            *base.add(0).cast::<u8>() = (4i32) as u8;
                                                        }
                                                        V186::DatetimeVal(e) => {
                                                            *base.add(0).cast::<u8>() = (5i32) as u8;
                                                            let vec183 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr183 = vec183.as_ptr().cast::<u8>();
                                                            let len183 = vec183.len();
                                                            ::core::mem::forget(vec183);
                                                            *base
                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len183;
                                                            *base.add(8).cast::<*mut u8>() = ptr183.cast_mut();
                                                        }
                                                        V186::GeoVal(e) => {
                                                            *base.add(0).cast::<u8>() = (6i32) as u8;
                                                            let super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                latitude: latitude184,
                                                                longitude: longitude184,
                                                            } = e;
                                                            *base.add(8).cast::<f64>() = _rt::as_f64(latitude184);
                                                            *base.add(16).cast::<f64>() = _rt::as_f64(longitude184);
                                                        }
                                                        V186::BlobVal(e) => {
                                                            *base.add(0).cast::<u8>() = (7i32) as u8;
                                                            let vec185 = (e).into_boxed_slice();
                                                            let ptr185 = vec185.as_ptr().cast::<u8>();
                                                            let len185 = vec185.len();
                                                            ::core::mem::forget(vec185);
                                                            *base
                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len185;
                                                            *base.add(8).cast::<*mut u8>() = ptr185.cast_mut();
                                                        }
                                                    }
                                                }
                                            }
                                            *base
                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len187;
                                            *base.add(8).cast::<*mut u8>() = result187;
                                        }
                                        V199::ObjectVal(e) => {
                                            *base.add(0).cast::<u8>() = (5i32) as u8;
                                            let vec195 = e;
                                            let len195 = vec195.len();
                                            let layout195 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec195.len()
                                                    * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                8,
                                            );
                                            let result195 = if layout195.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout195).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout195);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec195.into_iter().enumerate() {
                                                let base = result195
                                                    .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let (t188_0, t188_1) = e;
                                                    let vec189 = (t188_0.into_bytes()).into_boxed_slice();
                                                    let ptr189 = vec189.as_ptr().cast::<u8>();
                                                    let len189 = vec189.len();
                                                    ::core::mem::forget(vec189);
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len189;
                                                    *base.add(0).cast::<*mut u8>() = ptr189.cast_mut();
                                                    use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V194;
                                                    match t188_1 {
                                                        V194::StringVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                            let vec190 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr190 = vec190.as_ptr().cast::<u8>();
                                                            let len190 = vec190.len();
                                                            ::core::mem::forget(vec190);
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len190;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr190.cast_mut();
                                                        }
                                                        V194::NumberVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<f64>() = _rt::as_f64(e);
                                                        }
                                                        V194::IntegerVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (2i32) as u8;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<i64>() = _rt::as_i64(e);
                                                        }
                                                        V194::BooleanVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (3i32) as u8;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (match e {
                                                                true => 1,
                                                                false => 0,
                                                            }) as u8;
                                                        }
                                                        V194::NullVal => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (4i32) as u8;
                                                        }
                                                        V194::DatetimeVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (5i32) as u8;
                                                            let vec191 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr191 = vec191.as_ptr().cast::<u8>();
                                                            let len191 = vec191.len();
                                                            ::core::mem::forget(vec191);
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len191;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr191.cast_mut();
                                                        }
                                                        V194::GeoVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (6i32) as u8;
                                                            let super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                latitude: latitude192,
                                                                longitude: longitude192,
                                                            } = e;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<f64>() = _rt::as_f64(latitude192);
                                                            *base
                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<f64>() = _rt::as_f64(longitude192);
                                                        }
                                                        V194::BlobVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (7i32) as u8;
                                                            let vec193 = (e).into_boxed_slice();
                                                            let ptr193 = vec193.as_ptr().cast::<u8>();
                                                            let len193 = vec193.len();
                                                            ::core::mem::forget(vec193);
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len193;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr193.cast_mut();
                                                        }
                                                    }
                                                }
                                            }
                                            *base
                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len195;
                                            *base.add(8).cast::<*mut u8>() = result195;
                                        }
                                        V199::NullVal => {
                                            *base.add(0).cast::<u8>() = (6i32) as u8;
                                        }
                                        V199::GeoVal(e) => {
                                            *base.add(0).cast::<u8>() = (7i32) as u8;
                                            let super::super::super::super::golem::vector::types::GeoCoordinates {
                                                latitude: latitude196,
                                                longitude: longitude196,
                                            } = e;
                                            *base.add(8).cast::<f64>() = _rt::as_f64(latitude196);
                                            *base.add(16).cast::<f64>() = _rt::as_f64(longitude196);
                                        }
                                        V199::DatetimeVal(e) => {
                                            *base.add(0).cast::<u8>() = (8i32) as u8;
                                            let vec197 = (e.into_bytes()).into_boxed_slice();
                                            let ptr197 = vec197.as_ptr().cast::<u8>();
                                            let len197 = vec197.len();
                                            ::core::mem::forget(vec197);
                                            *base
                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len197;
                                            *base.add(8).cast::<*mut u8>() = ptr197.cast_mut();
                                        }
                                        V199::BlobVal(e) => {
                                            *base.add(0).cast::<u8>() = (9i32) as u8;
                                            let vec198 = (e).into_boxed_slice();
                                            let ptr198 = vec198.as_ptr().cast::<u8>();
                                            let len198 = vec198.len();
                                            ::core::mem::forget(vec198);
                                            *base
                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len198;
                                            *base.add(8).cast::<*mut u8>() = ptr198.cast_mut();
                                        }
                                    }
                                    let vec242 = results180;
                                    let len242 = vec242.len();
                                    let layout242 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec242.len()
                                            * (8 + 14 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result242 = if layout242.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout242).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout242);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec242.into_iter().enumerate() {
                                        let base = result242
                                            .add(i * (8 + 14 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let super::super::super::super::golem::vector::types::SearchResult {
                                                id: id200,
                                                score: score200,
                                                distance: distance200,
                                                vector: vector200,
                                                metadata: metadata200,
                                            } = e;
                                            let vec201 = (id200.into_bytes()).into_boxed_slice();
                                            let ptr201 = vec201.as_ptr().cast::<u8>();
                                            let len201 = vec201.len();
                                            ::core::mem::forget(vec201);
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len201;
                                            *base.add(0).cast::<*mut u8>() = ptr201.cast_mut();
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<f32>() = _rt::as_f32(score200);
                                            *base
                                                .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<f32>() = _rt::as_f32(distance200);
                                            match vector200 {
                                                Some(e) => {
                                                    *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    use super::super::super::super::golem::vector::types::VectorData as V219;
                                                    match e {
                                                        V219::Dense(e) => {
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                            let vec202 = (e).into_boxed_slice();
                                                            let ptr202 = vec202.as_ptr().cast::<u8>();
                                                            let len202 = vec202.len();
                                                            ::core::mem::forget(vec202);
                                                            *base
                                                                .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len202;
                                                            *base
                                                                .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr202.cast_mut();
                                                        }
                                                        V219::Sparse(e) => {
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let super::super::super::super::golem::vector::types::SparseVector {
                                                                indices: indices203,
                                                                values: values203,
                                                                total_dimensions: total_dimensions203,
                                                            } = e;
                                                            let vec204 = (indices203).into_boxed_slice();
                                                            let ptr204 = vec204.as_ptr().cast::<u8>();
                                                            let len204 = vec204.len();
                                                            ::core::mem::forget(vec204);
                                                            *base
                                                                .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len204;
                                                            *base
                                                                .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr204.cast_mut();
                                                            let vec205 = (values203).into_boxed_slice();
                                                            let ptr205 = vec205.as_ptr().cast::<u8>();
                                                            let len205 = vec205.len();
                                                            ::core::mem::forget(vec205);
                                                            *base
                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len205;
                                                            *base
                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr205.cast_mut();
                                                            *base
                                                                .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<i32>() = _rt::as_i32(total_dimensions203);
                                                        }
                                                        V219::Binary(e) => {
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (2i32) as u8;
                                                            let super::super::super::super::golem::vector::types::BinaryVector {
                                                                data: data206,
                                                                dimensions: dimensions206,
                                                            } = e;
                                                            let vec207 = (data206).into_boxed_slice();
                                                            let ptr207 = vec207.as_ptr().cast::<u8>();
                                                            let len207 = vec207.len();
                                                            ::core::mem::forget(vec207);
                                                            *base
                                                                .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len207;
                                                            *base
                                                                .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr207.cast_mut();
                                                            *base
                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<i32>() = _rt::as_i32(dimensions206);
                                                        }
                                                        V219::Half(e) => {
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (3i32) as u8;
                                                            let super::super::super::super::golem::vector::types::HalfVector {
                                                                data: data208,
                                                                dimensions: dimensions208,
                                                            } = e;
                                                            let vec209 = (data208).into_boxed_slice();
                                                            let ptr209 = vec209.as_ptr().cast::<u8>();
                                                            let len209 = vec209.len();
                                                            ::core::mem::forget(vec209);
                                                            *base
                                                                .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len209;
                                                            *base
                                                                .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr209.cast_mut();
                                                            *base
                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<i32>() = _rt::as_i32(dimensions208);
                                                        }
                                                        V219::Named(e) => {
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (4i32) as u8;
                                                            let vec213 = e;
                                                            let len213 = vec213.len();
                                                            let layout213 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec213.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            let result213 = if layout213.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout213).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout213);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec213.into_iter().enumerate() {
                                                                let base = result213
                                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let (t210_0, t210_1) = e;
                                                                    let vec211 = (t210_0.into_bytes()).into_boxed_slice();
                                                                    let ptr211 = vec211.as_ptr().cast::<u8>();
                                                                    let len211 = vec211.len();
                                                                    ::core::mem::forget(vec211);
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len211;
                                                                    *base.add(0).cast::<*mut u8>() = ptr211.cast_mut();
                                                                    let vec212 = (t210_1).into_boxed_slice();
                                                                    let ptr212 = vec212.as_ptr().cast::<u8>();
                                                                    let len212 = vec212.len();
                                                                    ::core::mem::forget(vec212);
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len212;
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr212.cast_mut();
                                                                }
                                                            }
                                                            *base
                                                                .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len213;
                                                            *base
                                                                .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result213;
                                                        }
                                                        V219::Hybrid(e) => {
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (5i32) as u8;
                                                            let (t214_0, t214_1) = e;
                                                            let vec215 = (t214_0).into_boxed_slice();
                                                            let ptr215 = vec215.as_ptr().cast::<u8>();
                                                            let len215 = vec215.len();
                                                            ::core::mem::forget(vec215);
                                                            *base
                                                                .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len215;
                                                            *base
                                                                .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr215.cast_mut();
                                                            let super::super::super::super::golem::vector::types::SparseVector {
                                                                indices: indices216,
                                                                values: values216,
                                                                total_dimensions: total_dimensions216,
                                                            } = t214_1;
                                                            let vec217 = (indices216).into_boxed_slice();
                                                            let ptr217 = vec217.as_ptr().cast::<u8>();
                                                            let len217 = vec217.len();
                                                            ::core::mem::forget(vec217);
                                                            *base
                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len217;
                                                            *base
                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr217.cast_mut();
                                                            let vec218 = (values216).into_boxed_slice();
                                                            let ptr218 = vec218.as_ptr().cast::<u8>();
                                                            let len218 = vec218.len();
                                                            ::core::mem::forget(vec218);
                                                            *base
                                                                .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len218;
                                                            *base
                                                                .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr218.cast_mut();
                                                            *base
                                                                .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<i32>() = _rt::as_i32(total_dimensions216);
                                                        }
                                                    }
                                                }
                                                None => {
                                                    *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match metadata200 {
                                                Some(e) => {
                                                    *base
                                                        .add(8 + 11 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec241 = e;
                                                    let len241 = vec241.len();
                                                    let layout241 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec241.len()
                                                            * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                        8,
                                                    );
                                                    let result241 = if layout241.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout241).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout241);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec241.into_iter().enumerate() {
                                                        let base = result241
                                                            .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let (t220_0, t220_1) = e;
                                                            let vec221 = (t220_0.into_bytes()).into_boxed_slice();
                                                            let ptr221 = vec221.as_ptr().cast::<u8>();
                                                            let len221 = vec221.len();
                                                            ::core::mem::forget(vec221);
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len221;
                                                            *base.add(0).cast::<*mut u8>() = ptr221.cast_mut();
                                                            use super::super::super::super::golem::vector::types::FlatMetadataValue as V240;
                                                            match t220_1 {
                                                                V240::StringVal(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                    let vec222 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr222 = vec222.as_ptr().cast::<u8>();
                                                                    let len222 = vec222.len();
                                                                    ::core::mem::forget(vec222);
                                                                    *base
                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len222;
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr222.cast_mut();
                                                                }
                                                                V240::NumberVal(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<f64>() = _rt::as_f64(e);
                                                                }
                                                                V240::IntegerVal(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (2i32) as u8;
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i64>() = _rt::as_i64(e);
                                                                }
                                                                V240::BooleanVal(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (3i32) as u8;
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (match e {
                                                                        true => 1,
                                                                        false => 0,
                                                                    }) as u8;
                                                                }
                                                                V240::ArrayVal(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (4i32) as u8;
                                                                    let vec228 = e;
                                                                    let len228 = vec228.len();
                                                                    let layout228 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec228.len() * 24,
                                                                        8,
                                                                    );
                                                                    let result228 = if layout228.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout228).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout228);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec228.into_iter().enumerate() {
                                                                        let base = result228.add(i * 24);
                                                                        {
                                                                            use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V227;
                                                                            match e {
                                                                                V227::StringVal(e) => {
                                                                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                                    let vec223 = (e.into_bytes()).into_boxed_slice();
                                                                                    let ptr223 = vec223.as_ptr().cast::<u8>();
                                                                                    let len223 = vec223.len();
                                                                                    ::core::mem::forget(vec223);
                                                                                    *base
                                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len223;
                                                                                    *base.add(8).cast::<*mut u8>() = ptr223.cast_mut();
                                                                                }
                                                                                V227::NumberVal(e) => {
                                                                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                                    *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                                                                }
                                                                                V227::IntegerVal(e) => {
                                                                                    *base.add(0).cast::<u8>() = (2i32) as u8;
                                                                                    *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                                                }
                                                                                V227::BooleanVal(e) => {
                                                                                    *base.add(0).cast::<u8>() = (3i32) as u8;
                                                                                    *base.add(8).cast::<u8>() = (match e {
                                                                                        true => 1,
                                                                                        false => 0,
                                                                                    }) as u8;
                                                                                }
                                                                                V227::NullVal => {
                                                                                    *base.add(0).cast::<u8>() = (4i32) as u8;
                                                                                }
                                                                                V227::DatetimeVal(e) => {
                                                                                    *base.add(0).cast::<u8>() = (5i32) as u8;
                                                                                    let vec224 = (e.into_bytes()).into_boxed_slice();
                                                                                    let ptr224 = vec224.as_ptr().cast::<u8>();
                                                                                    let len224 = vec224.len();
                                                                                    ::core::mem::forget(vec224);
                                                                                    *base
                                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len224;
                                                                                    *base.add(8).cast::<*mut u8>() = ptr224.cast_mut();
                                                                                }
                                                                                V227::GeoVal(e) => {
                                                                                    *base.add(0).cast::<u8>() = (6i32) as u8;
                                                                                    let super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                                        latitude: latitude225,
                                                                                        longitude: longitude225,
                                                                                    } = e;
                                                                                    *base.add(8).cast::<f64>() = _rt::as_f64(latitude225);
                                                                                    *base.add(16).cast::<f64>() = _rt::as_f64(longitude225);
                                                                                }
                                                                                V227::BlobVal(e) => {
                                                                                    *base.add(0).cast::<u8>() = (7i32) as u8;
                                                                                    let vec226 = (e).into_boxed_slice();
                                                                                    let ptr226 = vec226.as_ptr().cast::<u8>();
                                                                                    let len226 = vec226.len();
                                                                                    ::core::mem::forget(vec226);
                                                                                    *base
                                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len226;
                                                                                    *base.add(8).cast::<*mut u8>() = ptr226.cast_mut();
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len228;
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result228;
                                                                }
                                                                V240::ObjectVal(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (5i32) as u8;
                                                                    let vec236 = e;
                                                                    let len236 = vec236.len();
                                                                    let layout236 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec236.len()
                                                                            * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                        8,
                                                                    );
                                                                    let result236 = if layout236.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout236).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout236);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec236.into_iter().enumerate() {
                                                                        let base = result236
                                                                            .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let (t229_0, t229_1) = e;
                                                                            let vec230 = (t229_0.into_bytes()).into_boxed_slice();
                                                                            let ptr230 = vec230.as_ptr().cast::<u8>();
                                                                            let len230 = vec230.len();
                                                                            ::core::mem::forget(vec230);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len230;
                                                                            *base.add(0).cast::<*mut u8>() = ptr230.cast_mut();
                                                                            use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V235;
                                                                            match t229_1 {
                                                                                V235::StringVal(e) => {
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                    let vec231 = (e.into_bytes()).into_boxed_slice();
                                                                                    let ptr231 = vec231.as_ptr().cast::<u8>();
                                                                                    let len231 = vec231.len();
                                                                                    ::core::mem::forget(vec231);
                                                                                    *base
                                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len231;
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>() = ptr231.cast_mut();
                                                                                }
                                                                                V235::NumberVal(e) => {
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<f64>() = _rt::as_f64(e);
                                                                                }
                                                                                V235::IntegerVal(e) => {
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (2i32) as u8;
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i64>() = _rt::as_i64(e);
                                                                                }
                                                                                V235::BooleanVal(e) => {
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (3i32) as u8;
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (match e {
                                                                                        true => 1,
                                                                                        false => 0,
                                                                                    }) as u8;
                                                                                }
                                                                                V235::NullVal => {
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (4i32) as u8;
                                                                                }
                                                                                V235::DatetimeVal(e) => {
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (5i32) as u8;
                                                                                    let vec232 = (e.into_bytes()).into_boxed_slice();
                                                                                    let ptr232 = vec232.as_ptr().cast::<u8>();
                                                                                    let len232 = vec232.len();
                                                                                    ::core::mem::forget(vec232);
                                                                                    *base
                                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len232;
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>() = ptr232.cast_mut();
                                                                                }
                                                                                V235::GeoVal(e) => {
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (6i32) as u8;
                                                                                    let super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                                        latitude: latitude233,
                                                                                        longitude: longitude233,
                                                                                    } = e;
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<f64>() = _rt::as_f64(latitude233);
                                                                                    *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<f64>() = _rt::as_f64(longitude233);
                                                                                }
                                                                                V235::BlobVal(e) => {
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (7i32) as u8;
                                                                                    let vec234 = (e).into_boxed_slice();
                                                                                    let ptr234 = vec234.as_ptr().cast::<u8>();
                                                                                    let len234 = vec234.len();
                                                                                    ::core::mem::forget(vec234);
                                                                                    *base
                                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len234;
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>() = ptr234.cast_mut();
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len236;
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result236;
                                                                }
                                                                V240::NullVal => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (6i32) as u8;
                                                                }
                                                                V240::GeoVal(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (7i32) as u8;
                                                                    let super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                        latitude: latitude237,
                                                                        longitude: longitude237,
                                                                    } = e;
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<f64>() = _rt::as_f64(latitude237);
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<f64>() = _rt::as_f64(longitude237);
                                                                }
                                                                V240::DatetimeVal(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (8i32) as u8;
                                                                    let vec238 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr238 = vec238.as_ptr().cast::<u8>();
                                                                    let len238 = vec238.len();
                                                                    ::core::mem::forget(vec238);
                                                                    *base
                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len238;
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr238.cast_mut();
                                                                }
                                                                V240::BlobVal(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (9i32) as u8;
                                                                    let vec239 = (e).into_boxed_slice();
                                                                    let ptr239 = vec239.as_ptr().cast::<u8>();
                                                                    let len239 = vec239.len();
                                                                    ::core::mem::forget(vec239);
                                                                    *base
                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len239;
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr239.cast_mut();
                                                                }
                                                            }
                                                        }
                                                    }
                                                    *base
                                                        .add(8 + 13 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len241;
                                                    *base
                                                        .add(8 + 12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result241;
                                                }
                                                None => {
                                                    *base
                                                        .add(8 + 11 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                    }
                                    *base
                                        .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len242;
                                    *base.add(24).cast::<*mut u8>() = result242;
                                    *base
                                        .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i32>() = _rt::as_i32(group_count180);
                                }
                            }
                            *ptr179
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len243;
                            *ptr179
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result243;
                        }
                        Err(e) => {
                            *ptr179.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::golem::vector::types::VectorError as V254;
                            match e {
                                V254::NotFound(e) => {
                                    *ptr179
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                    let vec244 = (e.into_bytes()).into_boxed_slice();
                                    let ptr244 = vec244.as_ptr().cast::<u8>();
                                    let len244 = vec244.len();
                                    ::core::mem::forget(vec244);
                                    *ptr179
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len244;
                                    *ptr179
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr244.cast_mut();
                                }
                                V254::AlreadyExists(e) => {
                                    *ptr179
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec245 = (e.into_bytes()).into_boxed_slice();
                                    let ptr245 = vec245.as_ptr().cast::<u8>();
                                    let len245 = vec245.len();
                                    ::core::mem::forget(vec245);
                                    *ptr179
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len245;
                                    *ptr179
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr245.cast_mut();
                                }
                                V254::InvalidParams(e) => {
                                    *ptr179
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                    let vec246 = (e.into_bytes()).into_boxed_slice();
                                    let ptr246 = vec246.as_ptr().cast::<u8>();
                                    let len246 = vec246.len();
                                    ::core::mem::forget(vec246);
                                    *ptr179
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len246;
                                    *ptr179
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr246.cast_mut();
                                }
                                V254::UnsupportedFeature(e) => {
                                    *ptr179
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                    let vec247 = (e.into_bytes()).into_boxed_slice();
                                    let ptr247 = vec247.as_ptr().cast::<u8>();
                                    let len247 = vec247.len();
                                    ::core::mem::forget(vec247);
                                    *ptr179
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len247;
                                    *ptr179
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr247.cast_mut();
                                }
                                V254::DimensionMismatch(e) => {
                                    *ptr179
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (4i32) as u8;
                                    let vec248 = (e.into_bytes()).into_boxed_slice();
                                    let ptr248 = vec248.as_ptr().cast::<u8>();
                                    let len248 = vec248.len();
                                    ::core::mem::forget(vec248);
                                    *ptr179
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len248;
                                    *ptr179
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr248.cast_mut();
                                }
                                V254::InvalidVector(e) => {
                                    *ptr179
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (5i32) as u8;
                                    let vec249 = (e.into_bytes()).into_boxed_slice();
                                    let ptr249 = vec249.as_ptr().cast::<u8>();
                                    let len249 = vec249.len();
                                    ::core::mem::forget(vec249);
                                    *ptr179
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len249;
                                    *ptr179
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr249.cast_mut();
                                }
                                V254::Unauthorized(e) => {
                                    *ptr179
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (6i32) as u8;
                                    let vec250 = (e.into_bytes()).into_boxed_slice();
                                    let ptr250 = vec250.as_ptr().cast::<u8>();
                                    let len250 = vec250.len();
                                    ::core::mem::forget(vec250);
                                    *ptr179
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len250;
                                    *ptr179
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr250.cast_mut();
                                }
                                V254::RateLimited(e) => {
                                    *ptr179
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (7i32) as u8;
                                    let vec251 = (e.into_bytes()).into_boxed_slice();
                                    let ptr251 = vec251.as_ptr().cast::<u8>();
                                    let len251 = vec251.len();
                                    ::core::mem::forget(vec251);
                                    *ptr179
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len251;
                                    *ptr179
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr251.cast_mut();
                                }
                                V254::ProviderError(e) => {
                                    *ptr179
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (8i32) as u8;
                                    let vec252 = (e.into_bytes()).into_boxed_slice();
                                    let ptr252 = vec252.as_ptr().cast::<u8>();
                                    let len252 = vec252.len();
                                    ::core::mem::forget(vec252);
                                    *ptr179
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len252;
                                    *ptr179
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr252.cast_mut();
                                }
                                V254::ConnectionError(e) => {
                                    *ptr179
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (9i32) as u8;
                                    let vec253 = (e.into_bytes()).into_boxed_slice();
                                    let ptr253 = vec253.as_ptr().cast::<u8>();
                                    let len253 = vec253.len();
                                    ::core::mem::forget(vec253);
                                    *ptr179
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len253;
                                    *ptr179
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr253.cast_mut();
                                }
                            }
                        }
                    };
                    ptr179
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_search_groups<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let base112 = l1;
                            let len112 = l2;
                            for i in 0..len112 {
                                let base = base112
                                    .add(i * (32 + 2 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let l3 = i32::from(*base.add(0).cast::<u8>());
                                    match l3 {
                                        0 => {
                                            let l4 = *base.add(8).cast::<*mut u8>();
                                            let l5 = *base
                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l4, l5, 1);
                                        }
                                        1 => {}
                                        2 => {}
                                        3 => {}
                                        4 => {
                                            let l6 = *base.add(8).cast::<*mut u8>();
                                            let l7 = *base
                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base16 = l6;
                                            let len16 = l7;
                                            for i in 0..len16 {
                                                let base = base16.add(i * 24);
                                                {
                                                    let l8 = i32::from(*base.add(0).cast::<u8>());
                                                    match l8 {
                                                        0 => {
                                                            let l9 = *base.add(8).cast::<*mut u8>();
                                                            let l10 = *base
                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l9, l10, 1);
                                                        }
                                                        1 => {}
                                                        2 => {}
                                                        3 => {}
                                                        4 => {}
                                                        5 => {
                                                            let l11 = *base.add(8).cast::<*mut u8>();
                                                            let l12 = *base
                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l11, l12, 1);
                                                        }
                                                        6 => {}
                                                        _ => {
                                                            let l13 = *base.add(8).cast::<*mut u8>();
                                                            let l14 = *base
                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base15 = l13;
                                                            let len15 = l14;
                                                            _rt::cabi_dealloc(base15, len15 * 1, 1);
                                                        }
                                                    }
                                                }
                                            }
                                            _rt::cabi_dealloc(base16, len16 * 24, 8);
                                        }
                                        5 => {
                                            let l17 = *base.add(8).cast::<*mut u8>();
                                            let l18 = *base
                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base29 = l17;
                                            let len29 = l18;
                                            for i in 0..len29 {
                                                let base = base29
                                                    .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let l19 = *base.add(0).cast::<*mut u8>();
                                                    let l20 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l19, l20, 1);
                                                    let l21 = i32::from(
                                                        *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l21 {
                                                        0 => {
                                                            let l22 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l23 = *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l22, l23, 1);
                                                        }
                                                        1 => {}
                                                        2 => {}
                                                        3 => {}
                                                        4 => {}
                                                        5 => {
                                                            let l24 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l25 = *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l24, l25, 1);
                                                        }
                                                        6 => {}
                                                        _ => {
                                                            let l26 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l27 = *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base28 = l26;
                                                            let len28 = l27;
                                                            _rt::cabi_dealloc(base28, len28 * 1, 1);
                                                        }
                                                    }
                                                }
                                            }
                                            _rt::cabi_dealloc(
                                                base29,
                                                len29 * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                8,
                                            );
                                        }
                                        6 => {}
                                        7 => {}
                                        8 => {
                                            let l30 = *base.add(8).cast::<*mut u8>();
                                            let l31 = *base
                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l30, l31, 1);
                                        }
                                        _ => {
                                            let l32 = *base.add(8).cast::<*mut u8>();
                                            let l33 = *base
                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base34 = l32;
                                            let len34 = l33;
                                            _rt::cabi_dealloc(base34, len34 * 1, 1);
                                        }
                                    }
                                    let l35 = *base.add(24).cast::<*mut u8>();
                                    let l36 = *base
                                        .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base111 = l35;
                                    let len111 = l36;
                                    for i in 0..len111 {
                                        let base = base111
                                            .add(i * (8 + 14 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let l37 = *base.add(0).cast::<*mut u8>();
                                            let l38 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l37, l38, 1);
                                            let l39 = i32::from(
                                                *base
                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l39 {
                                                0 => {}
                                                _ => {
                                                    let l40 = i32::from(
                                                        *base
                                                            .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l40 {
                                                        0 => {
                                                            let l41 = *base
                                                                .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l42 = *base
                                                                .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base43 = l41;
                                                            let len43 = l42;
                                                            _rt::cabi_dealloc(base43, len43 * 4, 4);
                                                        }
                                                        1 => {
                                                            let l44 = *base
                                                                .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l45 = *base
                                                                .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base46 = l44;
                                                            let len46 = l45;
                                                            _rt::cabi_dealloc(base46, len46 * 4, 4);
                                                            let l47 = *base
                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l48 = *base
                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base49 = l47;
                                                            let len49 = l48;
                                                            _rt::cabi_dealloc(base49, len49 * 4, 4);
                                                        }
                                                        2 => {
                                                            let l50 = *base
                                                                .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l51 = *base
                                                                .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base52 = l50;
                                                            let len52 = l51;
                                                            _rt::cabi_dealloc(base52, len52 * 1, 1);
                                                        }
                                                        3 => {
                                                            let l53 = *base
                                                                .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l54 = *base
                                                                .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base55 = l53;
                                                            let len55 = l54;
                                                            _rt::cabi_dealloc(base55, len55 * 4, 4);
                                                        }
                                                        4 => {
                                                            let l56 = *base
                                                                .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l57 = *base
                                                                .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base63 = l56;
                                                            let len63 = l57;
                                                            for i in 0..len63 {
                                                                let base = base63
                                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l58 = *base.add(0).cast::<*mut u8>();
                                                                    let l59 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l58, l59, 1);
                                                                    let l60 = *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l61 = *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base62 = l60;
                                                                    let len62 = l61;
                                                                    _rt::cabi_dealloc(base62, len62 * 4, 4);
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base63,
                                                                len63 * (4 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                        }
                                                        _ => {
                                                            let l64 = *base
                                                                .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l65 = *base
                                                                .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base66 = l64;
                                                            let len66 = l65;
                                                            _rt::cabi_dealloc(base66, len66 * 4, 4);
                                                            let l67 = *base
                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l68 = *base
                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base69 = l67;
                                                            let len69 = l68;
                                                            _rt::cabi_dealloc(base69, len69 * 4, 4);
                                                            let l70 = *base
                                                                .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l71 = *base
                                                                .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base72 = l70;
                                                            let len72 = l71;
                                                            _rt::cabi_dealloc(base72, len72 * 4, 4);
                                                        }
                                                    }
                                                }
                                            }
                                            let l73 = i32::from(
                                                *base
                                                    .add(8 + 11 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l73 {
                                                0 => {}
                                                _ => {
                                                    let l74 = *base
                                                        .add(8 + 12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l75 = *base
                                                        .add(8 + 13 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base110 = l74;
                                                    let len110 = l75;
                                                    for i in 0..len110 {
                                                        let base = base110
                                                            .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l76 = *base.add(0).cast::<*mut u8>();
                                                            let l77 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l76, l77, 1);
                                                            let l78 = i32::from(
                                                                *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l78 {
                                                                0 => {
                                                                    let l79 = *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l80 = *base
                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l79, l80, 1);
                                                                }
                                                                1 => {}
                                                                2 => {}
                                                                3 => {}
                                                                4 => {
                                                                    let l81 = *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l82 = *base
                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base91 = l81;
                                                                    let len91 = l82;
                                                                    for i in 0..len91 {
                                                                        let base = base91.add(i * 24);
                                                                        {
                                                                            let l83 = i32::from(*base.add(0).cast::<u8>());
                                                                            match l83 {
                                                                                0 => {
                                                                                    let l84 = *base.add(8).cast::<*mut u8>();
                                                                                    let l85 = *base
                                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l84, l85, 1);
                                                                                }
                                                                                1 => {}
                                                                                2 => {}
                                                                                3 => {}
                                                                                4 => {}
                                                                                5 => {
                                                                                    let l86 = *base.add(8).cast::<*mut u8>();
                                                                                    let l87 = *base
                                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l86, l87, 1);
                                                                                }
                                                                                6 => {}
                                                                                _ => {
                                                                                    let l88 = *base.add(8).cast::<*mut u8>();
                                                                                    let l89 = *base
                                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base90 = l88;
                                                                                    let len90 = l89;
                                                                                    _rt::cabi_dealloc(base90, len90 * 1, 1);
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(base91, len91 * 24, 8);
                                                                }
                                                                5 => {
                                                                    let l92 = *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l93 = *base
                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base104 = l92;
                                                                    let len104 = l93;
                                                                    for i in 0..len104 {
                                                                        let base = base104
                                                                            .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l94 = *base.add(0).cast::<*mut u8>();
                                                                            let l95 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l94, l95, 1);
                                                                            let l96 = i32::from(
                                                                                *base
                                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            match l96 {
                                                                                0 => {
                                                                                    let l97 = *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l98 = *base
                                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l97, l98, 1);
                                                                                }
                                                                                1 => {}
                                                                                2 => {}
                                                                                3 => {}
                                                                                4 => {}
                                                                                5 => {
                                                                                    let l99 = *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l100 = *base
                                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l99, l100, 1);
                                                                                }
                                                                                6 => {}
                                                                                _ => {
                                                                                    let l101 = *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l102 = *base
                                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base103 = l101;
                                                                                    let len103 = l102;
                                                                                    _rt::cabi_dealloc(base103, len103 * 1, 1);
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base104,
                                                                        len104 * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                        8,
                                                                    );
                                                                }
                                                                6 => {}
                                                                7 => {}
                                                                8 => {
                                                                    let l105 = *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l106 = *base
                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l105, l106, 1);
                                                                }
                                                                _ => {
                                                                    let l107 = *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l108 = *base
                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base109 = l107;
                                                                    let len109 = l108;
                                                                    _rt::cabi_dealloc(base109, len109 * 1, 1);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base110,
                                                        len110 * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                        8,
                                                    );
                                                }
                                            }
                                        }
                                    }
                                    _rt::cabi_dealloc(
                                        base111,
                                        len111 * (8 + 14 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                }
                            }
                            _rt::cabi_dealloc(
                                base112,
                                len112 * (32 + 2 * ::core::mem::size_of::<*const u8>()),
                                8,
                            );
                        }
                        _ => {
                            let l113 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l113 {
                                0 => {
                                    let l114 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l115 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l114, l115, 1);
                                }
                                1 => {
                                    let l116 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l117 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l116, l117, 1);
                                }
                                2 => {
                                    let l118 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l119 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l118, l119, 1);
                                }
                                3 => {
                                    let l120 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l121 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l120, l121, 1);
                                }
                                4 => {
                                    let l122 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l123 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l122, l123, 1);
                                }
                                5 => {
                                    let l124 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l125 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l124, l125, 1);
                                }
                                6 => {
                                    let l126 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l127 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l126, l127, 1);
                                }
                                7 => {
                                    let l128 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l129 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l128, l129, 1);
                                }
                                8 => {
                                    let l130 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l131 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l130, l131, 1);
                                }
                                _ => {
                                    let l132 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l133 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l132, l133, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_search_range_cabi<T: Guest>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len2 = l1;
                    let bytes2 = _rt::Vec::from_raw_parts(l0.cast(), len2, len2);
                    let l3 = i32::from(
                        *arg0.add(2 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    use super::super::super::super::golem::vector::types::VectorData as V41;
                    let v41 = match l3 {
                        0 => {
                            let e41 = {
                                let l4 = *arg0
                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l5 = *arg0
                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len6 = l5;
                                _rt::Vec::from_raw_parts(l4.cast(), len6, len6)
                            };
                            V41::Dense(e41)
                        }
                        1 => {
                            let e41 = {
                                let l7 = *arg0
                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l8 = *arg0
                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len9 = l8;
                                let l10 = *arg0
                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l11 = *arg0
                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len12 = l11;
                                let l13 = *arg0
                                    .add(7 * ::core::mem::size_of::<*const u8>())
                                    .cast::<i32>();
                                super::super::super::super::golem::vector::types::SparseVector {
                                    indices: _rt::Vec::from_raw_parts(l7.cast(), len9, len9),
                                    values: _rt::Vec::from_raw_parts(l10.cast(), len12, len12),
                                    total_dimensions: l13 as u32,
                                }
                            };
                            V41::Sparse(e41)
                        }
                        2 => {
                            let e41 = {
                                let l14 = *arg0
                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l15 = *arg0
                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len16 = l15;
                                let l17 = *arg0
                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                    .cast::<i32>();
                                super::super::super::super::golem::vector::types::BinaryVector {
                                    data: _rt::Vec::from_raw_parts(l14.cast(), len16, len16),
                                    dimensions: l17 as u32,
                                }
                            };
                            V41::Binary(e41)
                        }
                        3 => {
                            let e41 = {
                                let l18 = *arg0
                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l19 = *arg0
                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len20 = l19;
                                let l21 = *arg0
                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                    .cast::<i32>();
                                super::super::super::super::golem::vector::types::HalfVector {
                                    data: _rt::Vec::from_raw_parts(l18.cast(), len20, len20),
                                    dimensions: l21 as u32,
                                }
                            };
                            V41::Half(e41)
                        }
                        4 => {
                            let e41 = {
                                let l22 = *arg0
                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l23 = *arg0
                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let base30 = l22;
                                let len30 = l23;
                                let mut result30 = _rt::Vec::with_capacity(len30);
                                for i in 0..len30 {
                                    let base = base30
                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                    let e30 = {
                                        let l24 = *base.add(0).cast::<*mut u8>();
                                        let l25 = *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len26 = l25;
                                        let bytes26 = _rt::Vec::from_raw_parts(
                                            l24.cast(),
                                            len26,
                                            len26,
                                        );
                                        let l27 = *base
                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l28 = *base
                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len29 = l28;
                                        (
                                            _rt::string_lift(bytes26),
                                            _rt::Vec::from_raw_parts(l27.cast(), len29, len29),
                                        )
                                    };
                                    result30.push(e30);
                                }
                                _rt::cabi_dealloc(
                                    base30,
                                    len30 * (4 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                result30
                            };
                            V41::Named(e41)
                        }
                        n => {
                            debug_assert_eq!(n, 5, "invalid enum discriminant");
                            let e41 = {
                                let l31 = *arg0
                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l32 = *arg0
                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len33 = l32;
                                let l34 = *arg0
                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l35 = *arg0
                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len36 = l35;
                                let l37 = *arg0
                                    .add(7 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l38 = *arg0
                                    .add(8 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len39 = l38;
                                let l40 = *arg0
                                    .add(9 * ::core::mem::size_of::<*const u8>())
                                    .cast::<i32>();
                                (
                                    _rt::Vec::from_raw_parts(l31.cast(), len33, len33),
                                    super::super::super::super::golem::vector::types::SparseVector {
                                        indices: _rt::Vec::from_raw_parts(l34.cast(), len36, len36),
                                        values: _rt::Vec::from_raw_parts(l37.cast(), len39, len39),
                                        total_dimensions: l40 as u32,
                                    },
                                )
                            };
                            V41::Hybrid(e41)
                        }
                    };
                    let l42 = i32::from(
                        *arg0.add(10 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    let l44 = *arg0
                        .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                        .cast::<f32>();
                    let l45 = i32::from(
                        *arg0
                            .add(8 + 11 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    let l118 = i32::from(
                        *arg0
                            .add(8 + 15 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    let l122 = i32::from(
                        *arg0
                            .add(8 + 18 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    let l124 = i32::from(
                        *arg0
                            .add(16 + 18 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    let l126 = i32::from(
                        *arg0
                            .add(18 + 18 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    let result128 = T::search_range(
                        _rt::string_lift(bytes2),
                        v41,
                        match l42 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l43 = *arg0
                                        .add(4 + 10 * ::core::mem::size_of::<*const u8>())
                                        .cast::<f32>();
                                    l43
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        l44,
                        match l45 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l46 = *arg0
                                        .add(8 + 12 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l47 = *arg0
                                        .add(8 + 13 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base116 = l46;
                                    let len116 = l47;
                                    let mut result116 = _rt::Vec::with_capacity(len116);
                                    for i in 0..len116 {
                                        let base = base116
                                            .add(i * (48 + 4 * ::core::mem::size_of::<*const u8>()));
                                        let e116 = {
                                            let l48 = *base.add(0).cast::<i32>();
                                            let l49 = i32::from(*base.add(4).cast::<u8>());
                                            use super::super::super::super::golem::vector::types::FilterOp as V50;
                                            let v50 = match l49 {
                                                0 => V50::Condition,
                                                1 => V50::And,
                                                2 => V50::Or,
                                                n => {
                                                    debug_assert_eq!(n, 3, "invalid enum discriminant");
                                                    V50::Not
                                                }
                                            };
                                            let l51 = i32::from(*base.add(8).cast::<u8>());
                                            let l113 = *base
                                                .add(48 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l114 = *base
                                                .add(48 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len115 = l114;
                                            super::super::super::super::golem::vector::types::FilterNode {
                                                id: l48 as u32,
                                                op: v50,
                                                condition: match l51 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l52 = *base.add(16).cast::<*mut u8>();
                                                            let l53 = *base
                                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len54 = l53;
                                                            let bytes54 = _rt::Vec::from_raw_parts(
                                                                l52.cast(),
                                                                len54,
                                                                len54,
                                                            );
                                                            let l55 = i32::from(
                                                                *base
                                                                    .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            let l56 = i32::from(
                                                                *base
                                                                    .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            use super::super::super::super::golem::vector::types::FlatMetadataValue as V112;
                                                            let v112 = match l56 {
                                                                0 => {
                                                                    let e112 = {
                                                                        let l57 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l58 = *base
                                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len59 = l58;
                                                                        let bytes59 = _rt::Vec::from_raw_parts(
                                                                            l57.cast(),
                                                                            len59,
                                                                            len59,
                                                                        );
                                                                        _rt::string_lift(bytes59)
                                                                    };
                                                                    V112::StringVal(e112)
                                                                }
                                                                1 => {
                                                                    let e112 = {
                                                                        let l60 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<f64>();
                                                                        l60
                                                                    };
                                                                    V112::NumberVal(e112)
                                                                }
                                                                2 => {
                                                                    let e112 = {
                                                                        let l61 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<i64>();
                                                                        l61
                                                                    };
                                                                    V112::IntegerVal(e112)
                                                                }
                                                                3 => {
                                                                    let e112 = {
                                                                        let l62 = i32::from(
                                                                            *base
                                                                                .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>(),
                                                                        );
                                                                        _rt::bool_lift(l62 as u8)
                                                                    };
                                                                    V112::BooleanVal(e112)
                                                                }
                                                                4 => {
                                                                    let e112 = {
                                                                        let l63 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l64 = *base
                                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let base81 = l63;
                                                                        let len81 = l64;
                                                                        let mut result81 = _rt::Vec::with_capacity(len81);
                                                                        for i in 0..len81 {
                                                                            let base = base81.add(i * 24);
                                                                            let e81 = {
                                                                                let l65 = i32::from(*base.add(0).cast::<u8>());
                                                                                use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V80;
                                                                                let v80 = match l65 {
                                                                                    0 => {
                                                                                        let e80 = {
                                                                                            let l66 = *base.add(8).cast::<*mut u8>();
                                                                                            let l67 = *base
                                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len68 = l67;
                                                                                            let bytes68 = _rt::Vec::from_raw_parts(
                                                                                                l66.cast(),
                                                                                                len68,
                                                                                                len68,
                                                                                            );
                                                                                            _rt::string_lift(bytes68)
                                                                                        };
                                                                                        V80::StringVal(e80)
                                                                                    }
                                                                                    1 => {
                                                                                        let e80 = {
                                                                                            let l69 = *base.add(8).cast::<f64>();
                                                                                            l69
                                                                                        };
                                                                                        V80::NumberVal(e80)
                                                                                    }
                                                                                    2 => {
                                                                                        let e80 = {
                                                                                            let l70 = *base.add(8).cast::<i64>();
                                                                                            l70
                                                                                        };
                                                                                        V80::IntegerVal(e80)
                                                                                    }
                                                                                    3 => {
                                                                                        let e80 = {
                                                                                            let l71 = i32::from(*base.add(8).cast::<u8>());
                                                                                            _rt::bool_lift(l71 as u8)
                                                                                        };
                                                                                        V80::BooleanVal(e80)
                                                                                    }
                                                                                    4 => V80::NullVal,
                                                                                    5 => {
                                                                                        let e80 = {
                                                                                            let l72 = *base.add(8).cast::<*mut u8>();
                                                                                            let l73 = *base
                                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len74 = l73;
                                                                                            let bytes74 = _rt::Vec::from_raw_parts(
                                                                                                l72.cast(),
                                                                                                len74,
                                                                                                len74,
                                                                                            );
                                                                                            _rt::string_lift(bytes74)
                                                                                        };
                                                                                        V80::DatetimeVal(e80)
                                                                                    }
                                                                                    6 => {
                                                                                        let e80 = {
                                                                                            let l75 = *base.add(8).cast::<f64>();
                                                                                            let l76 = *base.add(16).cast::<f64>();
                                                                                            super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                                                latitude: l75,
                                                                                                longitude: l76,
                                                                                            }
                                                                                        };
                                                                                        V80::GeoVal(e80)
                                                                                    }
                                                                                    n => {
                                                                                        debug_assert_eq!(n, 7, "invalid enum discriminant");
                                                                                        let e80 = {
                                                                                            let l77 = *base.add(8).cast::<*mut u8>();
                                                                                            let l78 = *base
                                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len79 = l78;
                                                                                            _rt::Vec::from_raw_parts(l77.cast(), len79, len79)
                                                                                        };
                                                                                        V80::BlobVal(e80)
                                                                                    }
                                                                                };
                                                                                v80
                                                                            };
                                                                            result81.push(e81);
                                                                        }
                                                                        _rt::cabi_dealloc(base81, len81 * 24, 8);
                                                                        result81
                                                                    };
                                                                    V112::ArrayVal(e112)
                                                                }
                                                                5 => {
                                                                    let e112 = {
                                                                        let l82 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l83 = *base
                                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let base103 = l82;
                                                                        let len103 = l83;
                                                                        let mut result103 = _rt::Vec::with_capacity(len103);
                                                                        for i in 0..len103 {
                                                                            let base = base103
                                                                                .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                            let e103 = {
                                                                                let l84 = *base.add(0).cast::<*mut u8>();
                                                                                let l85 = *base
                                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len86 = l85;
                                                                                let bytes86 = _rt::Vec::from_raw_parts(
                                                                                    l84.cast(),
                                                                                    len86,
                                                                                    len86,
                                                                                );
                                                                                let l87 = i32::from(
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>(),
                                                                                );
                                                                                use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V102;
                                                                                let v102 = match l87 {
                                                                                    0 => {
                                                                                        let e102 = {
                                                                                            let l88 = *base
                                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<*mut u8>();
                                                                                            let l89 = *base
                                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len90 = l89;
                                                                                            let bytes90 = _rt::Vec::from_raw_parts(
                                                                                                l88.cast(),
                                                                                                len90,
                                                                                                len90,
                                                                                            );
                                                                                            _rt::string_lift(bytes90)
                                                                                        };
                                                                                        V102::StringVal(e102)
                                                                                    }
                                                                                    1 => {
                                                                                        let e102 = {
                                                                                            let l91 = *base
                                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<f64>();
                                                                                            l91
                                                                                        };
                                                                                        V102::NumberVal(e102)
                                                                                    }
                                                                                    2 => {
                                                                                        let e102 = {
                                                                                            let l92 = *base
                                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<i64>();
                                                                                            l92
                                                                                        };
                                                                                        V102::IntegerVal(e102)
                                                                                    }
                                                                                    3 => {
                                                                                        let e102 = {
                                                                                            let l93 = i32::from(
                                                                                                *base
                                                                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                    .cast::<u8>(),
                                                                                            );
                                                                                            _rt::bool_lift(l93 as u8)
                                                                                        };
                                                                                        V102::BooleanVal(e102)
                                                                                    }
                                                                                    4 => V102::NullVal,
                                                                                    5 => {
                                                                                        let e102 = {
                                                                                            let l94 = *base
                                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<*mut u8>();
                                                                                            let l95 = *base
                                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len96 = l95;
                                                                                            let bytes96 = _rt::Vec::from_raw_parts(
                                                                                                l94.cast(),
                                                                                                len96,
                                                                                                len96,
                                                                                            );
                                                                                            _rt::string_lift(bytes96)
                                                                                        };
                                                                                        V102::DatetimeVal(e102)
                                                                                    }
                                                                                    6 => {
                                                                                        let e102 = {
                                                                                            let l97 = *base
                                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<f64>();
                                                                                            let l98 = *base
                                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<f64>();
                                                                                            super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                                                latitude: l97,
                                                                                                longitude: l98,
                                                                                            }
                                                                                        };
                                                                                        V102::GeoVal(e102)
                                                                                    }
                                                                                    n => {
                                                                                        debug_assert_eq!(n, 7, "invalid enum discriminant");
                                                                                        let e102 = {
                                                                                            let l99 = *base
                                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<*mut u8>();
                                                                                            let l100 = *base
                                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len101 = l100;
                                                                                            _rt::Vec::from_raw_parts(l99.cast(), len101, len101)
                                                                                        };
                                                                                        V102::BlobVal(e102)
                                                                                    }
                                                                                };
                                                                                (_rt::string_lift(bytes86), v102)
                                                                            };
                                                                            result103.push(e103);
                                                                        }
                                                                        _rt::cabi_dealloc(
                                                                            base103,
                                                                            len103 * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                            8,
                                                                        );
                                                                        result103
                                                                    };
                                                                    V112::ObjectVal(e112)
                                                                }
                                                                6 => V112::NullVal,
                                                                7 => {
                                                                    let e112 = {
                                                                        let l104 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<f64>();
                                                                        let l105 = *base
                                                                            .add(40 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<f64>();
                                                                        super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                            latitude: l104,
                                                                            longitude: l105,
                                                                        }
                                                                    };
                                                                    V112::GeoVal(e112)
                                                                }
                                                                8 => {
                                                                    let e112 = {
                                                                        let l106 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l107 = *base
                                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len108 = l107;
                                                                        let bytes108 = _rt::Vec::from_raw_parts(
                                                                            l106.cast(),
                                                                            len108,
                                                                            len108,
                                                                        );
                                                                        _rt::string_lift(bytes108)
                                                                    };
                                                                    V112::DatetimeVal(e112)
                                                                }
                                                                n => {
                                                                    debug_assert_eq!(n, 9, "invalid enum discriminant");
                                                                    let e112 = {
                                                                        let l109 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l110 = *base
                                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len111 = l110;
                                                                        _rt::Vec::from_raw_parts(l109.cast(), len111, len111)
                                                                    };
                                                                    V112::BlobVal(e112)
                                                                }
                                                            };
                                                            super::super::super::super::golem::vector::types::FilterCondition {
                                                                field: _rt::string_lift(bytes54),
                                                                operator: super::super::super::super::golem::vector::types::FilterOperator::_lift(
                                                                    l55 as u8,
                                                                ),
                                                                value: v112,
                                                            }
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                                inputs: _rt::Vec::from_raw_parts(
                                                    l113.cast(),
                                                    len115,
                                                    len115,
                                                ),
                                            }
                                        };
                                        result116.push(e116);
                                    }
                                    _rt::cabi_dealloc(
                                        base116,
                                        len116 * (48 + 4 * ::core::mem::size_of::<*const u8>()),
                                        8,
                                    );
                                    let l117 = *arg0
                                        .add(8 + 14 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i32>();
                                    super::super::super::super::golem::vector::types::FilterExpression {
                                        nodes: result116,
                                        root_id: l117 as u32,
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        match l118 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l119 = *arg0
                                        .add(8 + 16 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l120 = *arg0
                                        .add(8 + 17 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let len121 = l120;
                                    let bytes121 = _rt::Vec::from_raw_parts(
                                        l119.cast(),
                                        len121,
                                        len121,
                                    );
                                    _rt::string_lift(bytes121)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        match l122 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l123 = *arg0
                                        .add(12 + 18 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i32>();
                                    l123 as u32
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        match l124 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l125 = i32::from(
                                        *arg0
                                            .add(17 + 18 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    _rt::bool_lift(l125 as u8)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        match l126 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l127 = i32::from(
                                        *arg0
                                            .add(19 + 18 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    _rt::bool_lift(l127 as u8)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    );
                    _rt::cabi_dealloc(
                        arg0,
                        16 + 19 * ::core::mem::size_of::<*const u8>(),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let ptr129 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result128 {
                        Ok(e) => {
                            *ptr129.add(0).cast::<u8>() = (0i32) as u8;
                            let vec172 = e;
                            let len172 = vec172.len();
                            let layout172 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec172.len()
                                    * (8 + 14 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result172 = if layout172.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout172).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout172);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec172.into_iter().enumerate() {
                                let base = result172
                                    .add(i * (8 + 14 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let super::super::super::super::golem::vector::types::SearchResult {
                                        id: id130,
                                        score: score130,
                                        distance: distance130,
                                        vector: vector130,
                                        metadata: metadata130,
                                    } = e;
                                    let vec131 = (id130.into_bytes()).into_boxed_slice();
                                    let ptr131 = vec131.as_ptr().cast::<u8>();
                                    let len131 = vec131.len();
                                    ::core::mem::forget(vec131);
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len131;
                                    *base.add(0).cast::<*mut u8>() = ptr131.cast_mut();
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<f32>() = _rt::as_f32(score130);
                                    *base
                                        .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<f32>() = _rt::as_f32(distance130);
                                    match vector130 {
                                        Some(e) => {
                                            *base
                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            use super::super::super::super::golem::vector::types::VectorData as V149;
                                            match e {
                                                V149::Dense(e) => {
                                                    *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                    let vec132 = (e).into_boxed_slice();
                                                    let ptr132 = vec132.as_ptr().cast::<u8>();
                                                    let len132 = vec132.len();
                                                    ::core::mem::forget(vec132);
                                                    *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len132;
                                                    *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr132.cast_mut();
                                                }
                                                V149::Sparse(e) => {
                                                    *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let super::super::super::super::golem::vector::types::SparseVector {
                                                        indices: indices133,
                                                        values: values133,
                                                        total_dimensions: total_dimensions133,
                                                    } = e;
                                                    let vec134 = (indices133).into_boxed_slice();
                                                    let ptr134 = vec134.as_ptr().cast::<u8>();
                                                    let len134 = vec134.len();
                                                    ::core::mem::forget(vec134);
                                                    *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len134;
                                                    *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr134.cast_mut();
                                                    let vec135 = (values133).into_boxed_slice();
                                                    let ptr135 = vec135.as_ptr().cast::<u8>();
                                                    let len135 = vec135.len();
                                                    ::core::mem::forget(vec135);
                                                    *base
                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len135;
                                                    *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr135.cast_mut();
                                                    *base
                                                        .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i32>() = _rt::as_i32(total_dimensions133);
                                                }
                                                V149::Binary(e) => {
                                                    *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (2i32) as u8;
                                                    let super::super::super::super::golem::vector::types::BinaryVector {
                                                        data: data136,
                                                        dimensions: dimensions136,
                                                    } = e;
                                                    let vec137 = (data136).into_boxed_slice();
                                                    let ptr137 = vec137.as_ptr().cast::<u8>();
                                                    let len137 = vec137.len();
                                                    ::core::mem::forget(vec137);
                                                    *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len137;
                                                    *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr137.cast_mut();
                                                    *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i32>() = _rt::as_i32(dimensions136);
                                                }
                                                V149::Half(e) => {
                                                    *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (3i32) as u8;
                                                    let super::super::super::super::golem::vector::types::HalfVector {
                                                        data: data138,
                                                        dimensions: dimensions138,
                                                    } = e;
                                                    let vec139 = (data138).into_boxed_slice();
                                                    let ptr139 = vec139.as_ptr().cast::<u8>();
                                                    let len139 = vec139.len();
                                                    ::core::mem::forget(vec139);
                                                    *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len139;
                                                    *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr139.cast_mut();
                                                    *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i32>() = _rt::as_i32(dimensions138);
                                                }
                                                V149::Named(e) => {
                                                    *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (4i32) as u8;
                                                    let vec143 = e;
                                                    let len143 = vec143.len();
                                                    let layout143 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec143.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    let result143 = if layout143.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout143).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout143);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec143.into_iter().enumerate() {
                                                        let base = result143
                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let (t140_0, t140_1) = e;
                                                            let vec141 = (t140_0.into_bytes()).into_boxed_slice();
                                                            let ptr141 = vec141.as_ptr().cast::<u8>();
                                                            let len141 = vec141.len();
                                                            ::core::mem::forget(vec141);
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len141;
                                                            *base.add(0).cast::<*mut u8>() = ptr141.cast_mut();
                                                            let vec142 = (t140_1).into_boxed_slice();
                                                            let ptr142 = vec142.as_ptr().cast::<u8>();
                                                            let len142 = vec142.len();
                                                            ::core::mem::forget(vec142);
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len142;
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr142.cast_mut();
                                                        }
                                                    }
                                                    *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len143;
                                                    *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result143;
                                                }
                                                V149::Hybrid(e) => {
                                                    *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (5i32) as u8;
                                                    let (t144_0, t144_1) = e;
                                                    let vec145 = (t144_0).into_boxed_slice();
                                                    let ptr145 = vec145.as_ptr().cast::<u8>();
                                                    let len145 = vec145.len();
                                                    ::core::mem::forget(vec145);
                                                    *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len145;
                                                    *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr145.cast_mut();
                                                    let super::super::super::super::golem::vector::types::SparseVector {
                                                        indices: indices146,
                                                        values: values146,
                                                        total_dimensions: total_dimensions146,
                                                    } = t144_1;
                                                    let vec147 = (indices146).into_boxed_slice();
                                                    let ptr147 = vec147.as_ptr().cast::<u8>();
                                                    let len147 = vec147.len();
                                                    ::core::mem::forget(vec147);
                                                    *base
                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len147;
                                                    *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr147.cast_mut();
                                                    let vec148 = (values146).into_boxed_slice();
                                                    let ptr148 = vec148.as_ptr().cast::<u8>();
                                                    let len148 = vec148.len();
                                                    ::core::mem::forget(vec148);
                                                    *base
                                                        .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len148;
                                                    *base
                                                        .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr148.cast_mut();
                                                    *base
                                                        .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i32>() = _rt::as_i32(total_dimensions146);
                                                }
                                            }
                                        }
                                        None => {
                                            *base
                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match metadata130 {
                                        Some(e) => {
                                            *base
                                                .add(8 + 11 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec171 = e;
                                            let len171 = vec171.len();
                                            let layout171 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec171.len()
                                                    * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                8,
                                            );
                                            let result171 = if layout171.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout171).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout171);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec171.into_iter().enumerate() {
                                                let base = result171
                                                    .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let (t150_0, t150_1) = e;
                                                    let vec151 = (t150_0.into_bytes()).into_boxed_slice();
                                                    let ptr151 = vec151.as_ptr().cast::<u8>();
                                                    let len151 = vec151.len();
                                                    ::core::mem::forget(vec151);
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len151;
                                                    *base.add(0).cast::<*mut u8>() = ptr151.cast_mut();
                                                    use super::super::super::super::golem::vector::types::FlatMetadataValue as V170;
                                                    match t150_1 {
                                                        V170::StringVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                            let vec152 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr152 = vec152.as_ptr().cast::<u8>();
                                                            let len152 = vec152.len();
                                                            ::core::mem::forget(vec152);
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len152;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr152.cast_mut();
                                                        }
                                                        V170::NumberVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<f64>() = _rt::as_f64(e);
                                                        }
                                                        V170::IntegerVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (2i32) as u8;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<i64>() = _rt::as_i64(e);
                                                        }
                                                        V170::BooleanVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (3i32) as u8;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (match e {
                                                                true => 1,
                                                                false => 0,
                                                            }) as u8;
                                                        }
                                                        V170::ArrayVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (4i32) as u8;
                                                            let vec158 = e;
                                                            let len158 = vec158.len();
                                                            let layout158 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec158.len() * 24,
                                                                8,
                                                            );
                                                            let result158 = if layout158.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout158).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout158);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec158.into_iter().enumerate() {
                                                                let base = result158.add(i * 24);
                                                                {
                                                                    use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V157;
                                                                    match e {
                                                                        V157::StringVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                            let vec153 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr153 = vec153.as_ptr().cast::<u8>();
                                                                            let len153 = vec153.len();
                                                                            ::core::mem::forget(vec153);
                                                                            *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len153;
                                                                            *base.add(8).cast::<*mut u8>() = ptr153.cast_mut();
                                                                        }
                                                                        V157::NumberVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                            *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                                                        }
                                                                        V157::IntegerVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (2i32) as u8;
                                                                            *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                                        }
                                                                        V157::BooleanVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (3i32) as u8;
                                                                            *base.add(8).cast::<u8>() = (match e {
                                                                                true => 1,
                                                                                false => 0,
                                                                            }) as u8;
                                                                        }
                                                                        V157::NullVal => {
                                                                            *base.add(0).cast::<u8>() = (4i32) as u8;
                                                                        }
                                                                        V157::DatetimeVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (5i32) as u8;
                                                                            let vec154 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr154 = vec154.as_ptr().cast::<u8>();
                                                                            let len154 = vec154.len();
                                                                            ::core::mem::forget(vec154);
                                                                            *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len154;
                                                                            *base.add(8).cast::<*mut u8>() = ptr154.cast_mut();
                                                                        }
                                                                        V157::GeoVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (6i32) as u8;
                                                                            let super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                                latitude: latitude155,
                                                                                longitude: longitude155,
                                                                            } = e;
                                                                            *base.add(8).cast::<f64>() = _rt::as_f64(latitude155);
                                                                            *base.add(16).cast::<f64>() = _rt::as_f64(longitude155);
                                                                        }
                                                                        V157::BlobVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (7i32) as u8;
                                                                            let vec156 = (e).into_boxed_slice();
                                                                            let ptr156 = vec156.as_ptr().cast::<u8>();
                                                                            let len156 = vec156.len();
                                                                            ::core::mem::forget(vec156);
                                                                            *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len156;
                                                                            *base.add(8).cast::<*mut u8>() = ptr156.cast_mut();
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len158;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result158;
                                                        }
                                                        V170::ObjectVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (5i32) as u8;
                                                            let vec166 = e;
                                                            let len166 = vec166.len();
                                                            let layout166 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec166.len()
                                                                    * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                            let result166 = if layout166.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout166).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout166);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec166.into_iter().enumerate() {
                                                                let base = result166
                                                                    .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let (t159_0, t159_1) = e;
                                                                    let vec160 = (t159_0.into_bytes()).into_boxed_slice();
                                                                    let ptr160 = vec160.as_ptr().cast::<u8>();
                                                                    let len160 = vec160.len();
                                                                    ::core::mem::forget(vec160);
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len160;
                                                                    *base.add(0).cast::<*mut u8>() = ptr160.cast_mut();
                                                                    use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V165;
                                                                    match t159_1 {
                                                                        V165::StringVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                            let vec161 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr161 = vec161.as_ptr().cast::<u8>();
                                                                            let len161 = vec161.len();
                                                                            ::core::mem::forget(vec161);
                                                                            *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len161;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr161.cast_mut();
                                                                        }
                                                                        V165::NumberVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<f64>() = _rt::as_f64(e);
                                                                        }
                                                                        V165::IntegerVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (2i32) as u8;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i64>() = _rt::as_i64(e);
                                                                        }
                                                                        V165::BooleanVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (3i32) as u8;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (match e {
                                                                                true => 1,
                                                                                false => 0,
                                                                            }) as u8;
                                                                        }
                                                                        V165::NullVal => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (4i32) as u8;
                                                                        }
                                                                        V165::DatetimeVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (5i32) as u8;
                                                                            let vec162 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr162 = vec162.as_ptr().cast::<u8>();
                                                                            let len162 = vec162.len();
                                                                            ::core::mem::forget(vec162);
                                                                            *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len162;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr162.cast_mut();
                                                                        }
                                                                        V165::GeoVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (6i32) as u8;
                                                                            let super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                                latitude: latitude163,
                                                                                longitude: longitude163,
                                                                            } = e;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<f64>() = _rt::as_f64(latitude163);
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<f64>() = _rt::as_f64(longitude163);
                                                                        }
                                                                        V165::BlobVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (7i32) as u8;
                                                                            let vec164 = (e).into_boxed_slice();
                                                                            let ptr164 = vec164.as_ptr().cast::<u8>();
                                                                            let len164 = vec164.len();
                                                                            ::core::mem::forget(vec164);
                                                                            *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len164;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr164.cast_mut();
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len166;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result166;
                                                        }
                                                        V170::NullVal => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (6i32) as u8;
                                                        }
                                                        V170::GeoVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (7i32) as u8;
                                                            let super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                latitude: latitude167,
                                                                longitude: longitude167,
                                                            } = e;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<f64>() = _rt::as_f64(latitude167);
                                                            *base
                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<f64>() = _rt::as_f64(longitude167);
                                                        }
                                                        V170::DatetimeVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (8i32) as u8;
                                                            let vec168 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr168 = vec168.as_ptr().cast::<u8>();
                                                            let len168 = vec168.len();
                                                            ::core::mem::forget(vec168);
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len168;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr168.cast_mut();
                                                        }
                                                        V170::BlobVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (9i32) as u8;
                                                            let vec169 = (e).into_boxed_slice();
                                                            let ptr169 = vec169.as_ptr().cast::<u8>();
                                                            let len169 = vec169.len();
                                                            ::core::mem::forget(vec169);
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len169;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr169.cast_mut();
                                                        }
                                                    }
                                                }
                                            }
                                            *base
                                                .add(8 + 13 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len171;
                                            *base
                                                .add(8 + 12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result171;
                                        }
                                        None => {
                                            *base
                                                .add(8 + 11 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                            }
                            *ptr129
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len172;
                            *ptr129
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result172;
                        }
                        Err(e) => {
                            *ptr129.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::golem::vector::types::VectorError as V183;
                            match e {
                                V183::NotFound(e) => {
                                    *ptr129
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                    let vec173 = (e.into_bytes()).into_boxed_slice();
                                    let ptr173 = vec173.as_ptr().cast::<u8>();
                                    let len173 = vec173.len();
                                    ::core::mem::forget(vec173);
                                    *ptr129
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len173;
                                    *ptr129
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr173.cast_mut();
                                }
                                V183::AlreadyExists(e) => {
                                    *ptr129
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec174 = (e.into_bytes()).into_boxed_slice();
                                    let ptr174 = vec174.as_ptr().cast::<u8>();
                                    let len174 = vec174.len();
                                    ::core::mem::forget(vec174);
                                    *ptr129
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len174;
                                    *ptr129
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr174.cast_mut();
                                }
                                V183::InvalidParams(e) => {
                                    *ptr129
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                    let vec175 = (e.into_bytes()).into_boxed_slice();
                                    let ptr175 = vec175.as_ptr().cast::<u8>();
                                    let len175 = vec175.len();
                                    ::core::mem::forget(vec175);
                                    *ptr129
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len175;
                                    *ptr129
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr175.cast_mut();
                                }
                                V183::UnsupportedFeature(e) => {
                                    *ptr129
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                    let vec176 = (e.into_bytes()).into_boxed_slice();
                                    let ptr176 = vec176.as_ptr().cast::<u8>();
                                    let len176 = vec176.len();
                                    ::core::mem::forget(vec176);
                                    *ptr129
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len176;
                                    *ptr129
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr176.cast_mut();
                                }
                                V183::DimensionMismatch(e) => {
                                    *ptr129
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (4i32) as u8;
                                    let vec177 = (e.into_bytes()).into_boxed_slice();
                                    let ptr177 = vec177.as_ptr().cast::<u8>();
                                    let len177 = vec177.len();
                                    ::core::mem::forget(vec177);
                                    *ptr129
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len177;
                                    *ptr129
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr177.cast_mut();
                                }
                                V183::InvalidVector(e) => {
                                    *ptr129
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (5i32) as u8;
                                    let vec178 = (e.into_bytes()).into_boxed_slice();
                                    let ptr178 = vec178.as_ptr().cast::<u8>();
                                    let len178 = vec178.len();
                                    ::core::mem::forget(vec178);
                                    *ptr129
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len178;
                                    *ptr129
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr178.cast_mut();
                                }
                                V183::Unauthorized(e) => {
                                    *ptr129
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (6i32) as u8;
                                    let vec179 = (e.into_bytes()).into_boxed_slice();
                                    let ptr179 = vec179.as_ptr().cast::<u8>();
                                    let len179 = vec179.len();
                                    ::core::mem::forget(vec179);
                                    *ptr129
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len179;
                                    *ptr129
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr179.cast_mut();
                                }
                                V183::RateLimited(e) => {
                                    *ptr129
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (7i32) as u8;
                                    let vec180 = (e.into_bytes()).into_boxed_slice();
                                    let ptr180 = vec180.as_ptr().cast::<u8>();
                                    let len180 = vec180.len();
                                    ::core::mem::forget(vec180);
                                    *ptr129
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len180;
                                    *ptr129
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr180.cast_mut();
                                }
                                V183::ProviderError(e) => {
                                    *ptr129
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (8i32) as u8;
                                    let vec181 = (e.into_bytes()).into_boxed_slice();
                                    let ptr181 = vec181.as_ptr().cast::<u8>();
                                    let len181 = vec181.len();
                                    ::core::mem::forget(vec181);
                                    *ptr129
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len181;
                                    *ptr129
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr181.cast_mut();
                                }
                                V183::ConnectionError(e) => {
                                    *ptr129
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (9i32) as u8;
                                    let vec182 = (e.into_bytes()).into_boxed_slice();
                                    let ptr182 = vec182.as_ptr().cast::<u8>();
                                    let len182 = vec182.len();
                                    ::core::mem::forget(vec182);
                                    *ptr129
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len182;
                                    *ptr129
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr182.cast_mut();
                                }
                            }
                        }
                    };
                    ptr129
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_search_range<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let base77 = l1;
                            let len77 = l2;
                            for i in 0..len77 {
                                let base = base77
                                    .add(i * (8 + 14 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let l3 = *base.add(0).cast::<*mut u8>();
                                    let l4 = *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l3, l4, 1);
                                    let l5 = i32::from(
                                        *base
                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l5 {
                                        0 => {}
                                        _ => {
                                            let l6 = i32::from(
                                                *base
                                                    .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l6 {
                                                0 => {
                                                    let l7 = *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l8 = *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base9 = l7;
                                                    let len9 = l8;
                                                    _rt::cabi_dealloc(base9, len9 * 4, 4);
                                                }
                                                1 => {
                                                    let l10 = *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l11 = *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base12 = l10;
                                                    let len12 = l11;
                                                    _rt::cabi_dealloc(base12, len12 * 4, 4);
                                                    let l13 = *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l14 = *base
                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base15 = l13;
                                                    let len15 = l14;
                                                    _rt::cabi_dealloc(base15, len15 * 4, 4);
                                                }
                                                2 => {
                                                    let l16 = *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l17 = *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base18 = l16;
                                                    let len18 = l17;
                                                    _rt::cabi_dealloc(base18, len18 * 1, 1);
                                                }
                                                3 => {
                                                    let l19 = *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l20 = *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base21 = l19;
                                                    let len21 = l20;
                                                    _rt::cabi_dealloc(base21, len21 * 4, 4);
                                                }
                                                4 => {
                                                    let l22 = *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l23 = *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base29 = l22;
                                                    let len29 = l23;
                                                    for i in 0..len29 {
                                                        let base = base29
                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l24 = *base.add(0).cast::<*mut u8>();
                                                            let l25 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l24, l25, 1);
                                                            let l26 = *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l27 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base28 = l26;
                                                            let len28 = l27;
                                                            _rt::cabi_dealloc(base28, len28 * 4, 4);
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base29,
                                                        len29 * (4 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                }
                                                _ => {
                                                    let l30 = *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l31 = *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base32 = l30;
                                                    let len32 = l31;
                                                    _rt::cabi_dealloc(base32, len32 * 4, 4);
                                                    let l33 = *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l34 = *base
                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base35 = l33;
                                                    let len35 = l34;
                                                    _rt::cabi_dealloc(base35, len35 * 4, 4);
                                                    let l36 = *base
                                                        .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l37 = *base
                                                        .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base38 = l36;
                                                    let len38 = l37;
                                                    _rt::cabi_dealloc(base38, len38 * 4, 4);
                                                }
                                            }
                                        }
                                    }
                                    let l39 = i32::from(
                                        *base
                                            .add(8 + 11 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l39 {
                                        0 => {}
                                        _ => {
                                            let l40 = *base
                                                .add(8 + 12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l41 = *base
                                                .add(8 + 13 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base76 = l40;
                                            let len76 = l41;
                                            for i in 0..len76 {
                                                let base = base76
                                                    .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let l42 = *base.add(0).cast::<*mut u8>();
                                                    let l43 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l42, l43, 1);
                                                    let l44 = i32::from(
                                                        *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l44 {
                                                        0 => {
                                                            let l45 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l46 = *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l45, l46, 1);
                                                        }
                                                        1 => {}
                                                        2 => {}
                                                        3 => {}
                                                        4 => {
                                                            let l47 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l48 = *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base57 = l47;
                                                            let len57 = l48;
                                                            for i in 0..len57 {
                                                                let base = base57.add(i * 24);
                                                                {
                                                                    let l49 = i32::from(*base.add(0).cast::<u8>());
                                                                    match l49 {
                                                                        0 => {
                                                                            let l50 = *base.add(8).cast::<*mut u8>();
                                                                            let l51 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l50, l51, 1);
                                                                        }
                                                                        1 => {}
                                                                        2 => {}
                                                                        3 => {}
                                                                        4 => {}
                                                                        5 => {
                                                                            let l52 = *base.add(8).cast::<*mut u8>();
                                                                            let l53 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l52, l53, 1);
                                                                        }
                                                                        6 => {}
                                                                        _ => {
                                                                            let l54 = *base.add(8).cast::<*mut u8>();
                                                                            let l55 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base56 = l54;
                                                                            let len56 = l55;
                                                                            _rt::cabi_dealloc(base56, len56 * 1, 1);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(base57, len57 * 24, 8);
                                                        }
                                                        5 => {
                                                            let l58 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l59 = *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base70 = l58;
                                                            let len70 = l59;
                                                            for i in 0..len70 {
                                                                let base = base70
                                                                    .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l60 = *base.add(0).cast::<*mut u8>();
                                                                    let l61 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l60, l61, 1);
                                                                    let l62 = i32::from(
                                                                        *base
                                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l62 {
                                                                        0 => {
                                                                            let l63 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l64 = *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l63, l64, 1);
                                                                        }
                                                                        1 => {}
                                                                        2 => {}
                                                                        3 => {}
                                                                        4 => {}
                                                                        5 => {
                                                                            let l65 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l66 = *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l65, l66, 1);
                                                                        }
                                                                        6 => {}
                                                                        _ => {
                                                                            let l67 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l68 = *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base69 = l67;
                                                                            let len69 = l68;
                                                                            _rt::cabi_dealloc(base69, len69 * 1, 1);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base70,
                                                                len70 * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                        }
                                                        6 => {}
                                                        7 => {}
                                                        8 => {
                                                            let l71 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l72 = *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l71, l72, 1);
                                                        }
                                                        _ => {
                                                            let l73 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l74 = *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base75 = l73;
                                                            let len75 = l74;
                                                            _rt::cabi_dealloc(base75, len75 * 1, 1);
                                                        }
                                                    }
                                                }
                                            }
                                            _rt::cabi_dealloc(
                                                base76,
                                                len76 * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                8,
                                            );
                                        }
                                    }
                                }
                            }
                            _rt::cabi_dealloc(
                                base77,
                                len77 * (8 + 14 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                        }
                        _ => {
                            let l78 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l78 {
                                0 => {
                                    let l79 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l80 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l79, l80, 1);
                                }
                                1 => {
                                    let l81 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l82 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l81, l82, 1);
                                }
                                2 => {
                                    let l83 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l84 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l83, l84, 1);
                                }
                                3 => {
                                    let l85 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l86 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l85, l86, 1);
                                }
                                4 => {
                                    let l87 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l88 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l87, l88, 1);
                                }
                                5 => {
                                    let l89 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l90 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l89, l90, 1);
                                }
                                6 => {
                                    let l91 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l92 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l91, l92, 1);
                                }
                                7 => {
                                    let l93 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l94 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l93, l94, 1);
                                }
                                8 => {
                                    let l95 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l96 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l95, l96, 1);
                                }
                                _ => {
                                    let l97 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l98 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l97, l98, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_search_text_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                    arg4: i32,
                    arg5: i32,
                    arg6: *mut u8,
                    arg7: usize,
                    arg8: i32,
                    arg9: i32,
                    arg10: *mut u8,
                    arg11: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let len1 = arg3;
                    let bytes1 = _rt::Vec::from_raw_parts(arg2.cast(), len1, len1);
                    let result72 = T::search_text(
                        _rt::string_lift(bytes0),
                        _rt::string_lift(bytes1),
                        arg4 as u32,
                        match arg5 {
                            0 => None,
                            1 => {
                                let e = {
                                    let base70 = arg6;
                                    let len70 = arg7;
                                    let mut result70 = _rt::Vec::with_capacity(len70);
                                    for i in 0..len70 {
                                        let base = base70
                                            .add(i * (48 + 4 * ::core::mem::size_of::<*const u8>()));
                                        let e70 = {
                                            let l2 = *base.add(0).cast::<i32>();
                                            let l3 = i32::from(*base.add(4).cast::<u8>());
                                            use super::super::super::super::golem::vector::types::FilterOp as V4;
                                            let v4 = match l3 {
                                                0 => V4::Condition,
                                                1 => V4::And,
                                                2 => V4::Or,
                                                n => {
                                                    debug_assert_eq!(n, 3, "invalid enum discriminant");
                                                    V4::Not
                                                }
                                            };
                                            let l5 = i32::from(*base.add(8).cast::<u8>());
                                            let l67 = *base
                                                .add(48 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l68 = *base
                                                .add(48 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len69 = l68;
                                            super::super::super::super::golem::vector::types::FilterNode {
                                                id: l2 as u32,
                                                op: v4,
                                                condition: match l5 {
                                                    0 => None,
                                                    1 => {
                                                        let e = {
                                                            let l6 = *base.add(16).cast::<*mut u8>();
                                                            let l7 = *base
                                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len8 = l7;
                                                            let bytes8 = _rt::Vec::from_raw_parts(
                                                                l6.cast(),
                                                                len8,
                                                                len8,
                                                            );
                                                            let l9 = i32::from(
                                                                *base
                                                                    .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            let l10 = i32::from(
                                                                *base
                                                                    .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            use super::super::super::super::golem::vector::types::FlatMetadataValue as V66;
                                                            let v66 = match l10 {
                                                                0 => {
                                                                    let e66 = {
                                                                        let l11 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l12 = *base
                                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len13 = l12;
                                                                        let bytes13 = _rt::Vec::from_raw_parts(
                                                                            l11.cast(),
                                                                            len13,
                                                                            len13,
                                                                        );
                                                                        _rt::string_lift(bytes13)
                                                                    };
                                                                    V66::StringVal(e66)
                                                                }
                                                                1 => {
                                                                    let e66 = {
                                                                        let l14 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<f64>();
                                                                        l14
                                                                    };
                                                                    V66::NumberVal(e66)
                                                                }
                                                                2 => {
                                                                    let e66 = {
                                                                        let l15 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<i64>();
                                                                        l15
                                                                    };
                                                                    V66::IntegerVal(e66)
                                                                }
                                                                3 => {
                                                                    let e66 = {
                                                                        let l16 = i32::from(
                                                                            *base
                                                                                .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>(),
                                                                        );
                                                                        _rt::bool_lift(l16 as u8)
                                                                    };
                                                                    V66::BooleanVal(e66)
                                                                }
                                                                4 => {
                                                                    let e66 = {
                                                                        let l17 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l18 = *base
                                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let base35 = l17;
                                                                        let len35 = l18;
                                                                        let mut result35 = _rt::Vec::with_capacity(len35);
                                                                        for i in 0..len35 {
                                                                            let base = base35.add(i * 24);
                                                                            let e35 = {
                                                                                let l19 = i32::from(*base.add(0).cast::<u8>());
                                                                                use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V34;
                                                                                let v34 = match l19 {
                                                                                    0 => {
                                                                                        let e34 = {
                                                                                            let l20 = *base.add(8).cast::<*mut u8>();
                                                                                            let l21 = *base
                                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len22 = l21;
                                                                                            let bytes22 = _rt::Vec::from_raw_parts(
                                                                                                l20.cast(),
                                                                                                len22,
                                                                                                len22,
                                                                                            );
                                                                                            _rt::string_lift(bytes22)
                                                                                        };
                                                                                        V34::StringVal(e34)
                                                                                    }
                                                                                    1 => {
                                                                                        let e34 = {
                                                                                            let l23 = *base.add(8).cast::<f64>();
                                                                                            l23
                                                                                        };
                                                                                        V34::NumberVal(e34)
                                                                                    }
                                                                                    2 => {
                                                                                        let e34 = {
                                                                                            let l24 = *base.add(8).cast::<i64>();
                                                                                            l24
                                                                                        };
                                                                                        V34::IntegerVal(e34)
                                                                                    }
                                                                                    3 => {
                                                                                        let e34 = {
                                                                                            let l25 = i32::from(*base.add(8).cast::<u8>());
                                                                                            _rt::bool_lift(l25 as u8)
                                                                                        };
                                                                                        V34::BooleanVal(e34)
                                                                                    }
                                                                                    4 => V34::NullVal,
                                                                                    5 => {
                                                                                        let e34 = {
                                                                                            let l26 = *base.add(8).cast::<*mut u8>();
                                                                                            let l27 = *base
                                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len28 = l27;
                                                                                            let bytes28 = _rt::Vec::from_raw_parts(
                                                                                                l26.cast(),
                                                                                                len28,
                                                                                                len28,
                                                                                            );
                                                                                            _rt::string_lift(bytes28)
                                                                                        };
                                                                                        V34::DatetimeVal(e34)
                                                                                    }
                                                                                    6 => {
                                                                                        let e34 = {
                                                                                            let l29 = *base.add(8).cast::<f64>();
                                                                                            let l30 = *base.add(16).cast::<f64>();
                                                                                            super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                                                latitude: l29,
                                                                                                longitude: l30,
                                                                                            }
                                                                                        };
                                                                                        V34::GeoVal(e34)
                                                                                    }
                                                                                    n => {
                                                                                        debug_assert_eq!(n, 7, "invalid enum discriminant");
                                                                                        let e34 = {
                                                                                            let l31 = *base.add(8).cast::<*mut u8>();
                                                                                            let l32 = *base
                                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len33 = l32;
                                                                                            _rt::Vec::from_raw_parts(l31.cast(), len33, len33)
                                                                                        };
                                                                                        V34::BlobVal(e34)
                                                                                    }
                                                                                };
                                                                                v34
                                                                            };
                                                                            result35.push(e35);
                                                                        }
                                                                        _rt::cabi_dealloc(base35, len35 * 24, 8);
                                                                        result35
                                                                    };
                                                                    V66::ArrayVal(e66)
                                                                }
                                                                5 => {
                                                                    let e66 = {
                                                                        let l36 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l37 = *base
                                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let base57 = l36;
                                                                        let len57 = l37;
                                                                        let mut result57 = _rt::Vec::with_capacity(len57);
                                                                        for i in 0..len57 {
                                                                            let base = base57
                                                                                .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                            let e57 = {
                                                                                let l38 = *base.add(0).cast::<*mut u8>();
                                                                                let l39 = *base
                                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len40 = l39;
                                                                                let bytes40 = _rt::Vec::from_raw_parts(
                                                                                    l38.cast(),
                                                                                    len40,
                                                                                    len40,
                                                                                );
                                                                                let l41 = i32::from(
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>(),
                                                                                );
                                                                                use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V56;
                                                                                let v56 = match l41 {
                                                                                    0 => {
                                                                                        let e56 = {
                                                                                            let l42 = *base
                                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<*mut u8>();
                                                                                            let l43 = *base
                                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len44 = l43;
                                                                                            let bytes44 = _rt::Vec::from_raw_parts(
                                                                                                l42.cast(),
                                                                                                len44,
                                                                                                len44,
                                                                                            );
                                                                                            _rt::string_lift(bytes44)
                                                                                        };
                                                                                        V56::StringVal(e56)
                                                                                    }
                                                                                    1 => {
                                                                                        let e56 = {
                                                                                            let l45 = *base
                                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<f64>();
                                                                                            l45
                                                                                        };
                                                                                        V56::NumberVal(e56)
                                                                                    }
                                                                                    2 => {
                                                                                        let e56 = {
                                                                                            let l46 = *base
                                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<i64>();
                                                                                            l46
                                                                                        };
                                                                                        V56::IntegerVal(e56)
                                                                                    }
                                                                                    3 => {
                                                                                        let e56 = {
                                                                                            let l47 = i32::from(
                                                                                                *base
                                                                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                    .cast::<u8>(),
                                                                                            );
                                                                                            _rt::bool_lift(l47 as u8)
                                                                                        };
                                                                                        V56::BooleanVal(e56)
                                                                                    }
                                                                                    4 => V56::NullVal,
                                                                                    5 => {
                                                                                        let e56 = {
                                                                                            let l48 = *base
                                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<*mut u8>();
                                                                                            let l49 = *base
                                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len50 = l49;
                                                                                            let bytes50 = _rt::Vec::from_raw_parts(
                                                                                                l48.cast(),
                                                                                                len50,
                                                                                                len50,
                                                                                            );
                                                                                            _rt::string_lift(bytes50)
                                                                                        };
                                                                                        V56::DatetimeVal(e56)
                                                                                    }
                                                                                    6 => {
                                                                                        let e56 = {
                                                                                            let l51 = *base
                                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<f64>();
                                                                                            let l52 = *base
                                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<f64>();
                                                                                            super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                                                latitude: l51,
                                                                                                longitude: l52,
                                                                                            }
                                                                                        };
                                                                                        V56::GeoVal(e56)
                                                                                    }
                                                                                    n => {
                                                                                        debug_assert_eq!(n, 7, "invalid enum discriminant");
                                                                                        let e56 = {
                                                                                            let l53 = *base
                                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<*mut u8>();
                                                                                            let l54 = *base
                                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            let len55 = l54;
                                                                                            _rt::Vec::from_raw_parts(l53.cast(), len55, len55)
                                                                                        };
                                                                                        V56::BlobVal(e56)
                                                                                    }
                                                                                };
                                                                                (_rt::string_lift(bytes40), v56)
                                                                            };
                                                                            result57.push(e57);
                                                                        }
                                                                        _rt::cabi_dealloc(
                                                                            base57,
                                                                            len57 * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                            8,
                                                                        );
                                                                        result57
                                                                    };
                                                                    V66::ObjectVal(e66)
                                                                }
                                                                6 => V66::NullVal,
                                                                7 => {
                                                                    let e66 = {
                                                                        let l58 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<f64>();
                                                                        let l59 = *base
                                                                            .add(40 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<f64>();
                                                                        super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                            latitude: l58,
                                                                            longitude: l59,
                                                                        }
                                                                    };
                                                                    V66::GeoVal(e66)
                                                                }
                                                                8 => {
                                                                    let e66 = {
                                                                        let l60 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l61 = *base
                                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len62 = l61;
                                                                        let bytes62 = _rt::Vec::from_raw_parts(
                                                                            l60.cast(),
                                                                            len62,
                                                                            len62,
                                                                        );
                                                                        _rt::string_lift(bytes62)
                                                                    };
                                                                    V66::DatetimeVal(e66)
                                                                }
                                                                n => {
                                                                    debug_assert_eq!(n, 9, "invalid enum discriminant");
                                                                    let e66 = {
                                                                        let l63 = *base
                                                                            .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<*mut u8>();
                                                                        let l64 = *base
                                                                            .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len65 = l64;
                                                                        _rt::Vec::from_raw_parts(l63.cast(), len65, len65)
                                                                    };
                                                                    V66::BlobVal(e66)
                                                                }
                                                            };
                                                            super::super::super::super::golem::vector::types::FilterCondition {
                                                                field: _rt::string_lift(bytes8),
                                                                operator: super::super::super::super::golem::vector::types::FilterOperator::_lift(
                                                                    l9 as u8,
                                                                ),
                                                                value: v66,
                                                            }
                                                        };
                                                        Some(e)
                                                    }
                                                    _ => _rt::invalid_enum_discriminant(),
                                                },
                                                inputs: _rt::Vec::from_raw_parts(l67.cast(), len69, len69),
                                            }
                                        };
                                        result70.push(e70);
                                    }
                                    _rt::cabi_dealloc(
                                        base70,
                                        len70 * (48 + 4 * ::core::mem::size_of::<*const u8>()),
                                        8,
                                    );
                                    super::super::super::super::golem::vector::types::FilterExpression {
                                        nodes: result70,
                                        root_id: arg8 as u32,
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        match arg9 {
                            0 => None,
                            1 => {
                                let e = {
                                    let len71 = arg11;
                                    let bytes71 = _rt::Vec::from_raw_parts(
                                        arg10.cast(),
                                        len71,
                                        len71,
                                    );
                                    _rt::string_lift(bytes71)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    );
                    let ptr73 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result72 {
                        Ok(e) => {
                            *ptr73.add(0).cast::<u8>() = (0i32) as u8;
                            let vec116 = e;
                            let len116 = vec116.len();
                            let layout116 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec116.len()
                                    * (8 + 14 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result116 = if layout116.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout116).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout116);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec116.into_iter().enumerate() {
                                let base = result116
                                    .add(i * (8 + 14 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let super::super::super::super::golem::vector::types::SearchResult {
                                        id: id74,
                                        score: score74,
                                        distance: distance74,
                                        vector: vector74,
                                        metadata: metadata74,
                                    } = e;
                                    let vec75 = (id74.into_bytes()).into_boxed_slice();
                                    let ptr75 = vec75.as_ptr().cast::<u8>();
                                    let len75 = vec75.len();
                                    ::core::mem::forget(vec75);
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len75;
                                    *base.add(0).cast::<*mut u8>() = ptr75.cast_mut();
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<f32>() = _rt::as_f32(score74);
                                    *base
                                        .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<f32>() = _rt::as_f32(distance74);
                                    match vector74 {
                                        Some(e) => {
                                            *base
                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            use super::super::super::super::golem::vector::types::VectorData as V93;
                                            match e {
                                                V93::Dense(e) => {
                                                    *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                    let vec76 = (e).into_boxed_slice();
                                                    let ptr76 = vec76.as_ptr().cast::<u8>();
                                                    let len76 = vec76.len();
                                                    ::core::mem::forget(vec76);
                                                    *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len76;
                                                    *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr76.cast_mut();
                                                }
                                                V93::Sparse(e) => {
                                                    *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let super::super::super::super::golem::vector::types::SparseVector {
                                                        indices: indices77,
                                                        values: values77,
                                                        total_dimensions: total_dimensions77,
                                                    } = e;
                                                    let vec78 = (indices77).into_boxed_slice();
                                                    let ptr78 = vec78.as_ptr().cast::<u8>();
                                                    let len78 = vec78.len();
                                                    ::core::mem::forget(vec78);
                                                    *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len78;
                                                    *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr78.cast_mut();
                                                    let vec79 = (values77).into_boxed_slice();
                                                    let ptr79 = vec79.as_ptr().cast::<u8>();
                                                    let len79 = vec79.len();
                                                    ::core::mem::forget(vec79);
                                                    *base
                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len79;
                                                    *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr79.cast_mut();
                                                    *base
                                                        .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i32>() = _rt::as_i32(total_dimensions77);
                                                }
                                                V93::Binary(e) => {
                                                    *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (2i32) as u8;
                                                    let super::super::super::super::golem::vector::types::BinaryVector {
                                                        data: data80,
                                                        dimensions: dimensions80,
                                                    } = e;
                                                    let vec81 = (data80).into_boxed_slice();
                                                    let ptr81 = vec81.as_ptr().cast::<u8>();
                                                    let len81 = vec81.len();
                                                    ::core::mem::forget(vec81);
                                                    *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len81;
                                                    *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr81.cast_mut();
                                                    *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i32>() = _rt::as_i32(dimensions80);
                                                }
                                                V93::Half(e) => {
                                                    *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (3i32) as u8;
                                                    let super::super::super::super::golem::vector::types::HalfVector {
                                                        data: data82,
                                                        dimensions: dimensions82,
                                                    } = e;
                                                    let vec83 = (data82).into_boxed_slice();
                                                    let ptr83 = vec83.as_ptr().cast::<u8>();
                                                    let len83 = vec83.len();
                                                    ::core::mem::forget(vec83);
                                                    *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len83;
                                                    *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr83.cast_mut();
                                                    *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i32>() = _rt::as_i32(dimensions82);
                                                }
                                                V93::Named(e) => {
                                                    *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (4i32) as u8;
                                                    let vec87 = e;
                                                    let len87 = vec87.len();
                                                    let layout87 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec87.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    let result87 = if layout87.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout87).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout87);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec87.into_iter().enumerate() {
                                                        let base = result87
                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let (t84_0, t84_1) = e;
                                                            let vec85 = (t84_0.into_bytes()).into_boxed_slice();
                                                            let ptr85 = vec85.as_ptr().cast::<u8>();
                                                            let len85 = vec85.len();
                                                            ::core::mem::forget(vec85);
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len85;
                                                            *base.add(0).cast::<*mut u8>() = ptr85.cast_mut();
                                                            let vec86 = (t84_1).into_boxed_slice();
                                                            let ptr86 = vec86.as_ptr().cast::<u8>();
                                                            let len86 = vec86.len();
                                                            ::core::mem::forget(vec86);
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len86;
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr86.cast_mut();
                                                        }
                                                    }
                                                    *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len87;
                                                    *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result87;
                                                }
                                                V93::Hybrid(e) => {
                                                    *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (5i32) as u8;
                                                    let (t88_0, t88_1) = e;
                                                    let vec89 = (t88_0).into_boxed_slice();
                                                    let ptr89 = vec89.as_ptr().cast::<u8>();
                                                    let len89 = vec89.len();
                                                    ::core::mem::forget(vec89);
                                                    *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len89;
                                                    *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr89.cast_mut();
                                                    let super::super::super::super::golem::vector::types::SparseVector {
                                                        indices: indices90,
                                                        values: values90,
                                                        total_dimensions: total_dimensions90,
                                                    } = t88_1;
                                                    let vec91 = (indices90).into_boxed_slice();
                                                    let ptr91 = vec91.as_ptr().cast::<u8>();
                                                    let len91 = vec91.len();
                                                    ::core::mem::forget(vec91);
                                                    *base
                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len91;
                                                    *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr91.cast_mut();
                                                    let vec92 = (values90).into_boxed_slice();
                                                    let ptr92 = vec92.as_ptr().cast::<u8>();
                                                    let len92 = vec92.len();
                                                    ::core::mem::forget(vec92);
                                                    *base
                                                        .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len92;
                                                    *base
                                                        .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr92.cast_mut();
                                                    *base
                                                        .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i32>() = _rt::as_i32(total_dimensions90);
                                                }
                                            }
                                        }
                                        None => {
                                            *base
                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match metadata74 {
                                        Some(e) => {
                                            *base
                                                .add(8 + 11 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec115 = e;
                                            let len115 = vec115.len();
                                            let layout115 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec115.len()
                                                    * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                8,
                                            );
                                            let result115 = if layout115.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout115).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout115);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec115.into_iter().enumerate() {
                                                let base = result115
                                                    .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let (t94_0, t94_1) = e;
                                                    let vec95 = (t94_0.into_bytes()).into_boxed_slice();
                                                    let ptr95 = vec95.as_ptr().cast::<u8>();
                                                    let len95 = vec95.len();
                                                    ::core::mem::forget(vec95);
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len95;
                                                    *base.add(0).cast::<*mut u8>() = ptr95.cast_mut();
                                                    use super::super::super::super::golem::vector::types::FlatMetadataValue as V114;
                                                    match t94_1 {
                                                        V114::StringVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                            let vec96 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr96 = vec96.as_ptr().cast::<u8>();
                                                            let len96 = vec96.len();
                                                            ::core::mem::forget(vec96);
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len96;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr96.cast_mut();
                                                        }
                                                        V114::NumberVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<f64>() = _rt::as_f64(e);
                                                        }
                                                        V114::IntegerVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (2i32) as u8;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<i64>() = _rt::as_i64(e);
                                                        }
                                                        V114::BooleanVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (3i32) as u8;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (match e {
                                                                true => 1,
                                                                false => 0,
                                                            }) as u8;
                                                        }
                                                        V114::ArrayVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (4i32) as u8;
                                                            let vec102 = e;
                                                            let len102 = vec102.len();
                                                            let layout102 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec102.len() * 24,
                                                                8,
                                                            );
                                                            let result102 = if layout102.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout102).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout102);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec102.into_iter().enumerate() {
                                                                let base = result102.add(i * 24);
                                                                {
                                                                    use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V101;
                                                                    match e {
                                                                        V101::StringVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                            let vec97 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr97 = vec97.as_ptr().cast::<u8>();
                                                                            let len97 = vec97.len();
                                                                            ::core::mem::forget(vec97);
                                                                            *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len97;
                                                                            *base.add(8).cast::<*mut u8>() = ptr97.cast_mut();
                                                                        }
                                                                        V101::NumberVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                            *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                                                        }
                                                                        V101::IntegerVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (2i32) as u8;
                                                                            *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                                        }
                                                                        V101::BooleanVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (3i32) as u8;
                                                                            *base.add(8).cast::<u8>() = (match e {
                                                                                true => 1,
                                                                                false => 0,
                                                                            }) as u8;
                                                                        }
                                                                        V101::NullVal => {
                                                                            *base.add(0).cast::<u8>() = (4i32) as u8;
                                                                        }
                                                                        V101::DatetimeVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (5i32) as u8;
                                                                            let vec98 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr98 = vec98.as_ptr().cast::<u8>();
                                                                            let len98 = vec98.len();
                                                                            ::core::mem::forget(vec98);
                                                                            *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len98;
                                                                            *base.add(8).cast::<*mut u8>() = ptr98.cast_mut();
                                                                        }
                                                                        V101::GeoVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (6i32) as u8;
                                                                            let super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                                latitude: latitude99,
                                                                                longitude: longitude99,
                                                                            } = e;
                                                                            *base.add(8).cast::<f64>() = _rt::as_f64(latitude99);
                                                                            *base.add(16).cast::<f64>() = _rt::as_f64(longitude99);
                                                                        }
                                                                        V101::BlobVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (7i32) as u8;
                                                                            let vec100 = (e).into_boxed_slice();
                                                                            let ptr100 = vec100.as_ptr().cast::<u8>();
                                                                            let len100 = vec100.len();
                                                                            ::core::mem::forget(vec100);
                                                                            *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len100;
                                                                            *base.add(8).cast::<*mut u8>() = ptr100.cast_mut();
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len102;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result102;
                                                        }
                                                        V114::ObjectVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (5i32) as u8;
                                                            let vec110 = e;
                                                            let len110 = vec110.len();
                                                            let layout110 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec110.len()
                                                                    * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                            let result110 = if layout110.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout110).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout110);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec110.into_iter().enumerate() {
                                                                let base = result110
                                                                    .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let (t103_0, t103_1) = e;
                                                                    let vec104 = (t103_0.into_bytes()).into_boxed_slice();
                                                                    let ptr104 = vec104.as_ptr().cast::<u8>();
                                                                    let len104 = vec104.len();
                                                                    ::core::mem::forget(vec104);
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len104;
                                                                    *base.add(0).cast::<*mut u8>() = ptr104.cast_mut();
                                                                    use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V109;
                                                                    match t103_1 {
                                                                        V109::StringVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                            let vec105 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr105 = vec105.as_ptr().cast::<u8>();
                                                                            let len105 = vec105.len();
                                                                            ::core::mem::forget(vec105);
                                                                            *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len105;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr105.cast_mut();
                                                                        }
                                                                        V109::NumberVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<f64>() = _rt::as_f64(e);
                                                                        }
                                                                        V109::IntegerVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (2i32) as u8;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i64>() = _rt::as_i64(e);
                                                                        }
                                                                        V109::BooleanVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (3i32) as u8;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (match e {
                                                                                true => 1,
                                                                                false => 0,
                                                                            }) as u8;
                                                                        }
                                                                        V109::NullVal => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (4i32) as u8;
                                                                        }
                                                                        V109::DatetimeVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (5i32) as u8;
                                                                            let vec106 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr106 = vec106.as_ptr().cast::<u8>();
                                                                            let len106 = vec106.len();
                                                                            ::core::mem::forget(vec106);
                                                                            *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len106;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr106.cast_mut();
                                                                        }
                                                                        V109::GeoVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (6i32) as u8;
                                                                            let super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                                latitude: latitude107,
                                                                                longitude: longitude107,
                                                                            } = e;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<f64>() = _rt::as_f64(latitude107);
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<f64>() = _rt::as_f64(longitude107);
                                                                        }
                                                                        V109::BlobVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (7i32) as u8;
                                                                            let vec108 = (e).into_boxed_slice();
                                                                            let ptr108 = vec108.as_ptr().cast::<u8>();
                                                                            let len108 = vec108.len();
                                                                            ::core::mem::forget(vec108);
                                                                            *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len108;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr108.cast_mut();
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len110;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result110;
                                                        }
                                                        V114::NullVal => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (6i32) as u8;
                                                        }
                                                        V114::GeoVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (7i32) as u8;
                                                            let super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                latitude: latitude111,
                                                                longitude: longitude111,
                                                            } = e;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<f64>() = _rt::as_f64(latitude111);
                                                            *base
                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<f64>() = _rt::as_f64(longitude111);
                                                        }
                                                        V114::DatetimeVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (8i32) as u8;
                                                            let vec112 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr112 = vec112.as_ptr().cast::<u8>();
                                                            let len112 = vec112.len();
                                                            ::core::mem::forget(vec112);
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len112;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr112.cast_mut();
                                                        }
                                                        V114::BlobVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (9i32) as u8;
                                                            let vec113 = (e).into_boxed_slice();
                                                            let ptr113 = vec113.as_ptr().cast::<u8>();
                                                            let len113 = vec113.len();
                                                            ::core::mem::forget(vec113);
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len113;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr113.cast_mut();
                                                        }
                                                    }
                                                }
                                            }
                                            *base
                                                .add(8 + 13 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len115;
                                            *base
                                                .add(8 + 12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result115;
                                        }
                                        None => {
                                            *base
                                                .add(8 + 11 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                            }
                            *ptr73
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len116;
                            *ptr73
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result116;
                        }
                        Err(e) => {
                            *ptr73.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::golem::vector::types::VectorError as V127;
                            match e {
                                V127::NotFound(e) => {
                                    *ptr73
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                    let vec117 = (e.into_bytes()).into_boxed_slice();
                                    let ptr117 = vec117.as_ptr().cast::<u8>();
                                    let len117 = vec117.len();
                                    ::core::mem::forget(vec117);
                                    *ptr73
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len117;
                                    *ptr73
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr117.cast_mut();
                                }
                                V127::AlreadyExists(e) => {
                                    *ptr73
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec118 = (e.into_bytes()).into_boxed_slice();
                                    let ptr118 = vec118.as_ptr().cast::<u8>();
                                    let len118 = vec118.len();
                                    ::core::mem::forget(vec118);
                                    *ptr73
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len118;
                                    *ptr73
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr118.cast_mut();
                                }
                                V127::InvalidParams(e) => {
                                    *ptr73
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                    let vec119 = (e.into_bytes()).into_boxed_slice();
                                    let ptr119 = vec119.as_ptr().cast::<u8>();
                                    let len119 = vec119.len();
                                    ::core::mem::forget(vec119);
                                    *ptr73
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len119;
                                    *ptr73
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr119.cast_mut();
                                }
                                V127::UnsupportedFeature(e) => {
                                    *ptr73
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                    let vec120 = (e.into_bytes()).into_boxed_slice();
                                    let ptr120 = vec120.as_ptr().cast::<u8>();
                                    let len120 = vec120.len();
                                    ::core::mem::forget(vec120);
                                    *ptr73
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len120;
                                    *ptr73
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr120.cast_mut();
                                }
                                V127::DimensionMismatch(e) => {
                                    *ptr73
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (4i32) as u8;
                                    let vec121 = (e.into_bytes()).into_boxed_slice();
                                    let ptr121 = vec121.as_ptr().cast::<u8>();
                                    let len121 = vec121.len();
                                    ::core::mem::forget(vec121);
                                    *ptr73
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len121;
                                    *ptr73
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr121.cast_mut();
                                }
                                V127::InvalidVector(e) => {
                                    *ptr73
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (5i32) as u8;
                                    let vec122 = (e.into_bytes()).into_boxed_slice();
                                    let ptr122 = vec122.as_ptr().cast::<u8>();
                                    let len122 = vec122.len();
                                    ::core::mem::forget(vec122);
                                    *ptr73
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len122;
                                    *ptr73
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr122.cast_mut();
                                }
                                V127::Unauthorized(e) => {
                                    *ptr73
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (6i32) as u8;
                                    let vec123 = (e.into_bytes()).into_boxed_slice();
                                    let ptr123 = vec123.as_ptr().cast::<u8>();
                                    let len123 = vec123.len();
                                    ::core::mem::forget(vec123);
                                    *ptr73
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len123;
                                    *ptr73
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr123.cast_mut();
                                }
                                V127::RateLimited(e) => {
                                    *ptr73
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (7i32) as u8;
                                    let vec124 = (e.into_bytes()).into_boxed_slice();
                                    let ptr124 = vec124.as_ptr().cast::<u8>();
                                    let len124 = vec124.len();
                                    ::core::mem::forget(vec124);
                                    *ptr73
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len124;
                                    *ptr73
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr124.cast_mut();
                                }
                                V127::ProviderError(e) => {
                                    *ptr73
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (8i32) as u8;
                                    let vec125 = (e.into_bytes()).into_boxed_slice();
                                    let ptr125 = vec125.as_ptr().cast::<u8>();
                                    let len125 = vec125.len();
                                    ::core::mem::forget(vec125);
                                    *ptr73
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len125;
                                    *ptr73
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr125.cast_mut();
                                }
                                V127::ConnectionError(e) => {
                                    *ptr73
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (9i32) as u8;
                                    let vec126 = (e.into_bytes()).into_boxed_slice();
                                    let ptr126 = vec126.as_ptr().cast::<u8>();
                                    let len126 = vec126.len();
                                    ::core::mem::forget(vec126);
                                    *ptr73
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len126;
                                    *ptr73
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr126.cast_mut();
                                }
                            }
                        }
                    };
                    ptr73
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_search_text<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let base77 = l1;
                            let len77 = l2;
                            for i in 0..len77 {
                                let base = base77
                                    .add(i * (8 + 14 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let l3 = *base.add(0).cast::<*mut u8>();
                                    let l4 = *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l3, l4, 1);
                                    let l5 = i32::from(
                                        *base
                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l5 {
                                        0 => {}
                                        _ => {
                                            let l6 = i32::from(
                                                *base
                                                    .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l6 {
                                                0 => {
                                                    let l7 = *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l8 = *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base9 = l7;
                                                    let len9 = l8;
                                                    _rt::cabi_dealloc(base9, len9 * 4, 4);
                                                }
                                                1 => {
                                                    let l10 = *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l11 = *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base12 = l10;
                                                    let len12 = l11;
                                                    _rt::cabi_dealloc(base12, len12 * 4, 4);
                                                    let l13 = *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l14 = *base
                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base15 = l13;
                                                    let len15 = l14;
                                                    _rt::cabi_dealloc(base15, len15 * 4, 4);
                                                }
                                                2 => {
                                                    let l16 = *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l17 = *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base18 = l16;
                                                    let len18 = l17;
                                                    _rt::cabi_dealloc(base18, len18 * 1, 1);
                                                }
                                                3 => {
                                                    let l19 = *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l20 = *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base21 = l19;
                                                    let len21 = l20;
                                                    _rt::cabi_dealloc(base21, len21 * 4, 4);
                                                }
                                                4 => {
                                                    let l22 = *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l23 = *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base29 = l22;
                                                    let len29 = l23;
                                                    for i in 0..len29 {
                                                        let base = base29
                                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l24 = *base.add(0).cast::<*mut u8>();
                                                            let l25 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l24, l25, 1);
                                                            let l26 = *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l27 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base28 = l26;
                                                            let len28 = l27;
                                                            _rt::cabi_dealloc(base28, len28 * 4, 4);
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base29,
                                                        len29 * (4 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                }
                                                _ => {
                                                    let l30 = *base
                                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l31 = *base
                                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base32 = l30;
                                                    let len32 = l31;
                                                    _rt::cabi_dealloc(base32, len32 * 4, 4);
                                                    let l33 = *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l34 = *base
                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base35 = l33;
                                                    let len35 = l34;
                                                    _rt::cabi_dealloc(base35, len35 * 4, 4);
                                                    let l36 = *base
                                                        .add(8 + 8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l37 = *base
                                                        .add(8 + 9 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base38 = l36;
                                                    let len38 = l37;
                                                    _rt::cabi_dealloc(base38, len38 * 4, 4);
                                                }
                                            }
                                        }
                                    }
                                    let l39 = i32::from(
                                        *base
                                            .add(8 + 11 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l39 {
                                        0 => {}
                                        _ => {
                                            let l40 = *base
                                                .add(8 + 12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l41 = *base
                                                .add(8 + 13 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base76 = l40;
                                            let len76 = l41;
                                            for i in 0..len76 {
                                                let base = base76
                                                    .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let l42 = *base.add(0).cast::<*mut u8>();
                                                    let l43 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l42, l43, 1);
                                                    let l44 = i32::from(
                                                        *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l44 {
                                                        0 => {
                                                            let l45 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l46 = *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l45, l46, 1);
                                                        }
                                                        1 => {}
                                                        2 => {}
                                                        3 => {}
                                                        4 => {
                                                            let l47 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l48 = *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base57 = l47;
                                                            let len57 = l48;
                                                            for i in 0..len57 {
                                                                let base = base57.add(i * 24);
                                                                {
                                                                    let l49 = i32::from(*base.add(0).cast::<u8>());
                                                                    match l49 {
                                                                        0 => {
                                                                            let l50 = *base.add(8).cast::<*mut u8>();
                                                                            let l51 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l50, l51, 1);
                                                                        }
                                                                        1 => {}
                                                                        2 => {}
                                                                        3 => {}
                                                                        4 => {}
                                                                        5 => {
                                                                            let l52 = *base.add(8).cast::<*mut u8>();
                                                                            let l53 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l52, l53, 1);
                                                                        }
                                                                        6 => {}
                                                                        _ => {
                                                                            let l54 = *base.add(8).cast::<*mut u8>();
                                                                            let l55 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base56 = l54;
                                                                            let len56 = l55;
                                                                            _rt::cabi_dealloc(base56, len56 * 1, 1);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(base57, len57 * 24, 8);
                                                        }
                                                        5 => {
                                                            let l58 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l59 = *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base70 = l58;
                                                            let len70 = l59;
                                                            for i in 0..len70 {
                                                                let base = base70
                                                                    .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l60 = *base.add(0).cast::<*mut u8>();
                                                                    let l61 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l60, l61, 1);
                                                                    let l62 = i32::from(
                                                                        *base
                                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l62 {
                                                                        0 => {
                                                                            let l63 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l64 = *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l63, l64, 1);
                                                                        }
                                                                        1 => {}
                                                                        2 => {}
                                                                        3 => {}
                                                                        4 => {}
                                                                        5 => {
                                                                            let l65 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l66 = *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l65, l66, 1);
                                                                        }
                                                                        6 => {}
                                                                        _ => {
                                                                            let l67 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l68 = *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base69 = l67;
                                                                            let len69 = l68;
                                                                            _rt::cabi_dealloc(base69, len69 * 1, 1);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base70,
                                                                len70 * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                        }
                                                        6 => {}
                                                        7 => {}
                                                        8 => {
                                                            let l71 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l72 = *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l71, l72, 1);
                                                        }
                                                        _ => {
                                                            let l73 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l74 = *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base75 = l73;
                                                            let len75 = l74;
                                                            _rt::cabi_dealloc(base75, len75 * 1, 1);
                                                        }
                                                    }
                                                }
                                            }
                                            _rt::cabi_dealloc(
                                                base76,
                                                len76 * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                8,
                                            );
                                        }
                                    }
                                }
                            }
                            _rt::cabi_dealloc(
                                base77,
                                len77 * (8 + 14 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                        }
                        _ => {
                            let l78 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l78 {
                                0 => {
                                    let l79 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l80 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l79, l80, 1);
                                }
                                1 => {
                                    let l81 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l82 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l81, l82, 1);
                                }
                                2 => {
                                    let l83 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l84 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l83, l84, 1);
                                }
                                3 => {
                                    let l85 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l86 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l85, l86, 1);
                                }
                                4 => {
                                    let l87 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l88 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l87, l88, 1);
                                }
                                5 => {
                                    let l89 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l90 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l89, l90, 1);
                                }
                                6 => {
                                    let l91 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l92 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l91, l92, 1);
                                }
                                7 => {
                                    let l93 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l94 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l93, l94, 1);
                                }
                                8 => {
                                    let l95 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l96 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l95, l96, 1);
                                }
                                _ => {
                                    let l97 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l98 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l97, l98, 1);
                                }
                            }
                        }
                    }
                }
                pub trait Guest {
                    /// Recommendation-based search
                    fn recommend_vectors(
                        collection: _rt::String,
                        positive: _rt::Vec<RecommendationExample>,
                        negative: Option<_rt::Vec<RecommendationExample>>,
                        limit: u32,
                        filter: Option<FilterExpression>,
                        namespace: Option<_rt::String>,
                        strategy: Option<RecommendationStrategy>,
                        include_vectors: Option<bool>,
                        include_metadata: Option<bool>,
                    ) -> Result<_rt::Vec<SearchResult>, VectorError>;
                    /// Discovery/context-based search
                    fn discover_vectors(
                        collection: _rt::String,
                        context_pairs: _rt::Vec<ContextPair>,
                        limit: u32,
                        filter: Option<FilterExpression>,
                        namespace: Option<_rt::String>,
                        include_vectors: Option<bool>,
                        include_metadata: Option<bool>,
                    ) -> Result<_rt::Vec<SearchResult>, VectorError>;
                    /// Grouped search for diverse results
                    fn search_groups(
                        collection: _rt::String,
                        query: SearchQuery,
                        group_by: _rt::String,
                        group_size: u32,
                        max_groups: u32,
                        filter: Option<FilterExpression>,
                        namespace: Option<_rt::String>,
                        include_vectors: Option<bool>,
                        include_metadata: Option<bool>,
                    ) -> Result<_rt::Vec<GroupedSearchResult>, VectorError>;
                    /// Range search within distance bounds
                    fn search_range(
                        collection: _rt::String,
                        vector: VectorData,
                        min_distance: Option<f32>,
                        max_distance: f32,
                        filter: Option<FilterExpression>,
                        namespace: Option<_rt::String>,
                        limit: Option<u32>,
                        include_vectors: Option<bool>,
                        include_metadata: Option<bool>,
                    ) -> Result<_rt::Vec<SearchResult>, VectorError>;
                    /// Text/document search (auto-embedding)
                    fn search_text(
                        collection: _rt::String,
                        query_text: _rt::String,
                        limit: u32,
                        filter: Option<FilterExpression>,
                        namespace: Option<_rt::String>,
                    ) -> Result<_rt::Vec<SearchResult>, VectorError>;
                }
                #[doc(hidden)]
                macro_rules! __export_golem_vector_search_extended_1_0_0_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "golem:vector/search-extended@1.0.0#recommend-vectors")] unsafe
                        extern "C" fn export_recommend_vectors(arg0 : * mut u8,) -> * mut
                        u8 { unsafe { $($path_to_types)*::
                        _export_recommend_vectors_cabi::<$ty > (arg0) } } #[unsafe
                        (export_name =
                        "cabi_post_golem:vector/search-extended@1.0.0#recommend-vectors")]
                        unsafe extern "C" fn _post_return_recommend_vectors(arg0 : * mut
                        u8,) { unsafe { $($path_to_types)*::
                        __post_return_recommend_vectors::<$ty > (arg0) } } #[unsafe
                        (export_name =
                        "golem:vector/search-extended@1.0.0#discover-vectors")] unsafe
                        extern "C" fn export_discover_vectors(arg0 : * mut u8, arg1 :
                        usize, arg2 : * mut u8, arg3 : usize, arg4 : i32, arg5 : i32,
                        arg6 : * mut u8, arg7 : usize, arg8 : i32, arg9 : i32, arg10 : *
                        mut u8, arg11 : usize, arg12 : i32, arg13 : i32, arg14 : i32,
                        arg15 : i32,) -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_discover_vectors_cabi::<$ty > (arg0, arg1, arg2, arg3,
                        arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13,
                        arg14, arg15) } } #[unsafe (export_name =
                        "cabi_post_golem:vector/search-extended@1.0.0#discover-vectors")]
                        unsafe extern "C" fn _post_return_discover_vectors(arg0 : * mut
                        u8,) { unsafe { $($path_to_types)*::
                        __post_return_discover_vectors::<$ty > (arg0) } } #[unsafe
                        (export_name =
                        "golem:vector/search-extended@1.0.0#search-groups")] unsafe
                        extern "C" fn export_search_groups(arg0 : * mut u8,) -> * mut u8
                        { unsafe { $($path_to_types)*:: _export_search_groups_cabi::<$ty
                        > (arg0) } } #[unsafe (export_name =
                        "cabi_post_golem:vector/search-extended@1.0.0#search-groups")]
                        unsafe extern "C" fn _post_return_search_groups(arg0 : * mut u8,)
                        { unsafe { $($path_to_types)*:: __post_return_search_groups::<$ty
                        > (arg0) } } #[unsafe (export_name =
                        "golem:vector/search-extended@1.0.0#search-range")] unsafe extern
                        "C" fn export_search_range(arg0 : * mut u8,) -> * mut u8 { unsafe
                        { $($path_to_types)*:: _export_search_range_cabi::<$ty > (arg0) }
                        } #[unsafe (export_name =
                        "cabi_post_golem:vector/search-extended@1.0.0#search-range")]
                        unsafe extern "C" fn _post_return_search_range(arg0 : * mut u8,)
                        { unsafe { $($path_to_types)*:: __post_return_search_range::<$ty
                        > (arg0) } } #[unsafe (export_name =
                        "golem:vector/search-extended@1.0.0#search-text")] unsafe extern
                        "C" fn export_search_text(arg0 : * mut u8, arg1 : usize, arg2 : *
                        mut u8, arg3 : usize, arg4 : i32, arg5 : i32, arg6 : * mut u8,
                        arg7 : usize, arg8 : i32, arg9 : i32, arg10 : * mut u8, arg11 :
                        usize,) -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_search_text_cabi::<$ty > (arg0, arg1, arg2, arg3, arg4,
                        arg5, arg6, arg7, arg8, arg9, arg10, arg11) } } #[unsafe
                        (export_name =
                        "cabi_post_golem:vector/search-extended@1.0.0#search-text")]
                        unsafe extern "C" fn _post_return_search_text(arg0 : * mut u8,) {
                        unsafe { $($path_to_types)*:: __post_return_search_text::<$ty >
                        (arg0) } } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_golem_vector_search_extended_1_0_0_cabi;
                #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<
                        u8,
                    >; 4 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 4
                        * ::core::mem::size_of::<*const u8>()],
                );
            }
            /// Analytics and statistics
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod analytics {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type VectorError = super::super::super::super::golem::vector::types::VectorError;
                pub type FlatMetadataValue = super::super::super::super::golem::vector::types::FlatMetadataValue;
                pub type FilterExpression = super::super::super::super::golem::vector::types::FilterExpression;
                #[repr(C)]
                #[derive(Clone, Copy)]
                pub struct NamespaceStats {
                    pub vector_count: u64,
                    pub size_bytes: u64,
                }
                impl ::core::fmt::Debug for NamespaceStats {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("NamespaceStats")
                            .field("vector-count", &self.vector_count)
                            .field("size-bytes", &self.size_bytes)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub struct DistanceStats {
                    pub min_distance: f32,
                    pub max_distance: f32,
                    pub avg_distance: f32,
                    pub percentiles: _rt::Vec<(f32, f32)>,
                }
                impl ::core::fmt::Debug for DistanceStats {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("DistanceStats")
                            .field("min-distance", &self.min_distance)
                            .field("max-distance", &self.max_distance)
                            .field("avg-distance", &self.avg_distance)
                            .field("percentiles", &self.percentiles)
                            .finish()
                    }
                }
                /// Collection statistics
                #[derive(Clone)]
                pub struct CollectionStats {
                    pub vector_count: u64,
                    pub dimension: u32,
                    pub size_bytes: u64,
                    pub index_size_bytes: Option<u64>,
                    pub namespace_stats: _rt::Vec<(_rt::String, NamespaceStats)>,
                    pub distance_distribution: Option<DistanceStats>,
                }
                impl ::core::fmt::Debug for CollectionStats {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("CollectionStats")
                            .field("vector-count", &self.vector_count)
                            .field("dimension", &self.dimension)
                            .field("size-bytes", &self.size_bytes)
                            .field("index-size-bytes", &self.index_size_bytes)
                            .field("namespace-stats", &self.namespace_stats)
                            .field("distance-distribution", &self.distance_distribution)
                            .finish()
                    }
                }
                /// Field statistics for metadata
                #[derive(Clone)]
                pub struct FieldStats {
                    pub field_name: _rt::String,
                    pub value_count: u64,
                    pub unique_values: u64,
                    pub null_count: u64,
                    pub data_type: _rt::String,
                    pub sample_values: _rt::Vec<FlatMetadataValue>,
                }
                impl ::core::fmt::Debug for FieldStats {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("FieldStats")
                            .field("field-name", &self.field_name)
                            .field("value-count", &self.value_count)
                            .field("unique-values", &self.unique_values)
                            .field("null-count", &self.null_count)
                            .field("data-type", &self.data_type)
                            .field("sample-values", &self.sample_values)
                            .finish()
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_get_collection_stats_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: i32,
                    arg3: *mut u8,
                    arg4: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let result2 = T::get_collection_stats(
                        _rt::string_lift(bytes0),
                        match arg2 {
                            0 => None,
                            1 => {
                                let e = {
                                    let len1 = arg4;
                                    let bytes1 = _rt::Vec::from_raw_parts(
                                        arg3.cast(),
                                        len1,
                                        len1,
                                    );
                                    _rt::string_lift(bytes1)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    );
                    let ptr3 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result2 {
                        Ok(e) => {
                            *ptr3.add(0).cast::<u8>() = (0i32) as u8;
                            let CollectionStats {
                                vector_count: vector_count4,
                                dimension: dimension4,
                                size_bytes: size_bytes4,
                                index_size_bytes: index_size_bytes4,
                                namespace_stats: namespace_stats4,
                                distance_distribution: distance_distribution4,
                            } = e;
                            *ptr3.add(8).cast::<i64>() = _rt::as_i64(vector_count4);
                            *ptr3.add(16).cast::<i32>() = _rt::as_i32(dimension4);
                            *ptr3.add(24).cast::<i64>() = _rt::as_i64(size_bytes4);
                            match index_size_bytes4 {
                                Some(e) => {
                                    *ptr3.add(32).cast::<u8>() = (1i32) as u8;
                                    *ptr3.add(40).cast::<i64>() = _rt::as_i64(e);
                                }
                                None => {
                                    *ptr3.add(32).cast::<u8>() = (0i32) as u8;
                                }
                            };
                            let vec8 = namespace_stats4;
                            let len8 = vec8.len();
                            let layout8 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec8.len() * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                8,
                            );
                            let result8 = if layout8.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout8).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout8);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec8.into_iter().enumerate() {
                                let base = result8
                                    .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let (t5_0, t5_1) = e;
                                    let vec6 = (t5_0.into_bytes()).into_boxed_slice();
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    ::core::mem::forget(vec6);
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len6;
                                    *base.add(0).cast::<*mut u8>() = ptr6.cast_mut();
                                    let NamespaceStats {
                                        vector_count: vector_count7,
                                        size_bytes: size_bytes7,
                                    } = t5_1;
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i64>() = _rt::as_i64(vector_count7);
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i64>() = _rt::as_i64(size_bytes7);
                                }
                            }
                            *ptr3
                                .add(48 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len8;
                            *ptr3.add(48).cast::<*mut u8>() = result8;
                            match distance_distribution4 {
                                Some(e) => {
                                    *ptr3
                                        .add(48 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let DistanceStats {
                                        min_distance: min_distance9,
                                        max_distance: max_distance9,
                                        avg_distance: avg_distance9,
                                        percentiles: percentiles9,
                                    } = e;
                                    *ptr3
                                        .add(48 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<f32>() = _rt::as_f32(min_distance9);
                                    *ptr3
                                        .add(52 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<f32>() = _rt::as_f32(max_distance9);
                                    *ptr3
                                        .add(56 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<f32>() = _rt::as_f32(avg_distance9);
                                    let vec11 = percentiles9;
                                    let len11 = vec11.len();
                                    let layout11 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec11.len() * 8,
                                        4,
                                    );
                                    let result11 = if layout11.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout11).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout11);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec11.into_iter().enumerate() {
                                        let base = result11.add(i * 8);
                                        {
                                            let (t10_0, t10_1) = e;
                                            *base.add(0).cast::<f32>() = _rt::as_f32(t10_0);
                                            *base.add(4).cast::<f32>() = _rt::as_f32(t10_1);
                                        }
                                    }
                                    *ptr3
                                        .add(56 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len11;
                                    *ptr3
                                        .add(56 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result11;
                                }
                                None => {
                                    *ptr3
                                        .add(48 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        Err(e) => {
                            *ptr3.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::golem::vector::types::VectorError as V22;
                            match e {
                                V22::NotFound(e) => {
                                    *ptr3.add(8).cast::<u8>() = (0i32) as u8;
                                    let vec12 = (e.into_bytes()).into_boxed_slice();
                                    let ptr12 = vec12.as_ptr().cast::<u8>();
                                    let len12 = vec12.len();
                                    ::core::mem::forget(vec12);
                                    *ptr3
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len12;
                                    *ptr3
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr12.cast_mut();
                                }
                                V22::AlreadyExists(e) => {
                                    *ptr3.add(8).cast::<u8>() = (1i32) as u8;
                                    let vec13 = (e.into_bytes()).into_boxed_slice();
                                    let ptr13 = vec13.as_ptr().cast::<u8>();
                                    let len13 = vec13.len();
                                    ::core::mem::forget(vec13);
                                    *ptr3
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len13;
                                    *ptr3
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr13.cast_mut();
                                }
                                V22::InvalidParams(e) => {
                                    *ptr3.add(8).cast::<u8>() = (2i32) as u8;
                                    let vec14 = (e.into_bytes()).into_boxed_slice();
                                    let ptr14 = vec14.as_ptr().cast::<u8>();
                                    let len14 = vec14.len();
                                    ::core::mem::forget(vec14);
                                    *ptr3
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len14;
                                    *ptr3
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr14.cast_mut();
                                }
                                V22::UnsupportedFeature(e) => {
                                    *ptr3.add(8).cast::<u8>() = (3i32) as u8;
                                    let vec15 = (e.into_bytes()).into_boxed_slice();
                                    let ptr15 = vec15.as_ptr().cast::<u8>();
                                    let len15 = vec15.len();
                                    ::core::mem::forget(vec15);
                                    *ptr3
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len15;
                                    *ptr3
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr15.cast_mut();
                                }
                                V22::DimensionMismatch(e) => {
                                    *ptr3.add(8).cast::<u8>() = (4i32) as u8;
                                    let vec16 = (e.into_bytes()).into_boxed_slice();
                                    let ptr16 = vec16.as_ptr().cast::<u8>();
                                    let len16 = vec16.len();
                                    ::core::mem::forget(vec16);
                                    *ptr3
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len16;
                                    *ptr3
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr16.cast_mut();
                                }
                                V22::InvalidVector(e) => {
                                    *ptr3.add(8).cast::<u8>() = (5i32) as u8;
                                    let vec17 = (e.into_bytes()).into_boxed_slice();
                                    let ptr17 = vec17.as_ptr().cast::<u8>();
                                    let len17 = vec17.len();
                                    ::core::mem::forget(vec17);
                                    *ptr3
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len17;
                                    *ptr3
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr17.cast_mut();
                                }
                                V22::Unauthorized(e) => {
                                    *ptr3.add(8).cast::<u8>() = (6i32) as u8;
                                    let vec18 = (e.into_bytes()).into_boxed_slice();
                                    let ptr18 = vec18.as_ptr().cast::<u8>();
                                    let len18 = vec18.len();
                                    ::core::mem::forget(vec18);
                                    *ptr3
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len18;
                                    *ptr3
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr18.cast_mut();
                                }
                                V22::RateLimited(e) => {
                                    *ptr3.add(8).cast::<u8>() = (7i32) as u8;
                                    let vec19 = (e.into_bytes()).into_boxed_slice();
                                    let ptr19 = vec19.as_ptr().cast::<u8>();
                                    let len19 = vec19.len();
                                    ::core::mem::forget(vec19);
                                    *ptr3
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len19;
                                    *ptr3
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr19.cast_mut();
                                }
                                V22::ProviderError(e) => {
                                    *ptr3.add(8).cast::<u8>() = (8i32) as u8;
                                    let vec20 = (e.into_bytes()).into_boxed_slice();
                                    let ptr20 = vec20.as_ptr().cast::<u8>();
                                    let len20 = vec20.len();
                                    ::core::mem::forget(vec20);
                                    *ptr3
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len20;
                                    *ptr3
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr20.cast_mut();
                                }
                                V22::ConnectionError(e) => {
                                    *ptr3.add(8).cast::<u8>() = (9i32) as u8;
                                    let vec21 = (e.into_bytes()).into_boxed_slice();
                                    let ptr21 = vec21.as_ptr().cast::<u8>();
                                    let len21 = vec21.len();
                                    ::core::mem::forget(vec21);
                                    *ptr3
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len21;
                                    *ptr3
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr21.cast_mut();
                                }
                            }
                        }
                    };
                    ptr3
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_get_collection_stats<T: Guest>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(48).cast::<*mut u8>();
                            let l2 = *arg0
                                .add(48 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let base5 = l1;
                            let len5 = l2;
                            for i in 0..len5 {
                                let base = base5
                                    .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let l3 = *base.add(0).cast::<*mut u8>();
                                    let l4 = *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l3, l4, 1);
                                }
                            }
                            _rt::cabi_dealloc(
                                base5,
                                len5 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                8,
                            );
                            let l6 = i32::from(
                                *arg0
                                    .add(48 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l6 {
                                0 => {}
                                _ => {
                                    let l7 = *arg0
                                        .add(56 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l8 = *arg0
                                        .add(56 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base9 = l7;
                                    let len9 = l8;
                                    _rt::cabi_dealloc(base9, len9 * 8, 4);
                                }
                            }
                        }
                        _ => {
                            let l10 = i32::from(*arg0.add(8).cast::<u8>());
                            match l10 {
                                0 => {
                                    let l11 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l12 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l11, l12, 1);
                                }
                                1 => {
                                    let l13 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l14 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l13, l14, 1);
                                }
                                2 => {
                                    let l15 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l16 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l15, l16, 1);
                                }
                                3 => {
                                    let l17 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l18 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l17, l18, 1);
                                }
                                4 => {
                                    let l19 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l20 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l19, l20, 1);
                                }
                                5 => {
                                    let l21 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l22 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l21, l22, 1);
                                }
                                6 => {
                                    let l23 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l24 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l23, l24, 1);
                                }
                                7 => {
                                    let l25 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l26 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l25, l26, 1);
                                }
                                8 => {
                                    let l27 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l28 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l27, l28, 1);
                                }
                                _ => {
                                    let l29 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l30 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l29, l30, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_get_field_stats_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                    arg4: i32,
                    arg5: *mut u8,
                    arg6: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let len1 = arg3;
                    let bytes1 = _rt::Vec::from_raw_parts(arg2.cast(), len1, len1);
                    let result3 = T::get_field_stats(
                        _rt::string_lift(bytes0),
                        _rt::string_lift(bytes1),
                        match arg4 {
                            0 => None,
                            1 => {
                                let e = {
                                    let len2 = arg6;
                                    let bytes2 = _rt::Vec::from_raw_parts(
                                        arg5.cast(),
                                        len2,
                                        len2,
                                    );
                                    _rt::string_lift(bytes2)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    );
                    let ptr4 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result3 {
                        Ok(e) => {
                            *ptr4.add(0).cast::<u8>() = (0i32) as u8;
                            let FieldStats {
                                field_name: field_name5,
                                value_count: value_count5,
                                unique_values: unique_values5,
                                null_count: null_count5,
                                data_type: data_type5,
                                sample_values: sample_values5,
                            } = e;
                            let vec6 = (field_name5.into_bytes()).into_boxed_slice();
                            let ptr6 = vec6.as_ptr().cast::<u8>();
                            let len6 = vec6.len();
                            ::core::mem::forget(vec6);
                            *ptr4
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len6;
                            *ptr4.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                            *ptr4
                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<i64>() = _rt::as_i64(value_count5);
                            *ptr4
                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<i64>() = _rt::as_i64(unique_values5);
                            *ptr4
                                .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<i64>() = _rt::as_i64(null_count5);
                            let vec7 = (data_type5.into_bytes()).into_boxed_slice();
                            let ptr7 = vec7.as_ptr().cast::<u8>();
                            let len7 = vec7.len();
                            ::core::mem::forget(vec7);
                            *ptr4
                                .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len7;
                            *ptr4
                                .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr7.cast_mut();
                            let vec27 = sample_values5;
                            let len27 = vec27.len();
                            let layout27 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec27.len() * 24,
                                8,
                            );
                            let result27 = if layout27.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout27).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout27);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec27.into_iter().enumerate() {
                                let base = result27.add(i * 24);
                                {
                                    use super::super::super::super::golem::vector::types::FlatMetadataValue as V26;
                                    match e {
                                        V26::StringVal(e) => {
                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                            let vec8 = (e.into_bytes()).into_boxed_slice();
                                            let ptr8 = vec8.as_ptr().cast::<u8>();
                                            let len8 = vec8.len();
                                            ::core::mem::forget(vec8);
                                            *base
                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len8;
                                            *base.add(8).cast::<*mut u8>() = ptr8.cast_mut();
                                        }
                                        V26::NumberVal(e) => {
                                            *base.add(0).cast::<u8>() = (1i32) as u8;
                                            *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                        }
                                        V26::IntegerVal(e) => {
                                            *base.add(0).cast::<u8>() = (2i32) as u8;
                                            *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                        }
                                        V26::BooleanVal(e) => {
                                            *base.add(0).cast::<u8>() = (3i32) as u8;
                                            *base.add(8).cast::<u8>() = (match e {
                                                true => 1,
                                                false => 0,
                                            }) as u8;
                                        }
                                        V26::ArrayVal(e) => {
                                            *base.add(0).cast::<u8>() = (4i32) as u8;
                                            let vec14 = e;
                                            let len14 = vec14.len();
                                            let layout14 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec14.len() * 24,
                                                8,
                                            );
                                            let result14 = if layout14.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout14).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout14);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec14.into_iter().enumerate() {
                                                let base = result14.add(i * 24);
                                                {
                                                    use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V13;
                                                    match e {
                                                        V13::StringVal(e) => {
                                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                                            let vec9 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr9 = vec9.as_ptr().cast::<u8>();
                                                            let len9 = vec9.len();
                                                            ::core::mem::forget(vec9);
                                                            *base
                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len9;
                                                            *base.add(8).cast::<*mut u8>() = ptr9.cast_mut();
                                                        }
                                                        V13::NumberVal(e) => {
                                                            *base.add(0).cast::<u8>() = (1i32) as u8;
                                                            *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                                        }
                                                        V13::IntegerVal(e) => {
                                                            *base.add(0).cast::<u8>() = (2i32) as u8;
                                                            *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                        }
                                                        V13::BooleanVal(e) => {
                                                            *base.add(0).cast::<u8>() = (3i32) as u8;
                                                            *base.add(8).cast::<u8>() = (match e {
                                                                true => 1,
                                                                false => 0,
                                                            }) as u8;
                                                        }
                                                        V13::NullVal => {
                                                            *base.add(0).cast::<u8>() = (4i32) as u8;
                                                        }
                                                        V13::DatetimeVal(e) => {
                                                            *base.add(0).cast::<u8>() = (5i32) as u8;
                                                            let vec10 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr10 = vec10.as_ptr().cast::<u8>();
                                                            let len10 = vec10.len();
                                                            ::core::mem::forget(vec10);
                                                            *base
                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len10;
                                                            *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                                        }
                                                        V13::GeoVal(e) => {
                                                            *base.add(0).cast::<u8>() = (6i32) as u8;
                                                            let super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                latitude: latitude11,
                                                                longitude: longitude11,
                                                            } = e;
                                                            *base.add(8).cast::<f64>() = _rt::as_f64(latitude11);
                                                            *base.add(16).cast::<f64>() = _rt::as_f64(longitude11);
                                                        }
                                                        V13::BlobVal(e) => {
                                                            *base.add(0).cast::<u8>() = (7i32) as u8;
                                                            let vec12 = (e).into_boxed_slice();
                                                            let ptr12 = vec12.as_ptr().cast::<u8>();
                                                            let len12 = vec12.len();
                                                            ::core::mem::forget(vec12);
                                                            *base
                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len12;
                                                            *base.add(8).cast::<*mut u8>() = ptr12.cast_mut();
                                                        }
                                                    }
                                                }
                                            }
                                            *base
                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len14;
                                            *base.add(8).cast::<*mut u8>() = result14;
                                        }
                                        V26::ObjectVal(e) => {
                                            *base.add(0).cast::<u8>() = (5i32) as u8;
                                            let vec22 = e;
                                            let len22 = vec22.len();
                                            let layout22 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec22.len()
                                                    * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                8,
                                            );
                                            let result22 = if layout22.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout22).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout22);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec22.into_iter().enumerate() {
                                                let base = result22
                                                    .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let (t15_0, t15_1) = e;
                                                    let vec16 = (t15_0.into_bytes()).into_boxed_slice();
                                                    let ptr16 = vec16.as_ptr().cast::<u8>();
                                                    let len16 = vec16.len();
                                                    ::core::mem::forget(vec16);
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len16;
                                                    *base.add(0).cast::<*mut u8>() = ptr16.cast_mut();
                                                    use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V21;
                                                    match t15_1 {
                                                        V21::StringVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                            let vec17 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr17 = vec17.as_ptr().cast::<u8>();
                                                            let len17 = vec17.len();
                                                            ::core::mem::forget(vec17);
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len17;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr17.cast_mut();
                                                        }
                                                        V21::NumberVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<f64>() = _rt::as_f64(e);
                                                        }
                                                        V21::IntegerVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (2i32) as u8;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<i64>() = _rt::as_i64(e);
                                                        }
                                                        V21::BooleanVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (3i32) as u8;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (match e {
                                                                true => 1,
                                                                false => 0,
                                                            }) as u8;
                                                        }
                                                        V21::NullVal => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (4i32) as u8;
                                                        }
                                                        V21::DatetimeVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (5i32) as u8;
                                                            let vec18 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr18 = vec18.as_ptr().cast::<u8>();
                                                            let len18 = vec18.len();
                                                            ::core::mem::forget(vec18);
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len18;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr18.cast_mut();
                                                        }
                                                        V21::GeoVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (6i32) as u8;
                                                            let super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                latitude: latitude19,
                                                                longitude: longitude19,
                                                            } = e;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<f64>() = _rt::as_f64(latitude19);
                                                            *base
                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<f64>() = _rt::as_f64(longitude19);
                                                        }
                                                        V21::BlobVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (7i32) as u8;
                                                            let vec20 = (e).into_boxed_slice();
                                                            let ptr20 = vec20.as_ptr().cast::<u8>();
                                                            let len20 = vec20.len();
                                                            ::core::mem::forget(vec20);
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len20;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr20.cast_mut();
                                                        }
                                                    }
                                                }
                                            }
                                            *base
                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len22;
                                            *base.add(8).cast::<*mut u8>() = result22;
                                        }
                                        V26::NullVal => {
                                            *base.add(0).cast::<u8>() = (6i32) as u8;
                                        }
                                        V26::GeoVal(e) => {
                                            *base.add(0).cast::<u8>() = (7i32) as u8;
                                            let super::super::super::super::golem::vector::types::GeoCoordinates {
                                                latitude: latitude23,
                                                longitude: longitude23,
                                            } = e;
                                            *base.add(8).cast::<f64>() = _rt::as_f64(latitude23);
                                            *base.add(16).cast::<f64>() = _rt::as_f64(longitude23);
                                        }
                                        V26::DatetimeVal(e) => {
                                            *base.add(0).cast::<u8>() = (8i32) as u8;
                                            let vec24 = (e.into_bytes()).into_boxed_slice();
                                            let ptr24 = vec24.as_ptr().cast::<u8>();
                                            let len24 = vec24.len();
                                            ::core::mem::forget(vec24);
                                            *base
                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len24;
                                            *base.add(8).cast::<*mut u8>() = ptr24.cast_mut();
                                        }
                                        V26::BlobVal(e) => {
                                            *base.add(0).cast::<u8>() = (9i32) as u8;
                                            let vec25 = (e).into_boxed_slice();
                                            let ptr25 = vec25.as_ptr().cast::<u8>();
                                            let len25 = vec25.len();
                                            ::core::mem::forget(vec25);
                                            *base
                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len25;
                                            *base.add(8).cast::<*mut u8>() = ptr25.cast_mut();
                                        }
                                    }
                                }
                            }
                            *ptr4
                                .add(32 + 5 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len27;
                            *ptr4
                                .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result27;
                        }
                        Err(e) => {
                            *ptr4.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::golem::vector::types::VectorError as V38;
                            match e {
                                V38::NotFound(e) => {
                                    *ptr4.add(8).cast::<u8>() = (0i32) as u8;
                                    let vec28 = (e.into_bytes()).into_boxed_slice();
                                    let ptr28 = vec28.as_ptr().cast::<u8>();
                                    let len28 = vec28.len();
                                    ::core::mem::forget(vec28);
                                    *ptr4
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len28;
                                    *ptr4
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr28.cast_mut();
                                }
                                V38::AlreadyExists(e) => {
                                    *ptr4.add(8).cast::<u8>() = (1i32) as u8;
                                    let vec29 = (e.into_bytes()).into_boxed_slice();
                                    let ptr29 = vec29.as_ptr().cast::<u8>();
                                    let len29 = vec29.len();
                                    ::core::mem::forget(vec29);
                                    *ptr4
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len29;
                                    *ptr4
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr29.cast_mut();
                                }
                                V38::InvalidParams(e) => {
                                    *ptr4.add(8).cast::<u8>() = (2i32) as u8;
                                    let vec30 = (e.into_bytes()).into_boxed_slice();
                                    let ptr30 = vec30.as_ptr().cast::<u8>();
                                    let len30 = vec30.len();
                                    ::core::mem::forget(vec30);
                                    *ptr4
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len30;
                                    *ptr4
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr30.cast_mut();
                                }
                                V38::UnsupportedFeature(e) => {
                                    *ptr4.add(8).cast::<u8>() = (3i32) as u8;
                                    let vec31 = (e.into_bytes()).into_boxed_slice();
                                    let ptr31 = vec31.as_ptr().cast::<u8>();
                                    let len31 = vec31.len();
                                    ::core::mem::forget(vec31);
                                    *ptr4
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len31;
                                    *ptr4
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr31.cast_mut();
                                }
                                V38::DimensionMismatch(e) => {
                                    *ptr4.add(8).cast::<u8>() = (4i32) as u8;
                                    let vec32 = (e.into_bytes()).into_boxed_slice();
                                    let ptr32 = vec32.as_ptr().cast::<u8>();
                                    let len32 = vec32.len();
                                    ::core::mem::forget(vec32);
                                    *ptr4
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len32;
                                    *ptr4
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr32.cast_mut();
                                }
                                V38::InvalidVector(e) => {
                                    *ptr4.add(8).cast::<u8>() = (5i32) as u8;
                                    let vec33 = (e.into_bytes()).into_boxed_slice();
                                    let ptr33 = vec33.as_ptr().cast::<u8>();
                                    let len33 = vec33.len();
                                    ::core::mem::forget(vec33);
                                    *ptr4
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len33;
                                    *ptr4
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr33.cast_mut();
                                }
                                V38::Unauthorized(e) => {
                                    *ptr4.add(8).cast::<u8>() = (6i32) as u8;
                                    let vec34 = (e.into_bytes()).into_boxed_slice();
                                    let ptr34 = vec34.as_ptr().cast::<u8>();
                                    let len34 = vec34.len();
                                    ::core::mem::forget(vec34);
                                    *ptr4
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len34;
                                    *ptr4
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr34.cast_mut();
                                }
                                V38::RateLimited(e) => {
                                    *ptr4.add(8).cast::<u8>() = (7i32) as u8;
                                    let vec35 = (e.into_bytes()).into_boxed_slice();
                                    let ptr35 = vec35.as_ptr().cast::<u8>();
                                    let len35 = vec35.len();
                                    ::core::mem::forget(vec35);
                                    *ptr4
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len35;
                                    *ptr4
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr35.cast_mut();
                                }
                                V38::ProviderError(e) => {
                                    *ptr4.add(8).cast::<u8>() = (8i32) as u8;
                                    let vec36 = (e.into_bytes()).into_boxed_slice();
                                    let ptr36 = vec36.as_ptr().cast::<u8>();
                                    let len36 = vec36.len();
                                    ::core::mem::forget(vec36);
                                    *ptr4
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len36;
                                    *ptr4
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr36.cast_mut();
                                }
                                V38::ConnectionError(e) => {
                                    *ptr4.add(8).cast::<u8>() = (9i32) as u8;
                                    let vec37 = (e.into_bytes()).into_boxed_slice();
                                    let ptr37 = vec37.as_ptr().cast::<u8>();
                                    let len37 = vec37.len();
                                    ::core::mem::forget(vec37);
                                    *ptr4
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len37;
                                    *ptr4
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr37.cast_mut();
                                }
                            }
                        }
                    };
                    ptr4
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_get_field_stats<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(8).cast::<*mut u8>();
                            let l2 = *arg0
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                            let l3 = *arg0
                                .add(32 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l4 = *arg0
                                .add(32 + 3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l3, l4, 1);
                            let l5 = *arg0
                                .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l6 = *arg0
                                .add(32 + 5 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let base39 = l5;
                            let len39 = l6;
                            for i in 0..len39 {
                                let base = base39.add(i * 24);
                                {
                                    let l7 = i32::from(*base.add(0).cast::<u8>());
                                    match l7 {
                                        0 => {
                                            let l8 = *base.add(8).cast::<*mut u8>();
                                            let l9 = *base
                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l8, l9, 1);
                                        }
                                        1 => {}
                                        2 => {}
                                        3 => {}
                                        4 => {
                                            let l10 = *base.add(8).cast::<*mut u8>();
                                            let l11 = *base
                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base20 = l10;
                                            let len20 = l11;
                                            for i in 0..len20 {
                                                let base = base20.add(i * 24);
                                                {
                                                    let l12 = i32::from(*base.add(0).cast::<u8>());
                                                    match l12 {
                                                        0 => {
                                                            let l13 = *base.add(8).cast::<*mut u8>();
                                                            let l14 = *base
                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l13, l14, 1);
                                                        }
                                                        1 => {}
                                                        2 => {}
                                                        3 => {}
                                                        4 => {}
                                                        5 => {
                                                            let l15 = *base.add(8).cast::<*mut u8>();
                                                            let l16 = *base
                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l15, l16, 1);
                                                        }
                                                        6 => {}
                                                        _ => {
                                                            let l17 = *base.add(8).cast::<*mut u8>();
                                                            let l18 = *base
                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base19 = l17;
                                                            let len19 = l18;
                                                            _rt::cabi_dealloc(base19, len19 * 1, 1);
                                                        }
                                                    }
                                                }
                                            }
                                            _rt::cabi_dealloc(base20, len20 * 24, 8);
                                        }
                                        5 => {
                                            let l21 = *base.add(8).cast::<*mut u8>();
                                            let l22 = *base
                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base33 = l21;
                                            let len33 = l22;
                                            for i in 0..len33 {
                                                let base = base33
                                                    .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let l23 = *base.add(0).cast::<*mut u8>();
                                                    let l24 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l23, l24, 1);
                                                    let l25 = i32::from(
                                                        *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l25 {
                                                        0 => {
                                                            let l26 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l27 = *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l26, l27, 1);
                                                        }
                                                        1 => {}
                                                        2 => {}
                                                        3 => {}
                                                        4 => {}
                                                        5 => {
                                                            let l28 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l29 = *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l28, l29, 1);
                                                        }
                                                        6 => {}
                                                        _ => {
                                                            let l30 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l31 = *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base32 = l30;
                                                            let len32 = l31;
                                                            _rt::cabi_dealloc(base32, len32 * 1, 1);
                                                        }
                                                    }
                                                }
                                            }
                                            _rt::cabi_dealloc(
                                                base33,
                                                len33 * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                8,
                                            );
                                        }
                                        6 => {}
                                        7 => {}
                                        8 => {
                                            let l34 = *base.add(8).cast::<*mut u8>();
                                            let l35 = *base
                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l34, l35, 1);
                                        }
                                        _ => {
                                            let l36 = *base.add(8).cast::<*mut u8>();
                                            let l37 = *base
                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base38 = l36;
                                            let len38 = l37;
                                            _rt::cabi_dealloc(base38, len38 * 1, 1);
                                        }
                                    }
                                }
                            }
                            _rt::cabi_dealloc(base39, len39 * 24, 8);
                        }
                        _ => {
                            let l40 = i32::from(*arg0.add(8).cast::<u8>());
                            match l40 {
                                0 => {
                                    let l41 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l42 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l41, l42, 1);
                                }
                                1 => {
                                    let l43 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l44 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l43, l44, 1);
                                }
                                2 => {
                                    let l45 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l46 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l45, l46, 1);
                                }
                                3 => {
                                    let l47 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l48 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l47, l48, 1);
                                }
                                4 => {
                                    let l49 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l50 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l49, l50, 1);
                                }
                                5 => {
                                    let l51 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l52 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l51, l52, 1);
                                }
                                6 => {
                                    let l53 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l54 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l53, l54, 1);
                                }
                                7 => {
                                    let l55 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l56 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l55, l56, 1);
                                }
                                8 => {
                                    let l57 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l58 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l57, l58, 1);
                                }
                                _ => {
                                    let l59 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l60 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l59, l60, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_get_field_distribution_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                    arg4: i32,
                    arg5: i32,
                    arg6: i32,
                    arg7: *mut u8,
                    arg8: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let len1 = arg3;
                    let bytes1 = _rt::Vec::from_raw_parts(arg2.cast(), len1, len1);
                    let result3 = T::get_field_distribution(
                        _rt::string_lift(bytes0),
                        _rt::string_lift(bytes1),
                        match arg4 {
                            0 => None,
                            1 => {
                                let e = arg5 as u32;
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        match arg6 {
                            0 => None,
                            1 => {
                                let e = {
                                    let len2 = arg8;
                                    let bytes2 = _rt::Vec::from_raw_parts(
                                        arg7.cast(),
                                        len2,
                                        len2,
                                    );
                                    _rt::string_lift(bytes2)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    );
                    let ptr4 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result3 {
                        Ok(e) => {
                            *ptr4.add(0).cast::<u8>() = (0i32) as u8;
                            let vec25 = e;
                            let len25 = vec25.len();
                            let layout25 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec25.len() * 32,
                                8,
                            );
                            let result25 = if layout25.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout25).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout25);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec25.into_iter().enumerate() {
                                let base = result25.add(i * 32);
                                {
                                    let (t5_0, t5_1) = e;
                                    use super::super::super::super::golem::vector::types::FlatMetadataValue as V24;
                                    match t5_0 {
                                        V24::StringVal(e) => {
                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                            let vec6 = (e.into_bytes()).into_boxed_slice();
                                            let ptr6 = vec6.as_ptr().cast::<u8>();
                                            let len6 = vec6.len();
                                            ::core::mem::forget(vec6);
                                            *base
                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len6;
                                            *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                        }
                                        V24::NumberVal(e) => {
                                            *base.add(0).cast::<u8>() = (1i32) as u8;
                                            *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                        }
                                        V24::IntegerVal(e) => {
                                            *base.add(0).cast::<u8>() = (2i32) as u8;
                                            *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                        }
                                        V24::BooleanVal(e) => {
                                            *base.add(0).cast::<u8>() = (3i32) as u8;
                                            *base.add(8).cast::<u8>() = (match e {
                                                true => 1,
                                                false => 0,
                                            }) as u8;
                                        }
                                        V24::ArrayVal(e) => {
                                            *base.add(0).cast::<u8>() = (4i32) as u8;
                                            let vec12 = e;
                                            let len12 = vec12.len();
                                            let layout12 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec12.len() * 24,
                                                8,
                                            );
                                            let result12 = if layout12.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout12);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec12.into_iter().enumerate() {
                                                let base = result12.add(i * 24);
                                                {
                                                    use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V11;
                                                    match e {
                                                        V11::StringVal(e) => {
                                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                                            let vec7 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr7 = vec7.as_ptr().cast::<u8>();
                                                            let len7 = vec7.len();
                                                            ::core::mem::forget(vec7);
                                                            *base
                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len7;
                                                            *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                                        }
                                                        V11::NumberVal(e) => {
                                                            *base.add(0).cast::<u8>() = (1i32) as u8;
                                                            *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                                        }
                                                        V11::IntegerVal(e) => {
                                                            *base.add(0).cast::<u8>() = (2i32) as u8;
                                                            *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                        }
                                                        V11::BooleanVal(e) => {
                                                            *base.add(0).cast::<u8>() = (3i32) as u8;
                                                            *base.add(8).cast::<u8>() = (match e {
                                                                true => 1,
                                                                false => 0,
                                                            }) as u8;
                                                        }
                                                        V11::NullVal => {
                                                            *base.add(0).cast::<u8>() = (4i32) as u8;
                                                        }
                                                        V11::DatetimeVal(e) => {
                                                            *base.add(0).cast::<u8>() = (5i32) as u8;
                                                            let vec8 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr8 = vec8.as_ptr().cast::<u8>();
                                                            let len8 = vec8.len();
                                                            ::core::mem::forget(vec8);
                                                            *base
                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len8;
                                                            *base.add(8).cast::<*mut u8>() = ptr8.cast_mut();
                                                        }
                                                        V11::GeoVal(e) => {
                                                            *base.add(0).cast::<u8>() = (6i32) as u8;
                                                            let super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                latitude: latitude9,
                                                                longitude: longitude9,
                                                            } = e;
                                                            *base.add(8).cast::<f64>() = _rt::as_f64(latitude9);
                                                            *base.add(16).cast::<f64>() = _rt::as_f64(longitude9);
                                                        }
                                                        V11::BlobVal(e) => {
                                                            *base.add(0).cast::<u8>() = (7i32) as u8;
                                                            let vec10 = (e).into_boxed_slice();
                                                            let ptr10 = vec10.as_ptr().cast::<u8>();
                                                            let len10 = vec10.len();
                                                            ::core::mem::forget(vec10);
                                                            *base
                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len10;
                                                            *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                                        }
                                                    }
                                                }
                                            }
                                            *base
                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len12;
                                            *base.add(8).cast::<*mut u8>() = result12;
                                        }
                                        V24::ObjectVal(e) => {
                                            *base.add(0).cast::<u8>() = (5i32) as u8;
                                            let vec20 = e;
                                            let len20 = vec20.len();
                                            let layout20 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec20.len()
                                                    * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                8,
                                            );
                                            let result20 = if layout20.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout20).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout20);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec20.into_iter().enumerate() {
                                                let base = result20
                                                    .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let (t13_0, t13_1) = e;
                                                    let vec14 = (t13_0.into_bytes()).into_boxed_slice();
                                                    let ptr14 = vec14.as_ptr().cast::<u8>();
                                                    let len14 = vec14.len();
                                                    ::core::mem::forget(vec14);
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len14;
                                                    *base.add(0).cast::<*mut u8>() = ptr14.cast_mut();
                                                    use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V19;
                                                    match t13_1 {
                                                        V19::StringVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                            let vec15 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr15 = vec15.as_ptr().cast::<u8>();
                                                            let len15 = vec15.len();
                                                            ::core::mem::forget(vec15);
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len15;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr15.cast_mut();
                                                        }
                                                        V19::NumberVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<f64>() = _rt::as_f64(e);
                                                        }
                                                        V19::IntegerVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (2i32) as u8;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<i64>() = _rt::as_i64(e);
                                                        }
                                                        V19::BooleanVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (3i32) as u8;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (match e {
                                                                true => 1,
                                                                false => 0,
                                                            }) as u8;
                                                        }
                                                        V19::NullVal => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (4i32) as u8;
                                                        }
                                                        V19::DatetimeVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (5i32) as u8;
                                                            let vec16 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr16 = vec16.as_ptr().cast::<u8>();
                                                            let len16 = vec16.len();
                                                            ::core::mem::forget(vec16);
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len16;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr16.cast_mut();
                                                        }
                                                        V19::GeoVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (6i32) as u8;
                                                            let super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                latitude: latitude17,
                                                                longitude: longitude17,
                                                            } = e;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<f64>() = _rt::as_f64(latitude17);
                                                            *base
                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<f64>() = _rt::as_f64(longitude17);
                                                        }
                                                        V19::BlobVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (7i32) as u8;
                                                            let vec18 = (e).into_boxed_slice();
                                                            let ptr18 = vec18.as_ptr().cast::<u8>();
                                                            let len18 = vec18.len();
                                                            ::core::mem::forget(vec18);
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len18;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr18.cast_mut();
                                                        }
                                                    }
                                                }
                                            }
                                            *base
                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len20;
                                            *base.add(8).cast::<*mut u8>() = result20;
                                        }
                                        V24::NullVal => {
                                            *base.add(0).cast::<u8>() = (6i32) as u8;
                                        }
                                        V24::GeoVal(e) => {
                                            *base.add(0).cast::<u8>() = (7i32) as u8;
                                            let super::super::super::super::golem::vector::types::GeoCoordinates {
                                                latitude: latitude21,
                                                longitude: longitude21,
                                            } = e;
                                            *base.add(8).cast::<f64>() = _rt::as_f64(latitude21);
                                            *base.add(16).cast::<f64>() = _rt::as_f64(longitude21);
                                        }
                                        V24::DatetimeVal(e) => {
                                            *base.add(0).cast::<u8>() = (8i32) as u8;
                                            let vec22 = (e.into_bytes()).into_boxed_slice();
                                            let ptr22 = vec22.as_ptr().cast::<u8>();
                                            let len22 = vec22.len();
                                            ::core::mem::forget(vec22);
                                            *base
                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len22;
                                            *base.add(8).cast::<*mut u8>() = ptr22.cast_mut();
                                        }
                                        V24::BlobVal(e) => {
                                            *base.add(0).cast::<u8>() = (9i32) as u8;
                                            let vec23 = (e).into_boxed_slice();
                                            let ptr23 = vec23.as_ptr().cast::<u8>();
                                            let len23 = vec23.len();
                                            ::core::mem::forget(vec23);
                                            *base
                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len23;
                                            *base.add(8).cast::<*mut u8>() = ptr23.cast_mut();
                                        }
                                    }
                                    *base.add(24).cast::<i64>() = _rt::as_i64(t5_1);
                                }
                            }
                            *ptr4
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len25;
                            *ptr4
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result25;
                        }
                        Err(e) => {
                            *ptr4.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::golem::vector::types::VectorError as V36;
                            match e {
                                V36::NotFound(e) => {
                                    *ptr4
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                    let vec26 = (e.into_bytes()).into_boxed_slice();
                                    let ptr26 = vec26.as_ptr().cast::<u8>();
                                    let len26 = vec26.len();
                                    ::core::mem::forget(vec26);
                                    *ptr4
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len26;
                                    *ptr4
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr26.cast_mut();
                                }
                                V36::AlreadyExists(e) => {
                                    *ptr4
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec27 = (e.into_bytes()).into_boxed_slice();
                                    let ptr27 = vec27.as_ptr().cast::<u8>();
                                    let len27 = vec27.len();
                                    ::core::mem::forget(vec27);
                                    *ptr4
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len27;
                                    *ptr4
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr27.cast_mut();
                                }
                                V36::InvalidParams(e) => {
                                    *ptr4
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                    let vec28 = (e.into_bytes()).into_boxed_slice();
                                    let ptr28 = vec28.as_ptr().cast::<u8>();
                                    let len28 = vec28.len();
                                    ::core::mem::forget(vec28);
                                    *ptr4
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len28;
                                    *ptr4
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr28.cast_mut();
                                }
                                V36::UnsupportedFeature(e) => {
                                    *ptr4
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                    let vec29 = (e.into_bytes()).into_boxed_slice();
                                    let ptr29 = vec29.as_ptr().cast::<u8>();
                                    let len29 = vec29.len();
                                    ::core::mem::forget(vec29);
                                    *ptr4
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len29;
                                    *ptr4
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr29.cast_mut();
                                }
                                V36::DimensionMismatch(e) => {
                                    *ptr4
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (4i32) as u8;
                                    let vec30 = (e.into_bytes()).into_boxed_slice();
                                    let ptr30 = vec30.as_ptr().cast::<u8>();
                                    let len30 = vec30.len();
                                    ::core::mem::forget(vec30);
                                    *ptr4
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len30;
                                    *ptr4
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr30.cast_mut();
                                }
                                V36::InvalidVector(e) => {
                                    *ptr4
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (5i32) as u8;
                                    let vec31 = (e.into_bytes()).into_boxed_slice();
                                    let ptr31 = vec31.as_ptr().cast::<u8>();
                                    let len31 = vec31.len();
                                    ::core::mem::forget(vec31);
                                    *ptr4
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len31;
                                    *ptr4
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr31.cast_mut();
                                }
                                V36::Unauthorized(e) => {
                                    *ptr4
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (6i32) as u8;
                                    let vec32 = (e.into_bytes()).into_boxed_slice();
                                    let ptr32 = vec32.as_ptr().cast::<u8>();
                                    let len32 = vec32.len();
                                    ::core::mem::forget(vec32);
                                    *ptr4
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len32;
                                    *ptr4
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr32.cast_mut();
                                }
                                V36::RateLimited(e) => {
                                    *ptr4
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (7i32) as u8;
                                    let vec33 = (e.into_bytes()).into_boxed_slice();
                                    let ptr33 = vec33.as_ptr().cast::<u8>();
                                    let len33 = vec33.len();
                                    ::core::mem::forget(vec33);
                                    *ptr4
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len33;
                                    *ptr4
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr33.cast_mut();
                                }
                                V36::ProviderError(e) => {
                                    *ptr4
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (8i32) as u8;
                                    let vec34 = (e.into_bytes()).into_boxed_slice();
                                    let ptr34 = vec34.as_ptr().cast::<u8>();
                                    let len34 = vec34.len();
                                    ::core::mem::forget(vec34);
                                    *ptr4
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len34;
                                    *ptr4
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr34.cast_mut();
                                }
                                V36::ConnectionError(e) => {
                                    *ptr4
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (9i32) as u8;
                                    let vec35 = (e.into_bytes()).into_boxed_slice();
                                    let ptr35 = vec35.as_ptr().cast::<u8>();
                                    let len35 = vec35.len();
                                    ::core::mem::forget(vec35);
                                    *ptr4
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len35;
                                    *ptr4
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr35.cast_mut();
                                }
                            }
                        }
                    };
                    ptr4
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_get_field_distribution<T: Guest>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let base35 = l1;
                            let len35 = l2;
                            for i in 0..len35 {
                                let base = base35.add(i * 32);
                                {
                                    let l3 = i32::from(*base.add(0).cast::<u8>());
                                    match l3 {
                                        0 => {
                                            let l4 = *base.add(8).cast::<*mut u8>();
                                            let l5 = *base
                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l4, l5, 1);
                                        }
                                        1 => {}
                                        2 => {}
                                        3 => {}
                                        4 => {
                                            let l6 = *base.add(8).cast::<*mut u8>();
                                            let l7 = *base
                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base16 = l6;
                                            let len16 = l7;
                                            for i in 0..len16 {
                                                let base = base16.add(i * 24);
                                                {
                                                    let l8 = i32::from(*base.add(0).cast::<u8>());
                                                    match l8 {
                                                        0 => {
                                                            let l9 = *base.add(8).cast::<*mut u8>();
                                                            let l10 = *base
                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l9, l10, 1);
                                                        }
                                                        1 => {}
                                                        2 => {}
                                                        3 => {}
                                                        4 => {}
                                                        5 => {
                                                            let l11 = *base.add(8).cast::<*mut u8>();
                                                            let l12 = *base
                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l11, l12, 1);
                                                        }
                                                        6 => {}
                                                        _ => {
                                                            let l13 = *base.add(8).cast::<*mut u8>();
                                                            let l14 = *base
                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base15 = l13;
                                                            let len15 = l14;
                                                            _rt::cabi_dealloc(base15, len15 * 1, 1);
                                                        }
                                                    }
                                                }
                                            }
                                            _rt::cabi_dealloc(base16, len16 * 24, 8);
                                        }
                                        5 => {
                                            let l17 = *base.add(8).cast::<*mut u8>();
                                            let l18 = *base
                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base29 = l17;
                                            let len29 = l18;
                                            for i in 0..len29 {
                                                let base = base29
                                                    .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let l19 = *base.add(0).cast::<*mut u8>();
                                                    let l20 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l19, l20, 1);
                                                    let l21 = i32::from(
                                                        *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l21 {
                                                        0 => {
                                                            let l22 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l23 = *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l22, l23, 1);
                                                        }
                                                        1 => {}
                                                        2 => {}
                                                        3 => {}
                                                        4 => {}
                                                        5 => {
                                                            let l24 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l25 = *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l24, l25, 1);
                                                        }
                                                        6 => {}
                                                        _ => {
                                                            let l26 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l27 = *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base28 = l26;
                                                            let len28 = l27;
                                                            _rt::cabi_dealloc(base28, len28 * 1, 1);
                                                        }
                                                    }
                                                }
                                            }
                                            _rt::cabi_dealloc(
                                                base29,
                                                len29 * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                8,
                                            );
                                        }
                                        6 => {}
                                        7 => {}
                                        8 => {
                                            let l30 = *base.add(8).cast::<*mut u8>();
                                            let l31 = *base
                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l30, l31, 1);
                                        }
                                        _ => {
                                            let l32 = *base.add(8).cast::<*mut u8>();
                                            let l33 = *base
                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base34 = l32;
                                            let len34 = l33;
                                            _rt::cabi_dealloc(base34, len34 * 1, 1);
                                        }
                                    }
                                }
                            }
                            _rt::cabi_dealloc(base35, len35 * 32, 8);
                        }
                        _ => {
                            let l36 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l36 {
                                0 => {
                                    let l37 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l38 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l37, l38, 1);
                                }
                                1 => {
                                    let l39 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l40 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l39, l40, 1);
                                }
                                2 => {
                                    let l41 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l42 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l41, l42, 1);
                                }
                                3 => {
                                    let l43 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l44 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l43, l44, 1);
                                }
                                4 => {
                                    let l45 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l46 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l45, l46, 1);
                                }
                                5 => {
                                    let l47 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l48 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l47, l48, 1);
                                }
                                6 => {
                                    let l49 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l50 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l49, l50, 1);
                                }
                                7 => {
                                    let l51 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l52 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l51, l52, 1);
                                }
                                8 => {
                                    let l53 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l54 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l53, l54, 1);
                                }
                                _ => {
                                    let l55 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l56 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l55, l56, 1);
                                }
                            }
                        }
                    }
                }
                pub trait Guest {
                    /// Get collection statistics
                    fn get_collection_stats(
                        collection: _rt::String,
                        namespace: Option<_rt::String>,
                    ) -> Result<CollectionStats, VectorError>;
                    /// Get field statistics
                    fn get_field_stats(
                        collection: _rt::String,
                        field: _rt::String,
                        namespace: Option<_rt::String>,
                    ) -> Result<FieldStats, VectorError>;
                    /// Get value distribution for a field
                    fn get_field_distribution(
                        collection: _rt::String,
                        field: _rt::String,
                        limit: Option<u32>,
                        namespace: Option<_rt::String>,
                    ) -> Result<_rt::Vec<(FlatMetadataValue, u64)>, VectorError>;
                }
                #[doc(hidden)]
                macro_rules! __export_golem_vector_analytics_1_0_0_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "golem:vector/analytics@1.0.0#get-collection-stats")] unsafe
                        extern "C" fn export_get_collection_stats(arg0 : * mut u8, arg1 :
                        usize, arg2 : i32, arg3 : * mut u8, arg4 : usize,) -> * mut u8 {
                        unsafe { $($path_to_types)*::
                        _export_get_collection_stats_cabi::<$ty > (arg0, arg1, arg2,
                        arg3, arg4) } } #[unsafe (export_name =
                        "cabi_post_golem:vector/analytics@1.0.0#get-collection-stats")]
                        unsafe extern "C" fn _post_return_get_collection_stats(arg0 : *
                        mut u8,) { unsafe { $($path_to_types)*::
                        __post_return_get_collection_stats::<$ty > (arg0) } } #[unsafe
                        (export_name = "golem:vector/analytics@1.0.0#get-field-stats")]
                        unsafe extern "C" fn export_get_field_stats(arg0 : * mut u8, arg1
                        : usize, arg2 : * mut u8, arg3 : usize, arg4 : i32, arg5 : * mut
                        u8, arg6 : usize,) -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_get_field_stats_cabi::<$ty > (arg0, arg1, arg2, arg3,
                        arg4, arg5, arg6) } } #[unsafe (export_name =
                        "cabi_post_golem:vector/analytics@1.0.0#get-field-stats")] unsafe
                        extern "C" fn _post_return_get_field_stats(arg0 : * mut u8,) {
                        unsafe { $($path_to_types)*:: __post_return_get_field_stats::<$ty
                        > (arg0) } } #[unsafe (export_name =
                        "golem:vector/analytics@1.0.0#get-field-distribution")] unsafe
                        extern "C" fn export_get_field_distribution(arg0 : * mut u8, arg1
                        : usize, arg2 : * mut u8, arg3 : usize, arg4 : i32, arg5 : i32,
                        arg6 : i32, arg7 : * mut u8, arg8 : usize,) -> * mut u8 { unsafe
                        { $($path_to_types)*:: _export_get_field_distribution_cabi::<$ty
                        > (arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8) } }
                        #[unsafe (export_name =
                        "cabi_post_golem:vector/analytics@1.0.0#get-field-distribution")]
                        unsafe extern "C" fn _post_return_get_field_distribution(arg0 : *
                        mut u8,) { unsafe { $($path_to_types)*::
                        __post_return_get_field_distribution::<$ty > (arg0) } } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_golem_vector_analytics_1_0_0_cabi;
                #[repr(align(8))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<
                        u8,
                    >; 56 + 6 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 56
                        + 6 * ::core::mem::size_of::<*const u8>()],
                );
            }
            /// Namespace/partition management
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod namespaces {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type VectorError = super::super::super::super::golem::vector::types::VectorError;
                pub type Metadata = super::super::super::super::golem::vector::types::Metadata;
                /// Namespace information
                #[derive(Clone)]
                pub struct NamespaceInfo {
                    pub name: _rt::String,
                    pub collection: _rt::String,
                    pub vector_count: u64,
                    pub size_bytes: u64,
                    pub created_at: Option<u64>,
                    pub metadata: Option<Metadata>,
                }
                impl ::core::fmt::Debug for NamespaceInfo {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("NamespaceInfo")
                            .field("name", &self.name)
                            .field("collection", &self.collection)
                            .field("vector-count", &self.vector_count)
                            .field("size-bytes", &self.size_bytes)
                            .field("created-at", &self.created_at)
                            .field("metadata", &self.metadata)
                            .finish()
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_upsert_namespace_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                    arg4: i32,
                    arg5: *mut u8,
                    arg6: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let len1 = arg3;
                    let bytes1 = _rt::Vec::from_raw_parts(arg2.cast(), len1, len1);
                    let result63 = T::upsert_namespace(
                        _rt::string_lift(bytes0),
                        _rt::string_lift(bytes1),
                        match arg4 {
                            0 => None,
                            1 => {
                                let e = {
                                    let base62 = arg5;
                                    let len62 = arg6;
                                    let mut result62 = _rt::Vec::with_capacity(len62);
                                    for i in 0..len62 {
                                        let base = base62
                                            .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                        let e62 = {
                                            let l2 = *base.add(0).cast::<*mut u8>();
                                            let l3 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len4 = l3;
                                            let bytes4 = _rt::Vec::from_raw_parts(
                                                l2.cast(),
                                                len4,
                                                len4,
                                            );
                                            let l5 = i32::from(
                                                *base
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            use super::super::super::super::golem::vector::types::FlatMetadataValue as V61;
                                            let v61 = match l5 {
                                                0 => {
                                                    let e61 = {
                                                        let l6 = *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l7 = *base
                                                            .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len8 = l7;
                                                        let bytes8 = _rt::Vec::from_raw_parts(
                                                            l6.cast(),
                                                            len8,
                                                            len8,
                                                        );
                                                        _rt::string_lift(bytes8)
                                                    };
                                                    V61::StringVal(e61)
                                                }
                                                1 => {
                                                    let e61 = {
                                                        let l9 = *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<f64>();
                                                        l9
                                                    };
                                                    V61::NumberVal(e61)
                                                }
                                                2 => {
                                                    let e61 = {
                                                        let l10 = *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i64>();
                                                        l10
                                                    };
                                                    V61::IntegerVal(e61)
                                                }
                                                3 => {
                                                    let e61 = {
                                                        let l11 = i32::from(
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>(),
                                                        );
                                                        _rt::bool_lift(l11 as u8)
                                                    };
                                                    V61::BooleanVal(e61)
                                                }
                                                4 => {
                                                    let e61 = {
                                                        let l12 = *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l13 = *base
                                                            .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base30 = l12;
                                                        let len30 = l13;
                                                        let mut result30 = _rt::Vec::with_capacity(len30);
                                                        for i in 0..len30 {
                                                            let base = base30.add(i * 24);
                                                            let e30 = {
                                                                let l14 = i32::from(*base.add(0).cast::<u8>());
                                                                use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V29;
                                                                let v29 = match l14 {
                                                                    0 => {
                                                                        let e29 = {
                                                                            let l15 = *base.add(8).cast::<*mut u8>();
                                                                            let l16 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len17 = l16;
                                                                            let bytes17 = _rt::Vec::from_raw_parts(
                                                                                l15.cast(),
                                                                                len17,
                                                                                len17,
                                                                            );
                                                                            _rt::string_lift(bytes17)
                                                                        };
                                                                        V29::StringVal(e29)
                                                                    }
                                                                    1 => {
                                                                        let e29 = {
                                                                            let l18 = *base.add(8).cast::<f64>();
                                                                            l18
                                                                        };
                                                                        V29::NumberVal(e29)
                                                                    }
                                                                    2 => {
                                                                        let e29 = {
                                                                            let l19 = *base.add(8).cast::<i64>();
                                                                            l19
                                                                        };
                                                                        V29::IntegerVal(e29)
                                                                    }
                                                                    3 => {
                                                                        let e29 = {
                                                                            let l20 = i32::from(*base.add(8).cast::<u8>());
                                                                            _rt::bool_lift(l20 as u8)
                                                                        };
                                                                        V29::BooleanVal(e29)
                                                                    }
                                                                    4 => V29::NullVal,
                                                                    5 => {
                                                                        let e29 = {
                                                                            let l21 = *base.add(8).cast::<*mut u8>();
                                                                            let l22 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len23 = l22;
                                                                            let bytes23 = _rt::Vec::from_raw_parts(
                                                                                l21.cast(),
                                                                                len23,
                                                                                len23,
                                                                            );
                                                                            _rt::string_lift(bytes23)
                                                                        };
                                                                        V29::DatetimeVal(e29)
                                                                    }
                                                                    6 => {
                                                                        let e29 = {
                                                                            let l24 = *base.add(8).cast::<f64>();
                                                                            let l25 = *base.add(16).cast::<f64>();
                                                                            super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                                latitude: l24,
                                                                                longitude: l25,
                                                                            }
                                                                        };
                                                                        V29::GeoVal(e29)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 7, "invalid enum discriminant");
                                                                        let e29 = {
                                                                            let l26 = *base.add(8).cast::<*mut u8>();
                                                                            let l27 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len28 = l27;
                                                                            _rt::Vec::from_raw_parts(l26.cast(), len28, len28)
                                                                        };
                                                                        V29::BlobVal(e29)
                                                                    }
                                                                };
                                                                v29
                                                            };
                                                            result30.push(e30);
                                                        }
                                                        _rt::cabi_dealloc(base30, len30 * 24, 8);
                                                        result30
                                                    };
                                                    V61::ArrayVal(e61)
                                                }
                                                5 => {
                                                    let e61 = {
                                                        let l31 = *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l32 = *base
                                                            .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base52 = l31;
                                                        let len52 = l32;
                                                        let mut result52 = _rt::Vec::with_capacity(len52);
                                                        for i in 0..len52 {
                                                            let base = base52
                                                                .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                            let e52 = {
                                                                let l33 = *base.add(0).cast::<*mut u8>();
                                                                let l34 = *base
                                                                    .add(::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len35 = l34;
                                                                let bytes35 = _rt::Vec::from_raw_parts(
                                                                    l33.cast(),
                                                                    len35,
                                                                    len35,
                                                                );
                                                                let l36 = i32::from(
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V51;
                                                                let v51 = match l36 {
                                                                    0 => {
                                                                        let e51 = {
                                                                            let l37 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l38 = *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len39 = l38;
                                                                            let bytes39 = _rt::Vec::from_raw_parts(
                                                                                l37.cast(),
                                                                                len39,
                                                                                len39,
                                                                            );
                                                                            _rt::string_lift(bytes39)
                                                                        };
                                                                        V51::StringVal(e51)
                                                                    }
                                                                    1 => {
                                                                        let e51 = {
                                                                            let l40 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<f64>();
                                                                            l40
                                                                        };
                                                                        V51::NumberVal(e51)
                                                                    }
                                                                    2 => {
                                                                        let e51 = {
                                                                            let l41 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i64>();
                                                                            l41
                                                                        };
                                                                        V51::IntegerVal(e51)
                                                                    }
                                                                    3 => {
                                                                        let e51 = {
                                                                            let l42 = i32::from(
                                                                                *base
                                                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            _rt::bool_lift(l42 as u8)
                                                                        };
                                                                        V51::BooleanVal(e51)
                                                                    }
                                                                    4 => V51::NullVal,
                                                                    5 => {
                                                                        let e51 = {
                                                                            let l43 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l44 = *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len45 = l44;
                                                                            let bytes45 = _rt::Vec::from_raw_parts(
                                                                                l43.cast(),
                                                                                len45,
                                                                                len45,
                                                                            );
                                                                            _rt::string_lift(bytes45)
                                                                        };
                                                                        V51::DatetimeVal(e51)
                                                                    }
                                                                    6 => {
                                                                        let e51 = {
                                                                            let l46 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<f64>();
                                                                            let l47 = *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<f64>();
                                                                            super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                                latitude: l46,
                                                                                longitude: l47,
                                                                            }
                                                                        };
                                                                        V51::GeoVal(e51)
                                                                    }
                                                                    n => {
                                                                        debug_assert_eq!(n, 7, "invalid enum discriminant");
                                                                        let e51 = {
                                                                            let l48 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l49 = *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let len50 = l49;
                                                                            _rt::Vec::from_raw_parts(l48.cast(), len50, len50)
                                                                        };
                                                                        V51::BlobVal(e51)
                                                                    }
                                                                };
                                                                (_rt::string_lift(bytes35), v51)
                                                            };
                                                            result52.push(e52);
                                                        }
                                                        _rt::cabi_dealloc(
                                                            base52,
                                                            len52 * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                            8,
                                                        );
                                                        result52
                                                    };
                                                    V61::ObjectVal(e61)
                                                }
                                                6 => V61::NullVal,
                                                7 => {
                                                    let e61 = {
                                                        let l53 = *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<f64>();
                                                        let l54 = *base
                                                            .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<f64>();
                                                        super::super::super::super::golem::vector::types::GeoCoordinates {
                                                            latitude: l53,
                                                            longitude: l54,
                                                        }
                                                    };
                                                    V61::GeoVal(e61)
                                                }
                                                8 => {
                                                    let e61 = {
                                                        let l55 = *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l56 = *base
                                                            .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len57 = l56;
                                                        let bytes57 = _rt::Vec::from_raw_parts(
                                                            l55.cast(),
                                                            len57,
                                                            len57,
                                                        );
                                                        _rt::string_lift(bytes57)
                                                    };
                                                    V61::DatetimeVal(e61)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 9, "invalid enum discriminant");
                                                    let e61 = {
                                                        let l58 = *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>();
                                                        let l59 = *base
                                                            .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len60 = l59;
                                                        _rt::Vec::from_raw_parts(l58.cast(), len60, len60)
                                                    };
                                                    V61::BlobVal(e61)
                                                }
                                            };
                                            (_rt::string_lift(bytes4), v61)
                                        };
                                        result62.push(e62);
                                    }
                                    _rt::cabi_dealloc(
                                        base62,
                                        len62 * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                        8,
                                    );
                                    result62
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    );
                    let ptr64 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result63 {
                        Ok(e) => {
                            *ptr64.add(0).cast::<u8>() = (0i32) as u8;
                            let NamespaceInfo {
                                name: name65,
                                collection: collection65,
                                vector_count: vector_count65,
                                size_bytes: size_bytes65,
                                created_at: created_at65,
                                metadata: metadata65,
                            } = e;
                            let vec66 = (name65.into_bytes()).into_boxed_slice();
                            let ptr66 = vec66.as_ptr().cast::<u8>();
                            let len66 = vec66.len();
                            ::core::mem::forget(vec66);
                            *ptr64
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len66;
                            *ptr64.add(8).cast::<*mut u8>() = ptr66.cast_mut();
                            let vec67 = (collection65.into_bytes()).into_boxed_slice();
                            let ptr67 = vec67.as_ptr().cast::<u8>();
                            let len67 = vec67.len();
                            ::core::mem::forget(vec67);
                            *ptr64
                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len67;
                            *ptr64
                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr67.cast_mut();
                            *ptr64
                                .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                .cast::<i64>() = _rt::as_i64(vector_count65);
                            *ptr64
                                .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                .cast::<i64>() = _rt::as_i64(size_bytes65);
                            match created_at65 {
                                Some(e) => {
                                    *ptr64
                                        .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    *ptr64
                                        .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i64>() = _rt::as_i64(e);
                                }
                                None => {
                                    *ptr64
                                        .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match metadata65 {
                                Some(e) => {
                                    *ptr64
                                        .add(40 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec89 = e;
                                    let len89 = vec89.len();
                                    let layout89 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec89.len()
                                            * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                        8,
                                    );
                                    let result89 = if layout89.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout89).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout89);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec89.into_iter().enumerate() {
                                        let base = result89
                                            .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t68_0, t68_1) = e;
                                            let vec69 = (t68_0.into_bytes()).into_boxed_slice();
                                            let ptr69 = vec69.as_ptr().cast::<u8>();
                                            let len69 = vec69.len();
                                            ::core::mem::forget(vec69);
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len69;
                                            *base.add(0).cast::<*mut u8>() = ptr69.cast_mut();
                                            use super::super::super::super::golem::vector::types::FlatMetadataValue as V88;
                                            match t68_1 {
                                                V88::StringVal(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                    let vec70 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr70 = vec70.as_ptr().cast::<u8>();
                                                    let len70 = vec70.len();
                                                    ::core::mem::forget(vec70);
                                                    *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len70;
                                                    *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr70.cast_mut();
                                                }
                                                V88::NumberVal(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<f64>() = _rt::as_f64(e);
                                                }
                                                V88::IntegerVal(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (2i32) as u8;
                                                    *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i64>() = _rt::as_i64(e);
                                                }
                                                V88::BooleanVal(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (3i32) as u8;
                                                    *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (match e {
                                                        true => 1,
                                                        false => 0,
                                                    }) as u8;
                                                }
                                                V88::ArrayVal(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (4i32) as u8;
                                                    let vec76 = e;
                                                    let len76 = vec76.len();
                                                    let layout76 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec76.len() * 24,
                                                        8,
                                                    );
                                                    let result76 = if layout76.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout76).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout76);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec76.into_iter().enumerate() {
                                                        let base = result76.add(i * 24);
                                                        {
                                                            use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V75;
                                                            match e {
                                                                V75::StringVal(e) => {
                                                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                    let vec71 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr71 = vec71.as_ptr().cast::<u8>();
                                                                    let len71 = vec71.len();
                                                                    ::core::mem::forget(vec71);
                                                                    *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len71;
                                                                    *base.add(8).cast::<*mut u8>() = ptr71.cast_mut();
                                                                }
                                                                V75::NumberVal(e) => {
                                                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                    *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                                                }
                                                                V75::IntegerVal(e) => {
                                                                    *base.add(0).cast::<u8>() = (2i32) as u8;
                                                                    *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                                }
                                                                V75::BooleanVal(e) => {
                                                                    *base.add(0).cast::<u8>() = (3i32) as u8;
                                                                    *base.add(8).cast::<u8>() = (match e {
                                                                        true => 1,
                                                                        false => 0,
                                                                    }) as u8;
                                                                }
                                                                V75::NullVal => {
                                                                    *base.add(0).cast::<u8>() = (4i32) as u8;
                                                                }
                                                                V75::DatetimeVal(e) => {
                                                                    *base.add(0).cast::<u8>() = (5i32) as u8;
                                                                    let vec72 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr72 = vec72.as_ptr().cast::<u8>();
                                                                    let len72 = vec72.len();
                                                                    ::core::mem::forget(vec72);
                                                                    *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len72;
                                                                    *base.add(8).cast::<*mut u8>() = ptr72.cast_mut();
                                                                }
                                                                V75::GeoVal(e) => {
                                                                    *base.add(0).cast::<u8>() = (6i32) as u8;
                                                                    let super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                        latitude: latitude73,
                                                                        longitude: longitude73,
                                                                    } = e;
                                                                    *base.add(8).cast::<f64>() = _rt::as_f64(latitude73);
                                                                    *base.add(16).cast::<f64>() = _rt::as_f64(longitude73);
                                                                }
                                                                V75::BlobVal(e) => {
                                                                    *base.add(0).cast::<u8>() = (7i32) as u8;
                                                                    let vec74 = (e).into_boxed_slice();
                                                                    let ptr74 = vec74.as_ptr().cast::<u8>();
                                                                    let len74 = vec74.len();
                                                                    ::core::mem::forget(vec74);
                                                                    *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len74;
                                                                    *base.add(8).cast::<*mut u8>() = ptr74.cast_mut();
                                                                }
                                                            }
                                                        }
                                                    }
                                                    *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len76;
                                                    *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result76;
                                                }
                                                V88::ObjectVal(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (5i32) as u8;
                                                    let vec84 = e;
                                                    let len84 = vec84.len();
                                                    let layout84 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec84.len()
                                                            * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                        8,
                                                    );
                                                    let result84 = if layout84.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout84).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout84);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec84.into_iter().enumerate() {
                                                        let base = result84
                                                            .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let (t77_0, t77_1) = e;
                                                            let vec78 = (t77_0.into_bytes()).into_boxed_slice();
                                                            let ptr78 = vec78.as_ptr().cast::<u8>();
                                                            let len78 = vec78.len();
                                                            ::core::mem::forget(vec78);
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len78;
                                                            *base.add(0).cast::<*mut u8>() = ptr78.cast_mut();
                                                            use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V83;
                                                            match t77_1 {
                                                                V83::StringVal(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                    let vec79 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr79 = vec79.as_ptr().cast::<u8>();
                                                                    let len79 = vec79.len();
                                                                    ::core::mem::forget(vec79);
                                                                    *base
                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len79;
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr79.cast_mut();
                                                                }
                                                                V83::NumberVal(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<f64>() = _rt::as_f64(e);
                                                                }
                                                                V83::IntegerVal(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (2i32) as u8;
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i64>() = _rt::as_i64(e);
                                                                }
                                                                V83::BooleanVal(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (3i32) as u8;
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (match e {
                                                                        true => 1,
                                                                        false => 0,
                                                                    }) as u8;
                                                                }
                                                                V83::NullVal => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (4i32) as u8;
                                                                }
                                                                V83::DatetimeVal(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (5i32) as u8;
                                                                    let vec80 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr80 = vec80.as_ptr().cast::<u8>();
                                                                    let len80 = vec80.len();
                                                                    ::core::mem::forget(vec80);
                                                                    *base
                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len80;
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr80.cast_mut();
                                                                }
                                                                V83::GeoVal(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (6i32) as u8;
                                                                    let super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                        latitude: latitude81,
                                                                        longitude: longitude81,
                                                                    } = e;
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<f64>() = _rt::as_f64(latitude81);
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<f64>() = _rt::as_f64(longitude81);
                                                                }
                                                                V83::BlobVal(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (7i32) as u8;
                                                                    let vec82 = (e).into_boxed_slice();
                                                                    let ptr82 = vec82.as_ptr().cast::<u8>();
                                                                    let len82 = vec82.len();
                                                                    ::core::mem::forget(vec82);
                                                                    *base
                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len82;
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr82.cast_mut();
                                                                }
                                                            }
                                                        }
                                                    }
                                                    *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len84;
                                                    *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result84;
                                                }
                                                V88::NullVal => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (6i32) as u8;
                                                }
                                                V88::GeoVal(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (7i32) as u8;
                                                    let super::super::super::super::golem::vector::types::GeoCoordinates {
                                                        latitude: latitude85,
                                                        longitude: longitude85,
                                                    } = e;
                                                    *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<f64>() = _rt::as_f64(latitude85);
                                                    *base
                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<f64>() = _rt::as_f64(longitude85);
                                                }
                                                V88::DatetimeVal(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (8i32) as u8;
                                                    let vec86 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr86 = vec86.as_ptr().cast::<u8>();
                                                    let len86 = vec86.len();
                                                    ::core::mem::forget(vec86);
                                                    *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len86;
                                                    *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr86.cast_mut();
                                                }
                                                V88::BlobVal(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (9i32) as u8;
                                                    let vec87 = (e).into_boxed_slice();
                                                    let ptr87 = vec87.as_ptr().cast::<u8>();
                                                    let len87 = vec87.len();
                                                    ::core::mem::forget(vec87);
                                                    *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len87;
                                                    *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr87.cast_mut();
                                                }
                                            }
                                        }
                                    }
                                    *ptr64
                                        .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len89;
                                    *ptr64
                                        .add(40 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result89;
                                }
                                None => {
                                    *ptr64
                                        .add(40 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        Err(e) => {
                            *ptr64.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::golem::vector::types::VectorError as V100;
                            match e {
                                V100::NotFound(e) => {
                                    *ptr64.add(8).cast::<u8>() = (0i32) as u8;
                                    let vec90 = (e.into_bytes()).into_boxed_slice();
                                    let ptr90 = vec90.as_ptr().cast::<u8>();
                                    let len90 = vec90.len();
                                    ::core::mem::forget(vec90);
                                    *ptr64
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len90;
                                    *ptr64
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr90.cast_mut();
                                }
                                V100::AlreadyExists(e) => {
                                    *ptr64.add(8).cast::<u8>() = (1i32) as u8;
                                    let vec91 = (e.into_bytes()).into_boxed_slice();
                                    let ptr91 = vec91.as_ptr().cast::<u8>();
                                    let len91 = vec91.len();
                                    ::core::mem::forget(vec91);
                                    *ptr64
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len91;
                                    *ptr64
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr91.cast_mut();
                                }
                                V100::InvalidParams(e) => {
                                    *ptr64.add(8).cast::<u8>() = (2i32) as u8;
                                    let vec92 = (e.into_bytes()).into_boxed_slice();
                                    let ptr92 = vec92.as_ptr().cast::<u8>();
                                    let len92 = vec92.len();
                                    ::core::mem::forget(vec92);
                                    *ptr64
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len92;
                                    *ptr64
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr92.cast_mut();
                                }
                                V100::UnsupportedFeature(e) => {
                                    *ptr64.add(8).cast::<u8>() = (3i32) as u8;
                                    let vec93 = (e.into_bytes()).into_boxed_slice();
                                    let ptr93 = vec93.as_ptr().cast::<u8>();
                                    let len93 = vec93.len();
                                    ::core::mem::forget(vec93);
                                    *ptr64
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len93;
                                    *ptr64
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr93.cast_mut();
                                }
                                V100::DimensionMismatch(e) => {
                                    *ptr64.add(8).cast::<u8>() = (4i32) as u8;
                                    let vec94 = (e.into_bytes()).into_boxed_slice();
                                    let ptr94 = vec94.as_ptr().cast::<u8>();
                                    let len94 = vec94.len();
                                    ::core::mem::forget(vec94);
                                    *ptr64
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len94;
                                    *ptr64
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr94.cast_mut();
                                }
                                V100::InvalidVector(e) => {
                                    *ptr64.add(8).cast::<u8>() = (5i32) as u8;
                                    let vec95 = (e.into_bytes()).into_boxed_slice();
                                    let ptr95 = vec95.as_ptr().cast::<u8>();
                                    let len95 = vec95.len();
                                    ::core::mem::forget(vec95);
                                    *ptr64
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len95;
                                    *ptr64
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr95.cast_mut();
                                }
                                V100::Unauthorized(e) => {
                                    *ptr64.add(8).cast::<u8>() = (6i32) as u8;
                                    let vec96 = (e.into_bytes()).into_boxed_slice();
                                    let ptr96 = vec96.as_ptr().cast::<u8>();
                                    let len96 = vec96.len();
                                    ::core::mem::forget(vec96);
                                    *ptr64
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len96;
                                    *ptr64
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr96.cast_mut();
                                }
                                V100::RateLimited(e) => {
                                    *ptr64.add(8).cast::<u8>() = (7i32) as u8;
                                    let vec97 = (e.into_bytes()).into_boxed_slice();
                                    let ptr97 = vec97.as_ptr().cast::<u8>();
                                    let len97 = vec97.len();
                                    ::core::mem::forget(vec97);
                                    *ptr64
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len97;
                                    *ptr64
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr97.cast_mut();
                                }
                                V100::ProviderError(e) => {
                                    *ptr64.add(8).cast::<u8>() = (8i32) as u8;
                                    let vec98 = (e.into_bytes()).into_boxed_slice();
                                    let ptr98 = vec98.as_ptr().cast::<u8>();
                                    let len98 = vec98.len();
                                    ::core::mem::forget(vec98);
                                    *ptr64
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len98;
                                    *ptr64
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr98.cast_mut();
                                }
                                V100::ConnectionError(e) => {
                                    *ptr64.add(8).cast::<u8>() = (9i32) as u8;
                                    let vec99 = (e.into_bytes()).into_boxed_slice();
                                    let ptr99 = vec99.as_ptr().cast::<u8>();
                                    let len99 = vec99.len();
                                    ::core::mem::forget(vec99);
                                    *ptr64
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len99;
                                    *ptr64
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr99.cast_mut();
                                }
                            }
                        }
                    };
                    ptr64
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_upsert_namespace<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(8).cast::<*mut u8>();
                            let l2 = *arg0
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                            let l3 = *arg0
                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l4 = *arg0
                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l3, l4, 1);
                            let l5 = i32::from(
                                *arg0
                                    .add(40 + 4 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l5 {
                                0 => {}
                                _ => {
                                    let l6 = *arg0
                                        .add(40 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l7 = *arg0
                                        .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base42 = l6;
                                    let len42 = l7;
                                    for i in 0..len42 {
                                        let base = base42
                                            .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let l8 = *base.add(0).cast::<*mut u8>();
                                            let l9 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l8, l9, 1);
                                            let l10 = i32::from(
                                                *base
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l10 {
                                                0 => {
                                                    let l11 = *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l12 = *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l11, l12, 1);
                                                }
                                                1 => {}
                                                2 => {}
                                                3 => {}
                                                4 => {
                                                    let l13 = *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l14 = *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base23 = l13;
                                                    let len23 = l14;
                                                    for i in 0..len23 {
                                                        let base = base23.add(i * 24);
                                                        {
                                                            let l15 = i32::from(*base.add(0).cast::<u8>());
                                                            match l15 {
                                                                0 => {
                                                                    let l16 = *base.add(8).cast::<*mut u8>();
                                                                    let l17 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l16, l17, 1);
                                                                }
                                                                1 => {}
                                                                2 => {}
                                                                3 => {}
                                                                4 => {}
                                                                5 => {
                                                                    let l18 = *base.add(8).cast::<*mut u8>();
                                                                    let l19 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l18, l19, 1);
                                                                }
                                                                6 => {}
                                                                _ => {
                                                                    let l20 = *base.add(8).cast::<*mut u8>();
                                                                    let l21 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base22 = l20;
                                                                    let len22 = l21;
                                                                    _rt::cabi_dealloc(base22, len22 * 1, 1);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(base23, len23 * 24, 8);
                                                }
                                                5 => {
                                                    let l24 = *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l25 = *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base36 = l24;
                                                    let len36 = l25;
                                                    for i in 0..len36 {
                                                        let base = base36
                                                            .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l26 = *base.add(0).cast::<*mut u8>();
                                                            let l27 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l26, l27, 1);
                                                            let l28 = i32::from(
                                                                *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l28 {
                                                                0 => {
                                                                    let l29 = *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l30 = *base
                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l29, l30, 1);
                                                                }
                                                                1 => {}
                                                                2 => {}
                                                                3 => {}
                                                                4 => {}
                                                                5 => {
                                                                    let l31 = *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l32 = *base
                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l31, l32, 1);
                                                                }
                                                                6 => {}
                                                                _ => {
                                                                    let l33 = *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l34 = *base
                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base35 = l33;
                                                                    let len35 = l34;
                                                                    _rt::cabi_dealloc(base35, len35 * 1, 1);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base36,
                                                        len36 * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                        8,
                                                    );
                                                }
                                                6 => {}
                                                7 => {}
                                                8 => {
                                                    let l37 = *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l38 = *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l37, l38, 1);
                                                }
                                                _ => {
                                                    let l39 = *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l40 = *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base41 = l39;
                                                    let len41 = l40;
                                                    _rt::cabi_dealloc(base41, len41 * 1, 1);
                                                }
                                            }
                                        }
                                    }
                                    _rt::cabi_dealloc(
                                        base42,
                                        len42 * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                        8,
                                    );
                                }
                            }
                        }
                        _ => {
                            let l43 = i32::from(*arg0.add(8).cast::<u8>());
                            match l43 {
                                0 => {
                                    let l44 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l45 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l44, l45, 1);
                                }
                                1 => {
                                    let l46 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l47 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l46, l47, 1);
                                }
                                2 => {
                                    let l48 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l49 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l48, l49, 1);
                                }
                                3 => {
                                    let l50 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l51 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l50, l51, 1);
                                }
                                4 => {
                                    let l52 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l53 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l52, l53, 1);
                                }
                                5 => {
                                    let l54 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l55 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l54, l55, 1);
                                }
                                6 => {
                                    let l56 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l57 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l56, l57, 1);
                                }
                                7 => {
                                    let l58 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l59 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l58, l59, 1);
                                }
                                8 => {
                                    let l60 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l61 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l60, l61, 1);
                                }
                                _ => {
                                    let l62 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l63 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l62, l63, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_list_namespaces_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let result1 = T::list_namespaces(_rt::string_lift(bytes0));
                    let ptr2 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result1 {
                        Ok(e) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                            let vec28 = e;
                            let len28 = vec28.len();
                            let layout28 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec28.len()
                                    * (40 + 6 * ::core::mem::size_of::<*const u8>()),
                                8,
                            );
                            let result28 = if layout28.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout28).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout28);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec28.into_iter().enumerate() {
                                let base = result28
                                    .add(i * (40 + 6 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let NamespaceInfo {
                                        name: name3,
                                        collection: collection3,
                                        vector_count: vector_count3,
                                        size_bytes: size_bytes3,
                                        created_at: created_at3,
                                        metadata: metadata3,
                                    } = e;
                                    let vec4 = (name3.into_bytes()).into_boxed_slice();
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    ::core::mem::forget(vec4);
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len4;
                                    *base.add(0).cast::<*mut u8>() = ptr4.cast_mut();
                                    let vec5 = (collection3.into_bytes()).into_boxed_slice();
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    ::core::mem::forget(vec5);
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len5;
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr5.cast_mut();
                                    *base
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i64>() = _rt::as_i64(vector_count3);
                                    *base
                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i64>() = _rt::as_i64(size_bytes3);
                                    match created_at3 {
                                        Some(e) => {
                                            *base
                                                .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            *base
                                                .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i64>() = _rt::as_i64(e);
                                        }
                                        None => {
                                            *base
                                                .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match metadata3 {
                                        Some(e) => {
                                            *base
                                                .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec27 = e;
                                            let len27 = vec27.len();
                                            let layout27 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec27.len()
                                                    * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                8,
                                            );
                                            let result27 = if layout27.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout27).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout27);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec27.into_iter().enumerate() {
                                                let base = result27
                                                    .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let (t6_0, t6_1) = e;
                                                    let vec7 = (t6_0.into_bytes()).into_boxed_slice();
                                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                                    let len7 = vec7.len();
                                                    ::core::mem::forget(vec7);
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len7;
                                                    *base.add(0).cast::<*mut u8>() = ptr7.cast_mut();
                                                    use super::super::super::super::golem::vector::types::FlatMetadataValue as V26;
                                                    match t6_1 {
                                                        V26::StringVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                            let vec8 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr8 = vec8.as_ptr().cast::<u8>();
                                                            let len8 = vec8.len();
                                                            ::core::mem::forget(vec8);
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len8;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr8.cast_mut();
                                                        }
                                                        V26::NumberVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<f64>() = _rt::as_f64(e);
                                                        }
                                                        V26::IntegerVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (2i32) as u8;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<i64>() = _rt::as_i64(e);
                                                        }
                                                        V26::BooleanVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (3i32) as u8;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (match e {
                                                                true => 1,
                                                                false => 0,
                                                            }) as u8;
                                                        }
                                                        V26::ArrayVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (4i32) as u8;
                                                            let vec14 = e;
                                                            let len14 = vec14.len();
                                                            let layout14 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec14.len() * 24,
                                                                8,
                                                            );
                                                            let result14 = if layout14.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout14).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout14);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec14.into_iter().enumerate() {
                                                                let base = result14.add(i * 24);
                                                                {
                                                                    use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V13;
                                                                    match e {
                                                                        V13::StringVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                            let vec9 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr9 = vec9.as_ptr().cast::<u8>();
                                                                            let len9 = vec9.len();
                                                                            ::core::mem::forget(vec9);
                                                                            *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len9;
                                                                            *base.add(8).cast::<*mut u8>() = ptr9.cast_mut();
                                                                        }
                                                                        V13::NumberVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                            *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                                                        }
                                                                        V13::IntegerVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (2i32) as u8;
                                                                            *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                                        }
                                                                        V13::BooleanVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (3i32) as u8;
                                                                            *base.add(8).cast::<u8>() = (match e {
                                                                                true => 1,
                                                                                false => 0,
                                                                            }) as u8;
                                                                        }
                                                                        V13::NullVal => {
                                                                            *base.add(0).cast::<u8>() = (4i32) as u8;
                                                                        }
                                                                        V13::DatetimeVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (5i32) as u8;
                                                                            let vec10 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr10 = vec10.as_ptr().cast::<u8>();
                                                                            let len10 = vec10.len();
                                                                            ::core::mem::forget(vec10);
                                                                            *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len10;
                                                                            *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                                                        }
                                                                        V13::GeoVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (6i32) as u8;
                                                                            let super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                                latitude: latitude11,
                                                                                longitude: longitude11,
                                                                            } = e;
                                                                            *base.add(8).cast::<f64>() = _rt::as_f64(latitude11);
                                                                            *base.add(16).cast::<f64>() = _rt::as_f64(longitude11);
                                                                        }
                                                                        V13::BlobVal(e) => {
                                                                            *base.add(0).cast::<u8>() = (7i32) as u8;
                                                                            let vec12 = (e).into_boxed_slice();
                                                                            let ptr12 = vec12.as_ptr().cast::<u8>();
                                                                            let len12 = vec12.len();
                                                                            ::core::mem::forget(vec12);
                                                                            *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len12;
                                                                            *base.add(8).cast::<*mut u8>() = ptr12.cast_mut();
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len14;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result14;
                                                        }
                                                        V26::ObjectVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (5i32) as u8;
                                                            let vec22 = e;
                                                            let len22 = vec22.len();
                                                            let layout22 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec22.len()
                                                                    * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                            let result22 = if layout22.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout22).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout22);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec22.into_iter().enumerate() {
                                                                let base = result22
                                                                    .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let (t15_0, t15_1) = e;
                                                                    let vec16 = (t15_0.into_bytes()).into_boxed_slice();
                                                                    let ptr16 = vec16.as_ptr().cast::<u8>();
                                                                    let len16 = vec16.len();
                                                                    ::core::mem::forget(vec16);
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len16;
                                                                    *base.add(0).cast::<*mut u8>() = ptr16.cast_mut();
                                                                    use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V21;
                                                                    match t15_1 {
                                                                        V21::StringVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                            let vec17 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr17 = vec17.as_ptr().cast::<u8>();
                                                                            let len17 = vec17.len();
                                                                            ::core::mem::forget(vec17);
                                                                            *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len17;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr17.cast_mut();
                                                                        }
                                                                        V21::NumberVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<f64>() = _rt::as_f64(e);
                                                                        }
                                                                        V21::IntegerVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (2i32) as u8;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i64>() = _rt::as_i64(e);
                                                                        }
                                                                        V21::BooleanVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (3i32) as u8;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (match e {
                                                                                true => 1,
                                                                                false => 0,
                                                                            }) as u8;
                                                                        }
                                                                        V21::NullVal => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (4i32) as u8;
                                                                        }
                                                                        V21::DatetimeVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (5i32) as u8;
                                                                            let vec18 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr18 = vec18.as_ptr().cast::<u8>();
                                                                            let len18 = vec18.len();
                                                                            ::core::mem::forget(vec18);
                                                                            *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len18;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr18.cast_mut();
                                                                        }
                                                                        V21::GeoVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (6i32) as u8;
                                                                            let super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                                latitude: latitude19,
                                                                                longitude: longitude19,
                                                                            } = e;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<f64>() = _rt::as_f64(latitude19);
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<f64>() = _rt::as_f64(longitude19);
                                                                        }
                                                                        V21::BlobVal(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (7i32) as u8;
                                                                            let vec20 = (e).into_boxed_slice();
                                                                            let ptr20 = vec20.as_ptr().cast::<u8>();
                                                                            let len20 = vec20.len();
                                                                            ::core::mem::forget(vec20);
                                                                            *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len20;
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr20.cast_mut();
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len22;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result22;
                                                        }
                                                        V26::NullVal => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (6i32) as u8;
                                                        }
                                                        V26::GeoVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (7i32) as u8;
                                                            let super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                latitude: latitude23,
                                                                longitude: longitude23,
                                                            } = e;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<f64>() = _rt::as_f64(latitude23);
                                                            *base
                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<f64>() = _rt::as_f64(longitude23);
                                                        }
                                                        V26::DatetimeVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (8i32) as u8;
                                                            let vec24 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr24 = vec24.as_ptr().cast::<u8>();
                                                            let len24 = vec24.len();
                                                            ::core::mem::forget(vec24);
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len24;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr24.cast_mut();
                                                        }
                                                        V26::BlobVal(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (9i32) as u8;
                                                            let vec25 = (e).into_boxed_slice();
                                                            let ptr25 = vec25.as_ptr().cast::<u8>();
                                                            let len25 = vec25.len();
                                                            ::core::mem::forget(vec25);
                                                            *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len25;
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr25.cast_mut();
                                                        }
                                                    }
                                                }
                                            }
                                            *base
                                                .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len27;
                                            *base
                                                .add(32 + 5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result27;
                                        }
                                        None => {
                                            *base
                                                .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                            }
                            *ptr2
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len28;
                            *ptr2
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result28;
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::golem::vector::types::VectorError as V39;
                            match e {
                                V39::NotFound(e) => {
                                    *ptr2
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                    let vec29 = (e.into_bytes()).into_boxed_slice();
                                    let ptr29 = vec29.as_ptr().cast::<u8>();
                                    let len29 = vec29.len();
                                    ::core::mem::forget(vec29);
                                    *ptr2
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len29;
                                    *ptr2
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr29.cast_mut();
                                }
                                V39::AlreadyExists(e) => {
                                    *ptr2
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec30 = (e.into_bytes()).into_boxed_slice();
                                    let ptr30 = vec30.as_ptr().cast::<u8>();
                                    let len30 = vec30.len();
                                    ::core::mem::forget(vec30);
                                    *ptr2
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len30;
                                    *ptr2
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr30.cast_mut();
                                }
                                V39::InvalidParams(e) => {
                                    *ptr2
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                    let vec31 = (e.into_bytes()).into_boxed_slice();
                                    let ptr31 = vec31.as_ptr().cast::<u8>();
                                    let len31 = vec31.len();
                                    ::core::mem::forget(vec31);
                                    *ptr2
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len31;
                                    *ptr2
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr31.cast_mut();
                                }
                                V39::UnsupportedFeature(e) => {
                                    *ptr2
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                    let vec32 = (e.into_bytes()).into_boxed_slice();
                                    let ptr32 = vec32.as_ptr().cast::<u8>();
                                    let len32 = vec32.len();
                                    ::core::mem::forget(vec32);
                                    *ptr2
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len32;
                                    *ptr2
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr32.cast_mut();
                                }
                                V39::DimensionMismatch(e) => {
                                    *ptr2
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (4i32) as u8;
                                    let vec33 = (e.into_bytes()).into_boxed_slice();
                                    let ptr33 = vec33.as_ptr().cast::<u8>();
                                    let len33 = vec33.len();
                                    ::core::mem::forget(vec33);
                                    *ptr2
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len33;
                                    *ptr2
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr33.cast_mut();
                                }
                                V39::InvalidVector(e) => {
                                    *ptr2
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (5i32) as u8;
                                    let vec34 = (e.into_bytes()).into_boxed_slice();
                                    let ptr34 = vec34.as_ptr().cast::<u8>();
                                    let len34 = vec34.len();
                                    ::core::mem::forget(vec34);
                                    *ptr2
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len34;
                                    *ptr2
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr34.cast_mut();
                                }
                                V39::Unauthorized(e) => {
                                    *ptr2
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (6i32) as u8;
                                    let vec35 = (e.into_bytes()).into_boxed_slice();
                                    let ptr35 = vec35.as_ptr().cast::<u8>();
                                    let len35 = vec35.len();
                                    ::core::mem::forget(vec35);
                                    *ptr2
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len35;
                                    *ptr2
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr35.cast_mut();
                                }
                                V39::RateLimited(e) => {
                                    *ptr2
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (7i32) as u8;
                                    let vec36 = (e.into_bytes()).into_boxed_slice();
                                    let ptr36 = vec36.as_ptr().cast::<u8>();
                                    let len36 = vec36.len();
                                    ::core::mem::forget(vec36);
                                    *ptr2
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len36;
                                    *ptr2
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr36.cast_mut();
                                }
                                V39::ProviderError(e) => {
                                    *ptr2
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (8i32) as u8;
                                    let vec37 = (e.into_bytes()).into_boxed_slice();
                                    let ptr37 = vec37.as_ptr().cast::<u8>();
                                    let len37 = vec37.len();
                                    ::core::mem::forget(vec37);
                                    *ptr2
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len37;
                                    *ptr2
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr37.cast_mut();
                                }
                                V39::ConnectionError(e) => {
                                    *ptr2
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (9i32) as u8;
                                    let vec38 = (e.into_bytes()).into_boxed_slice();
                                    let ptr38 = vec38.as_ptr().cast::<u8>();
                                    let len38 = vec38.len();
                                    ::core::mem::forget(vec38);
                                    *ptr2
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len38;
                                    *ptr2
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr38.cast_mut();
                                }
                            }
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_list_namespaces<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l2 = *arg0
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let base45 = l1;
                            let len45 = l2;
                            for i in 0..len45 {
                                let base = base45
                                    .add(i * (40 + 6 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let l3 = *base.add(0).cast::<*mut u8>();
                                    let l4 = *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l3, l4, 1);
                                    let l5 = *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l6 = *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l5, l6, 1);
                                    let l7 = i32::from(
                                        *base
                                            .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l7 {
                                        0 => {}
                                        _ => {
                                            let l8 = *base
                                                .add(32 + 5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l9 = *base
                                                .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base44 = l8;
                                            let len44 = l9;
                                            for i in 0..len44 {
                                                let base = base44
                                                    .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let l10 = *base.add(0).cast::<*mut u8>();
                                                    let l11 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l10, l11, 1);
                                                    let l12 = i32::from(
                                                        *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l12 {
                                                        0 => {
                                                            let l13 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l14 = *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l13, l14, 1);
                                                        }
                                                        1 => {}
                                                        2 => {}
                                                        3 => {}
                                                        4 => {
                                                            let l15 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l16 = *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base25 = l15;
                                                            let len25 = l16;
                                                            for i in 0..len25 {
                                                                let base = base25.add(i * 24);
                                                                {
                                                                    let l17 = i32::from(*base.add(0).cast::<u8>());
                                                                    match l17 {
                                                                        0 => {
                                                                            let l18 = *base.add(8).cast::<*mut u8>();
                                                                            let l19 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l18, l19, 1);
                                                                        }
                                                                        1 => {}
                                                                        2 => {}
                                                                        3 => {}
                                                                        4 => {}
                                                                        5 => {
                                                                            let l20 = *base.add(8).cast::<*mut u8>();
                                                                            let l21 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l20, l21, 1);
                                                                        }
                                                                        6 => {}
                                                                        _ => {
                                                                            let l22 = *base.add(8).cast::<*mut u8>();
                                                                            let l23 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base24 = l22;
                                                                            let len24 = l23;
                                                                            _rt::cabi_dealloc(base24, len24 * 1, 1);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(base25, len25 * 24, 8);
                                                        }
                                                        5 => {
                                                            let l26 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l27 = *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base38 = l26;
                                                            let len38 = l27;
                                                            for i in 0..len38 {
                                                                let base = base38
                                                                    .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l28 = *base.add(0).cast::<*mut u8>();
                                                                    let l29 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l28, l29, 1);
                                                                    let l30 = i32::from(
                                                                        *base
                                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l30 {
                                                                        0 => {
                                                                            let l31 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l32 = *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l31, l32, 1);
                                                                        }
                                                                        1 => {}
                                                                        2 => {}
                                                                        3 => {}
                                                                        4 => {}
                                                                        5 => {
                                                                            let l33 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l34 = *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l33, l34, 1);
                                                                        }
                                                                        6 => {}
                                                                        _ => {
                                                                            let l35 = *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l36 = *base
                                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base37 = l35;
                                                                            let len37 = l36;
                                                                            _rt::cabi_dealloc(base37, len37 * 1, 1);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base38,
                                                                len38 * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                        }
                                                        6 => {}
                                                        7 => {}
                                                        8 => {
                                                            let l39 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l40 = *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l39, l40, 1);
                                                        }
                                                        _ => {
                                                            let l41 = *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l42 = *base
                                                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base43 = l41;
                                                            let len43 = l42;
                                                            _rt::cabi_dealloc(base43, len43 * 1, 1);
                                                        }
                                                    }
                                                }
                                            }
                                            _rt::cabi_dealloc(
                                                base44,
                                                len44 * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                8,
                                            );
                                        }
                                    }
                                }
                            }
                            _rt::cabi_dealloc(
                                base45,
                                len45 * (40 + 6 * ::core::mem::size_of::<*const u8>()),
                                8,
                            );
                        }
                        _ => {
                            let l46 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l46 {
                                0 => {
                                    let l47 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l48 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l47, l48, 1);
                                }
                                1 => {
                                    let l49 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l50 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l49, l50, 1);
                                }
                                2 => {
                                    let l51 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l52 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l51, l52, 1);
                                }
                                3 => {
                                    let l53 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l54 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l53, l54, 1);
                                }
                                4 => {
                                    let l55 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l56 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l55, l56, 1);
                                }
                                5 => {
                                    let l57 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l58 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l57, l58, 1);
                                }
                                6 => {
                                    let l59 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l60 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l59, l60, 1);
                                }
                                7 => {
                                    let l61 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l62 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l61, l62, 1);
                                }
                                8 => {
                                    let l63 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l64 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l63, l64, 1);
                                }
                                _ => {
                                    let l65 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l66 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l65, l66, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_get_namespace_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let len1 = arg3;
                    let bytes1 = _rt::Vec::from_raw_parts(arg2.cast(), len1, len1);
                    let result2 = T::get_namespace(
                        _rt::string_lift(bytes0),
                        _rt::string_lift(bytes1),
                    );
                    let ptr3 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result2 {
                        Ok(e) => {
                            *ptr3.add(0).cast::<u8>() = (0i32) as u8;
                            let NamespaceInfo {
                                name: name4,
                                collection: collection4,
                                vector_count: vector_count4,
                                size_bytes: size_bytes4,
                                created_at: created_at4,
                                metadata: metadata4,
                            } = e;
                            let vec5 = (name4.into_bytes()).into_boxed_slice();
                            let ptr5 = vec5.as_ptr().cast::<u8>();
                            let len5 = vec5.len();
                            ::core::mem::forget(vec5);
                            *ptr3
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len5;
                            *ptr3.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                            let vec6 = (collection4.into_bytes()).into_boxed_slice();
                            let ptr6 = vec6.as_ptr().cast::<u8>();
                            let len6 = vec6.len();
                            ::core::mem::forget(vec6);
                            *ptr3
                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len6;
                            *ptr3
                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr6.cast_mut();
                            *ptr3
                                .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                .cast::<i64>() = _rt::as_i64(vector_count4);
                            *ptr3
                                .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                .cast::<i64>() = _rt::as_i64(size_bytes4);
                            match created_at4 {
                                Some(e) => {
                                    *ptr3
                                        .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    *ptr3
                                        .add(32 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i64>() = _rt::as_i64(e);
                                }
                                None => {
                                    *ptr3
                                        .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match metadata4 {
                                Some(e) => {
                                    *ptr3
                                        .add(40 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec28 = e;
                                    let len28 = vec28.len();
                                    let layout28 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec28.len()
                                            * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                        8,
                                    );
                                    let result28 = if layout28.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout28).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout28);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec28.into_iter().enumerate() {
                                        let base = result28
                                            .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t7_0, t7_1) = e;
                                            let vec8 = (t7_0.into_bytes()).into_boxed_slice();
                                            let ptr8 = vec8.as_ptr().cast::<u8>();
                                            let len8 = vec8.len();
                                            ::core::mem::forget(vec8);
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len8;
                                            *base.add(0).cast::<*mut u8>() = ptr8.cast_mut();
                                            use super::super::super::super::golem::vector::types::FlatMetadataValue as V27;
                                            match t7_1 {
                                                V27::StringVal(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                    let vec9 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr9 = vec9.as_ptr().cast::<u8>();
                                                    let len9 = vec9.len();
                                                    ::core::mem::forget(vec9);
                                                    *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len9;
                                                    *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr9.cast_mut();
                                                }
                                                V27::NumberVal(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<f64>() = _rt::as_f64(e);
                                                }
                                                V27::IntegerVal(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (2i32) as u8;
                                                    *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i64>() = _rt::as_i64(e);
                                                }
                                                V27::BooleanVal(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (3i32) as u8;
                                                    *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (match e {
                                                        true => 1,
                                                        false => 0,
                                                    }) as u8;
                                                }
                                                V27::ArrayVal(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (4i32) as u8;
                                                    let vec15 = e;
                                                    let len15 = vec15.len();
                                                    let layout15 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec15.len() * 24,
                                                        8,
                                                    );
                                                    let result15 = if layout15.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout15).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout15);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec15.into_iter().enumerate() {
                                                        let base = result15.add(i * 24);
                                                        {
                                                            use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V14;
                                                            match e {
                                                                V14::StringVal(e) => {
                                                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                    let vec10 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr10 = vec10.as_ptr().cast::<u8>();
                                                                    let len10 = vec10.len();
                                                                    ::core::mem::forget(vec10);
                                                                    *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len10;
                                                                    *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                                                }
                                                                V14::NumberVal(e) => {
                                                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                    *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                                                }
                                                                V14::IntegerVal(e) => {
                                                                    *base.add(0).cast::<u8>() = (2i32) as u8;
                                                                    *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                                }
                                                                V14::BooleanVal(e) => {
                                                                    *base.add(0).cast::<u8>() = (3i32) as u8;
                                                                    *base.add(8).cast::<u8>() = (match e {
                                                                        true => 1,
                                                                        false => 0,
                                                                    }) as u8;
                                                                }
                                                                V14::NullVal => {
                                                                    *base.add(0).cast::<u8>() = (4i32) as u8;
                                                                }
                                                                V14::DatetimeVal(e) => {
                                                                    *base.add(0).cast::<u8>() = (5i32) as u8;
                                                                    let vec11 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr11 = vec11.as_ptr().cast::<u8>();
                                                                    let len11 = vec11.len();
                                                                    ::core::mem::forget(vec11);
                                                                    *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len11;
                                                                    *base.add(8).cast::<*mut u8>() = ptr11.cast_mut();
                                                                }
                                                                V14::GeoVal(e) => {
                                                                    *base.add(0).cast::<u8>() = (6i32) as u8;
                                                                    let super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                        latitude: latitude12,
                                                                        longitude: longitude12,
                                                                    } = e;
                                                                    *base.add(8).cast::<f64>() = _rt::as_f64(latitude12);
                                                                    *base.add(16).cast::<f64>() = _rt::as_f64(longitude12);
                                                                }
                                                                V14::BlobVal(e) => {
                                                                    *base.add(0).cast::<u8>() = (7i32) as u8;
                                                                    let vec13 = (e).into_boxed_slice();
                                                                    let ptr13 = vec13.as_ptr().cast::<u8>();
                                                                    let len13 = vec13.len();
                                                                    ::core::mem::forget(vec13);
                                                                    *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len13;
                                                                    *base.add(8).cast::<*mut u8>() = ptr13.cast_mut();
                                                                }
                                                            }
                                                        }
                                                    }
                                                    *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len15;
                                                    *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result15;
                                                }
                                                V27::ObjectVal(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (5i32) as u8;
                                                    let vec23 = e;
                                                    let len23 = vec23.len();
                                                    let layout23 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec23.len()
                                                            * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                        8,
                                                    );
                                                    let result23 = if layout23.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout23).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout23);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec23.into_iter().enumerate() {
                                                        let base = result23
                                                            .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let (t16_0, t16_1) = e;
                                                            let vec17 = (t16_0.into_bytes()).into_boxed_slice();
                                                            let ptr17 = vec17.as_ptr().cast::<u8>();
                                                            let len17 = vec17.len();
                                                            ::core::mem::forget(vec17);
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len17;
                                                            *base.add(0).cast::<*mut u8>() = ptr17.cast_mut();
                                                            use super::super::super::super::golem::vector::types::FlatMetadataLeaf as V22;
                                                            match t16_1 {
                                                                V22::StringVal(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                    let vec18 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr18 = vec18.as_ptr().cast::<u8>();
                                                                    let len18 = vec18.len();
                                                                    ::core::mem::forget(vec18);
                                                                    *base
                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len18;
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr18.cast_mut();
                                                                }
                                                                V22::NumberVal(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<f64>() = _rt::as_f64(e);
                                                                }
                                                                V22::IntegerVal(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (2i32) as u8;
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i64>() = _rt::as_i64(e);
                                                                }
                                                                V22::BooleanVal(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (3i32) as u8;
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (match e {
                                                                        true => 1,
                                                                        false => 0,
                                                                    }) as u8;
                                                                }
                                                                V22::NullVal => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (4i32) as u8;
                                                                }
                                                                V22::DatetimeVal(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (5i32) as u8;
                                                                    let vec19 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr19 = vec19.as_ptr().cast::<u8>();
                                                                    let len19 = vec19.len();
                                                                    ::core::mem::forget(vec19);
                                                                    *base
                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len19;
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr19.cast_mut();
                                                                }
                                                                V22::GeoVal(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (6i32) as u8;
                                                                    let super::super::super::super::golem::vector::types::GeoCoordinates {
                                                                        latitude: latitude20,
                                                                        longitude: longitude20,
                                                                    } = e;
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<f64>() = _rt::as_f64(latitude20);
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<f64>() = _rt::as_f64(longitude20);
                                                                }
                                                                V22::BlobVal(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (7i32) as u8;
                                                                    let vec21 = (e).into_boxed_slice();
                                                                    let ptr21 = vec21.as_ptr().cast::<u8>();
                                                                    let len21 = vec21.len();
                                                                    ::core::mem::forget(vec21);
                                                                    *base
                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len21;
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr21.cast_mut();
                                                                }
                                                            }
                                                        }
                                                    }
                                                    *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len23;
                                                    *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result23;
                                                }
                                                V27::NullVal => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (6i32) as u8;
                                                }
                                                V27::GeoVal(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (7i32) as u8;
                                                    let super::super::super::super::golem::vector::types::GeoCoordinates {
                                                        latitude: latitude24,
                                                        longitude: longitude24,
                                                    } = e;
                                                    *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<f64>() = _rt::as_f64(latitude24);
                                                    *base
                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<f64>() = _rt::as_f64(longitude24);
                                                }
                                                V27::DatetimeVal(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (8i32) as u8;
                                                    let vec25 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr25 = vec25.as_ptr().cast::<u8>();
                                                    let len25 = vec25.len();
                                                    ::core::mem::forget(vec25);
                                                    *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len25;
                                                    *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr25.cast_mut();
                                                }
                                                V27::BlobVal(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (9i32) as u8;
                                                    let vec26 = (e).into_boxed_slice();
                                                    let ptr26 = vec26.as_ptr().cast::<u8>();
                                                    let len26 = vec26.len();
                                                    ::core::mem::forget(vec26);
                                                    *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len26;
                                                    *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr26.cast_mut();
                                                }
                                            }
                                        }
                                    }
                                    *ptr3
                                        .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len28;
                                    *ptr3
                                        .add(40 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result28;
                                }
                                None => {
                                    *ptr3
                                        .add(40 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        Err(e) => {
                            *ptr3.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::golem::vector::types::VectorError as V39;
                            match e {
                                V39::NotFound(e) => {
                                    *ptr3.add(8).cast::<u8>() = (0i32) as u8;
                                    let vec29 = (e.into_bytes()).into_boxed_slice();
                                    let ptr29 = vec29.as_ptr().cast::<u8>();
                                    let len29 = vec29.len();
                                    ::core::mem::forget(vec29);
                                    *ptr3
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len29;
                                    *ptr3
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr29.cast_mut();
                                }
                                V39::AlreadyExists(e) => {
                                    *ptr3.add(8).cast::<u8>() = (1i32) as u8;
                                    let vec30 = (e.into_bytes()).into_boxed_slice();
                                    let ptr30 = vec30.as_ptr().cast::<u8>();
                                    let len30 = vec30.len();
                                    ::core::mem::forget(vec30);
                                    *ptr3
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len30;
                                    *ptr3
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr30.cast_mut();
                                }
                                V39::InvalidParams(e) => {
                                    *ptr3.add(8).cast::<u8>() = (2i32) as u8;
                                    let vec31 = (e.into_bytes()).into_boxed_slice();
                                    let ptr31 = vec31.as_ptr().cast::<u8>();
                                    let len31 = vec31.len();
                                    ::core::mem::forget(vec31);
                                    *ptr3
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len31;
                                    *ptr3
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr31.cast_mut();
                                }
                                V39::UnsupportedFeature(e) => {
                                    *ptr3.add(8).cast::<u8>() = (3i32) as u8;
                                    let vec32 = (e.into_bytes()).into_boxed_slice();
                                    let ptr32 = vec32.as_ptr().cast::<u8>();
                                    let len32 = vec32.len();
                                    ::core::mem::forget(vec32);
                                    *ptr3
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len32;
                                    *ptr3
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr32.cast_mut();
                                }
                                V39::DimensionMismatch(e) => {
                                    *ptr3.add(8).cast::<u8>() = (4i32) as u8;
                                    let vec33 = (e.into_bytes()).into_boxed_slice();
                                    let ptr33 = vec33.as_ptr().cast::<u8>();
                                    let len33 = vec33.len();
                                    ::core::mem::forget(vec33);
                                    *ptr3
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len33;
                                    *ptr3
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr33.cast_mut();
                                }
                                V39::InvalidVector(e) => {
                                    *ptr3.add(8).cast::<u8>() = (5i32) as u8;
                                    let vec34 = (e.into_bytes()).into_boxed_slice();
                                    let ptr34 = vec34.as_ptr().cast::<u8>();
                                    let len34 = vec34.len();
                                    ::core::mem::forget(vec34);
                                    *ptr3
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len34;
                                    *ptr3
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr34.cast_mut();
                                }
                                V39::Unauthorized(e) => {
                                    *ptr3.add(8).cast::<u8>() = (6i32) as u8;
                                    let vec35 = (e.into_bytes()).into_boxed_slice();
                                    let ptr35 = vec35.as_ptr().cast::<u8>();
                                    let len35 = vec35.len();
                                    ::core::mem::forget(vec35);
                                    *ptr3
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len35;
                                    *ptr3
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr35.cast_mut();
                                }
                                V39::RateLimited(e) => {
                                    *ptr3.add(8).cast::<u8>() = (7i32) as u8;
                                    let vec36 = (e.into_bytes()).into_boxed_slice();
                                    let ptr36 = vec36.as_ptr().cast::<u8>();
                                    let len36 = vec36.len();
                                    ::core::mem::forget(vec36);
                                    *ptr3
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len36;
                                    *ptr3
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr36.cast_mut();
                                }
                                V39::ProviderError(e) => {
                                    *ptr3.add(8).cast::<u8>() = (8i32) as u8;
                                    let vec37 = (e.into_bytes()).into_boxed_slice();
                                    let ptr37 = vec37.as_ptr().cast::<u8>();
                                    let len37 = vec37.len();
                                    ::core::mem::forget(vec37);
                                    *ptr3
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len37;
                                    *ptr3
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr37.cast_mut();
                                }
                                V39::ConnectionError(e) => {
                                    *ptr3.add(8).cast::<u8>() = (9i32) as u8;
                                    let vec38 = (e.into_bytes()).into_boxed_slice();
                                    let ptr38 = vec38.as_ptr().cast::<u8>();
                                    let len38 = vec38.len();
                                    ::core::mem::forget(vec38);
                                    *ptr3
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len38;
                                    *ptr3
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr38.cast_mut();
                                }
                            }
                        }
                    };
                    ptr3
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_get_namespace<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(8).cast::<*mut u8>();
                            let l2 = *arg0
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                            let l3 = *arg0
                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l4 = *arg0
                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l3, l4, 1);
                            let l5 = i32::from(
                                *arg0
                                    .add(40 + 4 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l5 {
                                0 => {}
                                _ => {
                                    let l6 = *arg0
                                        .add(40 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l7 = *arg0
                                        .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base42 = l6;
                                    let len42 = l7;
                                    for i in 0..len42 {
                                        let base = base42
                                            .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let l8 = *base.add(0).cast::<*mut u8>();
                                            let l9 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l8, l9, 1);
                                            let l10 = i32::from(
                                                *base
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l10 {
                                                0 => {
                                                    let l11 = *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l12 = *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l11, l12, 1);
                                                }
                                                1 => {}
                                                2 => {}
                                                3 => {}
                                                4 => {
                                                    let l13 = *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l14 = *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base23 = l13;
                                                    let len23 = l14;
                                                    for i in 0..len23 {
                                                        let base = base23.add(i * 24);
                                                        {
                                                            let l15 = i32::from(*base.add(0).cast::<u8>());
                                                            match l15 {
                                                                0 => {
                                                                    let l16 = *base.add(8).cast::<*mut u8>();
                                                                    let l17 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l16, l17, 1);
                                                                }
                                                                1 => {}
                                                                2 => {}
                                                                3 => {}
                                                                4 => {}
                                                                5 => {
                                                                    let l18 = *base.add(8).cast::<*mut u8>();
                                                                    let l19 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l18, l19, 1);
                                                                }
                                                                6 => {}
                                                                _ => {
                                                                    let l20 = *base.add(8).cast::<*mut u8>();
                                                                    let l21 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base22 = l20;
                                                                    let len22 = l21;
                                                                    _rt::cabi_dealloc(base22, len22 * 1, 1);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(base23, len23 * 24, 8);
                                                }
                                                5 => {
                                                    let l24 = *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l25 = *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base36 = l24;
                                                    let len36 = l25;
                                                    for i in 0..len36 {
                                                        let base = base36
                                                            .add(i * (24 + 2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l26 = *base.add(0).cast::<*mut u8>();
                                                            let l27 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l26, l27, 1);
                                                            let l28 = i32::from(
                                                                *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l28 {
                                                                0 => {
                                                                    let l29 = *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l30 = *base
                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l29, l30, 1);
                                                                }
                                                                1 => {}
                                                                2 => {}
                                                                3 => {}
                                                                4 => {}
                                                                5 => {
                                                                    let l31 = *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l32 = *base
                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l31, l32, 1);
                                                                }
                                                                6 => {}
                                                                _ => {
                                                                    let l33 = *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l34 = *base
                                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base35 = l33;
                                                                    let len35 = l34;
                                                                    _rt::cabi_dealloc(base35, len35 * 1, 1);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base36,
                                                        len36 * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                                        8,
                                                    );
                                                }
                                                6 => {}
                                                7 => {}
                                                8 => {
                                                    let l37 = *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l38 = *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l37, l38, 1);
                                                }
                                                _ => {
                                                    let l39 = *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l40 = *base
                                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base41 = l39;
                                                    let len41 = l40;
                                                    _rt::cabi_dealloc(base41, len41 * 1, 1);
                                                }
                                            }
                                        }
                                    }
                                    _rt::cabi_dealloc(
                                        base42,
                                        len42 * (24 + 2 * ::core::mem::size_of::<*const u8>()),
                                        8,
                                    );
                                }
                            }
                        }
                        _ => {
                            let l43 = i32::from(*arg0.add(8).cast::<u8>());
                            match l43 {
                                0 => {
                                    let l44 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l45 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l44, l45, 1);
                                }
                                1 => {
                                    let l46 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l47 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l46, l47, 1);
                                }
                                2 => {
                                    let l48 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l49 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l48, l49, 1);
                                }
                                3 => {
                                    let l50 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l51 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l50, l51, 1);
                                }
                                4 => {
                                    let l52 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l53 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l52, l53, 1);
                                }
                                5 => {
                                    let l54 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l55 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l54, l55, 1);
                                }
                                6 => {
                                    let l56 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l57 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l56, l57, 1);
                                }
                                7 => {
                                    let l58 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l59 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l58, l59, 1);
                                }
                                8 => {
                                    let l60 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l61 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l60, l61, 1);
                                }
                                _ => {
                                    let l62 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l63 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l62, l63, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_delete_namespace_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let len1 = arg3;
                    let bytes1 = _rt::Vec::from_raw_parts(arg2.cast(), len1, len1);
                    let result2 = T::delete_namespace(
                        _rt::string_lift(bytes0),
                        _rt::string_lift(bytes1),
                    );
                    let ptr3 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result2 {
                        Ok(_) => {
                            *ptr3.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr3.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::golem::vector::types::VectorError as V14;
                            match e {
                                V14::NotFound(e) => {
                                    *ptr3
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                    let vec4 = (e.into_bytes()).into_boxed_slice();
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    ::core::mem::forget(vec4);
                                    *ptr3
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len4;
                                    *ptr3
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr4.cast_mut();
                                }
                                V14::AlreadyExists(e) => {
                                    *ptr3
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec5 = (e.into_bytes()).into_boxed_slice();
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    ::core::mem::forget(vec5);
                                    *ptr3
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len5;
                                    *ptr3
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr5.cast_mut();
                                }
                                V14::InvalidParams(e) => {
                                    *ptr3
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                    let vec6 = (e.into_bytes()).into_boxed_slice();
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    ::core::mem::forget(vec6);
                                    *ptr3
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len6;
                                    *ptr3
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr6.cast_mut();
                                }
                                V14::UnsupportedFeature(e) => {
                                    *ptr3
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                    let vec7 = (e.into_bytes()).into_boxed_slice();
                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                    let len7 = vec7.len();
                                    ::core::mem::forget(vec7);
                                    *ptr3
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len7;
                                    *ptr3
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr7.cast_mut();
                                }
                                V14::DimensionMismatch(e) => {
                                    *ptr3
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (4i32) as u8;
                                    let vec8 = (e.into_bytes()).into_boxed_slice();
                                    let ptr8 = vec8.as_ptr().cast::<u8>();
                                    let len8 = vec8.len();
                                    ::core::mem::forget(vec8);
                                    *ptr3
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len8;
                                    *ptr3
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr8.cast_mut();
                                }
                                V14::InvalidVector(e) => {
                                    *ptr3
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (5i32) as u8;
                                    let vec9 = (e.into_bytes()).into_boxed_slice();
                                    let ptr9 = vec9.as_ptr().cast::<u8>();
                                    let len9 = vec9.len();
                                    ::core::mem::forget(vec9);
                                    *ptr3
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len9;
                                    *ptr3
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr9.cast_mut();
                                }
                                V14::Unauthorized(e) => {
                                    *ptr3
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (6i32) as u8;
                                    let vec10 = (e.into_bytes()).into_boxed_slice();
                                    let ptr10 = vec10.as_ptr().cast::<u8>();
                                    let len10 = vec10.len();
                                    ::core::mem::forget(vec10);
                                    *ptr3
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len10;
                                    *ptr3
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr10.cast_mut();
                                }
                                V14::RateLimited(e) => {
                                    *ptr3
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (7i32) as u8;
                                    let vec11 = (e.into_bytes()).into_boxed_slice();
                                    let ptr11 = vec11.as_ptr().cast::<u8>();
                                    let len11 = vec11.len();
                                    ::core::mem::forget(vec11);
                                    *ptr3
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len11;
                                    *ptr3
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr11.cast_mut();
                                }
                                V14::ProviderError(e) => {
                                    *ptr3
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (8i32) as u8;
                                    let vec12 = (e.into_bytes()).into_boxed_slice();
                                    let ptr12 = vec12.as_ptr().cast::<u8>();
                                    let len12 = vec12.len();
                                    ::core::mem::forget(vec12);
                                    *ptr3
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len12;
                                    *ptr3
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr12.cast_mut();
                                }
                                V14::ConnectionError(e) => {
                                    *ptr3
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (9i32) as u8;
                                    let vec13 = (e.into_bytes()).into_boxed_slice();
                                    let ptr13 = vec13.as_ptr().cast::<u8>();
                                    let len13 = vec13.len();
                                    ::core::mem::forget(vec13);
                                    *ptr3
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len13;
                                    *ptr3
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr13.cast_mut();
                                }
                            }
                        }
                    };
                    ptr3
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_delete_namespace<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l1 {
                                0 => {
                                    let l2 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l3 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                }
                                1 => {
                                    let l4 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l5 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                                2 => {
                                    let l6 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l7 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l6, l7, 1);
                                }
                                3 => {
                                    let l8 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l9 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l8, l9, 1);
                                }
                                4 => {
                                    let l10 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l11 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l10, l11, 1);
                                }
                                5 => {
                                    let l12 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l13 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l12, l13, 1);
                                }
                                6 => {
                                    let l14 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l15 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l14, l15, 1);
                                }
                                7 => {
                                    let l16 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l17 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l16, l17, 1);
                                }
                                8 => {
                                    let l18 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l19 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l18, l19, 1);
                                }
                                _ => {
                                    let l20 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l21 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l20, l21, 1);
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_namespace_exists_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let len1 = arg3;
                    let bytes1 = _rt::Vec::from_raw_parts(arg2.cast(), len1, len1);
                    let result2 = T::namespace_exists(
                        _rt::string_lift(bytes0),
                        _rt::string_lift(bytes1),
                    );
                    let ptr3 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result2 {
                        Ok(e) => {
                            *ptr3.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr3
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (match e {
                                true => 1,
                                false => 0,
                            }) as u8;
                        }
                        Err(e) => {
                            *ptr3.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::golem::vector::types::VectorError as V14;
                            match e {
                                V14::NotFound(e) => {
                                    *ptr3
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                    let vec4 = (e.into_bytes()).into_boxed_slice();
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    ::core::mem::forget(vec4);
                                    *ptr3
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len4;
                                    *ptr3
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr4.cast_mut();
                                }
                                V14::AlreadyExists(e) => {
                                    *ptr3
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec5 = (e.into_bytes()).into_boxed_slice();
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    ::core::mem::forget(vec5);
                                    *ptr3
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len5;
                                    *ptr3
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr5.cast_mut();
                                }
                                V14::InvalidParams(e) => {
                                    *ptr3
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                    let vec6 = (e.into_bytes()).into_boxed_slice();
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    ::core::mem::forget(vec6);
                                    *ptr3
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len6;
                                    *ptr3
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr6.cast_mut();
                                }
                                V14::UnsupportedFeature(e) => {
                                    *ptr3
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                    let vec7 = (e.into_bytes()).into_boxed_slice();
                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                    let len7 = vec7.len();
                                    ::core::mem::forget(vec7);
                                    *ptr3
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len7;
                                    *ptr3
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr7.cast_mut();
                                }
                                V14::DimensionMismatch(e) => {
                                    *ptr3
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (4i32) as u8;
                                    let vec8 = (e.into_bytes()).into_boxed_slice();
                                    let ptr8 = vec8.as_ptr().cast::<u8>();
                                    let len8 = vec8.len();
                                    ::core::mem::forget(vec8);
                                    *ptr3
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len8;
                                    *ptr3
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr8.cast_mut();
                                }
                                V14::InvalidVector(e) => {
                                    *ptr3
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (5i32) as u8;
                                    let vec9 = (e.into_bytes()).into_boxed_slice();
                                    let ptr9 = vec9.as_ptr().cast::<u8>();
                                    let len9 = vec9.len();
                                    ::core::mem::forget(vec9);
                                    *ptr3
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len9;
                                    *ptr3
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr9.cast_mut();
                                }
                                V14::Unauthorized(e) => {
                                    *ptr3
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (6i32) as u8;
                                    let vec10 = (e.into_bytes()).into_boxed_slice();
                                    let ptr10 = vec10.as_ptr().cast::<u8>();
                                    let len10 = vec10.len();
                                    ::core::mem::forget(vec10);
                                    *ptr3
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len10;
                                    *ptr3
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr10.cast_mut();
                                }
                                V14::RateLimited(e) => {
                                    *ptr3
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (7i32) as u8;
                                    let vec11 = (e.into_bytes()).into_boxed_slice();
                                    let ptr11 = vec11.as_ptr().cast::<u8>();
                                    let len11 = vec11.len();
                                    ::core::mem::forget(vec11);
                                    *ptr3
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len11;
                                    *ptr3
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr11.cast_mut();
                                }
                                V14::ProviderError(e) => {
                                    *ptr3
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (8i32) as u8;
                                    let vec12 = (e.into_bytes()).into_boxed_slice();
                                    let ptr12 = vec12.as_ptr().cast::<u8>();
                                    let len12 = vec12.len();
                                    ::core::mem::forget(vec12);
                                    *ptr3
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len12;
                                    *ptr3
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr12.cast_mut();
                                }
                                V14::ConnectionError(e) => {
                                    *ptr3
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (9i32) as u8;
                                    let vec13 = (e.into_bytes()).into_boxed_slice();
                                    let ptr13 = vec13.as_ptr().cast::<u8>();
                                    let len13 = vec13.len();
                                    ::core::mem::forget(vec13);
                                    *ptr3
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len13;
                                    *ptr3
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr13.cast_mut();
                                }
                            }
                        }
                    };
                    ptr3
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_namespace_exists<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l1 {
                                0 => {
                                    let l2 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l3 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                }
                                1 => {
                                    let l4 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l5 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                                2 => {
                                    let l6 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l7 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l6, l7, 1);
                                }
                                3 => {
                                    let l8 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l9 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l8, l9, 1);
                                }
                                4 => {
                                    let l10 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l11 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l10, l11, 1);
                                }
                                5 => {
                                    let l12 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l13 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l12, l13, 1);
                                }
                                6 => {
                                    let l14 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l15 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l14, l15, 1);
                                }
                                7 => {
                                    let l16 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l17 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l16, l17, 1);
                                }
                                8 => {
                                    let l18 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l19 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l18, l19, 1);
                                }
                                _ => {
                                    let l20 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l21 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l20, l21, 1);
                                }
                            }
                        }
                    }
                }
                pub trait Guest {
                    /// Create or update namespace (upsert)
                    fn upsert_namespace(
                        collection: _rt::String,
                        namespace: _rt::String,
                        metadata: Option<Metadata>,
                    ) -> Result<NamespaceInfo, VectorError>;
                    /// List namespaces in collection
                    fn list_namespaces(
                        collection: _rt::String,
                    ) -> Result<_rt::Vec<NamespaceInfo>, VectorError>;
                    /// Get namespace information
                    fn get_namespace(
                        collection: _rt::String,
                        namespace: _rt::String,
                    ) -> Result<NamespaceInfo, VectorError>;
                    /// Delete namespace and all vectors within it
                    fn delete_namespace(
                        collection: _rt::String,
                        namespace: _rt::String,
                    ) -> Result<(), VectorError>;
                    /// Check if namespace exists
                    fn namespace_exists(
                        collection: _rt::String,
                        namespace: _rt::String,
                    ) -> Result<bool, VectorError>;
                }
                #[doc(hidden)]
                macro_rules! __export_golem_vector_namespaces_1_0_0_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "golem:vector/namespaces@1.0.0#upsert-namespace")] unsafe extern
                        "C" fn export_upsert_namespace(arg0 : * mut u8, arg1 : usize,
                        arg2 : * mut u8, arg3 : usize, arg4 : i32, arg5 : * mut u8, arg6
                        : usize,) -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_upsert_namespace_cabi::<$ty > (arg0, arg1, arg2, arg3,
                        arg4, arg5, arg6) } } #[unsafe (export_name =
                        "cabi_post_golem:vector/namespaces@1.0.0#upsert-namespace")]
                        unsafe extern "C" fn _post_return_upsert_namespace(arg0 : * mut
                        u8,) { unsafe { $($path_to_types)*::
                        __post_return_upsert_namespace::<$ty > (arg0) } } #[unsafe
                        (export_name = "golem:vector/namespaces@1.0.0#list-namespaces")]
                        unsafe extern "C" fn export_list_namespaces(arg0 : * mut u8, arg1
                        : usize,) -> * mut u8 { unsafe { $($path_to_types)*::
                        _export_list_namespaces_cabi::<$ty > (arg0, arg1) } } #[unsafe
                        (export_name =
                        "cabi_post_golem:vector/namespaces@1.0.0#list-namespaces")]
                        unsafe extern "C" fn _post_return_list_namespaces(arg0 : * mut
                        u8,) { unsafe { $($path_to_types)*::
                        __post_return_list_namespaces::<$ty > (arg0) } } #[unsafe
                        (export_name = "golem:vector/namespaces@1.0.0#get-namespace")]
                        unsafe extern "C" fn export_get_namespace(arg0 : * mut u8, arg1 :
                        usize, arg2 : * mut u8, arg3 : usize,) -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_get_namespace_cabi::<$ty > (arg0,
                        arg1, arg2, arg3) } } #[unsafe (export_name =
                        "cabi_post_golem:vector/namespaces@1.0.0#get-namespace")] unsafe
                        extern "C" fn _post_return_get_namespace(arg0 : * mut u8,) {
                        unsafe { $($path_to_types)*:: __post_return_get_namespace::<$ty >
                        (arg0) } } #[unsafe (export_name =
                        "golem:vector/namespaces@1.0.0#delete-namespace")] unsafe extern
                        "C" fn export_delete_namespace(arg0 : * mut u8, arg1 : usize,
                        arg2 : * mut u8, arg3 : usize,) -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_delete_namespace_cabi::<$ty > (arg0,
                        arg1, arg2, arg3) } } #[unsafe (export_name =
                        "cabi_post_golem:vector/namespaces@1.0.0#delete-namespace")]
                        unsafe extern "C" fn _post_return_delete_namespace(arg0 : * mut
                        u8,) { unsafe { $($path_to_types)*::
                        __post_return_delete_namespace::<$ty > (arg0) } } #[unsafe
                        (export_name = "golem:vector/namespaces@1.0.0#namespace-exists")]
                        unsafe extern "C" fn export_namespace_exists(arg0 : * mut u8,
                        arg1 : usize, arg2 : * mut u8, arg3 : usize,) -> * mut u8 {
                        unsafe { $($path_to_types)*:: _export_namespace_exists_cabi::<$ty
                        > (arg0, arg1, arg2, arg3) } } #[unsafe (export_name =
                        "cabi_post_golem:vector/namespaces@1.0.0#namespace-exists")]
                        unsafe extern "C" fn _post_return_namespace_exists(arg0 : * mut
                        u8,) { unsafe { $($path_to_types)*::
                        __post_return_namespace_exists::<$ty > (arg0) } } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_golem_vector_namespaces_1_0_0_cabi;
                #[repr(align(8))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<
                        u8,
                    >; 48 + 6 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 48
                        + 6 * ::core::mem::size_of::<*const u8>()],
                );
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            unsafe { core::hint::unreachable_unchecked() }
        }
    }
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            val != 0
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }
    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }
    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }
    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }
    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }
    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }
    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    pub fn as_f64<T: AsF64>(t: T) -> f64 {
        t.as_f64()
    }
    pub trait AsF64 {
        fn as_f64(self) -> f64;
    }
    impl<'a, T: Copy + AsF64> AsF64 for &'a T {
        fn as_f64(self) -> f64 {
            (*self).as_f64()
        }
    }
    impl AsF64 for f64 {
        #[inline]
        fn as_f64(self) -> f64 {
            self as f64
        }
    }
    pub use alloc_crate::alloc;
    pub fn as_f32<T: AsF32>(t: T) -> f32 {
        t.as_f32()
    }
    pub trait AsF32 {
        fn as_f32(self) -> f32;
    }
    impl<'a, T: Copy + AsF32> AsF32 for &'a T {
        fn as_f32(self) -> f32 {
            (*self).as_f32()
        }
    }
    impl AsF32 for f32 {
        #[inline]
        fn as_f32(self) -> f32 {
            self as f32
        }
    }
    extern crate alloc as alloc_crate;
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_vector_library_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::golem::vector::connection::__export_golem_vector_connection_1_0_0_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::golem::vector::connection);
        $($path_to_types_root)*::
        exports::golem::vector::collections::__export_golem_vector_collections_1_0_0_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::golem::vector::collections);
        $($path_to_types_root)*::
        exports::golem::vector::vectors::__export_golem_vector_vectors_1_0_0_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::golem::vector::vectors);
        $($path_to_types_root)*::
        exports::golem::vector::search::__export_golem_vector_search_1_0_0_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::golem::vector::search);
        $($path_to_types_root)*::
        exports::golem::vector::search_extended::__export_golem_vector_search_extended_1_0_0_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::golem::vector::search_extended);
        $($path_to_types_root)*::
        exports::golem::vector::analytics::__export_golem_vector_analytics_1_0_0_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::golem::vector::analytics);
        $($path_to_types_root)*::
        exports::golem::vector::namespaces::__export_golem_vector_namespaces_1_0_0_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::golem::vector::namespaces);
    };
}
#[doc(inline)]
pub(crate) use __export_vector_library_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:golem:vector-qdrant@1.0.0:vector-library:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 6673] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\x8c3\x01A\x02\x01A\x1a\
\x01B5\x01s\x04\0\x02id\x03\0\0\x01pv\x04\0\x0cdense-vector\x03\0\x02\x01py\x01p\
v\x01r\x03\x07indices\x04\x06values\x05\x10total-dimensionsy\x04\0\x0dsparse-vec\
tor\x03\0\x06\x01p}\x01r\x02\x04data\x08\x0adimensionsy\x04\0\x0dbinary-vector\x03\
\0\x09\x01r\x02\x04data\x05\x0adimensionsy\x04\0\x0bhalf-vector\x03\0\x0b\x01o\x02\
s\x03\x01p\x0d\x01o\x02\x03\x07\x01q\x06\x05dense\x01\x03\0\x06sparse\x01\x07\0\x06\
binary\x01\x0a\0\x04half\x01\x0c\0\x05named\x01\x0e\0\x06hybrid\x01\x0f\0\x04\0\x0b\
vector-data\x03\0\x10\x01m\x06\x06cosine\x09euclidean\x0bdot-product\x09manhatta\
n\x07hamming\x07jaccard\x04\0\x0fdistance-metric\x03\0\x12\x01r\x02\x08latitudeu\
\x09longitudeu\x04\0\x0fgeo-coordinates\x03\0\x14\x01q\x08\x0astring-val\x01s\0\x0a\
number-val\x01u\0\x0binteger-val\x01x\0\x0bboolean-val\x01\x7f\0\x08null-val\0\0\
\x0cdatetime-val\x01s\0\x07geo-val\x01\x15\0\x08blob-val\x01\x08\0\x04\0\x12flat\
-metadata-leaf\x03\0\x16\x01o\x02s\x17\x01p\x18\x04\0\x14flat-metadata-object\x03\
\0\x19\x01p\x17\x01q\x0a\x0astring-val\x01s\0\x0anumber-val\x01u\0\x0binteger-va\
l\x01x\0\x0bboolean-val\x01\x7f\0\x09array-val\x01\x1b\0\x0aobject-val\x01\x1a\0\
\x08null-val\0\0\x07geo-val\x01\x15\0\x0cdatetime-val\x01s\0\x08blob-val\x01\x08\
\0\x04\0\x13flat-metadata-value\x03\0\x1c\x01o\x02s\x1d\x01p\x1e\x04\0\x08metada\
ta\x03\0\x1f\x01m\x0d\x02eq\x02ne\x02gt\x03gte\x02lt\x03lte\x02in\x03nin\x08cont\
ains\x0cnot-contains\x05regex\x0ageo-within\x08geo-bbox\x04\0\x0ffilter-operator\
\x03\0!\x01r\x03\x05fields\x08operator\"\x05value\x1d\x04\0\x10filter-condition\x03\
\0#\x01q\x04\x09condition\0\0\x03and\0\0\x02or\0\0\x03not\0\0\x04\0\x09filter-op\
\x03\0%\x01k$\x01r\x04\x02idy\x02op&\x09condition'\x06inputs\x04\x04\0\x0bfilter\
-node\x03\0(\x01p)\x01r\x02\x05nodes*\x07root-idy\x04\0\x11filter-expression\x03\
\0+\x01k\x20\x01r\x03\x02id\x01\x06vector\x11\x08metadata-\x04\0\x0dvector-recor\
d\x03\0.\x01k\x11\x01r\x05\x02id\x01\x05scorev\x08distancev\x06vector0\x08metada\
ta-\x04\0\x0dsearch-result\x03\01\x01q\x0a\x09not-found\x01s\0\x0ealready-exists\
\x01s\0\x0einvalid-params\x01s\0\x13unsupported-feature\x01s\0\x12dimension-mism\
atch\x01s\0\x0einvalid-vector\x01s\0\x0cunauthorized\x01s\0\x0crate-limited\x01s\
\0\x0eprovider-error\x01s\0\x10connection-error\x01s\0\x04\0\x0cvector-error\x03\
\03\x03\0\x18golem:vector/types@1.0.0\x05\0\x02\x03\0\0\x0cvector-error\x02\x03\0\
\0\x08metadata\x01B\x1c\x02\x03\x02\x01\x01\x04\0\x0cvector-error\x03\0\0\x02\x03\
\x02\x01\x02\x04\0\x08metadata\x03\0\x02\x01ks\x01r\x04\x09client-ids\x0dclient-\
secret\x04\x09token-urls\x05scope\x04\x04\0\x0coauth-config\x03\0\x05\x01o\x02ss\
\x01p}\x01q\x05\x07api-key\x01s\0\x11username-password\x01\x07\0\x05token\x01s\0\
\x0bcertificate\x01\x08\0\x05oauth\x01\x06\0\x04\0\x0bcredentials\x03\0\x09\x01k\
w\x01r\x05\x09connected\x7f\x08provider\x04\x08endpoint\x04\x0dlast-activity\x0b\
\x0dconnection-id\x04\x04\0\x11connection-status\x03\0\x0c\x01k\x0a\x01ky\x01k\x03\
\x01j\0\x01\x01\x01@\x04\x08endpoints\x0bcredentials\x0e\x0atimeout-ms\x0f\x07op\
tions\x10\0\x11\x04\0\x07connect\x01\x12\x01@\0\0\x11\x04\0\x0adisconnect\x01\x13\
\x01j\x01\x0d\x01\x01\x01@\0\0\x14\x04\0\x15get-connection-status\x01\x15\x01j\x01\
\x7f\x01\x01\x01@\x04\x08endpoints\x0bcredentials\x0e\x0atimeout-ms\x0f\x07optio\
ns\x10\0\x16\x04\0\x0ftest-connection\x01\x17\x04\0\x1dgolem:vector/connection@1\
.0.0\x05\x03\x02\x03\0\0\x02id\x02\x03\0\0\x0fdistance-metric\x01B#\x02\x03\x02\x01\
\x04\x04\0\x02id\x03\0\0\x02\x03\x02\x01\x05\x04\0\x0fdistance-metric\x03\0\x02\x02\
\x03\x02\x01\x01\x04\0\x0cvector-error\x03\0\x04\x02\x03\x02\x01\x02\x04\0\x08me\
tadata\x03\0\x06\x01ks\x01o\x02ss\x01p\x09\x01r\x02\x0aindex-type\x08\x0aparamet\
ers\x0a\x04\0\x0cindex-config\x03\0\x0b\x01kw\x01k\x07\x01r\x0a\x04names\x0bdesc\
ription\x08\x09dimensiony\x06metric\x03\x0cvector-countw\x0asize-bytes\x0d\x0bin\
dex-ready\x7f\x0acreated-at\x0d\x0aupdated-at\x0d\x0eprovider-stats\x0e\x04\0\x0f\
collection-info\x03\0\x0f\x01k\x0c\x01j\x01\x10\x01\x05\x01@\x06\x04names\x0bdes\
cription\x08\x09dimensiony\x06metric\x03\x0cindex-config\x11\x08metadata\x0e\0\x12\
\x04\0\x11upsert-collection\x01\x13\x01p\x10\x01j\x01\x14\x01\x05\x01@\0\0\x15\x04\
\0\x10list-collections\x01\x16\x01@\x01\x04names\0\x12\x04\0\x0eget-collection\x01\
\x17\x01@\x03\x04names\x0bdescription\x08\x08metadata\x0e\0\x12\x04\0\x11update-\
collection\x01\x18\x01j\0\x01\x05\x01@\x01\x04names\0\x19\x04\0\x11delete-collec\
tion\x01\x1a\x01j\x01\x7f\x01\x05\x01@\x01\x04names\0\x1b\x04\0\x11collection-ex\
ists\x01\x1c\x04\0\x1egolem:vector/collections@1.0.0\x05\x06\x02\x03\0\0\x0dvect\
or-record\x02\x03\0\0\x0bvector-data\x02\x03\0\0\x11filter-expression\x01B7\x02\x03\
\x02\x01\x04\x04\0\x02id\x03\0\0\x02\x03\x02\x01\x07\x04\0\x0dvector-record\x03\0\
\x02\x02\x03\x02\x01\x08\x04\0\x0bvector-data\x03\0\x04\x02\x03\x02\x01\x02\x04\0\
\x08metadata\x03\0\x06\x02\x03\x02\x01\x09\x04\0\x11filter-expression\x03\0\x08\x02\
\x03\x02\x01\x01\x04\0\x0cvector-error\x03\0\x0a\x01o\x02y\x0b\x01p\x0c\x01r\x03\
\x0dsuccess-county\x0dfailure-county\x06errors\x0d\x04\0\x0cbatch-result\x03\0\x0e\
\x01p\x03\x01ks\x01kw\x01r\x03\x07vectors\x10\x0bnext-cursor\x11\x0btotal-count\x12\
\x04\0\x0dlist-response\x03\0\x13\x01j\x01\x0f\x01\x0b\x01@\x03\x0acollections\x07\
vectors\x10\x09namespace\x11\0\x15\x04\0\x0eupsert-vectors\x01\x16\x01k\x07\x01j\
\0\x01\x0b\x01@\x05\x0acollections\x02id\x01\x06vector\x05\x08metadata\x17\x09na\
mespace\x11\0\x18\x04\0\x0dupsert-vector\x01\x19\x01p\x01\x01k\x7f\x01j\x01\x10\x01\
\x0b\x01@\x05\x0acollections\x03ids\x1a\x09namespace\x11\x0finclude-vectors\x1b\x10\
include-metadata\x1b\0\x1c\x04\0\x0bget-vectors\x01\x1d\x01k\x03\x01j\x01\x1e\x01\
\x0b\x01@\x03\x0acollections\x02id\x01\x09namespace\x11\0\x1f\x04\0\x0aget-vecto\
r\x01\x20\x01k\x05\x01@\x06\x0acollections\x02id\x01\x06vector!\x08metadata\x17\x09\
namespace\x11\x0emerge-metadata\x1b\0\x18\x04\0\x0dupdate-vector\x01\"\x01j\x01y\
\x01\x0b\x01@\x03\x0acollections\x03ids\x1a\x09namespace\x11\0#\x04\0\x0edelete-\
vectors\x01$\x01@\x03\x0acollections\x06filter\x09\x09namespace\x11\0#\x04\0\x10\
delete-by-filter\x01%\x01@\x02\x0acollections\x09namespaces\0#\x04\0\x10delete-n\
amespace\x01&\x01k\x09\x01ky\x01j\x01\x14\x01\x0b\x01@\x07\x0acollections\x09nam\
espace\x11\x06filter'\x05limit(\x06cursor\x11\x0finclude-vectors\x1b\x10include-\
metadata\x1b\0)\x04\0\x0clist-vectors\x01*\x01j\x01w\x01\x0b\x01@\x03\x0acollect\
ions\x06filter'\x09namespace\x11\0+\x04\0\x0dcount-vectors\x01,\x04\0\x1agolem:v\
ector/vectors@1.0.0\x05\x0a\x02\x03\0\0\x0dsearch-result\x01B\x20\x02\x03\x02\x01\
\x04\x04\0\x02id\x03\0\0\x02\x03\x02\x01\x08\x04\0\x0bvector-data\x03\0\x02\x02\x03\
\x02\x01\x0b\x04\0\x0dsearch-result\x03\0\x04\x02\x03\x02\x01\x09\x04\0\x11filte\
r-expression\x03\0\x06\x02\x03\x02\x01\x01\x04\0\x0cvector-error\x03\0\x08\x01o\x02\
s\x03\x01p\x0a\x01q\x03\x06vector\x01\x03\0\x05by-id\x01\x01\0\x0cmulti-vector\x01\
\x0b\0\x04\0\x0csearch-query\x03\0\x0c\x01k\x07\x01ks\x01k\x7f\x01kv\x01o\x02ss\x01\
p\x12\x01k\x13\x01p\x05\x01j\x01\x15\x01\x09\x01@\x0a\x0acollections\x05query\x0d\
\x05limity\x06filter\x0e\x09namespace\x0f\x0finclude-vectors\x10\x10include-meta\
data\x10\x09min-score\x11\x0cmax-distance\x11\x0dsearch-params\x14\0\x16\x04\0\x0e\
search-vectors\x01\x17\x01@\x04\x0acollections\x06vector\x03\x05limity\x09namesp\
ace\x0f\0\x16\x04\0\x0cfind-similar\x01\x18\x01p\x0d\x01p\x15\x01j\x01\x1a\x01\x09\
\x01@\x08\x0acollections\x07queries\x19\x05limity\x06filter\x0e\x09namespace\x0f\
\x0finclude-vectors\x10\x10include-metadata\x10\x0dsearch-params\x14\0\x1b\x04\0\
\x0cbatch-search\x01\x1c\x04\0\x19golem:vector/search@1.0.0\x05\x0c\x02\x03\0\0\x13\
flat-metadata-value\x02\x03\0\x04\x0csearch-query\x01B-\x02\x03\x02\x01\x04\x04\0\
\x02id\x03\0\0\x02\x03\x02\x01\x08\x04\0\x0bvector-data\x03\0\x02\x02\x03\x02\x01\
\x0b\x04\0\x0dsearch-result\x03\0\x04\x02\x03\x02\x01\x09\x04\0\x11filter-expres\
sion\x03\0\x06\x02\x03\x02\x01\x01\x04\0\x0cvector-error\x03\0\x08\x02\x03\x02\x01\
\x0d\x04\0\x13flat-metadata-value\x03\0\x0a\x02\x03\x02\x01\x0e\x04\0\x0csearch-\
query\x03\0\x0c\x01q\x02\x09vector-id\x01\x01\0\x0bvector-data\x01\x03\0\x04\0\x16\
recommendation-example\x03\0\x0e\x01m\x03\x0eaverage-vector\x0abest-score\x08cen\
troid\x04\0\x17recommendation-strategy\x03\0\x10\x01r\x02\x08positive\x0f\x08neg\
ative\x0f\x04\0\x0ccontext-pair\x03\0\x12\x01p\x05\x01r\x03\x0bgroup-value\x0b\x07\
results\x14\x0bgroup-county\x04\0\x15grouped-search-result\x03\0\x15\x01p\x0f\x01\
k\x17\x01k\x07\x01ks\x01k\x11\x01k\x7f\x01j\x01\x14\x01\x09\x01@\x09\x0acollecti\
ons\x08positive\x17\x08negative\x18\x05limity\x06filter\x19\x09namespace\x1a\x08\
strategy\x1b\x0finclude-vectors\x1c\x10include-metadata\x1c\0\x1d\x04\0\x11recom\
mend-vectors\x01\x1e\x01p\x13\x01@\x07\x0acollections\x0dcontext-pairs\x1f\x05li\
mity\x06filter\x19\x09namespace\x1a\x0finclude-vectors\x1c\x10include-metadata\x1c\
\0\x1d\x04\0\x10discover-vectors\x01\x20\x01p\x16\x01j\x01!\x01\x09\x01@\x09\x0a\
collections\x05query\x0d\x08group-bys\x0agroup-sizey\x0amax-groupsy\x06filter\x19\
\x09namespace\x1a\x0finclude-vectors\x1c\x10include-metadata\x1c\0\"\x04\0\x0dse\
arch-groups\x01#\x01kv\x01ky\x01@\x09\x0acollections\x06vector\x03\x0cmin-distan\
ce$\x0cmax-distancev\x06filter\x19\x09namespace\x1a\x05limit%\x0finclude-vectors\
\x1c\x10include-metadata\x1c\0\x1d\x04\0\x0csearch-range\x01&\x01@\x05\x0acollec\
tions\x0aquery-texts\x05limity\x06filter\x19\x09namespace\x1a\0\x1d\x04\0\x0bsea\
rch-text\x01'\x04\0\"golem:vector/search-extended@1.0.0\x05\x0f\x01B\"\x02\x03\x02\
\x01\x01\x04\0\x0cvector-error\x03\0\0\x02\x03\x02\x01\x0d\x04\0\x13flat-metadat\
a-value\x03\0\x02\x02\x03\x02\x01\x09\x04\0\x11filter-expression\x03\0\x04\x01r\x02\
\x0cvector-countw\x0asize-bytesw\x04\0\x0fnamespace-stats\x03\0\x06\x01o\x02vv\x01\
p\x08\x01r\x04\x0cmin-distancev\x0cmax-distancev\x0cavg-distancev\x0bpercentiles\
\x09\x04\0\x0edistance-stats\x03\0\x0a\x01kw\x01o\x02s\x07\x01p\x0d\x01k\x0b\x01\
r\x06\x0cvector-countw\x09dimensiony\x0asize-bytesw\x10index-size-bytes\x0c\x0fn\
amespace-stats\x0e\x15distance-distribution\x0f\x04\0\x10collection-stats\x03\0\x10\
\x01p\x03\x01r\x06\x0afield-names\x0bvalue-countw\x0dunique-valuesw\x0anull-coun\
tw\x09data-types\x0dsample-values\x12\x04\0\x0bfield-stats\x03\0\x13\x01ks\x01j\x01\
\x11\x01\x01\x01@\x02\x0acollections\x09namespace\x15\0\x16\x04\0\x14get-collect\
ion-stats\x01\x17\x01j\x01\x14\x01\x01\x01@\x03\x0acollections\x05fields\x09name\
space\x15\0\x18\x04\0\x0fget-field-stats\x01\x19\x01ky\x01o\x02\x03w\x01p\x1b\x01\
j\x01\x1c\x01\x01\x01@\x04\x0acollections\x05fields\x05limit\x1a\x09namespace\x15\
\0\x1d\x04\0\x16get-field-distribution\x01\x1e\x04\0\x1cgolem:vector/analytics@1\
.0.0\x05\x10\x01B\x17\x02\x03\x02\x01\x01\x04\0\x0cvector-error\x03\0\0\x02\x03\x02\
\x01\x02\x04\0\x08metadata\x03\0\x02\x01kw\x01k\x03\x01r\x06\x04names\x0acollect\
ions\x0cvector-countw\x0asize-bytesw\x0acreated-at\x04\x08metadata\x05\x04\0\x0e\
namespace-info\x03\0\x06\x01j\x01\x07\x01\x01\x01@\x03\x0acollections\x09namespa\
ces\x08metadata\x05\0\x08\x04\0\x10upsert-namespace\x01\x09\x01p\x07\x01j\x01\x0a\
\x01\x01\x01@\x01\x0acollections\0\x0b\x04\0\x0flist-namespaces\x01\x0c\x01@\x02\
\x0acollections\x09namespaces\0\x08\x04\0\x0dget-namespace\x01\x0d\x01j\0\x01\x01\
\x01@\x02\x0acollections\x09namespaces\0\x0e\x04\0\x10delete-namespace\x01\x0f\x01\
j\x01\x7f\x01\x01\x01@\x02\x0acollections\x09namespaces\0\x10\x04\0\x10namespace\
-exists\x01\x11\x04\0\x1dgolem:vector/namespaces@1.0.0\x05\x11\x04\0(golem:vecto\
r-qdrant/vector-library@1.0.0\x04\0\x0b\x14\x01\0\x0evector-library\x03\0\0\0G\x09\
producers\x01\x0cprocessed-by\x02\x0dwit-component\x070.227.1\x10wit-bindgen-rus\
t\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
