// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod golem {
    pub mod exec {
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            /// Programming language for execution
            #[derive(Clone, Copy)]
            pub enum Language {
                Javascript,
                Python,
            }
            impl ::core::fmt::Debug for Language {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        Language::Javascript => {
                            f.debug_tuple("Language::Javascript").finish()
                        }
                        Language::Python => f.debug_tuple("Language::Python").finish(),
                    }
                }
            }
            /// Source code file
            #[derive(Clone)]
            pub struct File {
                pub name: _rt::String,
                pub content: _rt::Vec<u8>,
            }
            impl ::core::fmt::Debug for File {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("File")
                        .field("name", &self.name)
                        .field("content", &self.content)
                        .finish()
                }
            }
            /// Execution limits and constraints
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Limits {
                pub timeout_ms: Option<u32>,
                pub memory_mb: Option<u32>,
                pub cpu_quota: Option<f32>,
                pub network_access: bool,
                pub file_system_access: bool,
            }
            impl ::core::fmt::Debug for Limits {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Limits")
                        .field("timeout-ms", &self.timeout_ms)
                        .field("memory-mb", &self.memory_mb)
                        .field("cpu-quota", &self.cpu_quota)
                        .field("network-access", &self.network_access)
                        .field("file-system-access", &self.file_system_access)
                        .finish()
                }
            }
            /// Error information
            #[derive(Clone)]
            pub struct Error {
                pub code: _rt::String,
                pub message: _rt::String,
                pub details: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for Error {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Error")
                        .field("code", &self.code)
                        .field("message", &self.message)
                        .field("details", &self.details)
                        .finish()
                }
            }
            impl ::core::fmt::Display for Error {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }
            impl std::error::Error for Error {}
            /// Result of a single execution stage
            #[derive(Clone)]
            pub struct StageResult {
                pub stdout: _rt::String,
                pub stderr: _rt::String,
                pub exit_code: Option<i32>,
                pub signal: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for StageResult {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("StageResult")
                        .field("stdout", &self.stdout)
                        .field("stderr", &self.stderr)
                        .field("exit-code", &self.exit_code)
                        .field("signal", &self.signal)
                        .finish()
                }
            }
            /// Complete execution result
            #[derive(Clone)]
            pub struct ExecutionResult {
                pub compile: Option<StageResult>,
                pub run: StageResult,
                pub time_ms: Option<u64>,
                pub memory_bytes: Option<u64>,
            }
            impl ::core::fmt::Debug for ExecutionResult {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ExecutionResult")
                        .field("compile", &self.compile)
                        .field("run", &self.run)
                        .field("time-ms", &self.time_ms)
                        .field("memory-bytes", &self.memory_bytes)
                        .finish()
                }
            }
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod golem {
        pub mod exec {
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod executor {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type Language = super::super::super::super::golem::exec::types::Language;
                pub type File = super::super::super::super::golem::exec::types::File;
                pub type Limits = super::super::super::super::golem::exec::types::Limits;
                pub type ExecutionResult = super::super::super::super::golem::exec::types::ExecutionResult;
                pub type Error = super::super::super::super::golem::exec::types::Error;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_run_cabi<T: Guest>(arg0: *mut u8) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    use super::super::super::super::golem::exec::types::Language as V1;
                    let v1 = match l0 {
                        0 => V1::Javascript,
                        n => {
                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                            V1::Python
                        }
                    };
                    let l2 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l3 = *arg0
                        .add(2 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base10 = l2;
                    let len10 = l3;
                    let mut result10 = _rt::Vec::with_capacity(len10);
                    for i in 0..len10 {
                        let base = base10
                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                        let e10 = {
                            let l4 = *base.add(0).cast::<*mut u8>();
                            let l5 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len6 = l5;
                            let bytes6 = _rt::Vec::from_raw_parts(l4.cast(), len6, len6);
                            let l7 = *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l8 = *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len9 = l8;
                            super::super::super::super::golem::exec::types::File {
                                name: _rt::string_lift(bytes6),
                                content: _rt::Vec::from_raw_parts(l7.cast(), len9, len9),
                            }
                        };
                        result10.push(e10);
                    }
                    _rt::cabi_dealloc(
                        base10,
                        len10 * (4 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let l11 = i32::from(
                        *arg0.add(3 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    let l15 = *arg0
                        .add(6 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l16 = *arg0
                        .add(7 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base20 = l15;
                    let len20 = l16;
                    let mut result20 = _rt::Vec::with_capacity(len20);
                    for i in 0..len20 {
                        let base = base20
                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                        let e20 = {
                            let l17 = *base.add(0).cast::<*mut u8>();
                            let l18 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len19 = l18;
                            let bytes19 = _rt::Vec::from_raw_parts(
                                l17.cast(),
                                len19,
                                len19,
                            );
                            _rt::string_lift(bytes19)
                        };
                        result20.push(e20);
                    }
                    _rt::cabi_dealloc(
                        base20,
                        len20 * (2 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let l21 = *arg0
                        .add(8 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l22 = *arg0
                        .add(9 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base29 = l21;
                    let len29 = l22;
                    let mut result29 = _rt::Vec::with_capacity(len29);
                    for i in 0..len29 {
                        let base = base29
                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                        let e29 = {
                            let l23 = *base.add(0).cast::<*mut u8>();
                            let l24 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len25 = l24;
                            let bytes25 = _rt::Vec::from_raw_parts(
                                l23.cast(),
                                len25,
                                len25,
                            );
                            let l26 = *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l27 = *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len28 = l27;
                            let bytes28 = _rt::Vec::from_raw_parts(
                                l26.cast(),
                                len28,
                                len28,
                            );
                            (_rt::string_lift(bytes25), _rt::string_lift(bytes28))
                        };
                        result29.push(e29);
                    }
                    _rt::cabi_dealloc(
                        base29,
                        len29 * (4 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let l30 = i32::from(
                        *arg0.add(10 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    let result39 = T::run(
                        v1,
                        result10,
                        match l11 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l12 = *arg0
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l13 = *arg0
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let len14 = l13;
                                    let bytes14 = _rt::Vec::from_raw_parts(
                                        l12.cast(),
                                        len14,
                                        len14,
                                    );
                                    _rt::string_lift(bytes14)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                        result20,
                        result29,
                        match l30 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l31 = i32::from(
                                        *arg0
                                            .add(4 + 10 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    let l33 = i32::from(
                                        *arg0
                                            .add(12 + 10 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    let l35 = i32::from(
                                        *arg0
                                            .add(20 + 10 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    let l37 = i32::from(
                                        *arg0
                                            .add(28 + 10 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    let l38 = i32::from(
                                        *arg0
                                            .add(29 + 10 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    super::super::super::super::golem::exec::types::Limits {
                                        timeout_ms: match l31 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l32 = *arg0
                                                        .add(8 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i32>();
                                                    l32 as u32
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        memory_mb: match l33 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l34 = *arg0
                                                        .add(16 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i32>();
                                                    l34 as u32
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        cpu_quota: match l35 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l36 = *arg0
                                                        .add(24 + 10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<f32>();
                                                    l36
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        network_access: _rt::bool_lift(l37 as u8),
                                        file_system_access: _rt::bool_lift(l38 as u8),
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    );
                    _rt::cabi_dealloc(
                        arg0,
                        32 + 10 * ::core::mem::size_of::<*const u8>(),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let ptr40 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result39 {
                        Ok(e) => {
                            *ptr40.add(0).cast::<u8>() = (0i32) as u8;
                            let super::super::super::super::golem::exec::types::ExecutionResult {
                                compile: compile41,
                                run: run41,
                                time_ms: time_ms41,
                                memory_bytes: memory_bytes41,
                            } = e;
                            match compile41 {
                                Some(e) => {
                                    *ptr40.add(8).cast::<u8>() = (1i32) as u8;
                                    let super::super::super::super::golem::exec::types::StageResult {
                                        stdout: stdout42,
                                        stderr: stderr42,
                                        exit_code: exit_code42,
                                        signal: signal42,
                                    } = e;
                                    let vec43 = (stdout42.into_bytes()).into_boxed_slice();
                                    let ptr43 = vec43.as_ptr().cast::<u8>();
                                    let len43 = vec43.len();
                                    ::core::mem::forget(vec43);
                                    *ptr40
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len43;
                                    *ptr40
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr43.cast_mut();
                                    let vec44 = (stderr42.into_bytes()).into_boxed_slice();
                                    let ptr44 = vec44.as_ptr().cast::<u8>();
                                    let len44 = vec44.len();
                                    ::core::mem::forget(vec44);
                                    *ptr40
                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len44;
                                    *ptr40
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr44.cast_mut();
                                    match exit_code42 {
                                        Some(e) => {
                                            *ptr40
                                                .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            *ptr40
                                                .add(12 + 5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>() = _rt::as_i32(e);
                                        }
                                        None => {
                                            *ptr40
                                                .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match signal42 {
                                        Some(e) => {
                                            *ptr40
                                                .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec45 = (e.into_bytes()).into_boxed_slice();
                                            let ptr45 = vec45.as_ptr().cast::<u8>();
                                            let len45 = vec45.len();
                                            ::core::mem::forget(vec45);
                                            *ptr40
                                                .add(16 + 7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len45;
                                            *ptr40
                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr45.cast_mut();
                                        }
                                        None => {
                                            *ptr40
                                                .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                None => {
                                    *ptr40.add(8).cast::<u8>() = (0i32) as u8;
                                }
                            };
                            let super::super::super::super::golem::exec::types::StageResult {
                                stdout: stdout46,
                                stderr: stderr46,
                                exit_code: exit_code46,
                                signal: signal46,
                            } = run41;
                            let vec47 = (stdout46.into_bytes()).into_boxed_slice();
                            let ptr47 = vec47.as_ptr().cast::<u8>();
                            let len47 = vec47.len();
                            ::core::mem::forget(vec47);
                            *ptr40
                                .add(16 + 9 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len47;
                            *ptr40
                                .add(16 + 8 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr47.cast_mut();
                            let vec48 = (stderr46.into_bytes()).into_boxed_slice();
                            let ptr48 = vec48.as_ptr().cast::<u8>();
                            let len48 = vec48.len();
                            ::core::mem::forget(vec48);
                            *ptr40
                                .add(16 + 11 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len48;
                            *ptr40
                                .add(16 + 10 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr48.cast_mut();
                            match exit_code46 {
                                Some(e) => {
                                    *ptr40
                                        .add(16 + 12 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    *ptr40
                                        .add(20 + 12 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i32>() = _rt::as_i32(e);
                                }
                                None => {
                                    *ptr40
                                        .add(16 + 12 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match signal46 {
                                Some(e) => {
                                    *ptr40
                                        .add(24 + 12 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec49 = (e.into_bytes()).into_boxed_slice();
                                    let ptr49 = vec49.as_ptr().cast::<u8>();
                                    let len49 = vec49.len();
                                    ::core::mem::forget(vec49);
                                    *ptr40
                                        .add(24 + 14 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len49;
                                    *ptr40
                                        .add(24 + 13 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr49.cast_mut();
                                }
                                None => {
                                    *ptr40
                                        .add(24 + 12 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match time_ms41 {
                                Some(e) => {
                                    *ptr40
                                        .add(32 + 14 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    *ptr40
                                        .add(40 + 14 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i64>() = _rt::as_i64(e);
                                }
                                None => {
                                    *ptr40
                                        .add(32 + 14 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match memory_bytes41 {
                                Some(e) => {
                                    *ptr40
                                        .add(48 + 14 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    *ptr40
                                        .add(56 + 14 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i64>() = _rt::as_i64(e);
                                }
                                None => {
                                    *ptr40
                                        .add(48 + 14 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        Err(e) => {
                            *ptr40.add(0).cast::<u8>() = (1i32) as u8;
                            let super::super::super::super::golem::exec::types::Error {
                                code: code50,
                                message: message50,
                                details: details50,
                            } = e;
                            let vec51 = (code50.into_bytes()).into_boxed_slice();
                            let ptr51 = vec51.as_ptr().cast::<u8>();
                            let len51 = vec51.len();
                            ::core::mem::forget(vec51);
                            *ptr40
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len51;
                            *ptr40.add(8).cast::<*mut u8>() = ptr51.cast_mut();
                            let vec52 = (message50.into_bytes()).into_boxed_slice();
                            let ptr52 = vec52.as_ptr().cast::<u8>();
                            let len52 = vec52.len();
                            ::core::mem::forget(vec52);
                            *ptr40
                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len52;
                            *ptr40
                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr52.cast_mut();
                            match details50 {
                                Some(e) => {
                                    *ptr40
                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec53 = (e.into_bytes()).into_boxed_slice();
                                    let ptr53 = vec53.as_ptr().cast::<u8>();
                                    let len53 = vec53.len();
                                    ::core::mem::forget(vec53);
                                    *ptr40
                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len53;
                                    *ptr40
                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr53.cast_mut();
                                }
                                None => {
                                    *ptr40
                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                    };
                    ptr40
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_run<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = i32::from(*arg0.add(8).cast::<u8>());
                            match l1 {
                                0 => {}
                                _ => {
                                    let l2 = *arg0
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l3 = *arg0
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                    let l4 = *arg0
                                        .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l5 = *arg0
                                        .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                    let l6 = i32::from(
                                        *arg0
                                            .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l6 {
                                        0 => {}
                                        _ => {
                                            let l7 = *arg0
                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l8 = *arg0
                                                .add(16 + 7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l7, l8, 1);
                                        }
                                    }
                                }
                            }
                            let l9 = *arg0
                                .add(16 + 8 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l10 = *arg0
                                .add(16 + 9 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l9, l10, 1);
                            let l11 = *arg0
                                .add(16 + 10 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l12 = *arg0
                                .add(16 + 11 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l11, l12, 1);
                            let l13 = i32::from(
                                *arg0
                                    .add(24 + 12 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l13 {
                                0 => {}
                                _ => {
                                    let l14 = *arg0
                                        .add(24 + 13 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l15 = *arg0
                                        .add(24 + 14 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l14, l15, 1);
                                }
                            }
                        }
                        _ => {
                            let l16 = *arg0.add(8).cast::<*mut u8>();
                            let l17 = *arg0
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l16, l17, 1);
                            let l18 = *arg0
                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l19 = *arg0
                                .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l18, l19, 1);
                            let l20 = i32::from(
                                *arg0
                                    .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l20 {
                                0 => {}
                                _ => {
                                    let l21 = *arg0
                                        .add(8 + 5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l22 = *arg0
                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l21, l22, 1);
                                }
                            }
                        }
                    }
                }
                pub trait Guest {
                    /// Blocking, non-streaming execution
                    fn run(
                        lang: Language,
                        files: _rt::Vec<File>,
                        stdin: Option<_rt::String>,
                        args: _rt::Vec<_rt::String>,
                        env: _rt::Vec<(_rt::String, _rt::String)>,
                        constraints: Option<Limits>,
                    ) -> Result<ExecutionResult, Error>;
                }
                #[doc(hidden)]
                macro_rules! __export_golem_exec_executor_0_1_0_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "golem:exec/executor@0.1.0#run")] unsafe extern "C" fn
                        export_run(arg0 : * mut u8,) -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_run_cabi::<$ty > (arg0) } } #[unsafe
                        (export_name = "cabi_post_golem:exec/executor@0.1.0#run")] unsafe
                        extern "C" fn _post_return_run(arg0 : * mut u8,) { unsafe {
                        $($path_to_types)*:: __post_return_run::<$ty > (arg0) } } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_golem_exec_executor_0_1_0_cabi;
                #[repr(align(8))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<
                        u8,
                    >; 64 + 14 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 64
                        + 14 * ::core::mem::size_of::<*const u8>()],
                );
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            unsafe { core::hint::unreachable_unchecked() }
        }
    }
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            val != 0
        }
    }
    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }
    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }
    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }
    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }
    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }
    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }
    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    extern crate alloc as alloc_crate;
    pub use alloc_crate::alloc;
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_golem_exec_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::golem::exec::executor::__export_golem_exec_executor_0_1_0_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::golem::exec::executor);
    };
}
#[doc(inline)]
pub(crate) use __export_golem_exec_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:golem:exec@0.1.0:golem-exec:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 873] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xe8\x05\x01A\x02\x01\
A\x09\x01B\x15\x01q\x02\x0ajavascript\0\0\x06python\0\0\x04\0\x08language\x03\0\0\
\x01p}\x01r\x02\x04names\x07content\x02\x04\0\x04file\x03\0\x03\x01ky\x01kv\x01r\
\x05\x0atimeout-ms\x05\x09memory-mb\x05\x09cpu-quota\x06\x0enetwork-access\x7f\x12\
file-system-access\x7f\x04\0\x06limits\x03\0\x07\x01ks\x01r\x03\x04codes\x07mess\
ages\x07details\x09\x04\0\x05error\x03\0\x0a\x01kz\x01r\x04\x06stdouts\x06stderr\
s\x09exit-code\x0c\x06signal\x09\x04\0\x0cstage-result\x03\0\x0d\x01k\x0e\x01kw\x01\
r\x04\x07compile\x0f\x03run\x0e\x07time-ms\x10\x0cmemory-bytes\x10\x04\0\x10exec\
ution-result\x03\0\x11\x01q\x04\x0cstdout-chunk\x01\x02\0\x0cstderr-chunk\x01\x02\
\0\x08finished\x01\x12\0\x06failed\x01\x0b\0\x04\0\x0aexec-event\x03\0\x13\x03\0\
\x16golem:exec/types@0.1.0\x05\0\x02\x03\0\0\x08language\x02\x03\0\0\x04file\x02\
\x03\0\0\x06limits\x02\x03\0\0\x10execution-result\x02\x03\0\0\x05error\x01B\x13\
\x02\x03\x02\x01\x01\x04\0\x08language\x03\0\0\x02\x03\x02\x01\x02\x04\0\x04file\
\x03\0\x02\x02\x03\x02\x01\x03\x04\0\x06limits\x03\0\x04\x02\x03\x02\x01\x04\x04\
\0\x10execution-result\x03\0\x06\x02\x03\x02\x01\x05\x04\0\x05error\x03\0\x08\x01\
p\x03\x01ks\x01ps\x01o\x02ss\x01p\x0d\x01k\x05\x01j\x01\x07\x01\x09\x01@\x06\x04\
lang\x01\x05files\x0a\x05stdin\x0b\x04args\x0c\x03env\x0e\x0bconstraints\x0f\0\x10\
\x04\0\x03run\x01\x11\x04\0\x19golem:exec/executor@0.1.0\x05\x06\x04\0\x1bgolem:\
exec/golem-exec@0.1.0\x04\0\x0b\x10\x01\0\x0agolem-exec\x03\0\0\0G\x09producers\x01\
\x0cprocessed-by\x02\x0dwit-component\x070.227.1\x10wit-bindgen-rust\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
