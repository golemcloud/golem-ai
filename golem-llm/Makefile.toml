[config]
default_to_workspace = false
skip_core_tasks = true

[tasks.clean]
command = "cargo"
args = ["clean"]

[tasks.unit-tests]
command = "cargo"
args = ["test"]

[tasks.build-ollama]
install_crate = { crate_name = "cargo-component", version = "0.20.0" }
command = "cargo-component"
args = ["build", "-p", "golem-llm-ollama"]


[tasks.build-ollama-portable]
install_crate = { crate_name = "cargo-component", version = "0.20.0" }
command = "cargo-component"
args = ["build", "-p", "golem-llm-ollama", "--no-default-features"]


[tasks.build-anthropic]
install_crate = { crate_name = "cargo-component", version = "0.20.0" }
command = "cargo-component"
args = ["build", "-p", "golem-llm-anthropic"]

[tasks.build-anthropic-portable]
install_crate = { crate_name = "cargo-component", version = "0.20.0" }
command = "cargo-component"
args = ["build", "-p", "golem-llm-anthropic", "--no-default-features"]

[tasks.build-grok]
install_crate = { crate_name = "cargo-component", version = "0.20.0" }
command = "cargo-component"
args = ["build", "-p", "golem-llm-grok"]

[tasks.build-grok-portable]
install_crate = { crate_name = "cargo-component", version = "0.20.0" }
command = "cargo-component"
args = ["build", "-p", "golem-llm-grok", "--no-default-features"]

[tasks.build-openai]
install_crate = { crate_name = "cargo-component", version = "0.20.0" }
command = "cargo-component"
args = ["build", "-p", "golem-llm-openai"]

[tasks.build-openai-portable]
install_crate = { crate_name = "cargo-component", version = "0.20.0" }
command = "cargo-component"
args = ["build", "-p", "golem-llm-openai", "--no-default-features"]

[tasks.build-openrouter]
install_crate = { crate_name = "cargo-component", version = "0.20.0" }
command = "cargo-component"
args = ["build", "-p", "golem-llm-openrouter"]

[tasks.build-openrouter-portable]
install_crate = { crate_name = "cargo-component", version = "0.20.0" }
command = "cargo-component"
args = ["build", "-p", "golem-llm-openrouter", "--no-default-features"]

[tasks.build]
dependencies = [
    "build-anthropic",
    "build-grok",
    "build-openai",
    "build-openrouter",
    "build-ollama",
]

[tasks.build-portable]
dependencies = [
    "build-anthropic-portable",
    "build-grok-portable",
    "build-openai-portable",
    "build-openrouter-portable",
    "build-ollama-portable",
]

[tasks.build-all]
script_runner = "@duckscript"
script = '''
mkdir components/llm/debug

cm_run_task clean
cm_run_task build

cp target/wasm32-wasip1/debug/golem_llm_anthropic.wasm components/llm/debug/golem_llm_anthropic.wasm
cp target/wasm32-wasip1/debug/golem_llm_grok.wasm components/llm/debug/golem_llm_grok.wasm
cp target/wasm32-wasip1/debug/golem_llm_openai.wasm components/llm/debug/golem_llm_openai.wasm
cp target/wasm32-wasip1/debug/golem_llm_openrouter.wasm components/llm/debug/golem_llm_openrouter.wasm
cp target/wasm32-wasip1/debug/golem_llm_ollama.wasm components/llm/debug/golem_llm_ollama.wasm

cm_run_task clean
cm_run_task build-portable

cp target/wasm32-wasip1/debug/golem_llm_anthropic.wasm components/llm/debug/golem_llm_anthropic-portable.wasm
cp target/wasm32-wasip1/debug/golem_llm_grok.wasm components/llm/debug/golem_llm_grok-portable.wasm
cp target/wasm32-wasip1/debug/golem_llm_openai.wasm components/llm/debug/golem_llm_openai-portable.wasm
cp target/wasm32-wasip1/debug/golem_llm_openrouter.wasm components/llm/debug/golem_llm_openrouter-portable.wasm
cp target/wasm32-wasip1/debug/golem_llm_ollama.wasm components/llm/debug/golem_llm_ollama-portable.wasm
'''

[tasks.release-build-ollama]
install_crate = { crate_name = "cargo-component", version = "0.20.0" }
command = "cargo-component"
args = ["build", "-p", "golem-llm-ollama", "--release"]

[tasks.release-build-ollama-portable]
install_crate = { crate_name = "cargo-component", version = "0.20.0" }
command = "cargo-component"
args = ["build", "-p", "golem-llm-ollama", "--release", "--no-default-features"]


[tasks.release-build-anthropic]
install_crate = { crate_name = "cargo-component", version = "0.20.0" }
command = "cargo-component"
args = ["build", "-p", "golem-llm-anthropic", "--release"]

[tasks.release-build-anthropic-portable]
install_crate = { crate_name = "cargo-component", version = "0.20.0" }
command = "cargo-component"
args = [
    "build",
    "-p",
    "golem-llm-anthropic",
    "--release",
    "--no-default-features",
]

[tasks.release-build-grok]
install_crate = { crate_name = "cargo-component", version = "0.20.0" }
command = "cargo-component"
args = ["build", "-p", "golem-llm-grok", "--release"]

[tasks.release-build-grok-portable]
install_crate = { crate_name = "cargo-component", version = "0.20.0" }
command = "cargo-component"
args = ["build", "-p", "golem-llm-grok", "--release", "--no-default-features"]

[tasks.release-build-openai]
install_crate = { crate_name = "cargo-component", version = "0.20.0" }
command = "cargo-component"
args = ["build", "-p", "golem-llm-openai", "--release"]

[tasks.release-build-openai-portable]
install_crate = { crate_name = "cargo-component", version = "0.20.0" }
command = "cargo-component"
args = ["build", "-p", "golem-llm-openai", "--release", "--no-default-features"]

[tasks.release-build-openrouter]
install_crate = { crate_name = "cargo-component", version = "0.20.0" }
command = "cargo-component"
args = ["build", "-p", "golem-llm-openrouter", "--release"]

[tasks.release-build-openrouter-portable]
install_crate = { crate_name = "cargo-component", version = "0.20.0" }
command = "cargo-component"
args = [
    "build",
    "-p",
    "golem-llm-openrouter",
    "--release",
    "--no-default-features",
]

[tasks.release-build]
dependencies = [
    "release-build-anthropic",
    "release-build-grok",
    "release-build-openai",
    "release-build-openrouter",
    "release-build-ollama",
]

[tasks.release-build-portable]
dependencies = [
    "release-build-anthropic-portable",
    "release-build-grok-portable",
    "release-build-openai-portable",
    "release-build-openrouter-portable",
    "release-build-ollama-portable",
]

[tasks.release-build-all]
script_runner = "@duckscript"
script = '''
mkdir components/llm/release

cm_run_task set-version

cm_run_task clean
cm_run_task release-build

cp target/wasm32-wasip1/release/golem_llm_anthropic.wasm components/llm/release/golem_llm_anthropic.wasm
cp target/wasm32-wasip1/release/golem_llm_grok.wasm components/llm/release/golem_llm_grok.wasm
cp target/wasm32-wasip1/release/golem_llm_openai.wasm components/llm/release/golem_llm_openai.wasm
cp target/wasm32-wasip1/release/golem_llm_openrouter.wasm components/llm/release/golem_llm_openrouter.wasm
cp target/wasm32-wasip1/release/golem_llm_ollama.wasm components/llm/release/golem_llm_ollama.wasm

cm_run_task clean
cm_run_task release-build-portable

cp target/wasm32-wasip1/release/golem_llm_anthropic.wasm components/llm/release/golem_llm_anthropic-portable.wasm
cp target/wasm32-wasip1/release/golem_llm_grok.wasm components/llm/release/golem_llm_grok-portable.wasm
cp target/wasm32-wasip1/release/golem_llm_openai.wasm components/llm/release/golem_llm_openai-portable.wasm
cp target/wasm32-wasip1/release/golem_llm_openrouter.wasm components/llm/release/golem_llm_openrouter-portable.wasm
cp target/wasm32-wasip1/release/golem_llm_ollama.wasm components/llm/release/golem_llm_ollama-portable.wasm
'''

[tasks.wit-update]
install_crate = { crate_name = "wit-deps-cli" }
command = "wit-deps"
args = ["update"]

[tasks.wit]
dependencies = ["wit-update"]

#condition = { files_modified = { input = [
#    "wit/golem-llm.wit",
#    "wit/deps/wasi:io",
#], output = [
#    "llm/wit/deps/golem-llm/golem-llm.wit",
#    "llm-anthropic/wit/deps/golem-llm/golem-llm.wit",
#    "llm-grok/wit/deps/golem-llm/golem-llm.wit",
#    "llm-openai/wit/deps/golem-llm/golem-llm.wit",
#    "llm-openrouter/wit/deps/golem-llm/golem-llm.wit",
#] } }

script_runner = "@duckscript"
script = """
rm -r golem-llm/llm/wit/deps
mkdir golem-llm/llm/wit/deps/golem-llm
cp golem-llm/wit/golem-llm.wit golem-llm/llm/wit/deps/golem-llm/golem-llm.wit
cp golem-llm/wit/deps/wasi:io golem-llm/llm/wit/deps
rm -r golem-llm/llm-anthropic/wit/deps
mkdir golem-llm/llm-anthropic/wit/deps/golem-llm
cp golem-llm/wit/golem-llm.wit golem-llm/llm-anthropic/wit/deps/golem-llm/golem-llm.wit
cp golem-llm/wit/deps/wasi:io llm-anthropic/wit/deps
rm -r golem-llm/llm-grok/wit/deps
mkdir golem-llm/llm-grok/wit/deps/golem-llm
cp golem-llm/wit/golem-llm.wit golem-llm/llm-grok/wit/deps/golem-llm/golem-llm.wit
cp golem-llm/wit/deps/wasi:io golem-llm/llm-grok/wit/deps
rm -r golem-llm/llm-openai/wit/deps
mkdir golem-llm/llm-openai/wit/deps/golem-llm
cp golem-llm/wit/golem-llm.wit golem-llm/llm-openai/wit/deps/golem-llm/golem-llm.wit
cp golem-llm/wit/deps/wasi:io golem-llm/llm-openai/wit/deps
rm -r golem-llm/llm-openrouter/wit/deps
mkdir golem-llm/llm-openrouter/wit/deps/golem-llm
cp golem-llm/wit/golem-llm.wit golem-llm/llm-openrouter/wit/deps/golem-llm/golem-llm.wit
cp golem-llm/wit/deps/wasi:io golem-llm/llm-openrouter/wit/deps
rm -r golem-llm/llm-ollama/wit/deps
mkdir golem-llm/llm-ollama/wit/deps/golem-llm
cp golem-llm/wit/golem-llm.wit golem-llm/llm-ollama/wit/deps/golem-llm/golem-llm.wit
cp golem-llm/wit/deps/wasi:io golem-llm/llm-ollama/wit/deps


rm -r golem-llm/test/wit
mkdir golem-llm/test/wit/deps/golem-llm
mkdir golem-llm/test/wit/deps/io
cp golem-llm/wit/golem-llm.wit golem-llm/test/wit/deps/golem-llm/golem-llm.wit
cp golem-llm/wit/deps/wasi:io/error.wit golem-llm/test/wit/deps/io/error.wit
cp golem-llm/wit/deps/wasi:io/poll.wit golem-llm/test/wit/deps/io/poll.wit
cp golem-llm/wit/deps/wasi:io/streams.wit golem-llm/test/wit/deps/io/streams.wit
cp golem-llm/wit/deps/wasi:io/world.wit golem-llm/test/wit/deps/io/world.wit
"""


[tasks.check]
description = "Runs rustfmt and clippy checks without applying any fix"
dependencies = ["check-clippy", "check-rustfmt"]

[tasks.check-rustfmt]
description = "Runs rustfmt checks without applying any fix"
install_crate = "rustfmt"
command = "cargo"
args = ["fmt", "--all", "--", "--check"]

[tasks.check-clippy]
description = "Runs clippy checks without applying any fix"
install_crate = "clippy"
command = "cargo"
args = ["clippy", "--all-targets", "--", "--no-deps", "-Dwarnings"]

[tasks.fix]
description = "Runs rustfmt and clippy checks and applies fixes"
dependencies = ["wit-llm", "wit-embed", "fix-clippy", "fix-rustfmt"]

[tasks.fix-rustfmt]
description = "Runs rustfmt checks and applies fixes"
install_crate = "rustfmt"
command = "cargo"
args = ["fmt", "--all"]

[tasks.fix-clippy]
description = "Runs clippy checks and applies fixes"
install_crate = "clippy"
command = "cargo"
args = [
    "clippy",
    "--fix",
    "--allow-dirty",
    "--allow-staged",
    "--",
    "--no-deps",
    "-Dwarnings",
]

[tasks.build-test-components]
dependencies = ["build"]
description = "Builds all test components with golem-cli"
install_crate = "cargo-binstall"
script = '''
cargo-binstall golem-cli@1.2.2-dev.11 --locked --force --no-confirm
cargo-binstall wac-cli --locked --force --no-confirm
cd test
golem-cli --version
golem-cli app clean
golem-cli app build -b anthropic-debug
golem-cli app clean
golem-cli app build -b grok-debug
golem-cli app clean
golem-cli app build -b openai-debug
golem-cli app clean
golem-cli app build -b openrouter-debug
golem-cli app clean
golem-cli app build -b ollama-debug
'''

[tasks.set-version]
description = "Sets the version in all Cargo.toml files to the value of the VERSION environment variable"
condition = { env_set = ["VERSION"] }
script = '''
grep -rl --include 'Cargo.toml' '0\.0\.0' | xargs sed -i "s/0\.0\.0/${VERSION}/g"
'''

[tasks.set-version.mac]
condition = { env_set = ["VERSION"] }
script = '''
grep -rl --include '.*Cargo\.toml' '0\.0\.0' | xargs sed -i "" "s/0\.0\.0/${VERSION}/g"
'''

[tasks.set-version.windows]
script_runner = "powershell"
script_extension = "ps1"
condition = { env_set = ["VERSION"] }
script = '''
$cargoFiles = Get-ChildItem . Cargo.toml -rec
foreach ($file in $cargoFiles)
{
    (Get-Content $file.PSPath) |
    Foreach-Object { $_ -replace "0.0.0", $Env:VERSION } |
    Set-Content $file.PSPath
}
'''

